!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=21)}([function(e,t,n){"use strict";e.exports=n(11)},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(12)},function(e,t,n){e.exports=n(15)()},function(e,t){e.exports=function(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}},,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(0),i=l(a),u=l(n(2));function l(e){return e&&e.__esModule?e:{default:e}}var s={position:"absolute",top:0,left:0,visibility:"hidden",height:0,overflow:"scroll",whiteSpace:"pre"},c=["extraWidth","injectStyles","inputClassName","inputRef","inputStyle","minWidth","onAutosize","placeholderIsMinWidth"],f=function(e,t){t.style.fontSize=e.fontSize,t.style.fontFamily=e.fontFamily,t.style.fontWeight=e.fontWeight,t.style.fontStyle=e.fontStyle,t.style.letterSpacing=e.letterSpacing,t.style.textTransform=e.textTransform},p=!("undefined"==typeof window||!window.navigator)&&/MSIE |Trident\/|Edge\//.test(window.navigator.userAgent),d=function(){return p?"_"+Math.random().toString(36).substr(2,12):void 0},h=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.inputRef=function(e){n.input=e,"function"==typeof n.props.inputRef&&n.props.inputRef(e)},n.placeHolderSizerRef=function(e){n.placeHolderSizer=e},n.sizerRef=function(e){n.sizer=e},n.state={inputWidth:e.minWidth,inputId:e.id||d()},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"componentDidMount",value:function(){this.mounted=!0,this.copyInputStyles(),this.updateInputWidth()}},{key:"UNSAFE_componentWillReceiveProps",value:function(e){var t=e.id;t!==this.props.id&&this.setState({inputId:t||d()})}},{key:"componentDidUpdate",value:function(e,t){t.inputWidth!==this.state.inputWidth&&"function"==typeof this.props.onAutosize&&this.props.onAutosize(this.state.inputWidth),this.updateInputWidth()}},{key:"componentWillUnmount",value:function(){this.mounted=!1}},{key:"copyInputStyles",value:function(){if(this.mounted&&window.getComputedStyle){var e=this.input&&window.getComputedStyle(this.input);e&&(f(e,this.sizer),this.placeHolderSizer&&f(e,this.placeHolderSizer))}}},{key:"updateInputWidth",value:function(){if(this.mounted&&this.sizer&&void 0!==this.sizer.scrollWidth){var e=void 0;e=this.props.placeholder&&(!this.props.value||this.props.value&&this.props.placeholderIsMinWidth)?Math.max(this.sizer.scrollWidth,this.placeHolderSizer.scrollWidth)+2:this.sizer.scrollWidth+2,(e+="number"===this.props.type&&void 0===this.props.extraWidth?16:parseInt(this.props.extraWidth)||0)<this.props.minWidth&&(e=this.props.minWidth),e!==this.state.inputWidth&&this.setState({inputWidth:e})}}},{key:"getInput",value:function(){return this.input}},{key:"focus",value:function(){this.input.focus()}},{key:"blur",value:function(){this.input.blur()}},{key:"select",value:function(){this.input.select()}},{key:"renderStyles",value:function(){var e=this.props.injectStyles;return p&&e?i.default.createElement("style",{dangerouslySetInnerHTML:{__html:"input#"+this.state.inputId+"::-ms-clear {display: none;}"}}):null}},{key:"render",value:function(){var e=[this.props.defaultValue,this.props.value,""].reduce((function(e,t){return null!=e?e:t})),t=r({},this.props.style);t.display||(t.display="inline-block");var n=r({boxSizing:"content-box",width:this.state.inputWidth+"px"},this.props.inputStyle),o=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(this.props,[]);return function(e){c.forEach((function(t){return delete e[t]}))}(o),o.className=this.props.inputClassName,o.id=this.state.inputId,o.style=n,i.default.createElement("div",{className:this.props.className,style:t},this.renderStyles(),i.default.createElement("input",r({},o,{ref:this.inputRef})),i.default.createElement("div",{ref:this.sizerRef,style:s},e),this.props.placeholder?i.default.createElement("div",{ref:this.placeHolderSizerRef,style:s},this.props.placeholder):null)}}]),t}(a.Component);h.propTypes={className:u.default.string,defaultValue:u.default.any,extraWidth:u.default.oneOfType([u.default.number,u.default.string]),id:u.default.string,injectStyles:u.default.bool,inputClassName:u.default.string,inputRef:u.default.func,inputStyle:u.default.object,minWidth:u.default.oneOfType([u.default.number,u.default.string]),onAutosize:u.default.func,onChange:u.default.func,placeholder:u.default.string,placeholderIsMinWidth:u.default.bool,style:u.default.object,value:u.default.any},h.defaultProps={minWidth:1,injectStyles:!0},t.default=h},function(e,t,n){var r=n(18);e.exports=d,e.exports.parse=a,e.exports.compile=function(e,t){return u(a(e,t))},e.exports.tokensToFunction=u,e.exports.tokensToRegExp=p;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function a(e,t){for(var n,r=[],a=0,i=0,u="",c=t&&t.delimiter||"/";null!=(n=o.exec(e));){var f=n[0],p=n[1],d=n.index;if(u+=e.slice(i,d),i=d+f.length,p)u+=p[1];else{var h=e[i],m=n[2],y=n[3],v=n[4],g=n[5],b=n[6],E=n[7];u&&(r.push(u),u="");var w=null!=m&&null!=h&&h!==m,S="+"===b||"*"===b,k="?"===b||"*"===b,T=n[2]||c,C=v||g;r.push({name:y||a++,prefix:m||"",delimiter:T,optional:k,repeat:S,partial:w,asterisk:!!E,pattern:C?s(C):E?".*":"[^"+l(T)+"]+?"})}}return i<e.length&&(u+=e.substr(i)),u&&r.push(u),r}function i(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function u(e){for(var t=new Array(e.length),n=0;n<e.length;n++)"object"==typeof e[n]&&(t[n]=new RegExp("^(?:"+e[n].pattern+")$"));return function(n,o){for(var a="",u=n||{},l=(o||{}).pretty?i:encodeURIComponent,s=0;s<e.length;s++){var c=e[s];if("string"!=typeof c){var f,p=u[c.name];if(null==p){if(c.optional){c.partial&&(a+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(r(p)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(p)+"`");if(0===p.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var d=0;d<p.length;d++){if(f=l(p[d]),!t[s].test(f))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(f)+"`");a+=(0===d?c.prefix:c.delimiter)+f}}else{if(f=c.asterisk?encodeURI(p).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):l(p),!t[s].test(f))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+f+'"');a+=c.prefix+f}}else a+=c}return a}}function l(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function s(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function c(e,t){return e.keys=t,e}function f(e){return e.sensitive?"":"i"}function p(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,a=!1!==n.end,i="",u=0;u<e.length;u++){var s=e[u];if("string"==typeof s)i+=l(s);else{var p=l(s.prefix),d="(?:"+s.pattern+")";t.push(s),s.repeat&&(d+="(?:"+p+d+")*"),i+=d=s.optional?s.partial?p+"("+d+")?":"(?:"+p+"("+d+"))?":p+"("+d+")"}}var h=l(n.delimiter||"/"),m=i.slice(-h.length)===h;return o||(i=(m?i.slice(0,-h.length):i)+"(?:"+h+"(?=$))?"),i+=a?"$":o&&m?"":"(?="+h+"|$)",c(new RegExp("^"+i,f(n)),t)}function d(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return c(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],o=0;o<e.length;o++)r.push(d(e[o],t,n).source);return c(new RegExp("(?:"+r.join("|")+")",f(n)),t)}(e,t,n):function(e,t,n){return p(a(e,n),t,n)}(e,t,n)}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;function i(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,u,l=i(e),s=1;s<arguments.length;s++){for(var c in n=Object(arguments[s]))o.call(n,c)&&(l[c]=n[c]);if(r){u=r(n);for(var f=0;f<u.length;f++)a.call(n,u[f])&&(l[u[f]]=n[u[f]])}}return l}},function(e,t,n){"use strict";e.exports=n(19)},function(e,t,n){"use strict";(function(t){var n="__global_unique_id__";e.exports=function(){return t[n]=(t[n]||0)+1}}).call(this,n(17))},function(e,t,n){"use strict";var r=n(8),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},u={};function l(e){return r.isMemo(e)?i:u[e.$$typeof]||o}u[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0};var s=Object.defineProperty,c=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,p=Object.getOwnPropertyDescriptor,d=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=d(n);o&&o!==h&&e(t,o,r)}var i=c(n);f&&(i=i.concat(f(n)));for(var u=l(t),m=l(n),y=0;y<i.length;++y){var v=i[y];if(!(a[v]||r&&r[v]||m&&m[v]||u&&u[v])){var g=p(n,v);try{s(t,v,g)}catch(e){}}}return t}return t}},function(e,t,n){"use strict";
/** @license React v16.11.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(7),o="function"==typeof Symbol&&Symbol.for,a=o?Symbol.for("react.element"):60103,i=o?Symbol.for("react.portal"):60106,u=o?Symbol.for("react.fragment"):60107,l=o?Symbol.for("react.strict_mode"):60108,s=o?Symbol.for("react.profiler"):60114,c=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,p=o?Symbol.for("react.forward_ref"):60112,d=o?Symbol.for("react.suspense"):60113;o&&Symbol.for("react.suspense_list");var h=o?Symbol.for("react.memo"):60115,m=o?Symbol.for("react.lazy"):60116;o&&Symbol.for("react.fundamental"),o&&Symbol.for("react.responder"),o&&Symbol.for("react.scope");var y="function"==typeof Symbol&&Symbol.iterator;function v(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var g={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},b={};function E(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||g}function w(){}function S(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||g}E.prototype.isReactComponent={},E.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(v(85));this.updater.enqueueSetState(this,e,t,"setState")},E.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},w.prototype=E.prototype;var k=S.prototype=new w;k.constructor=S,r(k,E.prototype),k.isPureReactComponent=!0;var T={current:null},C={current:null},O=Object.prototype.hasOwnProperty,x={key:!0,ref:!0,__self:!0,__source:!0};function _(e,t,n){var r,o={},i=null,u=null;if(null!=t)for(r in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(i=""+t.key),t)O.call(t,r)&&!x.hasOwnProperty(r)&&(o[r]=t[r]);var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){for(var s=Array(l),c=0;c<l;c++)s[c]=arguments[c+2];o.children=s}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===o[r]&&(o[r]=l[r]);return{$$typeof:a,type:e,key:i,ref:u,props:o,_owner:C.current}}function P(e){return"object"==typeof e&&null!==e&&e.$$typeof===a}var A=/\/+/g,I=[];function N(e,t,n,r){if(I.length){var o=I.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function D(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>I.length&&I.push(e)}function F(e,t,n){return null==e?0:function e(t,n,r,o){var u=typeof t;"undefined"!==u&&"boolean"!==u||(t=null);var l=!1;if(null===t)l=!0;else switch(u){case"string":case"number":l=!0;break;case"object":switch(t.$$typeof){case a:case i:l=!0}}if(l)return r(o,t,""===n?"."+L(t,0):n),1;if(l=0,n=""===n?".":n+":",Array.isArray(t))for(var s=0;s<t.length;s++){var c=n+L(u=t[s],s);l+=e(u,c,r,o)}else if(null===t||"object"!=typeof t?c=null:c="function"==typeof(c=y&&t[y]||t["@@iterator"])?c:null,"function"==typeof c)for(t=c.call(t),s=0;!(u=t.next()).done;)l+=e(u=u.value,c=n+L(u,s++),r,o);else if("object"===u)throw r=""+t,Error(v(31,"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,""));return l}(e,"",t,n)}function L(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function R(e,t){e.func.call(e.context,t,e.count++)}function j(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?M(e,r,n,(function(e){return e})):null!=e&&(P(e)&&(e=function(e,t){return{$$typeof:a,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(A,"$&/")+"/")+n)),r.push(e))}function M(e,t,n,r,o){var a="";null!=n&&(a=(""+n).replace(A,"$&/")+"/"),F(e,j,t=N(t,a,r,o)),D(t)}function U(){var e=T.current;if(null===e)throw Error(v(321));return e}var V={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return M(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;F(e,R,t=N(null,null,t,n)),D(t)},count:function(e){return F(e,(function(){return null}),null)},toArray:function(e){var t=[];return M(e,t,null,(function(e){return e})),t},only:function(e){if(!P(e))throw Error(v(143));return e}},createRef:function(){return{current:null}},Component:E,PureComponent:S,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:c,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:p,render:e}},lazy:function(e){return{$$typeof:m,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:h,type:e,compare:void 0===t?null:t}},useCallback:function(e,t){return U().useCallback(e,t)},useContext:function(e,t){return U().useContext(e,t)},useEffect:function(e,t){return U().useEffect(e,t)},useImperativeHandle:function(e,t,n){return U().useImperativeHandle(e,t,n)},useDebugValue:function(){},useLayoutEffect:function(e,t){return U().useLayoutEffect(e,t)},useMemo:function(e,t){return U().useMemo(e,t)},useReducer:function(e,t,n){return U().useReducer(e,t,n)},useRef:function(e){return U().useRef(e)},useState:function(e){return U().useState(e)},Fragment:u,Profiler:s,StrictMode:l,Suspense:d,createElement:_,cloneElement:function(e,t,n){if(null==e)throw Error(v(267,e));var o=r({},e.props),i=e.key,u=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(u=t.ref,l=C.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(c in t)O.call(t,c)&&!x.hasOwnProperty(c)&&(o[c]=void 0===t[c]&&void 0!==s?s[c]:t[c])}var c=arguments.length-2;if(1===c)o.children=n;else if(1<c){s=Array(c);for(var f=0;f<c;f++)s[f]=arguments[f+2];o.children=s}return{$$typeof:a,type:e.type,key:i,ref:u,props:o,_owner:l}},createFactory:function(e){var t=_.bind(null,e);return t.type=e,t},isValidElement:P,version:"16.11.0",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:T,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:C,IsSomeRendererActing:{current:!1},assign:r}},z={default:V},H=z&&V||z;e.exports=H.default||H},function(e,t,n){"use strict";
/** @license React v16.11.0
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),o=n(7),a=n(13);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(i(227));var u=null,l={};function s(){if(u)for(var e in l){var t=l[e],n=u.indexOf(e);if(!(-1<n))throw Error(i(96,e));if(!f[n]){if(!t.extractEvents)throw Error(i(97,e));for(var r in f[n]=t,n=t.eventTypes){var o=void 0,a=n[r],s=t,d=r;if(p.hasOwnProperty(d))throw Error(i(99,d));p[d]=a;var h=a.phasedRegistrationNames;if(h){for(o in h)h.hasOwnProperty(o)&&c(h[o],s,d);o=!0}else a.registrationName?(c(a.registrationName,s,d),o=!0):o=!1;if(!o)throw Error(i(98,r,e))}}}}function c(e,t,n){if(d[e])throw Error(i(100,e));d[e]=t,h[e]=t.eventTypes[n].dependencies}var f=[],p={},d={},h={};function m(e,t,n,r,o,a,i,u,l){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var y=!1,v=null,g=!1,b=null,E={onError:function(e){y=!0,v=e}};function w(e,t,n,r,o,a,i,u,l){y=!1,v=null,m.apply(E,arguments)}var S=null,k=null,T=null;function C(e,t,n){var r=e.type||"unknown-event";e.currentTarget=T(n),function(e,t,n,r,o,a,u,l,s){if(w.apply(this,arguments),y){if(!y)throw Error(i(198));var c=v;y=!1,v=null,g||(g=!0,b=c)}}(r,t,void 0,e),e.currentTarget=null}function O(e,t){if(null==t)throw Error(i(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function x(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var _=null;function P(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)C(e,t[r],n[r]);else t&&C(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function A(e){if(null!==e&&(_=O(_,e)),e=_,_=null,e){if(x(e,P),_)throw Error(i(95));if(g)throw e=b,g=!1,b=null,e}}var I={injectEventPluginOrder:function(e){if(u)throw Error(i(101));u=Array.prototype.slice.call(e),s()},injectEventPluginsByName:function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!l.hasOwnProperty(t)||l[t]!==r){if(l[t])throw Error(i(102,t));l[t]=r,n=!0}}n&&s()}};function N(e,t){var n=e.stateNode;if(!n)return null;var r=S(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var D=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;D.hasOwnProperty("ReactCurrentDispatcher")||(D.ReactCurrentDispatcher={current:null}),D.hasOwnProperty("ReactCurrentBatchConfig")||(D.ReactCurrentBatchConfig={suspense:null});var F=/^(.*)[\\\/]/,L="function"==typeof Symbol&&Symbol.for,R=L?Symbol.for("react.element"):60103,j=L?Symbol.for("react.portal"):60106,M=L?Symbol.for("react.fragment"):60107,U=L?Symbol.for("react.strict_mode"):60108,V=L?Symbol.for("react.profiler"):60114,z=L?Symbol.for("react.provider"):60109,H=L?Symbol.for("react.context"):60110,B=L?Symbol.for("react.concurrent_mode"):60111,W=L?Symbol.for("react.forward_ref"):60112,q=L?Symbol.for("react.suspense"):60113,$=L?Symbol.for("react.suspense_list"):60120,Y=L?Symbol.for("react.memo"):60115,G=L?Symbol.for("react.lazy"):60116;L&&Symbol.for("react.fundamental"),L&&Symbol.for("react.responder"),L&&Symbol.for("react.scope");var Q="function"==typeof Symbol&&Symbol.iterator;function K(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=Q&&e[Q]||e["@@iterator"])?e:null}function J(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case M:return"Fragment";case j:return"Portal";case V:return"Profiler";case U:return"StrictMode";case q:return"Suspense";case $:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case H:return"Context.Consumer";case z:return"Context.Provider";case W:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case Y:return J(e.type);case G:if(e=1===e._status?e._result:null)return J(e)}return null}function X(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,o=e._debugSource,a=J(e.type);n=null,r&&(n=J(r.type)),r=a,a="",o?a=" (at "+o.fileName.replace(F,"")+":"+o.lineNumber+")":n&&(a=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+a}t+=n,e=e.return}while(e);return t}var Z=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),ee=null,te=null,ne=null;function re(e){if(e=k(e)){if("function"!=typeof ee)throw Error(i(280));var t=S(e.stateNode);ee(e.stateNode,e.type,t)}}function oe(e){te?ne?ne.push(e):ne=[e]:te=e}function ae(){if(te){var e=te,t=ne;if(ne=te=null,re(e),t)for(e=0;e<t.length;e++)re(t[e])}}function ie(e,t){return e(t)}function ue(e,t,n,r){return e(t,n,r)}function le(){}var se=ie,ce=!1,fe=!1;function pe(){null===te&&null===ne||(le(),ae())}new Map;var de=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,he=Object.prototype.hasOwnProperty,me={},ye={};function ve(e,t,n,r,o,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a}var ge={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){ge[e]=new ve(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];ge[t]=new ve(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){ge[e]=new ve(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){ge[e]=new ve(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){ge[e]=new ve(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){ge[e]=new ve(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){ge[e]=new ve(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){ge[e]=new ve(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){ge[e]=new ve(e,5,!1,e.toLowerCase(),null,!1)}));var be=/[\-:]([a-z])/g;function Ee(e){return e[1].toUpperCase()}function we(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Se(e,t,n,r){var o=ge.hasOwnProperty(t)?ge[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!he.call(ye,e)||!he.call(me,e)&&(de.test(e)?ye[e]=!0:(me[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function ke(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Te(e){e._valueTracker||(e._valueTracker=function(e){var t=ke(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Ce(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=ke(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Oe(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function xe(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=we(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function _e(e,t){null!=(t=t.checked)&&Se(e,"checked",t,!1)}function Pe(e,t){_e(e,t);var n=we(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Ie(e,t.type,n):t.hasOwnProperty("defaultValue")&&Ie(e,t.type,we(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Ae(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Ie(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Ne(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function De(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+we(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Fe(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Le(e,t){var n=t.value;if(null==n){if(n=t.defaultValue,null!=(t=t.children)){if(null!=n)throw Error(i(92));if(Array.isArray(t)){if(!(1>=t.length))throw Error(i(93));t=t[0]}n=t}null==n&&(n="")}e._wrapperState={initialValue:we(n)}}function Re(e,t){var n=we(t.value),r=we(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function je(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(be,Ee);ge[t]=new ve(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(be,Ee);ge[t]=new ve(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(be,Ee);ge[t]=new ve(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){ge[e]=new ve(e,1,!1,e.toLowerCase(),null,!1)})),ge.xlinkHref=new ve("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){ge[e]=new ve(e,1,!1,e.toLowerCase(),null,!0)}));var Me={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function Ue(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Ve(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Ue(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ze,He=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==Me.svg||"innerHTML"in e)e.innerHTML=t;else{for((ze=ze||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ze.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function Be(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function We(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var qe={animationend:We("Animation","AnimationEnd"),animationiteration:We("Animation","AnimationIteration"),animationstart:We("Animation","AnimationStart"),transitionend:We("Transition","TransitionEnd")},$e={},Ye={};function Ge(e){if($e[e])return $e[e];if(!qe[e])return e;var t,n=qe[e];for(t in n)if(n.hasOwnProperty(t)&&t in Ye)return $e[e]=n[t];return e}Z&&(Ye=document.createElement("div").style,"AnimationEvent"in window||(delete qe.animationend.animation,delete qe.animationiteration.animation,delete qe.animationstart.animation),"TransitionEvent"in window||delete qe.transitionend.transition);var Qe=Ge("animationend"),Ke=Ge("animationiteration"),Je=Ge("animationstart"),Xe=Ge("transitionend"),Ze="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" ");function et(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function tt(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function nt(e){if(et(e)!==e)throw Error(i(188))}function rt(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=et(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){n=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===n)return nt(o),e;if(a===r)return nt(o),t;a=a.sibling}throw Error(i(188))}if(n.return!==r.return)n=o,r=a;else{for(var u=!1,l=o.child;l;){if(l===n){u=!0,n=o,r=a;break}if(l===r){u=!0,r=o,n=a;break}l=l.sibling}if(!u){for(l=a.child;l;){if(l===n){u=!0,n=a,r=o;break}if(l===r){u=!0,r=a,n=o;break}l=l.sibling}if(!u)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var ot,at,it,ut=!1,lt=[],st=null,ct=null,ft=null,pt=new Map,dt=new Map,ht=[],mt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),yt="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function vt(e,t,n,r){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:r}}function gt(e,t){switch(e){case"focus":case"blur":st=null;break;case"dragenter":case"dragleave":ct=null;break;case"mouseover":case"mouseout":ft=null;break;case"pointerover":case"pointerout":pt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":dt.delete(t.pointerId)}}function bt(e,t,n,r,o){return null===e||e.nativeEvent!==o?(e=vt(t,n,r,o),null!==t&&(null!==(t=dr(t))&&at(t)),e):(e.eventSystemFlags|=r,e)}function Et(e){var t=pr(e.target);if(null!==t){var n=et(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=tt(n)))return e.blockedOn=t,void a.unstable_runWithPriority(e.priority,(function(){it(n)}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function wt(e){if(null!==e.blockedOn)return!1;var t=In(e.topLevelType,e.eventSystemFlags,e.nativeEvent);if(null!==t){var n=dr(t);return null!==n&&at(n),e.blockedOn=t,!1}return!0}function St(e,t,n){wt(e)&&n.delete(t)}function kt(){for(ut=!1;0<lt.length;){var e=lt[0];if(null!==e.blockedOn){null!==(e=dr(e.blockedOn))&&ot(e);break}var t=In(e.topLevelType,e.eventSystemFlags,e.nativeEvent);null!==t?e.blockedOn=t:lt.shift()}null!==st&&wt(st)&&(st=null),null!==ct&&wt(ct)&&(ct=null),null!==ft&&wt(ft)&&(ft=null),pt.forEach(St),dt.forEach(St)}function Tt(e,t){e.blockedOn===t&&(e.blockedOn=null,ut||(ut=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,kt)))}function Ct(e){function t(t){return Tt(t,e)}if(0<lt.length){Tt(lt[0],e);for(var n=1;n<lt.length;n++){var r=lt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==st&&Tt(st,e),null!==ct&&Tt(ct,e),null!==ft&&Tt(ft,e),pt.forEach(t),dt.forEach(t),n=0;n<ht.length;n++)(r=ht[n]).blockedOn===e&&(r.blockedOn=null);for(;0<ht.length&&null===(n=ht[0]).blockedOn;)Et(n),null===n.blockedOn&&ht.shift()}function Ot(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function xt(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function _t(e,t,n){(t=N(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=O(n._dispatchListeners,t),n._dispatchInstances=O(n._dispatchInstances,e))}function Pt(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=xt(t);for(t=n.length;0<t--;)_t(n[t],"captured",e);for(t=0;t<n.length;t++)_t(n[t],"bubbled",e)}}function At(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=N(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=O(n._dispatchListeners,t),n._dispatchInstances=O(n._dispatchInstances,e))}function It(e){e&&e.dispatchConfig.registrationName&&At(e._targetInst,null,e)}function Nt(e){x(e,Pt)}function Dt(){return!0}function Ft(){return!1}function Lt(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?Dt:Ft,this.isPropagationStopped=Ft,this}function Rt(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function jt(e){if(!(e instanceof this))throw Error(i(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Mt(e){e.eventPool=[],e.getPooled=Rt,e.release=jt}o(Lt.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Dt)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Dt)},persist:function(){this.isPersistent=Dt},isPersistent:Ft,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=Ft,this._dispatchInstances=this._dispatchListeners=null}}),Lt.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},Lt.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var a=new t;return o(a,n.prototype),n.prototype=a,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,Mt(n),n},Mt(Lt);var Ut=Lt.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Vt=Lt.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),zt=Lt.extend({view:null,detail:null}),Ht=zt.extend({relatedTarget:null});function Bt(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var Wt={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},qt={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},$t={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Yt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=$t[e])&&!!t[e]}function Gt(){return Yt}for(var Qt=zt.extend({key:function(e){if(e.key){var t=Wt[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Bt(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?qt[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Gt,charCode:function(e){return"keypress"===e.type?Bt(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Bt(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Kt=0,Jt=0,Xt=!1,Zt=!1,en=zt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Gt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Kt;return Kt=e.screenX,Xt?"mousemove"===e.type?e.screenX-t:0:(Xt=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Jt;return Jt=e.screenY,Zt?"mousemove"===e.type?e.screenY-t:0:(Zt=!0,0)}}),tn=en.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),nn=en.extend({dataTransfer:null}),rn=zt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Gt}),on=Lt.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),an=en.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),un=[["blur","blur",0],["cancel","cancel",0],["click","click",0],["close","close",0],["contextmenu","contextMenu",0],["copy","copy",0],["cut","cut",0],["auxclick","auxClick",0],["dblclick","doubleClick",0],["dragend","dragEnd",0],["dragstart","dragStart",0],["drop","drop",0],["focus","focus",0],["input","input",0],["invalid","invalid",0],["keydown","keyDown",0],["keypress","keyPress",0],["keyup","keyUp",0],["mousedown","mouseDown",0],["mouseup","mouseUp",0],["paste","paste",0],["pause","pause",0],["play","play",0],["pointercancel","pointerCancel",0],["pointerdown","pointerDown",0],["pointerup","pointerUp",0],["ratechange","rateChange",0],["reset","reset",0],["seeked","seeked",0],["submit","submit",0],["touchcancel","touchCancel",0],["touchend","touchEnd",0],["touchstart","touchStart",0],["volumechange","volumeChange",0],["drag","drag",1],["dragenter","dragEnter",1],["dragexit","dragExit",1],["dragleave","dragLeave",1],["dragover","dragOver",1],["mousemove","mouseMove",1],["mouseout","mouseOut",1],["mouseover","mouseOver",1],["pointermove","pointerMove",1],["pointerout","pointerOut",1],["pointerover","pointerOver",1],["scroll","scroll",1],["toggle","toggle",1],["touchmove","touchMove",1],["wheel","wheel",1],["abort","abort",2],[Qe,"animationEnd",2],[Ke,"animationIteration",2],[Je,"animationStart",2],["canplay","canPlay",2],["canplaythrough","canPlayThrough",2],["durationchange","durationChange",2],["emptied","emptied",2],["encrypted","encrypted",2],["ended","ended",2],["error","error",2],["gotpointercapture","gotPointerCapture",2],["load","load",2],["loadeddata","loadedData",2],["loadedmetadata","loadedMetadata",2],["loadstart","loadStart",2],["lostpointercapture","lostPointerCapture",2],["playing","playing",2],["progress","progress",2],["seeking","seeking",2],["stalled","stalled",2],["suspend","suspend",2],["timeupdate","timeUpdate",2],[Xe,"transitionEnd",2],["waiting","waiting",2]],ln={},sn={},cn=0;cn<un.length;cn++){var fn=un[cn],pn=fn[0],dn=fn[1],hn=fn[2],mn="on"+(dn[0].toUpperCase()+dn.slice(1)),yn={phasedRegistrationNames:{bubbled:mn,captured:mn+"Capture"},dependencies:[pn],eventPriority:hn};ln[dn]=yn,sn[pn]=yn}var vn={eventTypes:ln,getEventPriority:function(e){return void 0!==(e=sn[e])?e.eventPriority:2},extractEvents:function(e,t,n,r){var o=sn[e];if(!o)return null;switch(e){case"keypress":if(0===Bt(n))return null;case"keydown":case"keyup":e=Qt;break;case"blur":case"focus":e=Ht;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=en;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=nn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=rn;break;case Qe:case Ke:case Je:e=Ut;break;case Xe:e=on;break;case"scroll":e=zt;break;case"wheel":e=an;break;case"copy":case"cut":case"paste":e=Vt;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=tn;break;default:e=Lt}return Nt(t=e.getPooled(o,t,n,r)),t}},gn=a.unstable_UserBlockingPriority,bn=a.unstable_runWithPriority,En=vn.getEventPriority,wn=10,Sn=[];function kn(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;5!==(t=n.tag)&&6!==t||e.ancestors.push(n),n=pr(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=Ot(e.nativeEvent);r=e.topLevelType;for(var a=e.nativeEvent,i=e.eventSystemFlags,u=null,l=0;l<f.length;l++){var s=f[l];s&&(s=s.extractEvents(r,t,a,o,i))&&(u=O(u,s))}A(u)}}var Tn=!0;function Cn(e,t){On(t,e,!1)}function On(e,t,n){switch(En(t)){case 0:var r=xn.bind(null,t,1);break;case 1:r=_n.bind(null,t,1);break;default:r=An.bind(null,t,1)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function xn(e,t,n){ce||le();var r=An,o=ce;ce=!0;try{ue(r,e,t,n)}finally{(ce=o)||pe()}}function _n(e,t,n){bn(gn,An.bind(null,e,t,n))}function Pn(e,t,n,r){if(Sn.length){var o=Sn.pop();o.topLevelType=e,o.eventSystemFlags=t,o.nativeEvent=n,o.targetInst=r,e=o}else e={topLevelType:e,eventSystemFlags:t,nativeEvent:n,targetInst:r,ancestors:[]};try{if(t=kn,n=e,fe)t(n,void 0);else{fe=!0;try{se(t,n,void 0)}finally{fe=!1,pe()}}}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,Sn.length<wn&&Sn.push(e)}}function An(e,t,n){if(Tn)if(0<lt.length&&-1<mt.indexOf(e))e=vt(null,e,t,n),lt.push(e);else{var r=In(e,t,n);null===r?gt(e,n):-1<mt.indexOf(e)?(e=vt(r,e,t,n),lt.push(e)):function(e,t,n,r){switch(t){case"focus":return st=bt(st,e,t,n,r),!0;case"dragenter":return ct=bt(ct,e,t,n,r),!0;case"mouseover":return ft=bt(ft,e,t,n,r),!0;case"pointerover":var o=r.pointerId;return pt.set(o,bt(pt.get(o)||null,e,t,n,r)),!0;case"gotpointercapture":return o=r.pointerId,dt.set(o,bt(dt.get(o)||null,e,t,n,r)),!0}return!1}(r,e,t,n)||(gt(e,n),Pn(e,t,n,null))}}function In(e,t,n){var r=Ot(n);if(null!==(r=pr(r))){var o=et(r);if(null===o)r=null;else{var a=o.tag;if(13===a){if(null!==(r=tt(o)))return r;r=null}else if(3===a){if(o.stateNode.hydrate)return 3===o.tag?o.stateNode.containerInfo:null;r=null}else o!==r&&(r=null)}}return Pn(e,t,n,r),null}function Nn(e){if(!Z)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var Dn=new("function"==typeof WeakMap?WeakMap:Map);function Fn(e){var t=Dn.get(e);return void 0===t&&(t=new Set,Dn.set(e,t)),t}function Ln(e,t,n){if(!n.has(e)){switch(e){case"scroll":On(t,"scroll",!0);break;case"focus":case"blur":On(t,"focus",!0),On(t,"blur",!0),n.add("blur"),n.add("focus");break;case"cancel":case"close":Nn(e)&&On(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===Ze.indexOf(e)&&Cn(e,t)}n.add(e)}}var Rn={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},jn=["Webkit","ms","Moz","O"];function Mn(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||Rn.hasOwnProperty(e)&&Rn[e]?(""+t).trim():t+"px"}function Un(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=Mn(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(Rn).forEach((function(e){jn.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Rn[t]=Rn[e]}))}));var Vn=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function zn(e,t){if(t){if(Vn[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if(!("object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62,""))}}function Hn(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Bn(e,t){var n=Fn(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=h[t];for(var r=0;r<t.length;r++)Ln(t[r],e,n)}function Wn(){}function qn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function $n(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Yn(e,t){var n,r=$n(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=$n(r)}}function Gn(){for(var e=window,t=qn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=qn((e=t.contentWindow).document)}return t}function Qn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var Kn="$",Jn="/$",Xn="$?",Zn="$!",er=null,tr=null;function nr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function rr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var or="function"==typeof setTimeout?setTimeout:void 0,ar="function"==typeof clearTimeout?clearTimeout:void 0;function ir(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function ur(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if(n===Kn||n===Zn||n===Xn){if(0===t)return e;t--}else n===Jn&&t++}e=e.previousSibling}return null}var lr=Math.random().toString(36).slice(2),sr="__reactInternalInstance$"+lr,cr="__reactEventHandlers$"+lr,fr="__reactContainere$"+lr;function pr(e){var t=e[sr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[fr]||n[sr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=ur(e);null!==e;){if(n=e[sr])return n;e=ur(e)}return t}n=(e=n).parentNode}return null}function dr(e){return!(e=e[sr]||e[fr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function hr(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function mr(e){return e[cr]||null}var yr=null,vr=null,gr=null;function br(){if(gr)return gr;var e,t,n=vr,r=n.length,o="value"in yr?yr.value:yr.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return gr=o.slice(e,1<t?1-t:void 0)}var Er=Lt.extend({data:null}),wr=Lt.extend({data:null}),Sr=[9,13,27,32],kr=Z&&"CompositionEvent"in window,Tr=null;Z&&"documentMode"in document&&(Tr=document.documentMode);var Cr=Z&&"TextEvent"in window&&!Tr,Or=Z&&(!kr||Tr&&8<Tr&&11>=Tr),xr=String.fromCharCode(32),_r={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},Pr=!1;function Ar(e,t){switch(e){case"keyup":return-1!==Sr.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function Ir(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Nr=!1;var Dr={eventTypes:_r,extractEvents:function(e,t,n,r){var o;if(kr)e:{switch(e){case"compositionstart":var a=_r.compositionStart;break e;case"compositionend":a=_r.compositionEnd;break e;case"compositionupdate":a=_r.compositionUpdate;break e}a=void 0}else Nr?Ar(e,n)&&(a=_r.compositionEnd):"keydown"===e&&229===n.keyCode&&(a=_r.compositionStart);return a?(Or&&"ko"!==n.locale&&(Nr||a!==_r.compositionStart?a===_r.compositionEnd&&Nr&&(o=br()):(vr="value"in(yr=r)?yr.value:yr.textContent,Nr=!0)),a=Er.getPooled(a,t,n,r),o?a.data=o:null!==(o=Ir(n))&&(a.data=o),Nt(a),o=a):o=null,(e=Cr?function(e,t){switch(e){case"compositionend":return Ir(t);case"keypress":return 32!==t.which?null:(Pr=!0,xr);case"textInput":return(e=t.data)===xr&&Pr?null:e;default:return null}}(e,n):function(e,t){if(Nr)return"compositionend"===e||!kr&&Ar(e,t)?(e=br(),gr=vr=yr=null,Nr=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Or&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=wr.getPooled(_r.beforeInput,t,n,r)).data=e,Nt(t)):t=null,null===o?t:null===t?o:[o,t]}},Fr={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Lr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Fr[e.type]:"textarea"===t}var Rr={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function jr(e,t,n){return(e=Lt.getPooled(Rr.change,e,t,n)).type="change",oe(n),Nt(e),e}var Mr=null,Ur=null;function Vr(e){A(e)}function zr(e){if(Ce(hr(e)))return e}function Hr(e,t){if("change"===e)return t}var Br=!1;function Wr(){Mr&&(Mr.detachEvent("onpropertychange",qr),Ur=Mr=null)}function qr(e){if("value"===e.propertyName&&zr(Ur))if(e=jr(Ur,e,Ot(e)),ce)A(e);else{ce=!0;try{ie(Vr,e)}finally{ce=!1,pe()}}}function $r(e,t,n){"focus"===e?(Wr(),Ur=n,(Mr=t).attachEvent("onpropertychange",qr)):"blur"===e&&Wr()}function Yr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return zr(Ur)}function Gr(e,t){if("click"===e)return zr(t)}function Qr(e,t){if("input"===e||"change"===e)return zr(t)}Z&&(Br=Nn("input")&&(!document.documentMode||9<document.documentMode));var Kr,Jr={eventTypes:Rr,_isInputEventSupported:Br,extractEvents:function(e,t,n,r){var o=t?hr(t):window,a=o.nodeName&&o.nodeName.toLowerCase();if("select"===a||"input"===a&&"file"===o.type)var i=Hr;else if(Lr(o))if(Br)i=Qr;else{i=Yr;var u=$r}else(a=o.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(i=Gr);if(i&&(i=i(e,t)))return jr(i,n,r);u&&u(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&Ie(o,"number",o.value)}},Xr={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Zr={eventTypes:Xr,extractEvents:function(e,t,n,r,o){var a="mouseover"===e||"pointerover"===e,i="mouseout"===e||"pointerout"===e;if(a&&0==(32&o)&&(n.relatedTarget||n.fromElement)||!i&&!a)return null;if(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,i?(i=t,null!==(t=(t=n.relatedTarget||n.toElement)?pr(t):null)&&(t!==(a=et(t))||5!==t.tag&&6!==t.tag)&&(t=null)):i=null,i===t)return null;if("mouseout"===e||"mouseover"===e)var u=en,l=Xr.mouseLeave,s=Xr.mouseEnter,c="mouse";else"pointerout"!==e&&"pointerover"!==e||(u=tn,l=Xr.pointerLeave,s=Xr.pointerEnter,c="pointer");if(e=null==i?o:hr(i),o=null==t?o:hr(t),(l=u.getPooled(l,i,n,r)).type=c+"leave",l.target=e,l.relatedTarget=o,(r=u.getPooled(s,t,n,r)).type=c+"enter",r.target=o,r.relatedTarget=e,c=t,(u=i)&&c)e:{for(e=c,i=0,t=s=u;t;t=xt(t))i++;for(t=0,o=e;o;o=xt(o))t++;for(;0<i-t;)s=xt(s),i--;for(;0<t-i;)e=xt(e),t--;for(;i--;){if(s===e||s===e.alternate)break e;s=xt(s),e=xt(e)}s=null}else s=null;for(e=s,s=[];u&&u!==e&&(null===(i=u.alternate)||i!==e);)s.push(u),u=xt(u);for(u=[];c&&c!==e&&(null===(i=c.alternate)||i!==e);)u.push(c),c=xt(c);for(c=0;c<s.length;c++)At(s[c],"bubbled",l);for(c=u.length;0<c--;)At(u[c],"captured",r);return n===Kr?(Kr=null,[l]):(Kr=n,[l,r])}};var eo="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},to=Object.prototype.hasOwnProperty;function no(e,t){if(eo(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!to.call(t,n[r])||!eo(e[n[r]],t[n[r]]))return!1;return!0}var ro=Z&&"documentMode"in document&&11>=document.documentMode,oo={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},ao=null,io=null,uo=null,lo=!1;function so(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return lo||null==ao||ao!==qn(n)?null:("selectionStart"in(n=ao)&&Qn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},uo&&no(uo,n)?null:(uo=n,(e=Lt.getPooled(oo.select,io,e,t)).type="select",e.target=ao,Nt(e),e))}var co={eventTypes:oo,extractEvents:function(e,t,n,r){var o,a=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!a)){e:{a=Fn(a),o=h.onSelect;for(var i=0;i<o.length;i++)if(!a.has(o[i])){a=!1;break e}a=!0}o=!a}if(o)return null;switch(a=t?hr(t):window,e){case"focus":(Lr(a)||"true"===a.contentEditable)&&(ao=a,io=t,uo=null);break;case"blur":uo=io=ao=null;break;case"mousedown":lo=!0;break;case"contextmenu":case"mouseup":case"dragend":return lo=!1,so(n,r);case"selectionchange":if(ro)break;case"keydown":case"keyup":return so(n,r)}return null}};I.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),S=mr,k=dr,T=hr,I.injectEventPluginsByName({SimpleEventPlugin:vn,EnterLeaveEventPlugin:Zr,ChangeEventPlugin:Jr,SelectEventPlugin:co,BeforeInputEventPlugin:Dr}),new Set;var fo=[],po=-1;function ho(e){0>po||(e.current=fo[po],fo[po]=null,po--)}function mo(e,t){fo[++po]=e.current,e.current=t}var yo={},vo={current:yo},go={current:!1},bo=yo;function Eo(e,t){var n=e.type.contextTypes;if(!n)return yo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function wo(e){return null!=(e=e.childContextTypes)}function So(e){ho(go),ho(vo)}function ko(e){ho(go),ho(vo)}function To(e,t,n){if(vo.current!==yo)throw Error(i(168));mo(vo,t),mo(go,n)}function Co(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in e))throw Error(i(108,J(t)||"Unknown",a));return o({},n,{},r)}function Oo(e){var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||yo,bo=vo.current,mo(vo,t),mo(go,go.current),!0}function xo(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(t=Co(e,t,bo),r.__reactInternalMemoizedMergedChildContext=t,ho(go),ho(vo),mo(vo,t)):ho(go),mo(go,n)}var _o=a.unstable_runWithPriority,Po=a.unstable_scheduleCallback,Ao=a.unstable_cancelCallback,Io=a.unstable_shouldYield,No=a.unstable_requestPaint,Do=a.unstable_now,Fo=a.unstable_getCurrentPriorityLevel,Lo=a.unstable_ImmediatePriority,Ro=a.unstable_UserBlockingPriority,jo=a.unstable_NormalPriority,Mo=a.unstable_LowPriority,Uo=a.unstable_IdlePriority,Vo={},zo=void 0!==No?No:function(){},Ho=null,Bo=null,Wo=!1,qo=Do(),$o=1e4>qo?Do:function(){return Do()-qo};function Yo(){switch(Fo()){case Lo:return 99;case Ro:return 98;case jo:return 97;case Mo:return 96;case Uo:return 95;default:throw Error(i(332))}}function Go(e){switch(e){case 99:return Lo;case 98:return Ro;case 97:return jo;case 96:return Mo;case 95:return Uo;default:throw Error(i(332))}}function Qo(e,t){return e=Go(e),_o(e,t)}function Ko(e,t,n){return e=Go(e),Po(e,t,n)}function Jo(e){return null===Ho?(Ho=[e],Bo=Po(Lo,Zo)):Ho.push(e),Vo}function Xo(){if(null!==Bo){var e=Bo;Bo=null,Ao(e)}Zo()}function Zo(){if(!Wo&&null!==Ho){Wo=!0;var e=0;try{var t=Ho;Qo(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Ho=null}catch(t){throw null!==Ho&&(Ho=Ho.slice(e+1)),Po(Lo,Xo),t}finally{Wo=!1}}}var ea=3;function ta(e,t,n){return 1073741821-(1+((1073741821-e+t/10)/(n/=10)|0))*n}function na(e,t){if(e&&e.defaultProps)for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var ra={current:null},oa=null,aa=null,ia=null;function ua(){ia=aa=oa=null}function la(e,t){var n=e.type._context;mo(ra,n._currentValue),n._currentValue=t}function sa(e){var t=ra.current;ho(ra),e.type._context._currentValue=t}function ca(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function fa(e,t){oa=e,ia=aa=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(qi=!0),e.firstContext=null)}function pa(e,t){if(ia!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(ia=e,t=1073741823),t={context:e,observedBits:t,next:null},null===aa){if(null===oa)throw Error(i(308));aa=t,oa.dependencies={expirationTime:0,firstContext:t,responders:null}}else aa=aa.next=t;return e._currentValue}var da=!1;function ha(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function ma(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function ya(e,t){return{expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function va(e,t){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t)}function ga(e,t){var n=e.alternate;if(null===n){var r=e.updateQueue,o=null;null===r&&(r=e.updateQueue=ha(e.memoizedState))}else r=e.updateQueue,o=n.updateQueue,null===r?null===o?(r=e.updateQueue=ha(e.memoizedState),o=n.updateQueue=ha(n.memoizedState)):r=e.updateQueue=ma(o):null===o&&(o=n.updateQueue=ma(r));null===o||r===o?va(r,t):null===r.lastUpdate||null===o.lastUpdate?(va(r,t),va(o,t)):(va(r,t),o.lastUpdate=t)}function ba(e,t){var n=e.updateQueue;null===(n=null===n?e.updateQueue=ha(e.memoizedState):Ea(e,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=t:(n.lastCapturedUpdate.next=t,n.lastCapturedUpdate=t)}function Ea(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=ma(t)),t}function wa(e,t,n,r,a,i){switch(n.tag){case 1:return"function"==typeof(e=n.payload)?e.call(i,r,a):e;case 3:e.effectTag=-4097&e.effectTag|64;case 0:if(null==(a="function"==typeof(e=n.payload)?e.call(i,r,a):e))break;return o({},r,a);case 2:da=!0}return r}function Sa(e,t,n,r,o){da=!1;for(var a=(t=Ea(e,t)).baseState,i=null,u=0,l=t.firstUpdate,s=a;null!==l;){var c=l.expirationTime;c<o?(null===i&&(i=l,a=s),u<c&&(u=c)):(xl(c,l.suspenseConfig),s=wa(e,0,l,s,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=l:(t.lastEffect.nextEffect=l,t.lastEffect=l))),l=l.next}for(c=null,l=t.firstCapturedUpdate;null!==l;){var f=l.expirationTime;f<o?(null===c&&(c=l,null===i&&(a=s)),u<f&&(u=f)):(s=wa(e,0,l,s,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=l:(t.lastCapturedEffect.nextEffect=l,t.lastCapturedEffect=l))),l=l.next}null===i&&(t.lastUpdate=null),null===c?t.lastCapturedUpdate=null:e.effectTag|=32,null===i&&null===c&&(a=s),t.baseState=a,t.firstUpdate=i,t.firstCapturedUpdate=c,_l(u),e.expirationTime=u,e.memoizedState=s}function ka(e,t,n){null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),Ta(t.firstEffect,n),t.firstEffect=t.lastEffect=null,Ta(t.firstCapturedEffect,n),t.firstCapturedEffect=t.lastCapturedEffect=null}function Ta(e,t){for(;null!==e;){var n=e.callback;if(null!==n){e.callback=null;var r=t;if("function"!=typeof n)throw Error(i(191,n));n.call(r)}e=e.nextEffect}}var Ca=D.ReactCurrentBatchConfig,Oa=(new r.Component).refs;function xa(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,null!==(r=e.updateQueue)&&0===e.expirationTime&&(r.baseState=n)}var _a={isMounted:function(e){return!!(e=e._reactInternalFiber)&&et(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=hl(),o=Ca.suspense;(o=ya(r=ml(r,e,o),o)).payload=t,null!=n&&(o.callback=n),ga(e,o),yl(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=hl(),o=Ca.suspense;(o=ya(r=ml(r,e,o),o)).tag=1,o.payload=t,null!=n&&(o.callback=n),ga(e,o),yl(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=hl(),r=Ca.suspense;(r=ya(n=ml(n,e,r),r)).tag=2,null!=t&&(r.callback=t),ga(e,r),yl(e,n)}};function Pa(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!t.prototype||!t.prototype.isPureReactComponent||(!no(n,r)||!no(o,a))}function Aa(e,t,n){var r=!1,o=yo,a=t.contextType;return"object"==typeof a&&null!==a?a=pa(a):(o=wo(t)?bo:vo.current,a=(r=null!=(r=t.contextTypes))?Eo(e,o):yo),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=_a,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function Ia(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&_a.enqueueReplaceState(t,t.state,null)}function Na(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=Oa;var a=t.contextType;"object"==typeof a&&null!==a?o.context=pa(a):(a=wo(t)?bo:vo.current,o.context=Eo(e,a)),null!==(a=e.updateQueue)&&(Sa(e,a,n,o,r),o.state=e.memoizedState),"function"==typeof(a=t.getDerivedStateFromProps)&&(xa(e,t,a,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&_a.enqueueReplaceState(o,o.state,null),null!==(a=e.updateQueue)&&(Sa(e,a,n,o,r),o.state=e.memoizedState)),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var Da=Array.isArray;function Fa(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===Oa&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function La(e,t){if("textarea"!==e.type)throw Error(i(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function Ra(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=Gl(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function u(t){return e&&null===t.alternate&&(t.effectTag=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Jl(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function s(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=Fa(e,t,n),r.return=e,r):((r=Ql(n.type,n.key,n.props,null,e.mode,r)).ref=Fa(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Xl(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,a){return null===t||7!==t.tag?((t=Kl(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function p(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Jl(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case R:return(n=Ql(t.type,t.key,t.props,null,e.mode,n)).ref=Fa(e,null,t),n.return=e,n;case j:return(t=Xl(t,e.mode,n)).return=e,t}if(Da(t)||K(t))return(t=Kl(t,e.mode,n,null)).return=e,t;La(e,t)}return null}function d(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case R:return n.key===o?n.type===M?f(e,t,n.props.children,r,o):s(e,t,n,r):null;case j:return n.key===o?c(e,t,n,r):null}if(Da(n)||K(n))return null!==o?null:f(e,t,n,r,null);La(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case R:return e=e.get(null===r.key?n:r.key)||null,r.type===M?f(t,e,r.props.children,o,r.key):s(t,e,r,o);case j:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(Da(r)||K(r))return f(t,e=e.get(n)||null,r,o,null);La(t,r)}return null}function m(o,i,u,l){for(var s=null,c=null,f=i,m=i=0,y=null;null!==f&&m<u.length;m++){f.index>m?(y=f,f=null):y=f.sibling;var v=d(o,f,u[m],l);if(null===v){null===f&&(f=y);break}e&&f&&null===v.alternate&&t(o,f),i=a(v,i,m),null===c?s=v:c.sibling=v,c=v,f=y}if(m===u.length)return n(o,f),s;if(null===f){for(;m<u.length;m++)null!==(f=p(o,u[m],l))&&(i=a(f,i,m),null===c?s=f:c.sibling=f,c=f);return s}for(f=r(o,f);m<u.length;m++)null!==(y=h(f,o,m,u[m],l))&&(e&&null!==y.alternate&&f.delete(null===y.key?m:y.key),i=a(y,i,m),null===c?s=y:c.sibling=y,c=y);return e&&f.forEach((function(e){return t(o,e)})),s}function y(o,u,l,s){var c=K(l);if("function"!=typeof c)throw Error(i(150));if(null==(l=c.call(l)))throw Error(i(151));for(var f=c=null,m=u,y=u=0,v=null,g=l.next();null!==m&&!g.done;y++,g=l.next()){m.index>y?(v=m,m=null):v=m.sibling;var b=d(o,m,g.value,s);if(null===b){null===m&&(m=v);break}e&&m&&null===b.alternate&&t(o,m),u=a(b,u,y),null===f?c=b:f.sibling=b,f=b,m=v}if(g.done)return n(o,m),c;if(null===m){for(;!g.done;y++,g=l.next())null!==(g=p(o,g.value,s))&&(u=a(g,u,y),null===f?c=g:f.sibling=g,f=g);return c}for(m=r(o,m);!g.done;y++,g=l.next())null!==(g=h(m,o,y,g.value,s))&&(e&&null!==g.alternate&&m.delete(null===g.key?y:g.key),u=a(g,u,y),null===f?c=g:f.sibling=g,f=g);return e&&m.forEach((function(e){return t(o,e)})),c}return function(e,r,a,l){var s="object"==typeof a&&null!==a&&a.type===M&&null===a.key;s&&(a=a.props.children);var c="object"==typeof a&&null!==a;if(c)switch(a.$$typeof){case R:e:{for(c=a.key,s=r;null!==s;){if(s.key===c){if(7===s.tag?a.type===M:s.elementType===a.type){n(e,s.sibling),(r=o(s,a.type===M?a.props.children:a.props)).ref=Fa(e,s,a),r.return=e,e=r;break e}n(e,s);break}t(e,s),s=s.sibling}a.type===M?((r=Kl(a.props.children,e.mode,l,a.key)).return=e,e=r):((l=Ql(a.type,a.key,a.props,null,e.mode,l)).ref=Fa(e,r,a),l.return=e,e=l)}return u(e);case j:e:{for(s=a.key;null!==r;){if(r.key===s){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){n(e,r.sibling),(r=o(r,a.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Xl(a,e.mode,l)).return=e,e=r}return u(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,a)).return=e,e=r):(n(e,r),(r=Jl(a,e.mode,l)).return=e,e=r),u(e);if(Da(a))return m(e,r,a,l);if(K(a))return y(e,r,a,l);if(c&&La(e,a),void 0===a&&!s)switch(e.tag){case 1:case 0:throw e=e.type,Error(i(152,e.displayName||e.name||"Component"))}return n(e,r)}}var ja=Ra(!0),Ma=Ra(!1),Ua={},Va={current:Ua},za={current:Ua},Ha={current:Ua};function Ba(e){if(e===Ua)throw Error(i(174));return e}function Wa(e,t){mo(Ha,t),mo(za,e),mo(Va,Ua);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Ve(null,"");break;default:t=Ve(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}ho(Va),mo(Va,t)}function qa(e){ho(Va),ho(za),ho(Ha)}function $a(e){Ba(Ha.current);var t=Ba(Va.current),n=Ve(t,e.type);t!==n&&(mo(za,e),mo(Va,n))}function Ya(e){za.current===e&&(ho(Va),ho(za))}var Ga={current:0};function Qa(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||n.data===Xn||n.data===Zn))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function Ka(e,t){return{responder:e,props:t}}var Ja=D.ReactCurrentDispatcher,Xa=D.ReactCurrentBatchConfig,Za=0,ei=null,ti=null,ni=null,ri=null,oi=null,ai=null,ii=0,ui=null,li=0,si=!1,ci=null,fi=0;function pi(){throw Error(i(321))}function di(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!eo(e[n],t[n]))return!1;return!0}function hi(e,t,n,r,o,a){if(Za=a,ei=t,ni=null!==e?e.memoizedState:null,Ja.current=null===ni?Di:Fi,t=n(r,o),si){do{si=!1,fi+=1,ni=null!==e?e.memoizedState:null,ai=ri,ui=oi=ti=null,Ja.current=Fi,t=n(r,o)}while(si);ci=null,fi=0}if(Ja.current=Ni,(e=ei).memoizedState=ri,e.expirationTime=ii,e.updateQueue=ui,e.effectTag|=li,e=null!==ti&&null!==ti.next,Za=0,ai=oi=ri=ni=ti=ei=null,ii=0,ui=null,li=0,e)throw Error(i(300));return t}function mi(){Ja.current=Ni,Za=0,ai=oi=ri=ni=ti=ei=null,ii=0,ui=null,li=0,si=!1,ci=null,fi=0}function yi(){var e={memoizedState:null,baseState:null,queue:null,baseUpdate:null,next:null};return null===oi?ri=oi=e:oi=oi.next=e,oi}function vi(){if(null!==ai)ai=(oi=ai).next,ni=null!==(ti=ni)?ti.next:null;else{if(null===ni)throw Error(i(310));var e={memoizedState:(ti=ni).memoizedState,baseState:ti.baseState,queue:ti.queue,baseUpdate:ti.baseUpdate,next:null};oi=null===oi?ri=e:oi.next=e,ni=ti.next}return oi}function gi(e,t){return"function"==typeof t?t(e):t}function bi(e){var t=vi(),n=t.queue;if(null===n)throw Error(i(311));if(n.lastRenderedReducer=e,0<fi){var r=n.dispatch;if(null!==ci){var o=ci.get(n);if(void 0!==o){ci.delete(n);var a=t.memoizedState;do{a=e(a,o.action),o=o.next}while(null!==o);return eo(a,t.memoizedState)||(qi=!0),t.memoizedState=a,t.baseUpdate===n.last&&(t.baseState=a),n.lastRenderedState=a,[a,r]}}return[t.memoizedState,r]}r=n.last;var u=t.baseUpdate;if(a=t.baseState,null!==u?(null!==r&&(r.next=null),r=u.next):r=null!==r?r.next:null,null!==r){var l=o=null,s=r,c=!1;do{var f=s.expirationTime;f<Za?(c||(c=!0,l=u,o=a),f>ii&&_l(ii=f)):(xl(f,s.suspenseConfig),a=s.eagerReducer===e?s.eagerState:e(a,s.action)),u=s,s=s.next}while(null!==s&&s!==r);c||(l=u,o=a),eo(a,t.memoizedState)||(qi=!0),t.memoizedState=a,t.baseUpdate=l,t.baseState=o,n.lastRenderedState=a}return[t.memoizedState,n.dispatch]}function Ei(e){var t=yi();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={last:null,dispatch:null,lastRenderedReducer:gi,lastRenderedState:e}).dispatch=Ii.bind(null,ei,e),[t.memoizedState,e]}function wi(e){return bi(gi)}function Si(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===ui?(ui={lastEffect:null}).lastEffect=e.next=e:null===(t=ui.lastEffect)?ui.lastEffect=e.next=e:(n=t.next,t.next=e,e.next=n,ui.lastEffect=e),e}function ki(e,t,n,r){var o=yi();li|=e,o.memoizedState=Si(t,n,void 0,void 0===r?null:r)}function Ti(e,t,n,r){var o=vi();r=void 0===r?null:r;var a=void 0;if(null!==ti){var i=ti.memoizedState;if(a=i.destroy,null!==r&&di(r,i.deps))return void Si(0,n,a,r)}li|=e,o.memoizedState=Si(t,n,a,r)}function Ci(e,t){return ki(516,192,e,t)}function Oi(e,t){return Ti(516,192,e,t)}function xi(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function _i(){}function Pi(e,t){return yi().memoizedState=[e,void 0===t?null:t],e}function Ai(e,t){var n=vi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&di(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Ii(e,t,n){if(!(25>fi))throw Error(i(301));var r=e.alternate;if(e===ei||null!==r&&r===ei)if(si=!0,e={expirationTime:Za,suspenseConfig:null,action:n,eagerReducer:null,eagerState:null,next:null},null===ci&&(ci=new Map),void 0===(n=ci.get(t)))ci.set(t,e);else{for(t=n;null!==t.next;)t=t.next;t.next=e}else{var o=hl(),a=Ca.suspense;a={expirationTime:o=ml(o,e,a),suspenseConfig:a,action:n,eagerReducer:null,eagerState:null,next:null};var u=t.last;if(null===u)a.next=a;else{var l=u.next;null!==l&&(a.next=l),u.next=a}if(t.last=a,0===e.expirationTime&&(null===r||0===r.expirationTime)&&null!==(r=t.lastRenderedReducer))try{var s=t.lastRenderedState,c=r(s,n);if(a.eagerReducer=r,a.eagerState=c,eo(c,s))return}catch(e){}yl(e,o)}}var Ni={readContext:pa,useCallback:pi,useContext:pi,useEffect:pi,useImperativeHandle:pi,useLayoutEffect:pi,useMemo:pi,useReducer:pi,useRef:pi,useState:pi,useDebugValue:pi,useResponder:pi,useDeferredValue:pi,useTransition:pi},Di={readContext:pa,useCallback:Pi,useContext:pa,useEffect:Ci,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ki(4,36,xi.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ki(4,36,e,t)},useMemo:function(e,t){var n=yi();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=yi();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={last:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Ii.bind(null,ei,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},yi().memoizedState=e},useState:Ei,useDebugValue:_i,useResponder:Ka,useDeferredValue:function(e,t){var n=Ei(e),r=n[0],o=n[1];return Ci((function(){a.unstable_next((function(){var n=Xa.suspense;Xa.suspense=void 0===t?null:t;try{o(e)}finally{Xa.suspense=n}}))}),[e,t]),r},useTransition:function(e){var t=Ei(!1),n=t[0],r=t[1];return[Pi((function(t){r(!0),a.unstable_next((function(){var n=Xa.suspense;Xa.suspense=void 0===e?null:e;try{r(!1),t()}finally{Xa.suspense=n}}))}),[e,n]),n]}},Fi={readContext:pa,useCallback:Ai,useContext:pa,useEffect:Oi,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Ti(4,36,xi.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Ti(4,36,e,t)},useMemo:function(e,t){var n=vi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&di(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)},useReducer:bi,useRef:function(){return vi().memoizedState},useState:wi,useDebugValue:_i,useResponder:Ka,useDeferredValue:function(e,t){var n=wi(),r=n[0],o=n[1];return Oi((function(){a.unstable_next((function(){var n=Xa.suspense;Xa.suspense=void 0===t?null:t;try{o(e)}finally{Xa.suspense=n}}))}),[e,t]),r},useTransition:function(e){var t=wi(),n=t[0],r=t[1];return[Ai((function(t){r(!0),a.unstable_next((function(){var n=Xa.suspense;Xa.suspense=void 0===e?null:e;try{r(!1),t()}finally{Xa.suspense=n}}))}),[e,n]),n]}},Li=null,Ri=null,ji=!1;function Mi(e,t){var n=$l(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Ui(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Vi(e){if(ji){var t=Ri;if(t){var n=t;if(!Ui(e,t)){if(!(t=ir(n.nextSibling))||!Ui(e,t))return e.effectTag=-1025&e.effectTag|2,ji=!1,void(Li=e);Mi(Li,n)}Li=e,Ri=ir(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,ji=!1,Li=e}}function zi(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Li=e}function Hi(e){if(e!==Li)return!1;if(!ji)return zi(e),ji=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!rr(t,e.memoizedProps))for(t=Ri;t;)Mi(e,t),t=ir(t.nextSibling);if(zi(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if(n===Jn){if(0===t){Ri=ir(e.nextSibling);break e}t--}else n!==Kn&&n!==Zn&&n!==Xn||t++}e=e.nextSibling}Ri=null}}else Ri=Li?ir(e.stateNode.nextSibling):null;return!0}function Bi(){Ri=Li=null,ji=!1}var Wi=D.ReactCurrentOwner,qi=!1;function $i(e,t,n,r){t.child=null===e?Ma(t,null,n,r):ja(t,e.child,n,r)}function Yi(e,t,n,r,o){n=n.render;var a=t.ref;return fa(t,o),r=hi(e,t,n,r,a,o),null===e||qi?(t.effectTag|=1,$i(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),cu(e,t,o))}function Gi(e,t,n,r,o,a){if(null===e){var i=n.type;return"function"!=typeof i||Yl(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ql(n.type,null,r,null,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,Qi(e,t,i,r,o,a))}return i=e.child,o<a&&(o=i.memoizedProps,(n=null!==(n=n.compare)?n:no)(o,r)&&e.ref===t.ref)?cu(e,t,a):(t.effectTag|=1,(e=Gl(i,r)).ref=t.ref,e.return=t,t.child=e)}function Qi(e,t,n,r,o,a){return null!==e&&no(e.memoizedProps,r)&&e.ref===t.ref&&(qi=!1,o<a)?cu(e,t,a):Ji(e,t,n,r,a)}function Ki(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Ji(e,t,n,r,o){var a=wo(n)?bo:vo.current;return a=Eo(t,a),fa(t,o),n=hi(e,t,n,r,a,o),null===e||qi?(t.effectTag|=1,$i(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),cu(e,t,o))}function Xi(e,t,n,r,o){if(wo(n)){var a=!0;Oo(t)}else a=!1;if(fa(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),Aa(t,n,r),Na(t,n,r,o),r=!0;else if(null===e){var i=t.stateNode,u=t.memoizedProps;i.props=u;var l=i.context,s=n.contextType;"object"==typeof s&&null!==s?s=pa(s):s=Eo(t,s=wo(n)?bo:vo.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(u!==r||l!==s)&&Ia(t,i,r,s),da=!1;var p=t.memoizedState;l=i.state=p;var d=t.updateQueue;null!==d&&(Sa(t,d,r,i,o),l=t.memoizedState),u!==r||p!==l||go.current||da?("function"==typeof c&&(xa(t,n,c,r),l=t.memoizedState),(u=da||Pa(t,n,u,r,p,l,s))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.effectTag|=4)):("function"==typeof i.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=l),i.props=r,i.state=l,i.context=s,r=u):("function"==typeof i.componentDidMount&&(t.effectTag|=4),r=!1)}else i=t.stateNode,u=t.memoizedProps,i.props=t.type===t.elementType?u:na(t.type,u),l=i.context,"object"==typeof(s=n.contextType)&&null!==s?s=pa(s):s=Eo(t,s=wo(n)?bo:vo.current),(f="function"==typeof(c=n.getDerivedStateFromProps)||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(u!==r||l!==s)&&Ia(t,i,r,s),da=!1,l=t.memoizedState,p=i.state=l,null!==(d=t.updateQueue)&&(Sa(t,d,r,i,o),p=t.memoizedState),u!==r||l!==p||go.current||da?("function"==typeof c&&(xa(t,n,c,r),p=t.memoizedState),(c=da||Pa(t,n,u,r,l,p,s))?(f||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,p,s),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,p,s)),"function"==typeof i.componentDidUpdate&&(t.effectTag|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof i.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof i.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=p),i.props=r,i.state=p,i.context=s,r=c):("function"!=typeof i.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof i.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),r=!1);return Zi(e,t,n,r,a,o)}function Zi(e,t,n,r,o,a){Ki(e,t);var i=0!=(64&t.effectTag);if(!r&&!i)return o&&xo(t,n,!1),cu(e,t,a);r=t.stateNode,Wi.current=t;var u=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&i?(t.child=ja(t,e.child,null,a),t.child=ja(t,null,u,a)):$i(e,t,u,a),t.memoizedState=r.state,o&&xo(t,n,!0),t.child}function eu(e){var t=e.stateNode;t.pendingContext?To(0,t.pendingContext,t.pendingContext!==t.context):t.context&&To(0,t.context,!1),Wa(e,t.containerInfo)}var tu,nu,ru,ou,au={dehydrated:null,retryTime:0};function iu(e,t,n){var r,o=t.mode,a=t.pendingProps,i=Ga.current,u=!1;if((r=0!=(64&t.effectTag))||(r=0!=(2&i)&&(null===e||null!==e.memoizedState)),r?(u=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===a.fallback||!0===a.unstable_avoidThisFallback||(i|=1),mo(Ga,1&i),null===e){if(void 0!==a.fallback&&Vi(t),u){if(u=a.fallback,(a=Kl(null,o,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,a.child=e;null!==e;)e.return=a,e=e.sibling;return(n=Kl(u,o,n,null)).return=t,a.sibling=n,t.memoizedState=au,t.child=a,n}return o=a.children,t.memoizedState=null,t.child=Ma(t,null,o,n)}if(null!==e.memoizedState){if(o=(e=e.child).sibling,u){if(a=a.fallback,(n=Gl(e,e.pendingProps)).return=t,0==(2&t.mode)&&(u=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=u;null!==u;)u.return=n,u=u.sibling;return(o=Gl(o,a,o.expirationTime)).return=t,n.sibling=o,n.childExpirationTime=0,t.memoizedState=au,t.child=n,o}return n=ja(t,e.child,a.children,n),t.memoizedState=null,t.child=n}if(e=e.child,u){if(u=a.fallback,(a=Kl(null,o,0,null)).return=t,a.child=e,null!==e&&(e.return=a),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,a.child=e;null!==e;)e.return=a,e=e.sibling;return(n=Kl(u,o,n,null)).return=t,a.sibling=n,n.effectTag|=2,a.childExpirationTime=0,t.memoizedState=au,t.child=a,n}return t.memoizedState=null,t.child=ja(t,e,a.children,n)}function uu(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),ca(e.return,t)}function lu(e,t,n,r,o,a){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,last:r,tail:n,tailExpiration:0,tailMode:o,lastEffect:a}:(i.isBackwards=t,i.rendering=null,i.last=r,i.tail=n,i.tailExpiration=0,i.tailMode=o,i.lastEffect=a)}function su(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if($i(e,t,r.children,n),0!=(2&(r=Ga.current)))r=1&r|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&uu(e,n);else if(19===e.tag)uu(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(mo(Ga,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===Qa(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),lu(t,!1,o,n,a,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Qa(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}lu(t,!0,n,null,a,t.lastEffect);break;case"together":lu(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function cu(e,t,n){null!==e&&(t.dependencies=e.dependencies);var r=t.expirationTime;if(0!==r&&_l(r),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=Gl(e=t.child,e.pendingProps,e.expirationTime),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Gl(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function fu(e){e.effectTag|=4}function pu(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function du(e){switch(e.tag){case 1:wo(e.type)&&So();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(qa(),ko(),0!=(64&(t=e.effectTag)))throw Error(i(285));return e.effectTag=-4097&t|64,e;case 5:return Ya(e),null;case 13:return ho(Ga),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return ho(Ga),null;case 4:return qa(),null;case 10:return sa(e),null;default:return null}}function hu(e,t){return{value:e,source:t,stack:X(t)}}tu=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},nu=function(){},ru=function(e,t,n,r,a){var i=e.memoizedProps;if(i!==r){var u,l,s=t.stateNode;switch(Ba(Va.current),e=null,n){case"input":i=Oe(s,i),r=Oe(s,r),e=[];break;case"option":i=Ne(s,i),r=Ne(s,r),e=[];break;case"select":i=o({},i,{value:void 0}),r=o({},r,{value:void 0}),e=[];break;case"textarea":i=Fe(s,i),r=Fe(s,r),e=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(s.onclick=Wn)}for(u in zn(n,r),n=null,i)if(!r.hasOwnProperty(u)&&i.hasOwnProperty(u)&&null!=i[u])if("style"===u)for(l in s=i[u])s.hasOwnProperty(l)&&(n||(n={}),n[l]="");else"dangerouslySetInnerHTML"!==u&&"children"!==u&&"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(d.hasOwnProperty(u)?e||(e=[]):(e=e||[]).push(u,null));for(u in r){var c=r[u];if(s=null!=i?i[u]:void 0,r.hasOwnProperty(u)&&c!==s&&(null!=c||null!=s))if("style"===u)if(s){for(l in s)!s.hasOwnProperty(l)||c&&c.hasOwnProperty(l)||(n||(n={}),n[l]="");for(l in c)c.hasOwnProperty(l)&&s[l]!==c[l]&&(n||(n={}),n[l]=c[l])}else n||(e||(e=[]),e.push(u,n)),n=c;else"dangerouslySetInnerHTML"===u?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(e=e||[]).push(u,""+c)):"children"===u?s===c||"string"!=typeof c&&"number"!=typeof c||(e=e||[]).push(u,""+c):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&(d.hasOwnProperty(u)?(null!=c&&Bn(a,u),e||s===c||(e=[])):(e=e||[]).push(u,c))}n&&(e=e||[]).push("style",n),a=e,(t.updateQueue=a)&&fu(t)}},ou=function(e,t,n,r){n!==r&&fu(t)};var mu="function"==typeof WeakSet?WeakSet:Set;function yu(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=X(n)),null!==n&&J(n.type),t=t.value,null!==e&&1===e.tag&&J(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function vu(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Vl(e,t)}else t.current=null}function gu(e,t){switch(t.tag){case 0:case 11:case 15:bu(2,0,t);break;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:na(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}break;case 3:case 5:case 6:case 4:case 17:break;default:throw Error(i(163))}}function bu(e,t,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var r=n=n.next;do{if(0!=(r.tag&e)){var o=r.destroy;r.destroy=void 0,void 0!==o&&o()}0!=(r.tag&t)&&(o=r.create,r.destroy=o()),r=r.next}while(r!==n)}}function Eu(e,t,n){switch("function"==typeof Wl&&Wl(t),t.tag){case 0:case 11:case 14:case 15:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e.next;Qo(97<n?97:n,(function(){var e=r;do{var n=e.destroy;if(void 0!==n){var o=t;try{n()}catch(e){Vl(o,e)}}e=e.next}while(e!==r)}))}break;case 1:vu(t),"function"==typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Vl(e,t)}}(t,n);break;case 5:vu(t);break;case 4:Tu(e,t,n)}}function wu(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,null!==t&&wu(t)}function Su(e){return 5===e.tag||3===e.tag||4===e.tag}function ku(e){e:{for(var t=e.return;null!==t;){if(Su(t)){var n=t;break e}t=t.return}throw Error(i(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(i(161))}16&n.effectTag&&(Be(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||Su(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){var a=5===o.tag||6===o.tag;if(a){var u=a?o.stateNode:o.stateNode.instance;if(n)if(r){var l=u;u=n,8===(a=t).nodeType?a.parentNode.insertBefore(l,u):a.insertBefore(l,u)}else t.insertBefore(u,n);else r?(8===(l=t).nodeType?(a=l.parentNode).insertBefore(u,l):(a=l).appendChild(u),null!=(l=l._reactRootContainer)||null!==a.onclick||(a.onclick=Wn)):t.appendChild(u)}else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}}function Tu(e,t,n){for(var r,o,a=t,u=!1;;){if(!u){u=a.return;e:for(;;){if(null===u)throw Error(i(160));switch(r=u.stateNode,u.tag){case 5:o=!1;break e;case 3:case 4:r=r.containerInfo,o=!0;break e}u=u.return}u=!0}if(5===a.tag||6===a.tag){e:for(var l=e,s=a,c=n,f=s;;)if(Eu(l,f,c),null!==f.child&&4!==f.tag)f.child.return=f,f=f.child;else{if(f===s)break;for(;null===f.sibling;){if(null===f.return||f.return===s)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}o?(l=r,s=a.stateNode,8===l.nodeType?l.parentNode.removeChild(s):l.removeChild(s)):r.removeChild(a.stateNode)}else if(4===a.tag){if(null!==a.child){r=a.stateNode.containerInfo,o=!0,a.child.return=a,a=a.child;continue}}else if(Eu(e,a,n),null!==a.child){a.child.return=a,a=a.child;continue}if(a===t)break;for(;null===a.sibling;){if(null===a.return||a.return===t)return;4===(a=a.return).tag&&(u=!1)}a.sibling.return=a.return,a=a.sibling}}function Cu(e,t){switch(t.tag){case 0:case 11:case 14:case 15:bu(4,8,t);break;case 1:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,o=null!==e?e.memoizedProps:r;e=t.type;var a=t.updateQueue;if(t.updateQueue=null,null!==a){for(n[cr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&_e(n,r),Hn(e,o),t=Hn(e,r),o=0;o<a.length;o+=2){var u=a[o],l=a[o+1];"style"===u?Un(n,l):"dangerouslySetInnerHTML"===u?He(n,l):"children"===u?Be(n,l):Se(n,u,l,t)}switch(e){case"input":Pe(n,r);break;case"textarea":Re(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?De(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?De(n,!!r.multiple,r.defaultValue,!0):De(n,!!r.multiple,r.multiple?[]:"",!1))}}}break;case 6:if(null===t.stateNode)throw Error(i(162));t.stateNode.nodeValue=t.memoizedProps;break;case 3:(t=t.stateNode).hydrate&&(t.hydrate=!1,Ct(t.containerInfo));break;case 12:break;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,tl=$o()),null!==n)e:for(e=n;;){if(5===e.tag)a=e.stateNode,r?"function"==typeof(a=a.style).setProperty?a.setProperty("display","none","important"):a.display="none":(a=e.stateNode,o=null!=(o=e.memoizedProps.style)&&o.hasOwnProperty("display")?o.display:null,a.style.display=Mn("display",o));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(a=e.child.sibling).return=e,e=a;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break e;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}Ou(t);break;case 19:Ou(t);break;case 17:case 20:case 21:break;default:throw Error(i(163))}}function Ou(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new mu),t.forEach((function(t){var r=Hl.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var xu="function"==typeof WeakMap?WeakMap:Map;function _u(e,t,n){(n=ya(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){ol||(ol=!0,al=r),yu(e,t)},n}function Pu(e,t,n){(n=ya(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return yu(e,t),r(o)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===il?il=new Set([this]):il.add(this),yu(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var Au,Iu=Math.ceil,Nu=D.ReactCurrentDispatcher,Du=D.ReactCurrentOwner,Fu=0,Lu=8,Ru=16,ju=32,Mu=0,Uu=1,Vu=2,zu=3,Hu=4,Bu=5,Wu=Fu,qu=null,$u=null,Yu=0,Gu=Mu,Qu=null,Ku=1073741823,Ju=1073741823,Xu=null,Zu=0,el=!1,tl=0,nl=500,rl=null,ol=!1,al=null,il=null,ul=!1,ll=null,sl=90,cl=null,fl=0,pl=null,dl=0;function hl(){return(Wu&(Ru|ju))!==Fu?1073741821-($o()/10|0):0!==dl?dl:dl=1073741821-($o()/10|0)}function ml(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=Yo();if(0==(4&t))return 99===r?1073741823:1073741822;if((Wu&Ru)!==Fu)return Yu;if(null!==n)e=ta(e,0|n.timeoutMs||5e3,250);else switch(r){case 99:e=1073741823;break;case 98:e=ta(e,150,100);break;case 97:case 96:e=ta(e,5e3,250);break;case 95:e=2;break;default:throw Error(i(326))}return null!==qu&&e===Yu&&--e,e}function yl(e,t){if(50<fl)throw fl=0,pl=null,Error(i(185));if(null!==(e=vl(e,t))){var n=Yo();1073741823===t?(Wu&Lu)!==Fu&&(Wu&(Ru|ju))===Fu?wl(e):(bl(e),Wu===Fu&&Xo()):bl(e),(4&Wu)===Fu||98!==n&&99!==n||(null===cl?cl=new Map([[e,t]]):(void 0===(n=cl.get(e))||n>t)&&cl.set(e,t))}}function vl(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,o=null;if(null===r&&3===e.tag)o=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){o=r.stateNode;break}r=r.return}return null!==o&&(qu===o&&(_l(t),Gu===Hu&&ts(o,Yu)),ns(o,t)),o}function gl(e){var t=e.lastExpiredTime;return 0!==t?t:es(e,t=e.firstPendingTime)?(t=e.lastPingedTime)>(e=e.nextKnownPendingLevel)?t:e:t}function bl(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=Jo(wl.bind(null,e));else{var t=gl(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var r=hl();if(1073741823===t?r=99:1===t||2===t?r=95:r=0>=(r=10*(1073741821-t)-10*(1073741821-r))?99:250>=r?98:5250>=r?97:95,null!==n){var o=e.callbackPriority;if(e.callbackExpirationTime===t&&o>=r)return;n!==Vo&&Ao(n)}e.callbackExpirationTime=t,e.callbackPriority=r,t=1073741823===t?Jo(wl.bind(null,e)):Ko(r,El.bind(null,e),{timeout:10*(1073741821-t)-$o()}),e.callbackNode=t}}}function El(e,t){if(dl=0,t)return rs(e,t=hl()),bl(e),null;var n=gl(e);if(0!==n){if(t=e.callbackNode,(Wu&(Ru|ju))!==Fu)throw Error(i(327));if(jl(),e===qu&&n===Yu||Tl(e,n),null!==$u){var r=Wu;Wu|=Ru;for(var o=Ol();;)try{Al();break}catch(t){Cl(e,t)}if(ua(),Wu=r,Nu.current=o,Gu===Uu)throw t=Qu,Tl(e,n),ts(e,n),bl(e),t;if(null===$u)switch(o=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,r=Gu,qu=null,r){case Mu:case Uu:throw Error(i(345));case Vu:rs(e,2<n?2:n);break;case zu:if(ts(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=Dl(o)),1073741823===Ku&&10<(o=tl+nl-$o())){if(el){var a=e.lastPingedTime;if(0===a||a>=n){e.lastPingedTime=n,Tl(e,n);break}}if(0!==(a=gl(e))&&a!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}e.timeoutHandle=or(Fl.bind(null,e),o);break}Fl(e);break;case Hu:if(ts(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=Dl(o)),el&&(0===(o=e.lastPingedTime)||o>=n)){e.lastPingedTime=n,Tl(e,n);break}if(0!==(o=gl(e))&&o!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}if(1073741823!==Ju?r=10*(1073741821-Ju)-$o():1073741823===Ku?r=0:(r=10*(1073741821-Ku)-5e3,0>(r=(o=$o())-r)&&(r=0),(n=10*(1073741821-n)-o)<(r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Iu(r/1960))-r)&&(r=n)),10<r){e.timeoutHandle=or(Fl.bind(null,e),r);break}Fl(e);break;case Bu:if(1073741823!==Ku&&null!==Xu){a=Ku;var u=Xu;if(0>=(r=0|u.busyMinDurationMs)?r=0:(o=0|u.busyDelayMs,r=(a=$o()-(10*(1073741821-a)-(0|u.timeoutMs||5e3)))<=o?0:o+r-a),10<r){ts(e,n),e.timeoutHandle=or(Fl.bind(null,e),r);break}}Fl(e);break;default:throw Error(i(329))}if(bl(e),e.callbackNode===t)return El.bind(null,e)}}return null}function wl(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,e.finishedExpirationTime===t)Fl(e);else{if((Wu&(Ru|ju))!==Fu)throw Error(i(327));if(jl(),e===qu&&t===Yu||Tl(e,t),null!==$u){var n=Wu;Wu|=Ru;for(var r=Ol();;)try{Pl();break}catch(t){Cl(e,t)}if(ua(),Wu=n,Nu.current=r,Gu===Uu)throw n=Qu,Tl(e,t),ts(e,t),bl(e),n;if(null!==$u)throw Error(i(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,qu=null,Fl(e),bl(e)}}return null}function Sl(e,t){var n=Wu;Wu|=1;try{return e(t)}finally{(Wu=n)===Fu&&Xo()}}function kl(e,t){var n=Wu;Wu&=-2,Wu|=Lu;try{return e(t)}finally{(Wu=n)===Fu&&Xo()}}function Tl(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,ar(n)),null!==$u)for(n=$u.return;null!==n;){var r=n;switch(r.tag){case 1:var o=r.type.childContextTypes;null!=o&&So();break;case 3:qa(),ko();break;case 5:Ya(r);break;case 4:qa();break;case 13:case 19:ho(Ga);break;case 10:sa(r)}n=n.return}qu=e,$u=Gl(e.current,null),Yu=t,Gu=Mu,Qu=null,Ju=Ku=1073741823,Xu=null,Zu=0,el=!1}function Cl(e,t){for(;;){try{if(ua(),mi(),null===$u||null===$u.return)return Gu=Uu,Qu=t,null;e:{var n=e,r=$u.return,o=$u,a=t;if(t=Yu,o.effectTag|=2048,o.firstEffect=o.lastEffect=null,null!==a&&"object"==typeof a&&"function"==typeof a.then){var i=a,u=0!=(1&Ga.current),l=r;do{var s;if(s=13===l.tag){var c=l.memoizedState;if(null!==c)s=null!==c.dehydrated;else{var f=l.memoizedProps;s=void 0!==f.fallback&&(!0!==f.unstable_avoidThisFallback||!u)}}if(s){var p=l.updateQueue;if(null===p){var d=new Set;d.add(i),l.updateQueue=d}else p.add(i);if(0==(2&l.mode)){if(l.effectTag|=64,o.effectTag&=-2981,1===o.tag)if(null===o.alternate)o.tag=17;else{var h=ya(1073741823,null);h.tag=2,ga(o,h)}o.expirationTime=1073741823;break e}a=void 0,o=t;var m=n.pingCache;if(null===m?(m=n.pingCache=new xu,a=new Set,m.set(i,a)):void 0===(a=m.get(i))&&(a=new Set,m.set(i,a)),!a.has(o)){a.add(o);var y=zl.bind(null,n,i,o);i.then(y,y)}l.effectTag|=4096,l.expirationTime=t;break e}l=l.return}while(null!==l);a=Error((J(o.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+X(o))}Gu!==Bu&&(Gu=Vu),a=hu(a,o),l=r;do{switch(l.tag){case 3:i=a,l.effectTag|=4096,l.expirationTime=t,ba(l,_u(l,i,t));break e;case 1:i=a;var v=l.type,g=l.stateNode;if(0==(64&l.effectTag)&&("function"==typeof v.getDerivedStateFromError||null!==g&&"function"==typeof g.componentDidCatch&&(null===il||!il.has(g)))){l.effectTag|=4096,l.expirationTime=t,ba(l,Pu(l,i,t));break e}}l=l.return}while(null!==l)}$u=Nl($u)}catch(e){t=e;continue}break}}function Ol(){var e=Nu.current;return Nu.current=Ni,null===e?Ni:e}function xl(e,t){e<Ku&&2<e&&(Ku=e),null!==t&&e<Ju&&2<e&&(Ju=e,Xu=t)}function _l(e){e>Zu&&(Zu=e)}function Pl(){for(;null!==$u;)$u=Il($u)}function Al(){for(;null!==$u&&!Io();)$u=Il($u)}function Il(e){var t=Au(e.alternate,e,Yu);return e.memoizedProps=e.pendingProps,null===t&&(t=Nl(e)),Du.current=null,t}function Nl(e){$u=e;do{var t=$u.alternate;if(e=$u.return,0==(2048&$u.effectTag)){e:{var n=t,r=Yu,a=(t=$u).pendingProps;switch(t.tag){case 2:case 16:break;case 15:case 0:break;case 1:wo(t.type)&&So();break;case 3:qa(),ko(),(a=t.stateNode).pendingContext&&(a.context=a.pendingContext,a.pendingContext=null),(null===n||null===n.child)&&Hi(t)&&fu(t),nu(t);break;case 5:Ya(t),r=Ba(Ha.current);var u=t.type;if(null!==n&&null!=t.stateNode)ru(n,t,u,a,r),n.ref!==t.ref&&(t.effectTag|=128);else if(a){var l=Ba(Va.current);if(Hi(t)){var s=(a=t).stateNode;n=a.type;var c=a.memoizedProps,f=r;switch(s[sr]=a,s[cr]=c,u=void 0,r=s,n){case"iframe":case"object":case"embed":Cn("load",r);break;case"video":case"audio":for(s=0;s<Ze.length;s++)Cn(Ze[s],r);break;case"source":Cn("error",r);break;case"img":case"image":case"link":Cn("error",r),Cn("load",r);break;case"form":Cn("reset",r),Cn("submit",r);break;case"details":Cn("toggle",r);break;case"input":xe(r,c),Cn("invalid",r),Bn(f,"onChange");break;case"select":r._wrapperState={wasMultiple:!!c.multiple},Cn("invalid",r),Bn(f,"onChange");break;case"textarea":Le(r,c),Cn("invalid",r),Bn(f,"onChange")}for(u in zn(n,c),s=null,c)c.hasOwnProperty(u)&&(l=c[u],"children"===u?"string"==typeof l?r.textContent!==l&&(s=["children",l]):"number"==typeof l&&r.textContent!==""+l&&(s=["children",""+l]):d.hasOwnProperty(u)&&null!=l&&Bn(f,u));switch(n){case"input":Te(r),Ae(r,c,!0);break;case"textarea":Te(r),je(r);break;case"select":case"option":break;default:"function"==typeof c.onClick&&(r.onclick=Wn)}u=s,a.updateQueue=u,(a=null!==u)&&fu(t)}else{n=t,f=u,c=a,s=9===r.nodeType?r:r.ownerDocument,l===Me.html&&(l=Ue(f)),l===Me.html?"script"===f?((c=s.createElement("div")).innerHTML="<script><\/script>",s=c.removeChild(c.firstChild)):"string"==typeof c.is?s=s.createElement(f,{is:c.is}):(s=s.createElement(f),"select"===f&&(f=s,c.multiple?f.multiple=!0:c.size&&(f.size=c.size))):s=s.createElementNS(l,f),(c=s)[sr]=n,c[cr]=a,tu(c,t,!1,!1),t.stateNode=c;var p=r,h=Hn(f=u,n=a);switch(f){case"iframe":case"object":case"embed":Cn("load",c),r=n;break;case"video":case"audio":for(r=0;r<Ze.length;r++)Cn(Ze[r],c);r=n;break;case"source":Cn("error",c),r=n;break;case"img":case"image":case"link":Cn("error",c),Cn("load",c),r=n;break;case"form":Cn("reset",c),Cn("submit",c),r=n;break;case"details":Cn("toggle",c),r=n;break;case"input":xe(c,n),r=Oe(c,n),Cn("invalid",c),Bn(p,"onChange");break;case"option":r=Ne(c,n);break;case"select":c._wrapperState={wasMultiple:!!n.multiple},r=o({},n,{value:void 0}),Cn("invalid",c),Bn(p,"onChange");break;case"textarea":Le(c,n),r=Fe(c,n),Cn("invalid",c),Bn(p,"onChange");break;default:r=n}zn(f,r),s=void 0,l=f;var m=c,y=r;for(s in y)if(y.hasOwnProperty(s)){var v=y[s];"style"===s?Un(m,v):"dangerouslySetInnerHTML"===s?null!=(v=v?v.__html:void 0)&&He(m,v):"children"===s?"string"==typeof v?("textarea"!==l||""!==v)&&Be(m,v):"number"==typeof v&&Be(m,""+v):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(d.hasOwnProperty(s)?null!=v&&Bn(p,s):null!=v&&Se(m,s,v,h))}switch(f){case"input":Te(c),Ae(c,n,!1);break;case"textarea":Te(c),je(c);break;case"option":null!=n.value&&c.setAttribute("value",""+we(n.value));break;case"select":(r=c).multiple=!!n.multiple,null!=(c=n.value)?De(r,!!n.multiple,c,!1):null!=n.defaultValue&&De(r,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof r.onClick&&(c.onclick=Wn)}(a=nr(u,a))&&fu(t)}null!==t.ref&&(t.effectTag|=128)}else if(null===t.stateNode)throw Error(i(166));break;case 6:if(n&&null!=t.stateNode)ou(n,t,n.memoizedProps,a);else{if("string"!=typeof a&&null===t.stateNode)throw Error(i(166));r=Ba(Ha.current),Ba(Va.current),Hi(t)?(u=(a=t).stateNode,r=a.memoizedProps,u[sr]=a,(a=u.nodeValue!==r)&&fu(t)):(u=t,(a=(9===r.nodeType?r:r.ownerDocument).createTextNode(a))[sr]=u,t.stateNode=a)}break;case 11:break;case 13:if(ho(Ga),a=t.memoizedState,0!=(64&t.effectTag)){t.expirationTime=r;break e}a=null!==a,u=!1,null===n?void 0!==t.memoizedProps.fallback&&Hi(t):(u=null!==(r=n.memoizedState),a||null===r||null!==(r=n.child.sibling)&&(null!==(c=t.firstEffect)?(t.firstEffect=r,r.nextEffect=c):(t.firstEffect=t.lastEffect=r,r.nextEffect=null),r.effectTag=8)),a&&!u&&0!=(2&t.mode)&&(null===n&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Ga.current)?Gu===Mu&&(Gu=zu):(Gu!==Mu&&Gu!==zu||(Gu=Hu),0!==Zu&&null!==qu&&(ts(qu,Yu),ns(qu,Zu)))),(a||u)&&(t.effectTag|=4);break;case 7:case 8:case 12:break;case 4:qa(),nu(t);break;case 10:sa(t);break;case 9:case 14:break;case 17:wo(t.type)&&So();break;case 19:if(ho(Ga),null===(a=t.memoizedState))break;if(u=0!=(64&t.effectTag),null===(c=a.rendering)){if(u)pu(a,!1);else if(Gu!==Mu||null!==n&&0!=(64&n.effectTag))for(n=t.child;null!==n;){if(null!==(c=Qa(n))){for(t.effectTag|=64,pu(a,!1),null!==(u=c.updateQueue)&&(t.updateQueue=u,t.effectTag|=4),null===a.lastEffect&&(t.firstEffect=null),t.lastEffect=a.lastEffect,a=r,u=t.child;null!==u;)n=a,(r=u).effectTag&=2,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null,null===(c=r.alternate)?(r.childExpirationTime=0,r.expirationTime=n,r.child=null,r.memoizedProps=null,r.memoizedState=null,r.updateQueue=null,r.dependencies=null):(r.childExpirationTime=c.childExpirationTime,r.expirationTime=c.expirationTime,r.child=c.child,r.memoizedProps=c.memoizedProps,r.memoizedState=c.memoizedState,r.updateQueue=c.updateQueue,n=c.dependencies,r.dependencies=null===n?null:{expirationTime:n.expirationTime,firstContext:n.firstContext,responders:n.responders}),u=u.sibling;mo(Ga,1&Ga.current|2),t=t.child;break e}n=n.sibling}}else{if(!u)if(null!==(n=Qa(c))){if(t.effectTag|=64,u=!0,null!==(r=n.updateQueue)&&(t.updateQueue=r,t.effectTag|=4),pu(a,!0),null===a.tail&&"hidden"===a.tailMode){null!==(t=t.lastEffect=a.lastEffect)&&(t.nextEffect=null);break}}else $o()>a.tailExpiration&&1<r&&(t.effectTag|=64,u=!0,pu(a,!1),t.expirationTime=t.childExpirationTime=r-1);a.isBackwards?(c.sibling=t.child,t.child=c):(null!==(r=a.last)?r.sibling=c:t.child=c,a.last=c)}if(null!==a.tail){0===a.tailExpiration&&(a.tailExpiration=$o()+500),r=a.tail,a.rendering=r,a.tail=r.sibling,a.lastEffect=t.lastEffect,r.sibling=null,a=Ga.current,mo(Ga,a=u?1&a|2:1&a),t=r;break e}break;case 20:case 21:break;default:throw Error(i(156,t.tag))}t=null}if(a=$u,1===Yu||1!==a.childExpirationTime){for(u=0,r=a.child;null!==r;)(n=r.expirationTime)>u&&(u=n),(c=r.childExpirationTime)>u&&(u=c),r=r.sibling;a.childExpirationTime=u}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=$u.firstEffect),null!==$u.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=$u.firstEffect),e.lastEffect=$u.lastEffect),1<$u.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=$u:e.firstEffect=$u,e.lastEffect=$u))}else{if(null!==(t=du($u)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=$u.sibling))return t;$u=e}while(null!==$u);return Gu===Mu&&(Gu=Bu),null}function Dl(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function Fl(e){var t=Yo();return Qo(99,Ll.bind(null,e,t)),null}function Ll(e,t){if(jl(),(Wu&(Ru|ju))!==Fu)throw Error(i(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(i(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var o=Dl(n);if(e.firstPendingTime=o,r<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:r<=e.firstSuspendedTime&&(e.firstSuspendedTime=r-1),r<=e.lastPingedTime&&(e.lastPingedTime=0),r<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===qu&&($u=qu=null,Yu=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,o=n.firstEffect):o=n:o=n.firstEffect,null!==o){var a=Wu;Wu|=ju,Du.current=null,er=Tn;var u=Gn();if(Qn(u)){if("selectionStart"in u)var l={start:u.selectionStart,end:u.selectionEnd};else e:{var s=(l=(l=u.ownerDocument)&&l.defaultView||window).getSelection&&l.getSelection();if(s&&0!==s.rangeCount){l=s.anchorNode;var c=s.anchorOffset,f=s.focusNode;s=s.focusOffset;try{l.nodeType,f.nodeType}catch(e){l=null;break e}var p=0,d=-1,h=-1,m=0,y=0,v=u,g=null;t:for(;;){for(var b;v!==l||0!==c&&3!==v.nodeType||(d=p+c),v!==f||0!==s&&3!==v.nodeType||(h=p+s),3===v.nodeType&&(p+=v.nodeValue.length),null!==(b=v.firstChild);)g=v,v=b;for(;;){if(v===u)break t;if(g===l&&++m===c&&(d=p),g===f&&++y===s&&(h=p),null!==(b=v.nextSibling))break;g=(v=g).parentNode}v=b}l=-1===d||-1===h?null:{start:d,end:h}}else l=null}l=l||{start:0,end:0}}else l=null;tr={focusedElem:u,selectionRange:l},Tn=!1,rl=o;do{try{Rl()}catch(e){if(null===rl)throw Error(i(330));Vl(rl,e),rl=rl.nextEffect}}while(null!==rl);rl=o;do{try{for(u=e,l=t;null!==rl;){var E=rl.effectTag;if(16&E&&Be(rl.stateNode,""),128&E){var w=rl.alternate;if(null!==w){var S=w.ref;null!==S&&("function"==typeof S?S(null):S.current=null)}}switch(1038&E){case 2:ku(rl),rl.effectTag&=-3;break;case 6:ku(rl),rl.effectTag&=-3,Cu(rl.alternate,rl);break;case 1024:rl.effectTag&=-1025;break;case 1028:rl.effectTag&=-1025,Cu(rl.alternate,rl);break;case 4:Cu(rl.alternate,rl);break;case 8:Tu(u,c=rl,l),wu(c)}rl=rl.nextEffect}}catch(e){if(null===rl)throw Error(i(330));Vl(rl,e),rl=rl.nextEffect}}while(null!==rl);if(S=tr,w=Gn(),E=S.focusedElem,l=S.selectionRange,w!==E&&E&&E.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(E.ownerDocument.documentElement,E)){null!==l&&Qn(E)&&(w=l.start,void 0===(S=l.end)&&(S=w),"selectionStart"in E?(E.selectionStart=w,E.selectionEnd=Math.min(S,E.value.length)):(S=(w=E.ownerDocument||document)&&w.defaultView||window).getSelection&&(S=S.getSelection(),c=E.textContent.length,u=Math.min(l.start,c),l=void 0===l.end?u:Math.min(l.end,c),!S.extend&&u>l&&(c=l,l=u,u=c),c=Yn(E,u),f=Yn(E,l),c&&f&&(1!==S.rangeCount||S.anchorNode!==c.node||S.anchorOffset!==c.offset||S.focusNode!==f.node||S.focusOffset!==f.offset)&&((w=w.createRange()).setStart(c.node,c.offset),S.removeAllRanges(),u>l?(S.addRange(w),S.extend(f.node,f.offset)):(w.setEnd(f.node,f.offset),S.addRange(w))))),w=[];for(S=E;S=S.parentNode;)1===S.nodeType&&w.push({element:S,left:S.scrollLeft,top:S.scrollTop});for("function"==typeof E.focus&&E.focus(),E=0;E<w.length;E++)(S=w[E]).element.scrollLeft=S.left,S.element.scrollTop=S.top}tr=null,Tn=!!er,er=null,e.current=n,rl=o;do{try{for(E=r;null!==rl;){var k=rl.effectTag;if(36&k){var T=rl.alternate;switch(S=E,(w=rl).tag){case 0:case 11:case 15:bu(16,32,w);break;case 1:var C=w.stateNode;if(4&w.effectTag)if(null===T)C.componentDidMount();else{var O=w.elementType===w.type?T.memoizedProps:na(w.type,T.memoizedProps);C.componentDidUpdate(O,T.memoizedState,C.__reactInternalSnapshotBeforeUpdate)}var x=w.updateQueue;null!==x&&ka(0,x,C);break;case 3:var _=w.updateQueue;if(null!==_){if(u=null,null!==w.child)switch(w.child.tag){case 5:u=w.child.stateNode;break;case 1:u=w.child.stateNode}ka(0,_,u)}break;case 5:var P=w.stateNode;null===T&&4&w.effectTag&&nr(w.type,w.memoizedProps)&&P.focus();break;case 6:case 4:case 12:break;case 13:if(null===w.memoizedState){var A=w.alternate;if(null!==A){var I=A.memoizedState;if(null!==I){var N=I.dehydrated;null!==N&&Ct(N)}}}break;case 19:case 17:case 20:case 21:break;default:throw Error(i(163))}}if(128&k){w=void 0;var D=rl.ref;if(null!==D){var F=rl.stateNode;switch(rl.tag){case 5:w=F;break;default:w=F}"function"==typeof D?D(w):D.current=w}}rl=rl.nextEffect}}catch(e){if(null===rl)throw Error(i(330));Vl(rl,e),rl=rl.nextEffect}}while(null!==rl);rl=null,zo(),Wu=a}else e.current=n;if(ul)ul=!1,ll=e,sl=t;else for(rl=o;null!==rl;)t=rl.nextEffect,rl.nextEffect=null,rl=t;if(0===(t=e.firstPendingTime)&&(il=null),1073741823===t?e===pl?fl++:(fl=0,pl=e):fl=0,"function"==typeof Bl&&Bl(n.stateNode,r),bl(e),ol)throw ol=!1,e=al,al=null,e;return(Wu&Lu)!==Fu?null:(Xo(),null)}function Rl(){for(;null!==rl;){var e=rl.effectTag;0!=(256&e)&&gu(rl.alternate,rl),0==(512&e)||ul||(ul=!0,Ko(97,(function(){return jl(),null}))),rl=rl.nextEffect}}function jl(){if(90!==sl){var e=97<sl?97:sl;return sl=90,Qo(e,Ml)}}function Ml(){if(null===ll)return!1;var e=ll;if(ll=null,(Wu&(Ru|ju))!==Fu)throw Error(i(331));var t=Wu;for(Wu|=ju,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:bu(128,0,n),bu(0,64,n)}}catch(t){if(null===e)throw Error(i(330));Vl(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return Wu=t,Xo(),!0}function Ul(e,t,n){ga(e,t=_u(e,t=hu(n,t),1073741823)),null!==(e=vl(e,1073741823))&&bl(e)}function Vl(e,t){if(3===e.tag)Ul(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Ul(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===il||!il.has(r))){ga(n,e=Pu(n,e=hu(t,e),1073741823)),null!==(n=vl(n,1073741823))&&bl(n);break}}n=n.return}}function zl(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),qu===e&&Yu===n?Gu===Hu||Gu===zu&&1073741823===Ku&&$o()-tl<nl?Tl(e,Yu):el=!0:es(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,e.finishedExpirationTime===n&&(e.finishedExpirationTime=0,e.finishedWork=null),bl(e)))}function Hl(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(t=ml(t=hl(),e,null)),null!==(e=vl(e,t))&&bl(e)}Au=function(e,t,n){var r=t.expirationTime;if(null!==e){var o=t.pendingProps;if(e.memoizedProps!==o||go.current)qi=!0;else{if(r<n){switch(qi=!1,t.tag){case 3:eu(t),Bi();break;case 5:if($a(t),4&t.mode&&1!==n&&o.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:wo(t.type)&&Oo(t);break;case 4:Wa(t,t.stateNode.containerInfo);break;case 10:la(t,t.memoizedProps.value);break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?iu(e,t,n):(mo(Ga,1&Ga.current),null!==(t=cu(e,t,n))?t.sibling:null);mo(Ga,1&Ga.current);break;case 19:if(r=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(r)return su(e,t,n);t.effectTag|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null),mo(Ga,Ga.current),!r)return null}return cu(e,t,n)}qi=!1}}else qi=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,o=Eo(t,vo.current),fa(t,n),o=hi(null,t,r,e,o,n),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,mi(),wo(r)){var a=!0;Oo(t)}else a=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null;var u=r.getDerivedStateFromProps;"function"==typeof u&&xa(t,r,u,e),o.updater=_a,t.stateNode=o,o._reactInternalFiber=t,Na(t,r,e,n),t=Zi(null,t,r,!0,a,n)}else t.tag=0,$i(null,t,o,n),t=t.child;return t;case 16:if(o=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(o),1!==o._status)throw o._result;switch(o=o._result,t.type=o,a=t.tag=function(e){if("function"==typeof e)return Yl(e)?1:0;if(null!=e){if((e=e.$$typeof)===W)return 11;if(e===Y)return 14}return 2}(o),e=na(o,e),a){case 0:t=Ji(null,t,o,e,n);break;case 1:t=Xi(null,t,o,e,n);break;case 11:t=Yi(null,t,o,e,n);break;case 14:t=Gi(null,t,o,na(o.type,e),r,n);break;default:throw Error(i(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,Ji(e,t,r,o=t.elementType===r?o:na(r,o),n);case 1:return r=t.type,o=t.pendingProps,Xi(e,t,r,o=t.elementType===r?o:na(r,o),n);case 3:if(eu(t),null===(r=t.updateQueue))throw Error(i(282));if(o=null!==(o=t.memoizedState)?o.element:null,Sa(t,r,t.pendingProps,null,n),(r=t.memoizedState.element)===o)Bi(),t=cu(e,t,n);else{if((o=t.stateNode.hydrate)&&(Ri=ir(t.stateNode.containerInfo.firstChild),Li=t,o=ji=!0),o)for(n=Ma(t,null,r,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else $i(e,t,r,n),Bi();t=t.child}return t;case 5:return $a(t),null===e&&Vi(t),r=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,u=o.children,rr(r,o)?u=null:null!==a&&rr(r,a)&&(t.effectTag|=16),Ki(e,t),4&t.mode&&1!==n&&o.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):($i(e,t,u,n),t=t.child),t;case 6:return null===e&&Vi(t),null;case 13:return iu(e,t,n);case 4:return Wa(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=ja(t,null,r,n):$i(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Yi(e,t,r,o=t.elementType===r?o:na(r,o),n);case 7:return $i(e,t,t.pendingProps,n),t.child;case 8:case 12:return $i(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,u=t.memoizedProps,la(t,a=o.value),null!==u){var l=u.value;if(0===(a=eo(l,a)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,a):1073741823))){if(u.children===o.children&&!go.current){t=cu(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var s=l.dependencies;if(null!==s){u=l.child;for(var c=s.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&a)){1===l.tag&&((c=ya(n,null)).tag=2,ga(l,c)),l.expirationTime<n&&(l.expirationTime=n),null!==(c=l.alternate)&&c.expirationTime<n&&(c.expirationTime=n),ca(l.return,n),s.expirationTime<n&&(s.expirationTime=n);break}c=c.next}}else u=10===l.tag&&l.type===t.type?null:l.child;if(null!==u)u.return=l;else for(u=l;null!==u;){if(u===t){u=null;break}if(null!==(l=u.sibling)){l.return=u.return,u=l;break}u=u.return}l=u}}$i(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(a=t.pendingProps).children,fa(t,n),r=r(o=pa(o,a.unstable_observedBits)),t.effectTag|=1,$i(e,t,r,n),t.child;case 14:return a=na(o=t.type,t.pendingProps),Gi(e,t,o,a=na(o.type,a),r,n);case 15:return Qi(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:na(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,wo(r)?(e=!0,Oo(t)):e=!1,fa(t,n),Aa(t,r,o),Na(t,r,o,n),Zi(null,t,r,!0,e,n);case 19:return su(e,t,n)}throw Error(i(156,t.tag))};var Bl=null,Wl=null;function ql(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function $l(e,t,n,r){return new ql(e,t,n,r)}function Yl(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Gl(e,t){var n=e.alternate;return null===n?((n=$l(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ql(e,t,n,r,o,a){var u=2;if(r=e,"function"==typeof e)Yl(e)&&(u=1);else if("string"==typeof e)u=5;else e:switch(e){case M:return Kl(n.children,o,a,t);case B:u=8,o|=7;break;case U:u=8,o|=1;break;case V:return(e=$l(12,n,t,8|o)).elementType=V,e.type=V,e.expirationTime=a,e;case q:return(e=$l(13,n,t,o)).type=q,e.elementType=q,e.expirationTime=a,e;case $:return(e=$l(19,n,t,o)).elementType=$,e.expirationTime=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case z:u=10;break e;case H:u=9;break e;case W:u=11;break e;case Y:u=14;break e;case G:u=16,r=null;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=$l(u,n,t,o)).elementType=e,t.type=r,t.expirationTime=a,t}function Kl(e,t,n,r){return(e=$l(7,e,r,t)).expirationTime=n,e}function Jl(e,t,n){return(e=$l(6,e,null,t)).expirationTime=n,e}function Xl(e,t,n){return(t=$l(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Zl(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function es(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function ts(e,t){var n=e.firstSuspendedTime,r=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(r>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function ns(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function rs(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function os(e,t,n,r){var o=t.current,a=hl(),u=Ca.suspense;a=ml(a,o,u);e:if(n){t:{if(et(n=n._reactInternalFiber)!==n||1!==n.tag)throw Error(i(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(wo(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);throw Error(i(171))}if(1===n.tag){var s=n.type;if(wo(s)){n=Co(n,s,l);break e}}n=l}else n=yo;return null===t.context?t.context=n:t.pendingContext=n,(t=ya(a,u)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),ga(o,t),yl(o,a),a}function as(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function is(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function us(e,t){is(e,t),(e=e.alternate)&&is(e,t)}function ls(e,t,n){var r=new Zl(e,t,n=null!=n&&!0===n.hydrate),o=$l(3,null,null,2===t?7:1===t?3:0);r.current=o,o.stateNode=r,e[fr]=r.current,n&&0!==t&&function(e){var t=Fn(e);mt.forEach((function(n){Ln(n,e,t)})),yt.forEach((function(n){Ln(n,e,t)}))}(9===e.nodeType?e:e.ownerDocument),this._internalRoot=r}function ss(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function cs(e,t,n,r,o){var a=n._reactRootContainer;if(a){var i=a._internalRoot;if("function"==typeof o){var u=o;o=function(){var e=as(i);u.call(e)}}os(t,i,e,o)}else{if(a=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new ls(e,0,t?{hydrate:!0}:void 0)}(n,r),i=a._internalRoot,"function"==typeof o){var l=o;o=function(){var e=as(i);l.call(e)}}kl((function(){os(t,i,e,o)}))}return as(i)}function fs(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!ss(t))throw Error(i(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:j,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}ot=function(e){if(13===e.tag){var t=ta(hl(),150,100);yl(e,t),us(e,t)}},at=function(e){if(13===e.tag){hl();var t=ea++;yl(e,t),us(e,t)}},it=function(e){if(13===e.tag){var t=hl();yl(e,t=ml(t,e,null)),us(e,t)}},ee=function(e,t,n){switch(t){case"input":if(Pe(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=mr(r);if(!o)throw Error(i(90));Ce(r),Pe(r,o)}}}break;case"textarea":Re(e,n);break;case"select":null!=(t=n.value)&&De(e,!!n.multiple,t,!1)}},ls.prototype.render=function(e,t){os(e,this._internalRoot,null,void 0===t?null:t)},ls.prototype.unmount=function(e){os(null,this._internalRoot,null,void 0===e?null:e)},ie=Sl,ue=function(e,t,n,r){var o=Wu;Wu|=4;try{return Qo(98,e.bind(null,t,n,r))}finally{(Wu=o)===Fu&&Xo()}},le=function(){(Wu&(1|Ru|ju))===Fu&&(function(){if(null!==cl){var e=cl;cl=null,e.forEach((function(e,t){rs(t,e),bl(t)})),Xo()}}(),jl())},se=function(e,t){var n=Wu;Wu|=2;try{return e(t)}finally{(Wu=n)===Fu&&Xo()}};var ps,ds,hs={createPortal:fs,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw Error(i(268,Object.keys(e)))}return e=null===(e=rt(t))?null:e.stateNode},hydrate:function(e,t,n){if(!ss(t))throw Error(i(200));return cs(null,e,t,!0,n)},render:function(e,t,n){if(!ss(t))throw Error(i(200));return cs(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){if(!ss(n))throw Error(i(200));if(null==e||void 0===e._reactInternalFiber)throw Error(i(38));return cs(e,t,n,!1,r)},unmountComponentAtNode:function(e){if(!ss(e))throw Error(i(40));return!!e._reactRootContainer&&(kl((function(){cs(null,null,e,!1,(function(){e._reactRootContainer=null}))})),!0)},unstable_createPortal:function(){return fs.apply(void 0,arguments)},unstable_batchedUpdates:Sl,flushSync:function(e,t){if((Wu&(Ru|ju))!==Fu)throw Error(i(187));var n=Wu;Wu|=1;try{return Qo(99,e.bind(null,t))}finally{Wu=n,Xo()}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[dr,hr,mr,I.injectEventPluginsByName,p,Nt,function(e){x(e,It)},oe,ae,An,A,jl,{current:!1}]}};ds=(ps={findFiberByHostInstance:pr,bundleType:0,version:"16.11.0",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Bl=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},Wl=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(o({},ps,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:D.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=rt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return ds?ds(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null}));var ms={default:hs},ys=ms&&hs||ms;e.exports=ys.default||ys},function(e,t,n){"use strict";e.exports=n(14)},function(e,t,n){"use strict";
/** @license React v0.17.0
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,o,a,i,u;if(Object.defineProperty(t,"__esModule",{value:!0}),"undefined"==typeof window||"function"!=typeof MessageChannel){var l=null,s=null,c=function(){if(null!==l)try{var e=t.unstable_now();l(!0,e),l=null}catch(e){throw setTimeout(c,0),e}},f=Date.now();t.unstable_now=function(){return Date.now()-f},r=function(e){null!==l?setTimeout(r,0,e):(l=e,setTimeout(c,0))},o=function(e,t){s=setTimeout(e,t)},a=function(){clearTimeout(s)},i=function(){return!1},u=t.unstable_forceFrameRate=function(){}}else{var p=window.performance,d=window.Date,h=window.setTimeout,m=window.clearTimeout,y=window.requestAnimationFrame,v=window.cancelAnimationFrame;if("undefined"!=typeof console&&("function"!=typeof y&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof v&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")),"object"==typeof p&&"function"==typeof p.now)t.unstable_now=function(){return p.now()};else{var g=d.now();t.unstable_now=function(){return d.now()-g}}var b=!1,E=null,w=-1,S=5,k=0;i=function(){return t.unstable_now()>=k},u=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):S=0<e?Math.floor(1e3/e):33.33};var T=new MessageChannel,C=T.port2;T.port1.onmessage=function(){if(null!==E){var e=t.unstable_now();k=e+S;try{E(!0,e)?C.postMessage(null):(b=!1,E=null)}catch(e){throw C.postMessage(null),e}}else b=!1},r=function(e){E=e,b||(b=!0,C.postMessage(null))},o=function(e,n){w=h((function(){e(t.unstable_now())}),n)},a=function(){m(w),w=-1}}function O(e,t){var n=e.length;e.push(t);e:for(;;){var r=Math.floor((n-1)/2),o=e[r];if(!(void 0!==o&&0<P(o,t)))break e;e[r]=t,e[n]=o,n=r}}function x(e){return void 0===(e=e[0])?null:e}function _(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var a=2*(r+1)-1,i=e[a],u=a+1,l=e[u];if(void 0!==i&&0>P(i,n))void 0!==l&&0>P(l,i)?(e[r]=l,e[u]=n,r=u):(e[r]=i,e[a]=n,r=a);else{if(!(void 0!==l&&0>P(l,n)))break e;e[r]=l,e[u]=n,r=u}}}return t}return null}function P(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var A=[],I=[],N=1,D=null,F=3,L=!1,R=!1,j=!1;function M(e){for(var t=x(I);null!==t;){if(null===t.callback)_(I);else{if(!(t.startTime<=e))break;_(I),t.sortIndex=t.expirationTime,O(A,t)}t=x(I)}}function U(e){if(j=!1,M(e),!R)if(null!==x(A))R=!0,r(V);else{var t=x(I);null!==t&&o(U,t.startTime-e)}}function V(e,n){R=!1,j&&(j=!1,a()),L=!0;var r=F;try{for(M(n),D=x(A);null!==D&&(!(D.expirationTime>n)||e&&!i());){var u=D.callback;if(null!==u){D.callback=null,F=D.priorityLevel;var l=u(D.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?D.callback=l:D===x(A)&&_(A),M(n)}else _(A);D=x(A)}if(null!==D)var s=!0;else{var c=x(I);null!==c&&o(U,c.startTime-n),s=!1}return s}finally{D=null,F=r,L=!1}}function z(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var H=u;t.unstable_ImmediatePriority=1,t.unstable_UserBlockingPriority=2,t.unstable_NormalPriority=3,t.unstable_IdlePriority=5,t.unstable_LowPriority=4,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=F;F=e;try{return t()}finally{F=n}},t.unstable_next=function(e){switch(F){case 1:case 2:case 3:var t=3;break;default:t=F}var n=F;F=t;try{return e()}finally{F=n}},t.unstable_scheduleCallback=function(e,n,i){var u=t.unstable_now();if("object"==typeof i&&null!==i){var l=i.delay;l="number"==typeof l&&0<l?u+l:u,i="number"==typeof i.timeout?i.timeout:z(e)}else i=z(e),l=u;return e={id:N++,callback:n,priorityLevel:e,startTime:l,expirationTime:i=l+i,sortIndex:-1},l>u?(e.sortIndex=l,O(I,e),null===x(A)&&e===x(I)&&(j?a():j=!0,o(U,l-u))):(e.sortIndex=i,O(A,e),R||L||(R=!0,r(V))),e},t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_wrapCallback=function(e){var t=F;return function(){var n=F;F=t;try{return e.apply(this,arguments)}finally{F=n}}},t.unstable_getCurrentPriorityLevel=function(){return F},t.unstable_shouldYield=function(){var e=t.unstable_now();M(e);var n=x(A);return n!==D&&null!==D&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<D.expirationTime||i()},t.unstable_requestPaint=H,t.unstable_continueExecution=function(){R||L||(R=!0,r(V))},t.unstable_pauseExecution=function(){},t.unstable_getFirstCallbackNode=function(){return x(A)},t.unstable_Profiling=null},function(e,t,n){"use strict";var r=n(16);function o(){}function a(){}a.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,a,i){if(i!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:a,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t,n){"use strict";
/** @license React v16.11.0
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,a=r?Symbol.for("react.portal"):60106,i=r?Symbol.for("react.fragment"):60107,u=r?Symbol.for("react.strict_mode"):60108,l=r?Symbol.for("react.profiler"):60114,s=r?Symbol.for("react.provider"):60109,c=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,p=r?Symbol.for("react.concurrent_mode"):60111,d=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,m=r?Symbol.for("react.suspense_list"):60120,y=r?Symbol.for("react.memo"):60115,v=r?Symbol.for("react.lazy"):60116,g=r?Symbol.for("react.fundamental"):60117,b=r?Symbol.for("react.responder"):60118,E=r?Symbol.for("react.scope"):60119;function w(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case f:case p:case i:case l:case u:case h:return e;default:switch(e=e&&e.$$typeof){case c:case d:case s:return e;default:return t}}case v:case y:case a:return t}}}function S(e){return w(e)===p}t.typeOf=w,t.AsyncMode=f,t.ConcurrentMode=p,t.ContextConsumer=c,t.ContextProvider=s,t.Element=o,t.ForwardRef=d,t.Fragment=i,t.Lazy=v,t.Memo=y,t.Portal=a,t.Profiler=l,t.StrictMode=u,t.Suspense=h,t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===p||e===l||e===u||e===h||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===v||e.$$typeof===y||e.$$typeof===s||e.$$typeof===c||e.$$typeof===d||e.$$typeof===g||e.$$typeof===b||e.$$typeof===E)},t.isAsyncMode=function(e){return S(e)||w(e)===f},t.isConcurrentMode=S,t.isContextConsumer=function(e){return w(e)===c},t.isContextProvider=function(e){return w(e)===s},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return w(e)===d},t.isFragment=function(e){return w(e)===i},t.isLazy=function(e){return w(e)===v},t.isMemo=function(e){return w(e)===y},t.isPortal=function(e){return w(e)===a},t.isProfiler=function(e){return w(e)===l},t.isStrictMode=function(e){return w(e)===u},t.isSuspense=function(e){return w(e)===h}},function(e,t,n){},function(e,t,n){"use strict";n.r(t);var r=n(0),o=n.n(r),a=n(1),i=n.n(a);function u(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}var l=n(2),s=n.n(l);function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function f(e){return"/"===e.charAt(0)}function p(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}var d=function(e,t){void 0===t&&(t="");var n,r=e&&e.split("/")||[],o=t&&t.split("/")||[],a=e&&f(e),i=t&&f(t),u=a||i;if(e&&f(e)?o=r:r.length&&(o.pop(),o=o.concat(r)),!o.length)return"/";if(o.length){var l=o[o.length-1];n="."===l||".."===l||""===l}else n=!1;for(var s=0,c=o.length;c>=0;c--){var d=o[c];"."===d?p(o,c):".."===d?(p(o,c),s++):s&&(p(o,c),s--)}if(!u)for(;s--;s)o.unshift("..");!u||""===o[0]||o[0]&&f(o[0])||o.unshift("");var h=o.join("/");return n&&"/"!==h.substr(-1)&&(h+="/"),h};function h(e){return e.valueOf?e.valueOf():Object.prototype.valueOf.call(e)}var m=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every((function(t,r){return e(t,n[r])}));if("object"==typeof t||"object"==typeof n){var r=h(t),o=h(n);return r!==t||o!==n?e(r,o):Object.keys(Object.assign({},t,n)).every((function(r){return e(t[r],n[r])}))}return!1},y=!0,v="Invariant failed";var g=function(e,t){if(!e)throw y?new Error(v):new Error(v+": "+(t||""))};function b(e){return"/"===e.charAt(0)?e:"/"+e}function E(e){return"/"===e.charAt(0)?e.substr(1):e}function w(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function S(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function k(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}function T(e,t,n,r){var o;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var a=t.indexOf("?");return-1!==a&&(n=t.substr(a),t=t.substr(0,a)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(o=c({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=d(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o}function C(){var e=null;var t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var a="function"==typeof e?e(t,n):e;"string"==typeof a?"function"==typeof r?r(a,o):o(!0):o(!1!==a)}else o(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}var O=!("undefined"==typeof window||!window.document||!window.document.createElement);function x(e,t){t(window.confirm(e))}var _="popstate",P="hashchange";function A(){try{return window.history.state||{}}catch(e){return{}}}function I(e){void 0===e&&(e={}),O||g(!1);var t,n=window.history,r=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,o=!(-1===window.navigator.userAgent.indexOf("Trident")),a=e,i=a.forceRefresh,u=void 0!==i&&i,l=a.getUserConfirmation,s=void 0===l?x:l,f=a.keyLength,p=void 0===f?6:f,d=e.basename?S(b(e.basename)):"";function h(e){var t=e||{},n=t.key,r=t.state,o=window.location,a=o.pathname+o.search+o.hash;return d&&(a=w(a,d)),T(a,r,n)}function m(){return Math.random().toString(36).substr(2,p)}var y=C();function v(e){c(z,e),z.length=n.length,y.notifyListeners(z.location,z.action)}function E(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||D(h(e.state))}function I(){D(h(A()))}var N=!1;function D(e){if(N)N=!1,v();else{y.confirmTransitionTo(e,"POP",s,(function(t){t?v({action:"POP",location:e}):function(e){var t=z.location,n=L.indexOf(t.key);-1===n&&(n=0);var r=L.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(N=!0,j(o))}(e)}))}}var F=h(A()),L=[F.key];function R(e){return d+k(e)}function j(e){n.go(e)}var M=0;function U(e){1===(M+=e)&&1===e?(window.addEventListener(_,E),o&&window.addEventListener(P,I)):0===M&&(window.removeEventListener(_,E),o&&window.removeEventListener(P,I))}var V=!1;var z={length:n.length,action:"POP",location:F,createHref:R,push:function(e,t){var o=T(e,t,m(),z.location);y.confirmTransitionTo(o,"PUSH",s,(function(e){if(e){var t=R(o),a=o.key,i=o.state;if(r)if(n.pushState({key:a,state:i},null,t),u)window.location.href=t;else{var l=L.indexOf(z.location.key),s=L.slice(0,l+1);s.push(o.key),L=s,v({action:"PUSH",location:o})}else window.location.href=t}}))},replace:function(e,t){var o=T(e,t,m(),z.location);y.confirmTransitionTo(o,"REPLACE",s,(function(e){if(e){var t=R(o),a=o.key,i=o.state;if(r)if(n.replaceState({key:a,state:i},null,t),u)window.location.replace(t);else{var l=L.indexOf(z.location.key);-1!==l&&(L[l]=o.key),v({action:"REPLACE",location:o})}else window.location.replace(t)}}))},go:j,goBack:function(){j(-1)},goForward:function(){j(1)},block:function(e){void 0===e&&(e=!1);var t=y.setPrompt(e);return V||(U(1),V=!0),function(){return V&&(V=!1,U(-1)),t()}},listen:function(e){var t=y.appendListener(e);return U(1),function(){U(-1),t()}}};return z}var N="hashchange",D={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+E(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:E,decodePath:b},slash:{encodePath:b,decodePath:b}};function F(e){var t=e.indexOf("#");return-1===t?e:e.slice(0,t)}function L(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)}function R(e){window.location.replace(F(window.location.href)+"#"+e)}function j(e){void 0===e&&(e={}),O||g(!1);var t=window.history,n=(window.navigator.userAgent.indexOf("Firefox"),e),r=n.getUserConfirmation,o=void 0===r?x:r,a=n.hashType,i=void 0===a?"slash":a,u=e.basename?S(b(e.basename)):"",l=D[i],s=l.encodePath,f=l.decodePath;function p(){var e=f(L());return u&&(e=w(e,u)),T(e)}var d=C();function h(e){c(V,e),V.length=t.length,d.notifyListeners(V.location,V.action)}var m=!1,y=null;function v(){var e,t,n=L(),r=s(n);if(n!==r)R(r);else{var a=p(),i=V.location;if(!m&&(t=a,(e=i).pathname===t.pathname&&e.search===t.search&&e.hash===t.hash))return;if(y===k(a))return;y=null,function(e){if(m)m=!1,h();else{d.confirmTransitionTo(e,"POP",o,(function(t){t?h({action:"POP",location:e}):function(e){var t=V.location,n=A.lastIndexOf(k(t));-1===n&&(n=0);var r=A.lastIndexOf(k(e));-1===r&&(r=0);var o=n-r;o&&(m=!0,I(o))}(e)}))}}(a)}}var E=L(),_=s(E);E!==_&&R(_);var P=p(),A=[k(P)];function I(e){t.go(e)}var j=0;function M(e){1===(j+=e)&&1===e?window.addEventListener(N,v):0===j&&window.removeEventListener(N,v)}var U=!1;var V={length:t.length,action:"POP",location:P,createHref:function(e){var t=document.querySelector("base"),n="";return t&&t.getAttribute("href")&&(n=F(window.location.href)),n+"#"+s(u+k(e))},push:function(e,t){var n=T(e,void 0,void 0,V.location);d.confirmTransitionTo(n,"PUSH",o,(function(e){if(e){var t=k(n),r=s(u+t);if(L()!==r){y=t,function(e){window.location.hash=e}(r);var o=A.lastIndexOf(k(V.location)),a=A.slice(0,o+1);a.push(t),A=a,h({action:"PUSH",location:n})}else h()}}))},replace:function(e,t){var n=T(e,void 0,void 0,V.location);d.confirmTransitionTo(n,"REPLACE",o,(function(e){if(e){var t=k(n),r=s(u+t);L()!==r&&(y=t,R(r));var o=A.indexOf(k(V.location));-1!==o&&(A[o]=t),h({action:"REPLACE",location:n})}}))},go:I,goBack:function(){I(-1)},goForward:function(){I(1)},block:function(e){void 0===e&&(e=!1);var t=d.setPrompt(e);return U||(M(1),U=!0),function(){return U&&(U=!1,M(-1)),t()}},listen:function(e){var t=d.appendListener(e);return M(1),function(){M(-1),t()}}};return V}function M(e,t,n){return Math.min(Math.max(e,t),n)}var U=n(3),V=n.n(U),z=n(9),H=n.n(z),B=1073741823;var W=o.a.createContext||function(e,t){var n,o,a="__create-react-context-"+H()()+"__",i=function(e){function n(){var t,n,r;return(t=e.apply(this,arguments)||this).emitter=(n=t.props.value,r=[],{on:function(e){r.push(e)},off:function(e){r=r.filter((function(t){return t!==e}))},get:function(){return n},set:function(e,t){n=e,r.forEach((function(e){return e(n,t)}))}}),t}V()(n,e);var r=n.prototype;return r.getChildContext=function(){var e;return(e={})[a]=this.emitter,e},r.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var n,r=this.props.value,o=e.value;((a=r)===(i=o)?0!==a||1/a==1/i:a!=a&&i!=i)?n=0:(n="function"==typeof t?t(r,o):B,0!==(n|=0)&&this.emitter.set(e.value,n))}var a,i},r.render=function(){return this.props.children},n}(r.Component);i.childContextTypes=((n={})[a]=s.a.object.isRequired,n);var u=function(t){function n(){var e;return(e=t.apply(this,arguments)||this).state={value:e.getValue()},e.onUpdate=function(t,n){0!=((0|e.observedBits)&n)&&e.setState({value:e.getValue()})},e}V()(n,t);var r=n.prototype;return r.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?B:t},r.componentDidMount=function(){this.context[a]&&this.context[a].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?B:e},r.componentWillUnmount=function(){this.context[a]&&this.context[a].off(this.onUpdate)},r.getValue=function(){return this.context[a]?this.context[a].get():e},r.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(r.Component);return u.contextTypes=((o={})[a]=s.a.object,o),{Provider:i,Consumer:u}},q=n(6),Y=n.n(q);n(8);function G(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}var Q=n(10),K=n.n(Q),J=function(e){var t=W();return t.displayName=e,t}("Router"),X=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={location:t.history.location},n._isMounted=!1,n._pendingLocation=null,t.staticContext||(n.unlisten=t.history.listen((function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e}))),n}u(t,e),t.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var n=t.prototype;return n.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},n.componentWillUnmount=function(){this.unlisten&&this.unlisten()},n.render=function(){return o.a.createElement(J.Provider,{children:this.props.children||null,value:{history:this.props.history,location:this.state.location,match:t.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}})},t}(o.a.Component);o.a.Component;var Z=function(e){function t(){return e.apply(this,arguments)||this}u(t,e);var n=t.prototype;return n.componentDidMount=function(){this.props.onMount&&this.props.onMount.call(this,this)},n.componentDidUpdate=function(e){this.props.onUpdate&&this.props.onUpdate.call(this,this,e)},n.componentWillUnmount=function(){this.props.onUnmount&&this.props.onUnmount.call(this,this)},n.render=function(){return null},t}(o.a.Component);var ee={},te=1e4,ne=0;function re(e,t){return void 0===e&&(e="/"),void 0===t&&(t={}),"/"===e?e:function(e){if(ee[e])return ee[e];var t=Y.a.compile(e);return ne<te&&(ee[e]=t,ne++),t}(e)(t,{pretty:!0})}function oe(e){var t=e.computedMatch,n=e.to,r=e.push,a=void 0!==r&&r;return o.a.createElement(J.Consumer,null,(function(e){e||g(!1);var r=e.history,i=e.staticContext,u=a?r.push:r.replace,l=T(t?"string"==typeof n?re(n,t.params):c({},n,{pathname:re(n.pathname,t.params)}):n);return i?(u(l),null):o.a.createElement(Z,{onMount:function(){u(l)},onUpdate:function(e,t){var n,r,o=T(t.to);n=o,r=c({},l,{key:o.key}),n.pathname===r.pathname&&n.search===r.search&&n.hash===r.hash&&n.key===r.key&&m(n.state,r.state)||u(l)},to:n})}))}var ae={},ie=1e4,ue=0;function le(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,r=n.path,o=n.exact,a=void 0!==o&&o,i=n.strict,u=void 0!==i&&i,l=n.sensitive,s=void 0!==l&&l;return[].concat(r).reduce((function(t,n){if(!n&&""!==n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=ae[n]||(ae[n]={});if(r[e])return r[e];var o=[],a={regexp:Y()(e,o,t),keys:o};return ue<ie&&(r[e]=a,ue++),a}(n,{end:a,strict:u,sensitive:s}),o=r.regexp,i=r.keys,l=o.exec(e);if(!l)return null;var c=l[0],f=l.slice(1),p=e===c;return a&&!p?null:{path:n,url:"/"===n&&""===c?"/":c,isExact:p,params:i.reduce((function(e,t,n){return e[t.name]=f[n],e}),{})}}),null)}var se=function(e){function t(){return e.apply(this,arguments)||this}return u(t,e),t.prototype.render=function(){var e=this;return o.a.createElement(J.Consumer,null,(function(t){t||g(!1);var n=e.props.location||t.location,r=c({},t,{location:n,match:e.props.computedMatch?e.props.computedMatch:e.props.path?le(n.pathname,e.props):t.match}),a=e.props,i=a.children,u=a.component,l=a.render;return Array.isArray(i)&&0===i.length&&(i=null),o.a.createElement(J.Provider,{value:r},r.match?i?"function"==typeof i?i(r):i:u?o.a.createElement(u,r):l?l(r):null:"function"==typeof i?i(r):null)}))},t}(o.a.Component);function ce(e){return"/"===e.charAt(0)?e:"/"+e}function fe(e,t){if(!e)return t;var n=ce(e);return 0!==t.pathname.indexOf(n)?t:c({},t,{pathname:t.pathname.substr(n.length)})}function pe(e){return"string"==typeof e?e:k(e)}function de(e){return function(){g(!1)}}function he(){}o.a.Component;var me=function(e){function t(){return e.apply(this,arguments)||this}return u(t,e),t.prototype.render=function(){var e=this;return o.a.createElement(J.Consumer,null,(function(t){t||g(!1);var n,r,a=e.props.location||t.location;return o.a.Children.forEach(e.props.children,(function(e){if(null==r&&o.a.isValidElement(e)){n=e;var i=e.props.path||e.props.from;r=i?le(a.pathname,c({},e.props,{path:i})):t.match}})),r?o.a.cloneElement(n,{location:a,computedMatch:r}):null}))},t}(o.a.Component);o.a.useContext;var ye=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).history=I(t.props),t}return u(t,e),t.prototype.render=function(){return o.a.createElement(X,{history:this.history,children:this.props.children})},t}(o.a.Component);o.a.Component;var ve=function(e,t){return"function"==typeof e?e(t):e},ge=function(e,t){return"string"==typeof e?T(e,null,null,t):e},be=function(e){return e},Ee=o.a.forwardRef;void 0===Ee&&(Ee=be);var we=Ee((function(e,t){var n=e.innerRef,r=e.navigate,a=e.onClick,i=G(e,["innerRef","navigate","onClick"]),u=i.target,l=c({},i,{onClick:function(e){try{a&&a(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||u&&"_self"!==u||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),r())}});return l.ref=be!==Ee&&t||n,o.a.createElement("a",l)}));var Se=Ee((function(e,t){var n=e.component,r=void 0===n?we:n,a=e.replace,i=e.to,u=e.innerRef,l=G(e,["component","replace","to","innerRef"]);return o.a.createElement(J.Consumer,null,(function(e){e||g(!1);var n=e.history,s=ge(ve(i,e.location),e.location),f=s?n.createHref(s):"",p=c({},l,{href:f,navigate:function(){var t=ve(i,e.location);(a?n.replace:n.push)(t)}});return be!==Ee?p.ref=t||u:p.innerRef=u,o.a.createElement(r,p)}))})),ke=function(e){return e},Te=o.a.forwardRef;void 0===Te&&(Te=ke);Te((function(e,t){var n=e["aria-current"],r=void 0===n?"page":n,a=e.activeClassName,i=void 0===a?"active":a,u=e.activeStyle,l=e.className,s=e.exact,f=e.isActive,p=e.location,d=e.strict,h=e.style,m=e.to,y=e.innerRef,v=G(e,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","strict","style","to","innerRef"]);return o.a.createElement(J.Consumer,null,(function(e){e||g(!1);var n=p||e.location,a=ge(ve(m,n),n),b=a.pathname,E=b&&b.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),w=E?le(n.pathname,{path:E,exact:s,strict:d}):null,S=!!(f?f(w,n):w),k=S?function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return e})).join(" ")}(l,i):l,T=S?c({},h,{},u):h,C=c({"aria-current":S&&r||null,className:k,style:T,to:a},v);return ke!==Te?C.ref=t||y:C.innerRef=y,o.a.createElement(Se,C)}))}));var Ce={API_AUTH_VALIDATE:"http://keycommander.azurewebsites.net/api/auth/validate",API_AUTH_LOGIN:"http://keycommander.azurewebsites.net/api/auth/login",API_AUTH_USERNAME_AVAILABLE:"http://keycommander.azurewebsites.net/api/auth/IsUsernameInUse",API_AUTH_REGISTER:"http://keycommander.azurewebsites.net/api/auth/register",API_HISTORY:"/api/User/History",API_HISTORY_DETAILS:"/api/User/HistoryDetails",API_HISTORY_VISUAL:"/api/User/HistoryAnalytics",API_NEW_SESSION:"/api/Session/GetNewSession",API_NEW_SEQUENCE:"/api/Sequence/GetNewSequence",API_END_SEQUENCE:"/api/Sequence/EndSequence",API_RUN_ANALYSIS_FOR_SEQ:"/api/ErrorAnalysis/RunForSequence",External:{JS:{JQUERY:"https://code.jquery.com/jquery-3.4.1.min.js",DATATABLES_CORE:"https://cdn.datatables.net/1.10.20/js/jquery.dataTables.min.js",DATATABLES_ROWGROUP:"https://cdn.datatables.net/rowgroup/1.1.1/js/dataTables.rowGroup.min.js"},CSS:{DATATABLES_CORE:"https://cdn.datatables.net/1.10.20/css/jquery.dataTables.min.css",DATATABLES_ALT:"https://cdn.datatables.net/rowgroup/1.1.1/css/rowGroup.dataTables.min.css"}}},Oe={DEFAULT:"/",INDEX:"/",LOGIN:"/Login",LOGOUT:"/Logout",REGISTER:"/Register",NEW_SEQUENCE:"/secure/NewSequence",MY_ACCT:"/secure/MyAccount",HISTORY:"/secure/History",HISTORY_DETAILS:"/secure/HistoryDetails",HISTORY_DETAILS_WITHID:"/secure/HistoryDetails/:sequenceId",HISTORY_VISUAL:"/secure/History/Visual"},xe="key-cdr-jwt",_e="key-cdr-session",Pe={IS_DEBUG:!0,DEFAULT_NEW_SEQUENCE_INPUT_FIELD_HEIGHT:75},Ae={AUTH_FAILURE:"unable to login with the username and password provided",NEW_SEQUENCE_INSTRUCTIONS:"PRESS SHIFT+ENTER OR PRESS START TO BEGIN",Registration:{PASSWORD_MATCH:"both your passwords must match",USERNAME_IN_USE:"the username {0} is already in use",MUST_BE_NON_EMPTY:"must be non empty"}},Ie={0:"IncorrectChar",1:"ExtraChars",2:"ShortChars",3:"Normal",4:"Unevaluated"},Ne=function(e){if(!e.ok)throw Error(e.statusText);return e},De={LENGTH_BUFFER:5,TICK_INTERVAL_IN_MS:5e3,UNCHANGED_TEXT_TICK_THRESHOLD:5};function Fe(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var Le=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.loggedIn=!1}var t,n,r;return t=e,(n=[{key:"getCurrentToken",value:function(){var e=localStorage.getItem(xe);try{if(e)return JSON.parse(e)}catch(e){console.log("auth: token parse error: ",e)}return null}},{key:"clearToken",value:function(){localStorage.removeItem(xe)}},{key:"setToken",value:function(e){var t=JSON.stringify(e);localStorage.setItem(xe,t)}},{key:"isAuthenticated",value:function(){var e=this;return new Promise((function(t){var n=e.getCurrentToken();n||t(!1);try{e.isValidToken(n).then((function(e){Pe.IS_DEBUG&&console.log("auth: isauthenticated: server check was ",e),t(e)}))}catch(e){console.log("auth: isauthenticated: validity error ",e),t(!1)}}))}},{key:"logout",value:function(){Pe.IS_DEBUG&&console.log("auth: logging out"),this.clearToken()}},{key:"login",value:function(e){var t=this;return fetch(Ce.API_AUTH_LOGIN,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify(e)}).then((function(e){return e.json()})).then((function(e){return Pe.IS_DEBUG&&console.log("login return: ",e),e.IsValid&&t.setToken(e),Promise.resolve(e)}))}},{key:"isTokenExpired",value:function(e){try{return decode(e).exp<Date.now()/1e3}catch(e){return!1}}},{key:"makeRequestWithToken",value:function(e,t){var n=this.getCurrentToken();return n&&n.JWTValue?fetch(e,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json",Authorization:"Bearer ".concat(n)},body:JSON.stringify(t)}).then((function(e){return e.json()})).then((function(e){return Promise.resolve(e)})):Promise.reject()}},{key:"isValidToken",value:function(){var e=this,t=this.getCurrentToken();return t&&t.JWTValue?fetch(Ce.API_AUTH_VALIDATE,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify(t)}).then((function(e){return e.json()})).then((function(t){return t.IsValid||e.clearToken(),Promise.resolve(t.IsValid)})):Promise.resolve(!1)}},{key:"isUsernameInUse",value:function(e){if(""==e)return Promise.resolve(!1);var t={username:e};return fetch(Ce.API_AUTH_USERNAME_AVAILABLE,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify(t)}).then((function(e){return e.json()})).then((function(e){return Promise.resolve(e.IsInUse)}))}},{key:"register",value:function(e,t){var n=this,r={username:e,password:t};return fetch(Ce.API_AUTH_REGISTER,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify(r)}).then((function(e){return e.json()})).then((function(e){return 1==e.IsValid&&n.setToken(e),Promise.resolve(e)}))}}])&&Fe(t.prototype,n),r&&Fe(t,r),e}();function Re(e){return(Re="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function je(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Me(e,t){return!t||"object"!==Re(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Ue(e){return(Ue=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Ve(e,t){return(Ve=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var ze,He,Be,We=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=Me(this,Ue(t).call(this,e))).state={currentRoute:n.props.location.pathname,routes:[{route:Oe.INDEX,display:"Home",active:!1},{route:Oe.MY_ACCT,display:"My Account",active:!1}]},n}var n,r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ve(e,t)}(t,e),n=t,(r=[{key:"clickHandler",value:function(e){this.setState((function(t){return{list:t.routes.map((function(t,n){return t.active=t.route===e,t}))}}))}},{key:"render",value:function(){var e,t=this;e=!0===this.props.IsAuthed?o.a.createElement(Se,{to:Oe.LOGOUT,onClick:this.props.appLogout},"Logout"):o.a.createElement(Se,{to:Oe.LOGIN,onClick:function(){return t.clickHandler(Oe.LOGIN)}},"Login");var n=([Oe.MY_ACCT,Oe.HISTORY,Oe.HISTORY_VISUAL,Oe.NEW_SEQUENCE].indexOf(this.props.location.pathname)>=0||this.props.location.pathname.indexOf(Oe.HISTORY_DETAILS)>=0)&&!0===this.props.IsAuthed;return o.a.createElement(o.a.Fragment,null,o.a.createElement("div",{id:"nav_container",className:"nav_container"},o.a.createElement("ul",null,this.state.routes.map((function(e,n){var r=e.active?"current":"";return o.a.createElement("li",{key:n,className:r},o.a.createElement(Se,{to:e.route,onClick:function(){return t.clickHandler(e.route)}},e.display))})),o.a.createElement("li",null,e))),!0===n&&o.a.createElement("div",{id:"sub_nav_container",className:"nav_container_sm"},o.a.createElement("ul",null,o.a.createElement("li",null,o.a.createElement(Se,{to:Oe.NEW_SEQUENCE,onClick:function(){return t.clickHandler(Oe.NEW_SEQUENCE)}},"New Sequence")),o.a.createElement("li",null,o.a.createElement(Se,{to:Oe.HISTORY,onClick:function(){return t.clickHandler(Oe.HISTORY)}},"History")),o.a.createElement("li",null,o.a.createElement(Se,{to:Oe.HISTORY_VISUAL,onClick:function(){return t.clickHandler(Oe.HISTORY_VISUAL)}},"Visual History")))))}}])&&je(n.prototype,r),a&&je(n,a),t}(o.a.Component),qe=(He="withRouter("+((ze=We).displayName||ze.name)+")",(Be=function(e){var t=e.wrappedComponentRef,n=G(e,["wrappedComponentRef"]);return o.a.createElement(J.Consumer,null,(function(e){return e||g(!1),o.a.createElement(ze,c({},n,e,{ref:t}))}))}).displayName=He,Be.WrappedComponent=ze,K()(Be,ze));function $e(e){return($e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ye(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ge(e,t){return!t||"object"!==$e(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Qe(e){return(Qe=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Ke(e,t){return(Ke=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Je=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),Ge(this,Qe(t).call(this,e))}var n,r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ke(e,t)}(t,e),n=t,(r=[{key:"render",value:function(){return o.a.createElement(o.a.Fragment,null,o.a.createElement("div",{id:"header"},o.a.createElement("div",{className:"top_bar"}),o.a.createElement("div",{id:"header_contents"},o.a.createElement("div",{id:"title_block"},o.a.createElement(Se,{to:"/",className:"title"},"Key Commander"),o.a.createElement("div",{className:"title_sub"},"measure, improve and analyze typing speed and accuracy ",this.props.loc)),o.a.createElement(qe,{IsAuthed:this.props.IsAuthed,appLogin:this.props.appLogin,appLogout:this.props.appLogout}),o.a.createElement("div",{className:"clear_both"})),o.a.createElement("div",{className:"clear_both"})))}}])&&Ye(n.prototype,r),a&&Ye(n,a),t}(o.a.Component);function Xe(e){return(Xe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ze(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function et(e,t){return!t||"object"!==Xe(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function tt(e){return(tt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function nt(e,t){return(nt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var rt=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),et(this,tt(t).call(this,e))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&nt(e,t)}(t,e),n=t,(r=[{key:"loadScript",value:function(e){return new Promise((function(t){var n=document.createElement("script");n.async=!1,n.src=e,n.onload=function(){t()},document.body.appendChild(n)}))}},{key:"loadCss",value:function(e){return new Promise((function(t){var n=document.createElement("link");n.href=e,n.type="text/css",n.rel="stylesheet",n.onload=function(){t()},document.head.appendChild(n)}))}}])&&Ze(n.prototype,r),o&&Ze(n,o),t}(o.a.Component);var ot=function(e){return o.a.createElement(o.a.Fragment,null,o.a.createElement("div",{id:"content_wrapper"},o.a.createElement("div",{id:"content",className:"center"},e.children,o.a.createElement("div",{className:"clear_both"}))),o.a.createElement("div",{className:"clear_both"}))};function at(e){return(at="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function it(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ut(e,t){return!t||"object"!==at(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function lt(e){return(lt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function st(e,t){return(st=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var ct=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),ut(this,lt(t).apply(this,arguments))}var n,r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&st(e,t)}(t,e),n=t,(r=[{key:"navTo",value:function(e){this.props.history.push(e)}},{key:"render",value:function(){var e=this;return o.a.createElement(ot,null,o.a.createElement("div",{className:"content_row"},o.a.createElement("h2",null,"What is it?"),o.a.createElement("img",{src:"/assets/img/main_banner.png"}),o.a.createElement("ul",{className:"prominent_list"},o.a.createElement("li",null,"Practice your typing against samples of text"),o.a.createElement("li",null,"Analyze your speed, accuracy and problem key combinations"),o.a.createElement("li",null,"Measure performance over time ")),o.a.createElement("input",{className:"button-size-medium",type:"button",value:"Try It!"}),o.a.createElement("div",{className:"clear_both"})),o.a.createElement("div",{className:"content_row_sm"},o.a.createElement("h2",null,"Already Have an Account?"),"Login and continue where you left off",o.a.createElement("input",{className:"button-size-medium",type:"button",value:"Login to Your Account",onClick:function(){return e.navTo(Oe.LOGIN)}})),o.a.createElement("div",{className:"content_row_sm"},o.a.createElement("h2",null,"Review Reporting Features"),"Review a public account to see the analytics on speed and accuracy",o.a.createElement("input",{className:"button-size-medium",type:"button",value:"Review Reporting"})))}}])&&it(n.prototype,r),a&&it(n,a),t}(rt);function ft(e){return(ft="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function pt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function dt(e,t){return!t||"object"!==ft(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ht(e){return(ht=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function mt(e,t){return(mt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var yt=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),dt(this,ht(t).call(this,e))}var n,r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&mt(e,t)}(t,e),n=t,(r=[{key:"render",value:function(){if(this.props.showLoading){var e="top"===this.props.position?"spinner-border-position-top":"spinner-border";return o.a.createElement(o.a.Fragment,null,o.a.createElement("div",{className:"loading_mask"},o.a.createElement("div",{className:e})))}return o.a.createElement(o.a.Fragment,null)}}])&&pt(n.prototype,r),a&&pt(n,a),t}(o.a.Component);function vt(e){return(vt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function gt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function bt(e){return(bt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Et(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function wt(e,t){return(wt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function St(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var kt=function(e){function t(e){var n,r,o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,o=bt(t).call(this,e),n=!o||"object"!==vt(o)&&"function"!=typeof o?Et(r):o,St(Et(n),"handleSubmit",(function(e){var t={username:n.state.username,password:n.state.password};n.setState({errorMsg:""}),n.showLoading(!0);var r=Et(n);n.AuthService.login(t).then((function(e){r.showLoading(!1),e.IsValid?(r.props.appLogin(),r.props.history.push(r.state.redirectToOnLogin)):r.setState({errorMsg:Ae.AUTH_FAILURE})})).catch((function(e){console.log(e)})),e.preventDefault()})),St(Et(n),"showLoading",(function(e){n.setState({showLoading:e})})),St(Et(n),"handleChange",(function(e){n.setState(St({},e.target.name,e.target.value))})),n.state={username:"",password:"",showLoading:!1,errorMsg:"",redirectToOnLogin:n.getPathToRedirectAfterLogin()},n.AuthService=new Le,n}var n,r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&wt(e,t)}(t,e),n=t,(r=[{key:"getPathToRedirectAfterLogin",value:function(){var e=Oe.MY_ACCT;return this.props&&this.props.location&&this.props.location.state&&this.props.location.state.from&&(e=this.props.location.state.from),e}},{key:"render",value:function(){return o.a.createElement(ot,null,o.a.createElement("div",{className:"center"},o.a.createElement("h2",null,"Login"),o.a.createElement("div",{className:"content_row"},o.a.createElement(yt,{showLoading:this.state.showLoading}),o.a.createElement("form",{onSubmit:this.handleSubmit,className:"med_width"},o.a.createElement("label",{htmlFor:"username"},"User Name: "),o.a.createElement("input",{name:"username",type:"text",onChange:this.handleChange}),o.a.createElement("label",{htmlFor:"password"},"Password: "),o.a.createElement("input",{name:"password",type:"password",onChange:this.handleChange}),""!=this.state.errorMsg&&o.a.createElement("p",{className:"form_error"},this.state.errorMsg),o.a.createElement(Se,{to:Oe.REGISTER},"Not a user?  Register here"),o.a.createElement("input",{onClick:this.handleSubmit,className:"button-size-medium",type:"submit",value:"Login"}),o.a.createElement("div",{className:"clear_both"})))))}}])&&gt(n.prototype,r),a&&gt(n,a),t}(rt);function Tt(e){return(Tt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ct(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ot(e){return(Ot=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function xt(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _t(e,t){return(_t=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Pt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var At=function(e){function t(e){var n,r,o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,o=Ot(t).call(this,e),n=!o||"object"!==Tt(o)&&"function"!=typeof o?xt(r):o,Pt(xt(n),"handleSubmit",(function(e){e.preventDefault(),n.setState({showLoading:!0,errors:[]});var t=xt(n);n.validate().then((function(e){e.length>0?n.setState({showLoading:!1,errors:e}):n.AuthService.register(n.state.username,n.state.password).then((function(n){1==n.IsValid?t.props.history.push(Oe.MY_ACCT):(e.push({fieldid:"",msg:"authentication failure"}),t.setState({showLoading:!1,errors:e}))}))}))})),Pt(xt(n),"showLoading",(function(e){n.setState({showLoading:e})})),Pt(xt(n),"handleChange",(function(e){n.setState(Pt({},e.target.name,e.target.value)),e.target.className=""})),Pt(xt(n),"validate",(function(){var e=[];return""==n.state.username&&e.push({fieldid:"username",msg:"Login name "+Ae.Registration.MUST_BE_NON_EMPTY}),""==n.state.password&&e.push({fieldid:"password1",msg:"Password "+Ae.Registration.MUST_BE_NON_EMPTY}),""==n.state.password_verify&&e.push({fieldid:"password2",msg:"Password verification "+Ae.Registration.MUST_BE_NON_EMPTY}),n.state.password!=n.state.password_verify&&e.push({fieldid:"password2",msg:Ae.Registration.PASSWORD_MATCH}),n.AuthService.isUsernameInUse(n.state.username).then((function(t){return 1==t&&e.push({fieldid:"username",msg:Ae.Registration.USERNAME_IN_USE.replace("{0}",n.state.username)}),Promise.resolve(e)}))})),n.state={username:"",password:"",password_verify:"",showLoading:!1,errors:[]},n.AuthService=new Le,n}var n,r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_t(e,t)}(t,e),n=t,(r=[{key:"render",value:function(){var e=this.state.errors.map((function(e,t){return o.a.createElement("li",{key:t,className:"error"},e.msg)})),t=[];return this.state.errors.length>0&&(t=this.state.errors.reduce((function(e,t){return e.push(t.fieldid),e}),[])),o.a.createElement(ot,null,o.a.createElement("div",{className:"center"},o.a.createElement("h2",null,"Register"),o.a.createElement("div",{className:"content_row"},o.a.createElement(yt,{showLoading:this.state.showLoading}),o.a.createElement("form",{onSubmit:this.handleSubmit,className:"med_width"},o.a.createElement("label",{htmlFor:"username"},"Login Name: "),o.a.createElement("input",{id:"username",name:"username",type:"text",className:t.indexOf("username")>=0?"error_highlight":"",onChange:this.handleChange}),o.a.createElement("label",{htmlFor:"password"},"Password: "),o.a.createElement("input",{id:"password1",name:"password",type:"password",className:t.indexOf("password1")>=0?"error_highlight":"",onChange:this.handleChange}),o.a.createElement("label",{htmlFor:"password_verify"},"Re-enter Password: "),o.a.createElement("input",{id:"password2",name:"password_verify",type:"password",className:t.indexOf("password2")>=0?"error_highlight":"",onChange:this.handleChange}),this.state.errors.length>0&&o.a.createElement("ul",{className:"error_list"},e),o.a.createElement("input",{onClick:this.handleSubmit,className:"button-size-medium",type:"submit",value:"Register"}),o.a.createElement("div",{className:"clear_both"})))))}}])&&Ct(n.prototype,r),a&&Ct(n,a),t}(rt);function It(e){return(It="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Nt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Dt(e){return(Dt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Ft(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Lt(e,t){return(Lt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Rt=function(e){function t(e){var n,r,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,(n=!(o=Dt(t).call(this,e))||"object"!==It(o)&&"function"!=typeof o?Ft(r):o).auth=new Le,n.state={isAuthenticated:!1,authFailed:null};var a=Ft(n);return n.auth.isAuthenticated().then((function(e){1==e?a.props.appLogin():a.props.appLogout(),a.setState({isAuthenticated:e,authFailed:!e})})),n}var n,r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Lt(e,t)}(t,e),n=t,(r=[{key:"authenticationComplete",value:function(){return!0===this.state.isAuthenticated&&!1===this.state.authFailed}},{key:"render",value:function(){if(!this.state.isAuthenticated)return this.state.authFailed?o.a.createElement(oe,{to:{pathname:"/login",state:{from:this.props.location.pathname}}}):o.a.createElement(ot,null,o.a.createElement("h2",null,"Authenticating..."),o.a.createElement("div",{className:"content_row"},o.a.createElement(yt,{showLoading:!0})))}}])&&Nt(n.prototype,r),a&&Nt(n,a),t}(rt);function jt(e){return(jt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Mt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ut(e,t){return!t||"object"!==jt(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Vt(e,t,n){return(Vt="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=zt(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function zt(e){return(zt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Ht(e,t){return(Ht=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Bt=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),Ut(this,zt(t).call(this,e))}var n,r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ht(e,t)}(t,e),n=t,(r=[{key:"navTo",value:function(e){this.props.history.push(e)}},{key:"render",value:function(){var e=this;return this.authenticationComplete()?o.a.createElement(ot,{authed:!0},o.a.createElement("h2",null,"My Account"),o.a.createElement("div",{className:"content_row_sm block_hover_highlight",onClick:function(){return e.navTo(Oe.NEW_SEQUENCE)}},o.a.createElement("h3",null,"Start a new Session"),o.a.createElement("img",{className:"thumb",src:"/assets/img/new_session_thumb.png"}),o.a.createElement("ul",{className:""},o.a.createElement("li",null,"Start a new typing session"),o.a.createElement("li",null,"Configure your sample source ")),o.a.createElement("input",{onClick:function(){return e.navTo(Oe.NEW_SEQUENCE)},className:"button-size-medium position_bottom_right",type:"button",value:"Start New Session"}),o.a.createElement("div",{className:"clear_both"})),o.a.createElement("div",{className:"content_row_sm block_hover_highlight",onClick:function(){return e.navTo(Oe.HISTORY)}},o.a.createElement("h3",null,"Your Session History"),o.a.createElement("img",{className:"thumb",src:"/assets/img/analysis_table_thumbnail.png"}),o.a.createElement("ul",{className:""},o.a.createElement("li",null,"Review recent key sequences and sessions"),o.a.createElement("li",null,"Compare an instance to your all-time performance")),o.a.createElement("input",{onClick:function(){return e.navTo(Oe.HISTORY)},className:"button-size-medium position_bottom_right",type:"button",value:"View Session History"}),o.a.createElement("div",{className:"clear_both"})),o.a.createElement("div",{className:"content_row_sm block_hover_highlight",onClick:function(){return e.navTo(Oe.HISTORY)}},o.a.createElement("h3",null,"Your Session History, Graphically"),o.a.createElement("img",{className:"thumb",src:"/assets/img/graph_thumbnail.png"}),o.a.createElement("ul",{className:""},o.a.createElement("li",null,"Review session and all-time performance...visually!")),o.a.createElement("input",{onClick:function(){return e.navTo(Oe.HISTORY)},className:"button-size-medium position_bottom_right",type:"button",value:"View Visual History"}),o.a.createElement("div",{className:"clear_both"}))):Vt(zt(t.prototype),"render",this).call(this)}}])&&Mt(n.prototype,r),a&&Mt(n,a),t}(Rt);function Wt(e){return(Wt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function qt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function $t(e,t){return!t||"object"!==Wt(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Yt(e,t,n){return(Yt="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=Gt(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function Gt(e){return(Gt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Qt(e,t){return(Qt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Kt=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=$t(this,Gt(t).call(this,e))).state={isLoading:!0,data:null},n.loadDependencies(),n}var n,r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Qt(e,t)}(t,e),n=t,(r=[{key:"loadDependencies",value:function(){var e=this;this.loadCss(Ce.External.CSS.DATATABLES_CORE).then((function(){e.loadCss(Ce.External.CSS.DATATABLES_ALT)})),this.loadScript(Ce.External.JS.JQUERY).then((function(){e.loadScript(Ce.External.JS.DATATABLES_CORE).then((function(){e.loadScript(Ce.External.JS.DATATABLES_ROWGROUP).then((function(){e.getUserHistory().then((function(t){e.setState({isLoading:!1,data:t})}))}))}))}))}},{key:"initGrid",value:function(){$("#grid").DataTable({data:this.state.data,scrollY:250,order:[[0,"desc"]],columns:[{data:"CreateDate",width:"120"},{data:"SourceType",width:"60"},{data:"SourceKey",render:function(e,t,n,r){return"display"===t&&(e='<a target="_blank" href="'+e+'">'+e+"</a>"),e}},{data:"KeySequenceId",width:"35",render:function(e,t,n,r){return"display"===t&&(e='<a class="historyDetailsLink" href="/secure/HistoryDetails/'+e+'">details</a>'),e}}]});var e=this;$("a.historyDetailsLink").click((function(t){t.preventDefault(),e.props.history.push($(this).attr("href"))}))}},{key:"getUserHistory",value:function(){var e=this.auth.getCurrentToken();return fetch(Ce.API_HISTORY,{method:"Post",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify(e)}).then((function(e){return e.json()})).then((function(e){return Promise.resolve(e)}))}},{key:"componentDidUpdate",value:function(){this.state&&this.state.data&&this.state.data.length>0&&this.initGrid()}},{key:"render",value:function(){return this.authenticationComplete()?o.a.createElement(ot,{authed:!0},o.a.createElement("h2",null,"Session History"),o.a.createElement("div",{className:"content_row"},o.a.createElement(yt,{showLoading:this.state.isLoading}),o.a.createElement("table",{id:"grid",className:"display cell-border stripe hover"},o.a.createElement("thead",null,o.a.createElement("tr",null,o.a.createElement("th",null,"CreateDate"),o.a.createElement("th",null,"SourceType"),o.a.createElement("th",null,"SourceKey"),o.a.createElement("th",null,"Details"))),o.a.createElement("tbody",null)))):Yt(Gt(t.prototype),"render",this).call(this)}}])&&qt(n.prototype,r),a&&qt(n,a),t}(Rt);function Jt(e){return(Jt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Xt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Zt(e,t){return!t||"object"!==Jt(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function en(e){return(en=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function tn(e,t){return(tn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var nn=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=Zt(this,en(t).call(this,e))).state={Value:e.Val1,ValueToDisplay:e.ValToDisplay?e.ValToDisplay:null,Delta:Math.round(100*(e.Val1-e.Val2))/100},n}var n,r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&tn(e,t)}(t,e),n=t,(r=[{key:"render",value:function(){var e;return this.state.Delta>0?e=o.a.createElement("img",{src:"/assets/img/triangle_up.png",alt:"increase"}):this.state.Delta<0&&(e=o.a.createElement("img",{src:"/assets/img/triangle_down.png",alt:"decrease"})),o.a.createElement("span",{className:"delta"},o.a.createElement("span",{className:"delta_label"},null!=this.state.ValueToDisplay?this.state.ValueToDisplay:this.state.Value),o.a.createElement("span",{className:"delta_change_indicator"},0!=this.state.Delta&&e,this.state.Delta))}}])&&Xt(n.prototype,r),a&&Xt(n,a),t}(o.a.Component);function rn(e){return(rn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function on(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function an(e,t){return!t||"object"!==rn(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function un(e){return(un=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ln(e,t){return(ln=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var sn=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=an(this,un(t).call(this,e))).state={SpeedThisSeq:n.props.AnalysisSpeed,SpeedAllTime:n.props.AnalysisSpeedAllTime},n}var n,r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ln(e,t)}(t,e),n=t,(r=[{key:"render",value:function(){return o.a.createElement("table",{className:"static_grid"},o.a.createElement("thead",null,o.a.createElement("tr",null,o.a.createElement("th",{className:"grid_header_sm"},"Metric"),o.a.createElement("th",null,"This Session"),o.a.createElement("th",null,"All Time (",this.state.SpeedAllTime.NumEntitiesRepresented," sessions)"))),o.a.createElement("tbody",null,o.a.createElement("tr",null,o.a.createElement("td",null,"Total Time"),o.a.createElement("td",null,o.a.createElement(nn,{Val1:this.state.SpeedThisSeq.TotalTimeInMilliSec,ValToDisplay:this.state.SpeedThisSeq.TotalTimeDisplayFriendly,Val2:this.state.SpeedAllTime.TotalTimeInMilliSec})),o.a.createElement("td",null,this.state.SpeedAllTime.TotalTimeDisplayFriendly)),o.a.createElement("tr",null,o.a.createElement("td",null,"Chars/sec"),o.a.createElement("td",null,o.a.createElement(nn,{Val1:this.state.SpeedThisSeq.CharsPerSec,Val2:this.state.SpeedAllTime.CharsPerSec})),o.a.createElement("td",null,this.state.SpeedAllTime.CharsPerSec)),o.a.createElement("tr",null,o.a.createElement("td",null,"Words/min"),o.a.createElement("td",null,o.a.createElement(nn,{Val1:this.state.SpeedThisSeq.WordPerMin,Val2:this.state.SpeedAllTime.WordPerMin})),o.a.createElement("td",null,this.state.SpeedAllTime.WordPerMin))))}}])&&on(n.prototype,r),a&&on(n,a),t}(o.a.Component);function cn(e){return(cn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function fn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function pn(e,t){return!t||"object"!==cn(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function dn(e){return(dn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function hn(e,t){return(hn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var mn=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=pn(this,dn(t).call(this,e))).state={AccuracyThisSeq:n.props.AnalysisAccuracy,AccuracyAllTime:n.props.AnalysisAccuracyAllTime},n}var n,r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&hn(e,t)}(t,e),n=t,(r=[{key:"render",value:function(){return o.a.createElement("table",{className:"static_grid"},o.a.createElement("thead",null,o.a.createElement("tr",null,o.a.createElement("th",null,"Metric"),o.a.createElement("th",null,"This Session"),o.a.createElement("th",null,"All Time (",this.state.AccuracyAllTime.NumEntitiesRepresented," sessions)"))),o.a.createElement("tbody",null,o.a.createElement("tr",null,o.a.createElement("td",null,"Accuracy"),o.a.createElement("td",null,o.a.createElement(nn,{Val1:this.state.AccuracyThisSeq.Accuracy,Val2:this.state.AccuracyAllTime.Accuracy})),o.a.createElement("td",null,this.state.AccuracyAllTime.Accuracy)),o.a.createElement("tr",null,o.a.createElement("td",null,"Num Chars"),o.a.createElement("td",null,o.a.createElement(nn,{Val1:this.state.AccuracyThisSeq.NumChars,Val2:this.state.AccuracyAllTime.NumChars})),o.a.createElement("td",null,this.state.AccuracyAllTime.NumChars)),o.a.createElement("tr",null,o.a.createElement("td",null,"Num Words"),o.a.createElement("td",null,o.a.createElement(nn,{Val1:this.state.AccuracyThisSeq.NumWords,Val2:this.state.AccuracyAllTime.NumWords})),o.a.createElement("td",null,this.state.AccuracyAllTime.NumWords)),o.a.createElement("tr",null,o.a.createElement("td",null,"Num Correct Chars"),o.a.createElement("td",null,o.a.createElement(nn,{Val1:this.state.AccuracyThisSeq.NumCorrectChars,Val2:this.state.AccuracyAllTime.NumCorrectChars})),o.a.createElement("td",null,this.state.AccuracyAllTime.NumCorrectChars)),o.a.createElement("tr",null,o.a.createElement("td",null,"Num Incorrect Chars"),o.a.createElement("td",null,o.a.createElement(nn,{Val1:this.state.AccuracyThisSeq.NumIncorrectChars,Val2:this.state.AccuracyAllTime.NumIncorrectChars})),o.a.createElement("td",null,this.state.AccuracyAllTime.NumIncorrectChars)),o.a.createElement("tr",null,o.a.createElement("td",null,"Num Extra Chars"),o.a.createElement("td",null,o.a.createElement(nn,{Val1:this.state.AccuracyThisSeq.NumExtraChars,Val2:this.state.AccuracyAllTime.NumExtraChars})),o.a.createElement("td",null,this.state.AccuracyAllTime.NumExtraChars)),o.a.createElement("tr",null,o.a.createElement("td",null,"Num Short Chars"),o.a.createElement("td",null,o.a.createElement(nn,{Val1:this.state.AccuracyThisSeq.NumShortChars,Val2:this.state.AccuracyAllTime.NumShortChars})),o.a.createElement("td",null,this.state.AccuracyAllTime.NumShortChars))))}}])&&fn(n.prototype,r),a&&fn(n,a),t}(o.a.Component);function yn(e){return(yn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function vn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function gn(e){return(gn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function bn(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function En(e,t){return(En=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function wn(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Sn=function(e){function t(e){var n,r,o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,o=gn(t).call(this,e),n=!o||"object"!==yn(o)&&"function"!=typeof o?bn(r):o,wn(bn(n),"start",(function(){-1==n.state.IntervalId&&(Pe.IS_DEBUG&&console.log("real time analysis: starting"),n.state.IntervalId=setInterval(n.tick,De.TICK_INTERVAL_IN_MS))})),wn(bn(n),"stop",(function(){Pe.IS_DEBUG&&console.log("real time analysis: stopping"),clearInterval(n.state.IntervalId),n.setState({IntervalId:-1})})),wn(bn(n),"tick",(function(){Pe.IS_DEBUG&&console.log("real time analysis: tick fired",n.state,n.props),n.setState({LastTextEvaluated:n.props.TextEntered}),n.props.TextEntered===n.state.LastTextEvaluated?n.setState({TicksWithSameText:n.state.TicksWithSameText+1}):n.setState({TicketsWithSameText:0}),n.hasChangedSignificantly()&&(Pe.IS_DEBUG&&console.log("real time analysis: changed significantly",n.state,n.props),n.setState({LastTextUsed:n.props.TextEntered}),n.props.runAnalyze())})),wn(bn(n),"hasChangedSignificantly",(function(){if(n.props.TextEntered){if(n.props.TextEntered.length>n.state.LastTextUsed.length+De.LENGTH_BUFFER||n.props.TextEntered.length<n.state.LastTextUsed-De.LENGTH_BUFFER)return!0;if(n.state.TicksWithSameText>De.UNCHANGED_TEXT_TICK_THRESHOLD)return n.setState({TicksWithSameText:0}),!0}return!1})),n.state={LastTextUsed:n.props.TextEntered,LastTextEvaluated:n.props.TextEntered,TicksWithSameText:0,IntervalId:-1},n}var n,r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&En(e,t)}(t,e),n=t,(r=[{key:"componentDidUpdate",value:function(){1==this.props.IsRunning?this.start():0==this.props.IsRunning&&-1!=this.state.IntervalId&&this.stop()}},{key:"componentWillUnmount",value:function(){this.stop()}},{key:"render",value:function(){return o.a.createElement(o.a.Fragment,null)}}])&&vn(n.prototype,r),a&&vn(n,a),t}(o.a.Component);function kn(e){return(kn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Tn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Cn(e){return(Cn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function On(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function xn(e,t){return(xn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _n(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Pn=function(e){function t(e){var n,r,o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,o=Cn(t).call(this,e),n=!o||"object"!==kn(o)&&"function"!=typeof o?On(r):o,_n(On(n),"reanalyze",(function(){console.log("reanalyze fired"),n.getErrorAnalysisForExistingSequence()})),_n(On(n),"getErrorAnalysisForExistingSequence",(function(){var e={SequenceId:n.props.sequenceId,TextEntered:n.props.TextEntered?n.props.TextEntered:""};return fetch(Ce.API_RUN_ANALYSIS_FOR_SEQ,{method:"Post",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify(e)}).then((function(e){return Ne(e)})).then((function(e){return e.json()})).then((function(e){return n.setState({isLoading:!1,data:e}),Promise.resolve(e)})).catch((function(e){return console.log(e),n.setState({isLoading:!1,isError:!0}),Promise.reject()}))})),n.state={isLoading:!0,isError:!1,data:null},n}var n,r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&xn(e,t)}(t,e),n=t,(r=[{key:"componentDidMount",value:function(){!0===this.props.peekInRealTime?this.setState({isLoading:!1}):null!=this.props.sequenceId&&-1!=this.props.sequenceId&&this.getErrorAnalysisForExistingSequence()}},{key:"render",value:function(){var e;return!1===this.state.isLoading&&!1===this.state.isError&&this.state.data?e=this.state.data.map((function(e,t){var n="highlight-"+Ie[e.HighlightType];return o.a.createElement("span",{key:t,className:n},e.Text)})):1==this.props.peekInRealTime&&(e=o.a.createElement("span",null,this.props.TextShown)),o.a.createElement(o.a.Fragment,null,o.a.createElement(yt,{showLoading:this.state.isLoading}),o.a.createElement(Sn,{runAnalyze:this.reanalyze,TextEntered:this.props.TextEntered,IsRunning:this.props.IsRunning}),o.a.createElement("form",null,o.a.createElement("div",{className:"error_analysis extra_line_spacing"},e,!0===this.state.isError&&o.a.createElement("p",{className:"position_center error"},"A problem was encountered processing your input")),o.a.createElement("div",{className:"error_analysis_legend"},o.a.createElement("ul",null,o.a.createElement("li",null,o.a.createElement("div",{className:"highlight-IncorrectChar"}),"Incorrect"),o.a.createElement("li",null,o.a.createElement("div",{className:"highlight-ExtraChars"}),o.a.createElement("span",null,"Extra Chars")),o.a.createElement("li",null,o.a.createElement("div",{className:"highlight-ShortChars"}),o.a.createElement("span",null,"Short Chars")),o.a.createElement("li",null,o.a.createElement("div",{className:"highlight-Normal"}),o.a.createElement("span",null,"Normal")),o.a.createElement("li",null,o.a.createElement("div",{className:"highlight-Unevaluated"}),o.a.createElement("span",null,"Unevaluated"))))))}}])&&Tn(n.prototype,r),a&&Tn(n,a),t}(o.a.Component);function An(e){return(An="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function In(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Nn(e,t){return!t||"object"!==An(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Dn(e,t,n){return(Dn="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=Fn(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function Fn(e){return(Fn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Ln(e,t){return(Ln=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Rn=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=Nn(this,Fn(t).call(this,e))).state={isLoading:!0,data:null},n}var n,r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ln(e,t)}(t,e),n=t,(r=[{key:"componentDidMount",value:function(){var e=this;this.getHistoryDetails().then((function(t){e.setState({isLoading:!1,data:t})}))}},{key:"componentDidUpdate",value:function(){this.state&&this.state.data&&this.state.data.length>0&&this.initGrid()}},{key:"getHistoryDetails",value:function(){var e={token:this.auth.getCurrentToken(),sequenceId:this.props.match.params.sequenceId};return fetch(Ce.API_HISTORY_DETAILS,{method:"Post",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify(e)}).then((function(e){return e.json()})).then((function(e){return Promise.resolve(e)}))}},{key:"render",value:function(){return this.authenticationComplete()?o.a.createElement(ot,{authed:!0},o.a.createElement("h2",null,"History Details"),o.a.createElement("div",{className:"content_row_sm"},o.a.createElement(yt,{showLoading:this.state.isLoading}),o.a.createElement("h3",null,"Text Presented to You"),this.state.data&&o.a.createElement(Pn,{TextEntered:this.state.data.TextEntered,sequenceId:this.props.match.params.sequenceId})),o.a.createElement("div",{className:"content_row_sm"},o.a.createElement("h3",null,"Text You Entered"),o.a.createElement("form",null,o.a.createElement("textarea",{name:"textEntered",className:"extra_line_spacing",value:null!=this.state.data?this.state.data.TextEntered:"",readOnly:!0}))),o.a.createElement("div",{className:"content_row_sm"},o.a.createElement("h3",null,'Text Source (AKA: "Where did this text come from")'),0==this.state.isLoading&&this.state.data&&o.a.createElement("table",{className:"static_grid"},o.a.createElement("thead",null,o.a.createElement("tr",null,o.a.createElement("th",{className:"grid_header_sm"},"SourceType"),o.a.createElement("th",null,"Source Key"))),o.a.createElement("tbody",null,o.a.createElement("tr",null,o.a.createElement("td",null,this.state.data.SourceType),o.a.createElement("td",null,o.a.createElement("a",{href:this.state.data.SourceKey}," ",this.state.data.SourceKey)))))),o.a.createElement("div",{className:"content_row_sm"},o.a.createElement(yt,{showLoading:this.state.isLoading}),o.a.createElement("h3",null,"Speed Analysis"),0==this.state.isLoading&&this.state.data&&this.state.data.AnalysisSpeed&&this.state.data.AnalysisSpeedAllTime&&o.a.createElement(sn,{AnalysisSpeed:this.state.data.AnalysisSpeed,AnalysisSpeedAllTime:this.state.data.AnalysisSpeedAllTime})),o.a.createElement("div",{className:"content_row_sm"},o.a.createElement(yt,{showLoading:this.state.isLoading}),o.a.createElement("h3",null,"Accuracy Analysis"),0==this.state.isLoading&&this.state.data&&this.state.data.AnalysisAccuracy&&this.state.data.AnalysisAccuracyAllTime&&o.a.createElement(mn,{AnalysisAccuracy:this.state.data.AnalysisAccuracy,AnalysisAccuracyAllTime:this.state.data.AnalysisAccuracyAllTime}))):Dn(Fn(t.prototype),"render",this).call(this)}}])&&In(n.prototype,r),a&&In(n,a),t}(Rt);function jn(e,t){if(null==e)return{};var n,r,o=G(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function Mn(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function Un(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Vn(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){Un(e,t,n[t])}))}return e}function zn(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Hn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Bn(e,t,n){return t&&Hn(e.prototype,t),n&&Hn(e,n),e}function Wn(e){return(Wn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function qn(e){return(qn="function"==typeof Symbol&&"symbol"===Wn(Symbol.iterator)?function(e){return Wn(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":Wn(e)})(e)}function $n(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Yn(e,t){return!t||"object"!==qn(t)&&"function"!=typeof t?$n(e):t}function Gn(e){return(Gn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Qn(e,t){return(Qn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Kn(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Qn(e,t)}function Jn(e,t){if(e.length!==t.length)return!1;for(var n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}var Xn=function(e,t){var n;void 0===t&&(t=Jn);var r,o=[],a=!1;return function(){for(var i=[],u=0;u<arguments.length;u++)i[u]=arguments[u];return a&&n===this&&t(i,o)?r:(r=e.apply(this,i),a=!0,n=this,o=i,r)}};var Zn=function(){function e(e){this.isSpeedy=void 0===e.speedy||e.speedy,this.tags=[],this.ctr=0,this.nonce=e.nonce,this.key=e.key,this.container=e.container,this.before=null}var t=e.prototype;return t.insert=function(e){if(this.ctr%(this.isSpeedy?65e3:1)==0){var t,n=function(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key),void 0!==e.nonce&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),t}(this);t=0===this.tags.length?this.before:this.tags[this.tags.length-1].nextSibling,this.container.insertBefore(n,t),this.tags.push(n)}var r=this.tags[this.tags.length-1];if(this.isSpeedy){var o=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(r);try{var a=105===e.charCodeAt(1)&&64===e.charCodeAt(0);o.insertRule(e,a?0:o.cssRules.length)}catch(e){0}}else r.appendChild(document.createTextNode(e));this.ctr++},t.flush=function(){this.tags.forEach((function(e){return e.parentNode.removeChild(e)})),this.tags=[],this.ctr=0},e}();var er=function(e){function t(e,t,r){var o=t.trim().split(h);t=o;var a=o.length,i=e.length;switch(i){case 0:case 1:var u=0;for(e=0===i?"":e[0]+" ";u<a;++u)t[u]=n(e,t[u],r).trim();break;default:var l=u=0;for(t=[];u<a;++u)for(var s=0;s<i;++s)t[l++]=n(e[s]+" ",o[u],r).trim()}return t}function n(e,t,n){var r=t.charCodeAt(0);switch(33>r&&(r=(t=t.trim()).charCodeAt(0)),r){case 38:return t.replace(m,"$1"+e.trim());case 58:return e.trim()+t.replace(m,"$1"+e.trim());default:if(0<1*n&&0<t.indexOf("\f"))return t.replace(m,(58===e.charCodeAt(0)?"":"$1")+e.trim())}return e+t}function r(e,t,n,a){var i=e+";",u=2*t+3*n+4*a;if(944===u){e=i.indexOf(":",9)+1;var l=i.substring(e,i.length-1).trim();return l=i.substring(0,e).trim()+l+";",1===P||2===P&&o(l,1)?"-webkit-"+l+l:l}if(0===P||2===P&&!o(i,1))return i;switch(u){case 1015:return 97===i.charCodeAt(10)?"-webkit-"+i+i:i;case 951:return 116===i.charCodeAt(3)?"-webkit-"+i+i:i;case 963:return 110===i.charCodeAt(5)?"-webkit-"+i+i:i;case 1009:if(100!==i.charCodeAt(4))break;case 969:case 942:return"-webkit-"+i+i;case 978:return"-webkit-"+i+"-moz-"+i+i;case 1019:case 983:return"-webkit-"+i+"-moz-"+i+"-ms-"+i+i;case 883:if(45===i.charCodeAt(8))return"-webkit-"+i+i;if(0<i.indexOf("image-set(",11))return i.replace(C,"$1-webkit-$2")+i;break;case 932:if(45===i.charCodeAt(4))switch(i.charCodeAt(5)){case 103:return"-webkit-box-"+i.replace("-grow","")+"-webkit-"+i+"-ms-"+i.replace("grow","positive")+i;case 115:return"-webkit-"+i+"-ms-"+i.replace("shrink","negative")+i;case 98:return"-webkit-"+i+"-ms-"+i.replace("basis","preferred-size")+i}return"-webkit-"+i+"-ms-"+i+i;case 964:return"-webkit-"+i+"-ms-flex-"+i+i;case 1023:if(99!==i.charCodeAt(8))break;return"-webkit-box-pack"+(l=i.substring(i.indexOf(":",15)).replace("flex-","").replace("space-between","justify"))+"-webkit-"+i+"-ms-flex-pack"+l+i;case 1005:return p.test(i)?i.replace(f,":-webkit-")+i.replace(f,":-moz-")+i:i;case 1e3:switch(t=(l=i.substring(13).trim()).indexOf("-")+1,l.charCodeAt(0)+l.charCodeAt(t)){case 226:l=i.replace(b,"tb");break;case 232:l=i.replace(b,"tb-rl");break;case 220:l=i.replace(b,"lr");break;default:return i}return"-webkit-"+i+"-ms-"+l+i;case 1017:if(-1===i.indexOf("sticky",9))break;case 975:switch(t=(i=e).length-10,u=(l=(33===i.charCodeAt(t)?i.substring(0,t):i).substring(e.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|l.charCodeAt(7))){case 203:if(111>l.charCodeAt(8))break;case 115:i=i.replace(l,"-webkit-"+l)+";"+i;break;case 207:case 102:i=i.replace(l,"-webkit-"+(102<u?"inline-":"")+"box")+";"+i.replace(l,"-webkit-"+l)+";"+i.replace(l,"-ms-"+l+"box")+";"+i}return i+";";case 938:if(45===i.charCodeAt(5))switch(i.charCodeAt(6)){case 105:return l=i.replace("-items",""),"-webkit-"+i+"-webkit-box-"+l+"-ms-flex-"+l+i;case 115:return"-webkit-"+i+"-ms-flex-item-"+i.replace(S,"")+i;default:return"-webkit-"+i+"-ms-flex-line-pack"+i.replace("align-content","").replace(S,"")+i}break;case 973:case 989:if(45!==i.charCodeAt(3)||122===i.charCodeAt(4))break;case 931:case 953:if(!0===T.test(e))return 115===(l=e.substring(e.indexOf(":")+1)).charCodeAt(0)?r(e.replace("stretch","fill-available"),t,n,a).replace(":fill-available",":stretch"):i.replace(l,"-webkit-"+l)+i.replace(l,"-moz-"+l.replace("fill-",""))+i;break;case 962:if(i="-webkit-"+i+(102===i.charCodeAt(5)?"-ms-"+i:"")+i,211===n+a&&105===i.charCodeAt(13)&&0<i.indexOf("transform",10))return i.substring(0,i.indexOf(";",27)+1).replace(d,"$1-webkit-$2")+i}return i}function o(e,t){var n=e.indexOf(1===t?":":"{"),r=e.substring(0,3!==t?n:10);return n=e.substring(n+1,e.length-1),D(2!==t?r:r.replace(k,"$1"),n,t)}function a(e,t){var n=r(t,t.charCodeAt(0),t.charCodeAt(1),t.charCodeAt(2));return n!==t+";"?n.replace(w," or ($1)").substring(4):"("+t+")"}function i(e,t,n,r,o,a,i,u,s,c){for(var f,p=0,d=t;p<N;++p)switch(f=I[p].call(l,e,d,n,r,o,a,i,u,s,c)){case void 0:case!1:case!0:case null:break;default:d=f}if(d!==t)return d}function u(e){return void 0!==(e=e.prefix)&&(D=null,e?"function"!=typeof e?P=1:(P=2,D=e):P=0),u}function l(e,n){var u=e;if(33>u.charCodeAt(0)&&(u=u.trim()),u=[u],0<N){var l=i(-1,n,u,u,x,O,0,0,0,0);void 0!==l&&"string"==typeof l&&(n=l)}var f=function e(n,u,l,f,p){for(var d,h,m,b,w,S=0,k=0,T=0,C=0,I=0,D=0,L=m=d=0,R=0,j=0,M=0,U=0,V=l.length,z=V-1,H="",B="",W="",q="";R<V;){if(h=l.charCodeAt(R),R===z&&0!==k+C+T+S&&(0!==k&&(h=47===k?10:47),C=T=S=0,V++,z++),0===k+C+T+S){if(R===z&&(0<j&&(H=H.replace(c,"")),0<H.trim().length)){switch(h){case 32:case 9:case 59:case 13:case 10:break;default:H+=l.charAt(R)}h=59}switch(h){case 123:for(d=(H=H.trim()).charCodeAt(0),m=1,U=++R;R<V;){switch(h=l.charCodeAt(R)){case 123:m++;break;case 125:m--;break;case 47:switch(h=l.charCodeAt(R+1)){case 42:case 47:e:{for(L=R+1;L<z;++L)switch(l.charCodeAt(L)){case 47:if(42===h&&42===l.charCodeAt(L-1)&&R+2!==L){R=L+1;break e}break;case 10:if(47===h){R=L+1;break e}}R=L}}break;case 91:h++;case 40:h++;case 34:case 39:for(;R++<z&&l.charCodeAt(R)!==h;);}if(0===m)break;R++}switch(m=l.substring(U,R),0===d&&(d=(H=H.replace(s,"").trim()).charCodeAt(0)),d){case 64:switch(0<j&&(H=H.replace(c,"")),h=H.charCodeAt(1)){case 100:case 109:case 115:case 45:j=u;break;default:j=A}if(U=(m=e(u,j,m,h,p+1)).length,0<N&&(w=i(3,m,j=t(A,H,M),u,x,O,U,h,p,f),H=j.join(""),void 0!==w&&0===(U=(m=w.trim()).length)&&(h=0,m="")),0<U)switch(h){case 115:H=H.replace(E,a);case 100:case 109:case 45:m=H+"{"+m+"}";break;case 107:m=(H=H.replace(y,"$1 $2"))+"{"+m+"}",m=1===P||2===P&&o("@"+m,3)?"@-webkit-"+m+"@"+m:"@"+m;break;default:m=H+m,112===f&&(B+=m,m="")}else m="";break;default:m=e(u,t(u,H,M),m,f,p+1)}W+=m,m=M=j=L=d=0,H="",h=l.charCodeAt(++R);break;case 125:case 59:if(1<(U=(H=(0<j?H.replace(c,""):H).trim()).length))switch(0===L&&(d=H.charCodeAt(0),45===d||96<d&&123>d)&&(U=(H=H.replace(" ",":")).length),0<N&&void 0!==(w=i(1,H,u,n,x,O,B.length,f,p,f))&&0===(U=(H=w.trim()).length)&&(H="\0\0"),d=H.charCodeAt(0),h=H.charCodeAt(1),d){case 0:break;case 64:if(105===h||99===h){q+=H+l.charAt(R);break}default:58!==H.charCodeAt(U-1)&&(B+=r(H,d,h,H.charCodeAt(2)))}M=j=L=d=0,H="",h=l.charCodeAt(++R)}}switch(h){case 13:case 10:47===k?k=0:0===1+d&&107!==f&&0<H.length&&(j=1,H+="\0"),0<N*F&&i(0,H,u,n,x,O,B.length,f,p,f),O=1,x++;break;case 59:case 125:if(0===k+C+T+S){O++;break}default:switch(O++,b=l.charAt(R),h){case 9:case 32:if(0===C+S+k)switch(I){case 44:case 58:case 9:case 32:b="";break;default:32!==h&&(b=" ")}break;case 0:b="\\0";break;case 12:b="\\f";break;case 11:b="\\v";break;case 38:0===C+k+S&&(j=M=1,b="\f"+b);break;case 108:if(0===C+k+S+_&&0<L)switch(R-L){case 2:112===I&&58===l.charCodeAt(R-3)&&(_=I);case 8:111===D&&(_=D)}break;case 58:0===C+k+S&&(L=R);break;case 44:0===k+T+C+S&&(j=1,b+="\r");break;case 34:case 39:0===k&&(C=C===h?0:0===C?h:C);break;case 91:0===C+k+T&&S++;break;case 93:0===C+k+T&&S--;break;case 41:0===C+k+S&&T--;break;case 40:if(0===C+k+S){if(0===d)switch(2*I+3*D){case 533:break;default:d=1}T++}break;case 64:0===k+T+C+S+L+m&&(m=1);break;case 42:case 47:if(!(0<C+S+T))switch(k){case 0:switch(2*h+3*l.charCodeAt(R+1)){case 235:k=47;break;case 220:U=R,k=42}break;case 42:47===h&&42===I&&U+2!==R&&(33===l.charCodeAt(U+2)&&(B+=l.substring(U,R+1)),b="",k=0)}}0===k&&(H+=b)}D=I,I=h,R++}if(0<(U=B.length)){if(j=u,0<N&&(void 0!==(w=i(2,B,j,n,x,O,U,f,p,f))&&0===(B=w).length))return q+B+W;if(B=j.join(",")+"{"+B+"}",0!=P*_){switch(2!==P||o(B,2)||(_=0),_){case 111:B=B.replace(g,":-moz-$1")+B;break;case 112:B=B.replace(v,"::-webkit-input-$1")+B.replace(v,"::-moz-$1")+B.replace(v,":-ms-input-$1")+B}_=0}}return q+B+W}(A,u,n,0,0);return 0<N&&(void 0!==(l=i(-2,f,u,u,x,O,f.length,0,0,0))&&(f=l)),"",_=0,O=x=1,f}var s=/^\0+/g,c=/[\0\r\f]/g,f=/: */g,p=/zoo|gra/,d=/([,: ])(transform)/g,h=/,\r+?/g,m=/([\t\r\n ])*\f?&/g,y=/@(k\w+)\s*(\S*)\s*/,v=/::(place)/g,g=/:(read-only)/g,b=/[svh]\w+-[tblr]{2}/,E=/\(\s*(.*)\s*\)/g,w=/([\s\S]*?);/g,S=/-self|flex-/g,k=/[^]*?(:[rp][el]a[\w-]+)[^]*/,T=/stretch|:\s*\w+\-(?:conte|avail)/,C=/([^-])(image-set\()/,O=1,x=1,_=0,P=1,A=[],I=[],N=0,D=null,F=0;return l.use=function e(t){switch(t){case void 0:case null:N=I.length=0;break;default:if("function"==typeof t)I[N++]=t;else if("object"==typeof t)for(var n=0,r=t.length;n<r;++n)e(t[n]);else F=0|!!t}return e},l.set=u,void 0!==e&&u(e),l};function tr(e){e&&nr.current.insert(e+"}")}var nr={current:null},rr=function(e,t,n,r,o,a,i,u,l,s){switch(e){case 1:switch(t.charCodeAt(0)){case 64:return nr.current.insert(t+";"),"";case 108:if(98===t.charCodeAt(2))return""}break;case 2:if(0===u)return t+"/*|*/";break;case 3:switch(u){case 102:case 112:return nr.current.insert(n[0]+t),"";default:return t+(0===s?"/*|*/":"")}case-2:t.split("/*|*/}").forEach(tr)}},or=function(e){void 0===e&&(e={});var t,n=e.key||"css";void 0!==e.prefix&&(t={prefix:e.prefix});var r=new er(t);var o,a={};o=e.container||document.head;var i,u=document.querySelectorAll("style[data-emotion-"+n+"]");Array.prototype.forEach.call(u,(function(e){e.getAttribute("data-emotion-"+n).split(" ").forEach((function(e){a[e]=!0})),e.parentNode!==o&&o.appendChild(e)})),r.use(e.stylisPlugins)(rr),i=function(e,t,n,o){var a=t.name;nr.current=n,r(e,t.styles),o&&(l.inserted[a]=!0)};var l={key:n,sheet:new Zn({key:n,container:o,nonce:e.nonce,speedy:e.speedy}),nonce:e.nonce,inserted:a,registered:{},insert:i};return l};function ar(e,t,n){var r="";return n.split(" ").forEach((function(n){void 0!==e[n]?t.push(e[n]):r+=n+" "})),r}var ir=function(e,t,n){var r=e.key+"-"+t.name;if(!1===n&&void 0===e.registered[r]&&(e.registered[r]=t.styles),void 0===e.inserted[t.name]){var o=t;do{e.insert("."+r,o,e.sheet,!0);o=o.next}while(void 0!==o)}};var ur=function(e){for(var t,n=e.length,r=n^n,o=0;n>=4;)t=1540483477*(65535&(t=255&e.charCodeAt(o)|(255&e.charCodeAt(++o))<<8|(255&e.charCodeAt(++o))<<16|(255&e.charCodeAt(++o))<<24))+((1540483477*(t>>>16)&65535)<<16),r=1540483477*(65535&r)+((1540483477*(r>>>16)&65535)<<16)^(t=1540483477*(65535&(t^=t>>>24))+((1540483477*(t>>>16)&65535)<<16)),n-=4,++o;switch(n){case 3:r^=(255&e.charCodeAt(o+2))<<16;case 2:r^=(255&e.charCodeAt(o+1))<<8;case 1:r=1540483477*(65535&(r^=255&e.charCodeAt(o)))+((1540483477*(r>>>16)&65535)<<16)}return r=1540483477*(65535&(r^=r>>>13))+((1540483477*(r>>>16)&65535)<<16),((r^=r>>>15)>>>0).toString(36)},lr={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};var sr=/[A-Z]|^ms/g,cr=/_EMO_([^_]+?)_([^]*?)_EMO_/g,fr=function(e){return 45===e.charCodeAt(1)},pr=function(e){return null!=e&&"boolean"!=typeof e},dr=function(e){var t={};return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}}((function(e){return fr(e)?e:e.replace(sr,"-$&").toLowerCase()})),hr=function(e,t){switch(e){case"animation":case"animationName":if("string"==typeof t)return t.replace(cr,(function(e,t,n){return yr={name:t,styles:n,next:yr},t}))}return 1===lr[e]||fr(e)||"number"!=typeof t||0===t?t:t+"px"};function mr(e,t,n,r){if(null==n)return"";if(void 0!==n.__emotion_styles)return n;switch(typeof n){case"boolean":return"";case"object":if(1===n.anim)return yr={name:n.name,styles:n.styles,next:yr},n.name;if(void 0!==n.styles){var o=n.next;if(void 0!==o)for(;void 0!==o;)yr={name:o.name,styles:o.styles,next:yr},o=o.next;return n.styles+";"}return function(e,t,n){var r="";if(Array.isArray(n))for(var o=0;o<n.length;o++)r+=mr(e,t,n[o],!1);else for(var a in n){var i=n[a];if("object"!=typeof i)null!=t&&void 0!==t[i]?r+=a+"{"+t[i]+"}":pr(i)&&(r+=dr(a)+":"+hr(a,i)+";");else if(!Array.isArray(i)||"string"!=typeof i[0]||null!=t&&void 0!==t[i[0]]){var u=mr(e,t,i,!1);switch(a){case"animation":case"animationName":r+=dr(a)+":"+u+";";break;default:r+=a+"{"+u+"}"}}else for(var l=0;l<i.length;l++)pr(i[l])&&(r+=dr(a)+":"+hr(a,i[l])+";")}return r}(e,t,n);case"function":if(void 0!==e){var a=yr,i=n(e);return yr=a,mr(e,t,i,r)}break;case"string":}if(null==t)return n;var u=t[n];return void 0===u||r?n:u}var yr,vr=/label:\s*([^\s;\n{]+)\s*;/g;var gr=function(e,t,n){if(1===e.length&&"object"==typeof e[0]&&null!==e[0]&&void 0!==e[0].styles)return e[0];var r=!0,o="";yr=void 0;var a=e[0];null==a||void 0===a.raw?(r=!1,o+=mr(n,t,a,!1)):o+=a[0];for(var i=1;i<e.length;i++)o+=mr(n,t,e[i],46===o.charCodeAt(o.length-1)),r&&(o+=a[i]);vr.lastIndex=0;for(var u,l="";null!==(u=vr.exec(o));)l+="-"+u[1];return{name:ur(o)+l,styles:o,next:yr}};var br=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return gr(t)},Er=Object(r.createContext)("undefined"!=typeof HTMLElement?or():null),wr=Object(r.createContext)({}),Sr=Er.Provider,kr=function(e){return Object(r.forwardRef)((function(t,n){return Object(r.createElement)(Er.Consumer,null,(function(r){return e(t,r,n)}))}))},Tr="__EMOTION_TYPE_PLEASE_DO_NOT_USE__",Cr=Object.prototype.hasOwnProperty,Or=function(e,t,n,o){var a=null===n?t.css:t.css(n);"string"==typeof a&&void 0!==e.registered[a]&&(a=e.registered[a]);var i=t[Tr],u=[a],l="";"string"==typeof t.className?l=ar(e.registered,u,t.className):null!=t.className&&(l=t.className+" ");var s=gr(u);ir(e,s,"string"==typeof i);l+=e.key+"-"+s.name;var c={};for(var f in t)Cr.call(t,f)&&"css"!==f&&f!==Tr&&(c[f]=t[f]);return c.ref=o,c.className=l,Object(r.createElement)(i,c)},xr=kr((function(e,t,n){return"function"==typeof e.css?Object(r.createElement)(wr.Consumer,null,(function(r){return Or(t,e,r,n)})):Or(t,e,null,n)}));var _r=function(e,t){var n=arguments;if(null==t||!Cr.call(t,"css"))return r.createElement.apply(void 0,n);var o=n.length,a=new Array(o);a[0]=xr;var i={};for(var u in t)Cr.call(t,u)&&(i[u]=t[u]);i[Tr]=e,a[1]=i;for(var l=2;l<o;l++)a[l]=n[l];return r.createElement.apply(null,a)},Pr=(r.Component,function e(t){for(var n=t.length,r=0,o="";r<n;r++){var a=t[r];if(null!=a){var i=void 0;switch(typeof a){case"boolean":break;case"object":if(Array.isArray(a))i=e(a);else for(var u in i="",a)a[u]&&u&&(i&&(i+=" "),i+=u);break;default:i=a}i&&(o&&(o+=" "),o+=i)}}return o});function Ar(e,t,n){var r=[],o=ar(e,r,n);return r.length<2?n:o+t(r)}var Ir=kr((function(e,t){return Object(r.createElement)(wr.Consumer,null,(function(n){var r=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];var o=gr(n,t.registered);return ir(t,o,!1),t.key+"-"+o.name},o={css:r,cx:function(){for(var e=arguments.length,n=new Array(e),o=0;o<e;o++)n[o]=arguments[o];return Ar(t.registered,r,Pr(n))},theme:n},a=e.children(o);return!0,a}))})),Nr=function(){};function Dr(e,t){return t?"-"===t[0]?e+t:e+"__"+t:e}function Fr(e,t,n){var r=[n];if(t&&e)for(var o in t)t.hasOwnProperty(o)&&t[o]&&r.push("".concat(Dr(e,o)));return r.filter((function(e){return e})).map((function(e){return String(e).trim()})).join(" ")}var Lr=function(e){return Array.isArray(e)?e.filter(Boolean):"object"===qn(e)&&null!==e?[e]:[]};function Rr(e){return[document.documentElement,document.body,window].indexOf(e)>-1}function jr(e){return Rr(e)?window.pageYOffset:e.scrollTop}function Mr(e,t){Rr(e)?window.scrollTo(0,t):e.scrollTop=t}function Ur(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:200,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:Nr,o=jr(e),a=t-o,i=10,u=0;!function t(){var l,s=a*((l=(l=u+=i)/n-1)*l*l+1)+o;Mr(e,s),u<n?window.requestAnimationFrame(t):r(e)}()}function Vr(){try{return document.createEvent("TouchEvent"),!0}catch(e){return!1}}var zr=n(5),Hr=n.n(zr);function Br(e){var t=e.maxHeight,n=e.menuEl,r=e.minHeight,o=e.placement,a=e.shouldScroll,i=e.isFixedPosition,u=e.theme.spacing,l=function(e){var t=getComputedStyle(e),n="absolute"===t.position,r=/(auto|scroll)/,o=document.documentElement;if("fixed"===t.position)return o;for(var a=e;a=a.parentElement;)if(t=getComputedStyle(a),(!n||"static"!==t.position)&&r.test(t.overflow+t.overflowY+t.overflowX))return a;return o}(n),s={placement:"bottom",maxHeight:t};if(!n||!n.offsetParent)return s;var c=l.getBoundingClientRect().height,f=n.getBoundingClientRect(),p=f.bottom,d=f.height,h=f.top,m=n.offsetParent.getBoundingClientRect().top,y=window.innerHeight,v=jr(l),g=parseInt(getComputedStyle(n).marginBottom,10),b=parseInt(getComputedStyle(n).marginTop,10),E=m-b,w=y-h,S=E+v,k=c-v-h,T=p-y+v+g,C=v+h-b;switch(o){case"auto":case"bottom":if(w>=d)return{placement:"bottom",maxHeight:t};if(k>=d&&!i)return a&&Ur(l,T,160),{placement:"bottom",maxHeight:t};if(!i&&k>=r||i&&w>=r)return a&&Ur(l,T,160),{placement:"bottom",maxHeight:i?w-g:k-g};if("auto"===o||i){var O=t,x=i?E:S;return x>=r&&(O=Math.min(x-g-u.controlHeight,t)),{placement:"top",maxHeight:O}}if("bottom"===o)return Mr(l,T),{placement:"bottom",maxHeight:t};break;case"top":if(E>=d)return{placement:"top",maxHeight:t};if(S>=d&&!i)return a&&Ur(l,C,160),{placement:"top",maxHeight:t};if(!i&&S>=r||i&&E>=r){var _=t;return(!i&&S>=r||i&&E>=r)&&(_=i?E-b:S-b),a&&Ur(l,C,160),{placement:"top",maxHeight:_}}return{placement:"bottom",maxHeight:t};default:throw new Error('Invalid placement provided "'.concat(o,'".'))}return s}var Wr=function(e){return"auto"===e?"bottom":e},qr=function(e){function t(){var e,n;zn(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return Un($n($n(n=Yn(this,(e=Gn(t)).call.apply(e,[this].concat(o))))),"state",{maxHeight:n.props.maxMenuHeight,placement:null}),Un($n($n(n)),"getPlacement",(function(e){var t=n.props,r=t.minMenuHeight,o=t.maxMenuHeight,a=t.menuPlacement,i=t.menuPosition,u=t.menuShouldScrollIntoView,l=t.theme,s=n.context.getPortalPlacement;if(e){var c="fixed"===i,f=Br({maxHeight:o,menuEl:e,minHeight:r,placement:a,shouldScroll:u&&!c,isFixedPosition:c,theme:l});s&&s(f),n.setState(f)}})),Un($n($n(n)),"getUpdatedProps",(function(){var e=n.props.menuPlacement,t=n.state.placement||Wr(e);return Vn({},n.props,{placement:t,maxHeight:n.state.maxHeight})})),n}return Kn(t,e),Bn(t,[{key:"render",value:function(){return(0,this.props.children)({ref:this.getPlacement,placerProps:this.getUpdatedProps()})}}]),t}(r.Component);Un(qr,"contextTypes",{getPortalPlacement:s.a.func});var $r=function(e){var t=e.theme,n=t.spacing.baseUnit;return{color:t.colors.neutral40,padding:"".concat(2*n,"px ").concat(3*n,"px"),textAlign:"center"}},Yr=$r,Gr=$r,Qr=function(e){var t=e.children,n=e.className,r=e.cx,o=e.getStyles,a=e.innerProps;return _r("div",c({css:o("noOptionsMessage",e),className:r({"menu-notice":!0,"menu-notice--no-options":!0},n)},a),t)};Qr.defaultProps={children:"No options"};var Kr=function(e){var t=e.children,n=e.className,r=e.cx,o=e.getStyles,a=e.innerProps;return _r("div",c({css:o("loadingMessage",e),className:r({"menu-notice":!0,"menu-notice--loading":!0},n)},a),t)};Kr.defaultProps={children:"Loading..."};var Jr=function(e){function t(){var e,n;zn(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return Un($n($n(n=Yn(this,(e=Gn(t)).call.apply(e,[this].concat(o))))),"state",{placement:null}),Un($n($n(n)),"getPortalPlacement",(function(e){var t=e.placement;t!==Wr(n.props.menuPlacement)&&n.setState({placement:t})})),n}return Kn(t,e),Bn(t,[{key:"getChildContext",value:function(){return{getPortalPlacement:this.getPortalPlacement}}},{key:"render",value:function(){var e=this.props,t=e.appendTo,n=e.children,r=e.controlElement,o=e.menuPlacement,i=e.menuPosition,u=e.getStyles,l="fixed"===i;if(!t&&!l||!r)return null;var s=this.state.placement||Wr(o),c=function(e){var t=e.getBoundingClientRect();return{bottom:t.bottom,height:t.height,left:t.left,right:t.right,top:t.top,width:t.width}}(r),f=l?0:window.pageYOffset,p=c[s]+f,d=_r("div",{css:u("menuPortal",{offset:p,position:i,rect:c})},n);return t?Object(a.createPortal)(d,t):d}}]),t}(r.Component);Un(Jr,"childContextTypes",{getPortalPlacement:s.a.func});var Xr=Array.isArray,Zr=Object.keys,eo=Object.prototype.hasOwnProperty;function to(e,t){try{return function e(t,n){if(t===n)return!0;if(t&&n&&"object"==qn(t)&&"object"==qn(n)){var r,o,a,i=Xr(t),u=Xr(n);if(i&&u){if((o=t.length)!=n.length)return!1;for(r=o;0!=r--;)if(!e(t[r],n[r]))return!1;return!0}if(i!=u)return!1;var l=t instanceof Date,s=n instanceof Date;if(l!=s)return!1;if(l&&s)return t.getTime()==n.getTime();var c=t instanceof RegExp,f=n instanceof RegExp;if(c!=f)return!1;if(c&&f)return t.toString()==n.toString();var p=Zr(t);if((o=p.length)!==Zr(n).length)return!1;for(r=o;0!=r--;)if(!eo.call(n,p[r]))return!1;for(r=o;0!=r--;)if(!("_owner"===(a=p[r])&&t.$$typeof||e(t[a],n[a])))return!1;return!0}return t!=t&&n!=n}(e,t)}catch(e){if(e.message&&e.message.match(/stack|recursion/i))return console.warn("Warning: react-fast-compare does not handle circular references.",e.name,e.message),!1;throw e}}var no=function(e){function t(){return zn(this,t),Yn(this,Gn(t).apply(this,arguments))}return Kn(t,e),Bn(t,[{key:"render",value:function(){var e=this.props,t=e.children,n=e.className,r=e.cx,o=e.isMulti,a=e.getStyles,i=e.hasValue;return _r("div",{css:a("valueContainer",this.props),className:r({"value-container":!0,"value-container--is-multi":o,"value-container--has-value":i},n)},t)}}]),t}(r.Component);function ro(){var e,t,n=(e=["\n  0%, 80%, 100% { opacity: 0; }\n  40% { opacity: 1; }\n"],t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}})));return ro=function(){return n},n}var oo={name:"19bqh2r",styles:"display:inline-block;fill:currentColor;line-height:1;stroke:currentColor;stroke-width:0;"},ao=function(e){var t=e.size,n=jn(e,["size"]);return _r("svg",c({height:t,width:t,viewBox:"0 0 20 20","aria-hidden":"true",focusable:"false",css:oo},n))},io=function(e){return _r(ao,c({size:20},e),_r("path",{d:"M14.348 14.849c-0.469 0.469-1.229 0.469-1.697 0l-2.651-3.030-2.651 3.029c-0.469 0.469-1.229 0.469-1.697 0-0.469-0.469-0.469-1.229 0-1.697l2.758-3.15-2.759-3.152c-0.469-0.469-0.469-1.228 0-1.697s1.228-0.469 1.697 0l2.652 3.031 2.651-3.031c0.469-0.469 1.228-0.469 1.697 0s0.469 1.229 0 1.697l-2.758 3.152 2.758 3.15c0.469 0.469 0.469 1.229 0 1.698z"}))},uo=function(e){return _r(ao,c({size:20},e),_r("path",{d:"M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z"}))},lo=function(e){var t=e.isFocused,n=e.theme,r=n.spacing.baseUnit,o=n.colors;return{label:"indicatorContainer",color:t?o.neutral60:o.neutral20,display:"flex",padding:2*r,transition:"color 150ms",":hover":{color:t?o.neutral80:o.neutral40}}},so=lo,co=lo,fo=function(){var e=br.apply(void 0,arguments),t="animation-"+e.name;return{name:t,styles:"@keyframes "+t+"{"+e.styles+"}",anim:1,toString:function(){return"_EMO_"+this.name+"_"+this.styles+"_EMO_"}}}(ro()),po=function(e){var t=e.delay,n=e.offset;return _r("span",{css:br({animation:"".concat(fo," 1s ease-in-out ").concat(t,"ms infinite;"),backgroundColor:"currentColor",borderRadius:"1em",display:"inline-block",marginLeft:n?"1em":null,height:"1em",verticalAlign:"top",width:"1em"},"")})},ho=function(e){var t=e.className,n=e.cx,r=e.getStyles,o=e.innerProps,a=e.isRtl;return _r("div",c({},o,{css:r("loadingIndicator",e),className:n({indicator:!0,"loading-indicator":!0},t)}),_r(po,{delay:0,offset:a}),_r(po,{delay:160,offset:!0}),_r(po,{delay:320,offset:!a}))};ho.defaultProps={size:4};var mo=function(e){return{label:"input",background:0,border:0,fontSize:"inherit",opacity:e?0:1,outline:0,padding:0,color:"inherit"}},yo=function(e){var t=e.children,n=e.innerProps;return _r("div",n,t)},vo=yo,go=yo,bo=function(e){function t(){return zn(this,t),Yn(this,Gn(t).apply(this,arguments))}return Kn(t,e),Bn(t,[{key:"render",value:function(){var e=this.props,t=e.children,n=e.innerProps;return _r("div",n,t||_r(io,{size:14}))}}]),t}(r.Component),Eo=function(e){function t(){return zn(this,t),Yn(this,Gn(t).apply(this,arguments))}return Kn(t,e),Bn(t,[{key:"render",value:function(){var e=this,t=this.props,n=t.children,r=t.className,o=t.components,a=t.cx,i=t.data,u=t.getStyles,l=t.innerProps,s=t.isDisabled,c=t.removeProps,f=t.selectProps,p=o.Container,d=o.Label,h=o.Remove;return _r(Ir,null,(function(t){var o=t.css,m=t.cx;return _r(p,{data:i,innerProps:Vn({},l,{className:m(o(u("multiValue",e.props)),a({"multi-value":!0,"multi-value--is-disabled":s},r))}),selectProps:f},_r(d,{data:i,innerProps:{className:m(o(u("multiValueLabel",e.props)),a({"multi-value__label":!0},r))},selectProps:f},n),_r(h,{data:i,innerProps:Vn({className:m(o(u("multiValueRemove",e.props)),a({"multi-value__remove":!0},r))},c),selectProps:f}))}))}}]),t}(r.Component);Un(Eo,"defaultProps",{cropWithEllipsis:!0});var wo={ClearIndicator:function(e){var t=e.children,n=e.className,r=e.cx,o=e.getStyles,a=e.innerProps;return _r("div",c({},a,{css:o("clearIndicator",e),className:r({indicator:!0,"clear-indicator":!0},n)}),t||_r(io,null))},Control:function(e){var t=e.children,n=e.cx,r=e.getStyles,o=e.className,a=e.isDisabled,i=e.isFocused,u=e.innerRef,l=e.innerProps,s=e.menuIsOpen;return _r("div",c({ref:u,css:r("control",e),className:n({control:!0,"control--is-disabled":a,"control--is-focused":i,"control--menu-is-open":s},o)},l),t)},DropdownIndicator:function(e){var t=e.children,n=e.className,r=e.cx,o=e.getStyles,a=e.innerProps;return _r("div",c({},a,{css:o("dropdownIndicator",e),className:r({indicator:!0,"dropdown-indicator":!0},n)}),t||_r(uo,null))},DownChevron:uo,CrossIcon:io,Group:function(e){var t=e.children,n=e.className,r=e.cx,o=e.getStyles,a=e.Heading,i=e.headingProps,u=e.label,l=e.theme,s=e.selectProps;return _r("div",{css:o("group",e),className:r({group:!0},n)},_r(a,c({},i,{selectProps:s,theme:l,getStyles:o,cx:r}),u),_r("div",null,t))},GroupHeading:function(e){var t=e.className,n=e.cx,r=e.getStyles,o=e.theme,a=(e.selectProps,jn(e,["className","cx","getStyles","theme","selectProps"]));return _r("div",c({css:r("groupHeading",Vn({theme:o},a)),className:n({"group-heading":!0},t)},a))},IndicatorsContainer:function(e){var t=e.children,n=e.className,r=e.cx,o=e.getStyles;return _r("div",{css:o("indicatorsContainer",e),className:r({indicators:!0},n)},t)},IndicatorSeparator:function(e){var t=e.className,n=e.cx,r=e.getStyles,o=e.innerProps;return _r("span",c({},o,{css:r("indicatorSeparator",e),className:n({"indicator-separator":!0},t)}))},Input:function(e){var t=e.className,n=e.cx,r=e.getStyles,o=e.innerRef,a=e.isHidden,i=e.isDisabled,u=e.theme,l=(e.selectProps,jn(e,["className","cx","getStyles","innerRef","isHidden","isDisabled","theme","selectProps"]));return _r("div",{css:r("input",Vn({theme:u},l))},_r(Hr.a,c({className:n({input:!0},t),inputRef:o,inputStyle:mo(a),disabled:i},l)))},LoadingIndicator:ho,Menu:function(e){var t=e.children,n=e.className,r=e.cx,o=e.getStyles,a=e.innerRef,i=e.innerProps;return _r("div",c({css:o("menu",e),className:r({menu:!0},n)},i,{ref:a}),t)},MenuList:function(e){var t=e.children,n=e.className,r=e.cx,o=e.getStyles,a=e.isMulti,i=e.innerRef;return _r("div",{css:o("menuList",e),className:r({"menu-list":!0,"menu-list--is-multi":a},n),ref:i},t)},MenuPortal:Jr,LoadingMessage:Kr,NoOptionsMessage:Qr,MultiValue:Eo,MultiValueContainer:vo,MultiValueLabel:go,MultiValueRemove:bo,Option:function(e){var t=e.children,n=e.className,r=e.cx,o=e.getStyles,a=e.isDisabled,i=e.isFocused,u=e.isSelected,l=e.innerRef,s=e.innerProps;return _r("div",c({css:o("option",e),className:r({option:!0,"option--is-disabled":a,"option--is-focused":i,"option--is-selected":u},n),ref:l},s),t)},Placeholder:function(e){var t=e.children,n=e.className,r=e.cx,o=e.getStyles,a=e.innerProps;return _r("div",c({css:o("placeholder",e),className:r({placeholder:!0},n)},a),t)},SelectContainer:function(e){var t=e.children,n=e.className,r=e.cx,o=e.getStyles,a=e.innerProps,i=e.isDisabled,u=e.isRtl;return _r("div",c({css:o("container",e),className:r({"--is-disabled":i,"--is-rtl":u},n)},a),t)},SingleValue:function(e){var t=e.children,n=e.className,r=e.cx,o=e.getStyles,a=e.isDisabled,i=e.innerProps;return _r("div",c({css:o("singleValue",e),className:r({"single-value":!0,"single-value--is-disabled":a},n)},i),t)},ValueContainer:no},So=function(e){return Vn({},wo,e.components)},ko=[{base:"A",letters:/[\u0041\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F]/g},{base:"AA",letters:/[\uA732]/g},{base:"AE",letters:/[\u00C6\u01FC\u01E2]/g},{base:"AO",letters:/[\uA734]/g},{base:"AU",letters:/[\uA736]/g},{base:"AV",letters:/[\uA738\uA73A]/g},{base:"AY",letters:/[\uA73C]/g},{base:"B",letters:/[\u0042\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181]/g},{base:"C",letters:/[\u0043\u24B8\uFF23\u0106\u0108\u010A\u010C\u00C7\u1E08\u0187\u023B\uA73E]/g},{base:"D",letters:/[\u0044\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779]/g},{base:"DZ",letters:/[\u01F1\u01C4]/g},{base:"Dz",letters:/[\u01F2\u01C5]/g},{base:"E",letters:/[\u0045\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E]/g},{base:"F",letters:/[\u0046\u24BB\uFF26\u1E1E\u0191\uA77B]/g},{base:"G",letters:/[\u0047\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E]/g},{base:"H",letters:/[\u0048\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D]/g},{base:"I",letters:/[\u0049\u24BE\uFF29\u00CC\u00CD\u00CE\u0128\u012A\u012C\u0130\u00CF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197]/g},{base:"J",letters:/[\u004A\u24BF\uFF2A\u0134\u0248]/g},{base:"K",letters:/[\u004B\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2]/g},{base:"L",letters:/[\u004C\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780]/g},{base:"LJ",letters:/[\u01C7]/g},{base:"Lj",letters:/[\u01C8]/g},{base:"M",letters:/[\u004D\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C]/g},{base:"N",letters:/[\u004E\u24C3\uFF2E\u01F8\u0143\u00D1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4]/g},{base:"NJ",letters:/[\u01CA]/g},{base:"Nj",letters:/[\u01CB]/g},{base:"O",letters:/[\u004F\u24C4\uFF2F\u00D2\u00D3\u00D4\u1ED2\u1ED0\u1ED6\u1ED4\u00D5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\u00D6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\u00D8\u01FE\u0186\u019F\uA74A\uA74C]/g},{base:"OI",letters:/[\u01A2]/g},{base:"OO",letters:/[\uA74E]/g},{base:"OU",letters:/[\u0222]/g},{base:"P",letters:/[\u0050\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754]/g},{base:"Q",letters:/[\u0051\u24C6\uFF31\uA756\uA758\u024A]/g},{base:"R",letters:/[\u0052\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782]/g},{base:"S",letters:/[\u0053\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784]/g},{base:"T",letters:/[\u0054\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786]/g},{base:"TZ",letters:/[\uA728]/g},{base:"U",letters:/[\u0055\u24CA\uFF35\u00D9\u00DA\u00DB\u0168\u1E78\u016A\u1E7A\u016C\u00DC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244]/g},{base:"V",letters:/[\u0056\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245]/g},{base:"VY",letters:/[\uA760]/g},{base:"W",letters:/[\u0057\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72]/g},{base:"X",letters:/[\u0058\u24CD\uFF38\u1E8A\u1E8C]/g},{base:"Y",letters:/[\u0059\u24CE\uFF39\u1EF2\u00DD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE]/g},{base:"Z",letters:/[\u005A\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762]/g},{base:"a",letters:/[\u0061\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250]/g},{base:"aa",letters:/[\uA733]/g},{base:"ae",letters:/[\u00E6\u01FD\u01E3]/g},{base:"ao",letters:/[\uA735]/g},{base:"au",letters:/[\uA737]/g},{base:"av",letters:/[\uA739\uA73B]/g},{base:"ay",letters:/[\uA73D]/g},{base:"b",letters:/[\u0062\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253]/g},{base:"c",letters:/[\u0063\u24D2\uFF43\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184]/g},{base:"d",letters:/[\u0064\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A]/g},{base:"dz",letters:/[\u01F3\u01C6]/g},{base:"e",letters:/[\u0065\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD]/g},{base:"f",letters:/[\u0066\u24D5\uFF46\u1E1F\u0192\uA77C]/g},{base:"g",letters:/[\u0067\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F]/g},{base:"h",letters:/[\u0068\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265]/g},{base:"hv",letters:/[\u0195]/g},{base:"i",letters:/[\u0069\u24D8\uFF49\u00EC\u00ED\u00EE\u0129\u012B\u012D\u00EF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131]/g},{base:"j",letters:/[\u006A\u24D9\uFF4A\u0135\u01F0\u0249]/g},{base:"k",letters:/[\u006B\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3]/g},{base:"l",letters:/[\u006C\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747]/g},{base:"lj",letters:/[\u01C9]/g},{base:"m",letters:/[\u006D\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F]/g},{base:"n",letters:/[\u006E\u24DD\uFF4E\u01F9\u0144\u00F1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5]/g},{base:"nj",letters:/[\u01CC]/g},{base:"o",letters:/[\u006F\u24DE\uFF4F\u00F2\u00F3\u00F4\u1ED3\u1ED1\u1ED7\u1ED5\u00F5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\u00F6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\u00F8\u01FF\u0254\uA74B\uA74D\u0275]/g},{base:"oi",letters:/[\u01A3]/g},{base:"ou",letters:/[\u0223]/g},{base:"oo",letters:/[\uA74F]/g},{base:"p",letters:/[\u0070\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755]/g},{base:"q",letters:/[\u0071\u24E0\uFF51\u024B\uA757\uA759]/g},{base:"r",letters:/[\u0072\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783]/g},{base:"s",letters:/[\u0073\u24E2\uFF53\u00DF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B]/g},{base:"t",letters:/[\u0074\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787]/g},{base:"tz",letters:/[\uA729]/g},{base:"u",letters:/[\u0075\u24E4\uFF55\u00F9\u00FA\u00FB\u0169\u1E79\u016B\u1E7B\u016D\u00FC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289]/g},{base:"v",letters:/[\u0076\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C]/g},{base:"vy",letters:/[\uA761]/g},{base:"w",letters:/[\u0077\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73]/g},{base:"x",letters:/[\u0078\u24E7\uFF58\u1E8B\u1E8D]/g},{base:"y",letters:/[\u0079\u24E8\uFF59\u1EF3\u00FD\u0177\u1EF9\u0233\u1E8F\u00FF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF]/g},{base:"z",letters:/[\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763]/g}],To=function(e){for(var t=0;t<ko.length;t++)e=e.replace(ko[t].letters,ko[t].base);return e},Co=function(e){return e.replace(/^\s+|\s+$/g,"")},Oo=function(e){return"".concat(e.label," ").concat(e.value)},xo={name:"1laao21-a11yText",styles:"label:a11yText;z-index:9999;border:0;clip:rect(1px, 1px, 1px, 1px);height:1px;width:1px;position:absolute;overflow:hidden;padding:0;white-space:nowrap;"},_o=function(e){return _r("span",c({css:xo},e))},Po=function(e){function t(){return zn(this,t),Yn(this,Gn(t).apply(this,arguments))}return Kn(t,e),Bn(t,[{key:"render",value:function(){var e=this.props,t=(e.in,e.out,e.onExited,e.appear,e.enter,e.exit,e.innerRef),n=(e.emotion,jn(e,["in","out","onExited","appear","enter","exit","innerRef","emotion"]));return _r("input",c({ref:t},n,{css:br({label:"dummyInput",background:0,border:0,fontSize:"inherit",outline:0,padding:0,width:1,color:"transparent",left:-100,opacity:0,position:"relative",transform:"scale(0)"},"")}))}}]),t}(r.Component),Ao=function(e){function t(){return zn(this,t),Yn(this,Gn(t).apply(this,arguments))}return Kn(t,e),Bn(t,[{key:"componentDidMount",value:function(){this.props.innerRef(Object(a.findDOMNode)(this))}},{key:"componentWillUnmount",value:function(){this.props.innerRef(null)}},{key:"render",value:function(){return this.props.children}}]),t}(r.Component),Io=["boxSizing","height","overflow","paddingRight","position"],No={boxSizing:"border-box",overflow:"hidden",position:"relative",height:"100%"};function Do(e){e.preventDefault()}function Fo(e){e.stopPropagation()}function Lo(){var e=this.scrollTop,t=this.scrollHeight,n=e+this.offsetHeight;0===e?this.scrollTop=1:n===t&&(this.scrollTop=e-1)}function Ro(){return"ontouchstart"in window||navigator.maxTouchPoints}var jo=!(!window.document||!window.document.createElement),Mo=0,Uo=function(e){function t(){var e,n;zn(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return Un($n($n(n=Yn(this,(e=Gn(t)).call.apply(e,[this].concat(o))))),"originalStyles",{}),Un($n($n(n)),"listenerOptions",{capture:!1,passive:!1}),n}return Kn(t,e),Bn(t,[{key:"componentDidMount",value:function(){var e=this;if(jo){var t=this.props,n=t.accountForScrollbars,r=t.touchScrollTarget,o=document.body,a=o&&o.style;if(n&&Io.forEach((function(t){var n=a&&a[t];e.originalStyles[t]=n})),n&&Mo<1){var i=parseInt(this.originalStyles.paddingRight,10)||0,u=document.body?document.body.clientWidth:0,l=window.innerWidth-u+i||0;Object.keys(No).forEach((function(e){var t=No[e];a&&(a[e]=t)})),a&&(a.paddingRight="".concat(l,"px"))}o&&Ro()&&(o.addEventListener("touchmove",Do,this.listenerOptions),r&&(r.addEventListener("touchstart",Lo,this.listenerOptions),r.addEventListener("touchmove",Fo,this.listenerOptions))),Mo+=1}}},{key:"componentWillUnmount",value:function(){var e=this;if(jo){var t=this.props,n=t.accountForScrollbars,r=t.touchScrollTarget,o=document.body,a=o&&o.style;Mo=Math.max(Mo-1,0),n&&Mo<1&&Io.forEach((function(t){var n=e.originalStyles[t];a&&(a[t]=n)})),o&&Ro()&&(o.removeEventListener("touchmove",Do,this.listenerOptions),r&&(r.removeEventListener("touchstart",Lo,this.listenerOptions),r.removeEventListener("touchmove",Fo,this.listenerOptions)))}}},{key:"render",value:function(){return null}}]),t}(r.Component);Un(Uo,"defaultProps",{accountForScrollbars:!0});var Vo={name:"1dsbpcp",styles:"position:fixed;left:0;bottom:0;right:0;top:0;"},zo=function(e){function t(){var e,n;zn(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return Un($n($n(n=Yn(this,(e=Gn(t)).call.apply(e,[this].concat(o))))),"state",{touchScrollTarget:null}),Un($n($n(n)),"getScrollTarget",(function(e){e!==n.state.touchScrollTarget&&n.setState({touchScrollTarget:e})})),Un($n($n(n)),"blurSelectInput",(function(){document.activeElement&&document.activeElement.blur()})),n}return Kn(t,e),Bn(t,[{key:"render",value:function(){var e=this.props,t=e.children,n=e.isEnabled,r=this.state.touchScrollTarget;return n?_r("div",null,_r("div",{onClick:this.blurSelectInput,css:Vo}),_r(Ao,{innerRef:this.getScrollTarget},t),r?_r(Uo,{touchScrollTarget:r}):null):t}}]),t}(r.PureComponent),Ho=function(e){function t(){var e,n;zn(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return Un($n($n(n=Yn(this,(e=Gn(t)).call.apply(e,[this].concat(o))))),"isBottom",!1),Un($n($n(n)),"isTop",!1),Un($n($n(n)),"scrollTarget",void 0),Un($n($n(n)),"touchStart",void 0),Un($n($n(n)),"cancelScroll",(function(e){e.preventDefault(),e.stopPropagation()})),Un($n($n(n)),"handleEventDelta",(function(e,t){var r=n.props,o=r.onBottomArrive,a=r.onBottomLeave,i=r.onTopArrive,u=r.onTopLeave,l=n.scrollTarget,s=l.scrollTop,c=l.scrollHeight,f=l.clientHeight,p=n.scrollTarget,d=t>0,h=c-f-s,m=!1;h>t&&n.isBottom&&(a&&a(e),n.isBottom=!1),d&&n.isTop&&(u&&u(e),n.isTop=!1),d&&t>h?(o&&!n.isBottom&&o(e),p.scrollTop=c,m=!0,n.isBottom=!0):!d&&-t>s&&(i&&!n.isTop&&i(e),p.scrollTop=0,m=!0,n.isTop=!0),m&&n.cancelScroll(e)})),Un($n($n(n)),"onWheel",(function(e){n.handleEventDelta(e,e.deltaY)})),Un($n($n(n)),"onTouchStart",(function(e){n.touchStart=e.changedTouches[0].clientY})),Un($n($n(n)),"onTouchMove",(function(e){var t=n.touchStart-e.changedTouches[0].clientY;n.handleEventDelta(e,t)})),Un($n($n(n)),"getScrollTarget",(function(e){n.scrollTarget=e})),n}return Kn(t,e),Bn(t,[{key:"componentDidMount",value:function(){this.startListening(this.scrollTarget)}},{key:"componentWillUnmount",value:function(){this.stopListening(this.scrollTarget)}},{key:"startListening",value:function(e){e&&("function"==typeof e.addEventListener&&e.addEventListener("wheel",this.onWheel,!1),"function"==typeof e.addEventListener&&e.addEventListener("touchstart",this.onTouchStart,!1),"function"==typeof e.addEventListener&&e.addEventListener("touchmove",this.onTouchMove,!1))}},{key:"stopListening",value:function(e){"function"==typeof e.removeEventListener&&e.removeEventListener("wheel",this.onWheel,!1),"function"==typeof e.removeEventListener&&e.removeEventListener("touchstart",this.onTouchStart,!1),"function"==typeof e.removeEventListener&&e.removeEventListener("touchmove",this.onTouchMove,!1)}},{key:"render",value:function(){return o.a.createElement(Ao,{innerRef:this.getScrollTarget},this.props.children)}}]),t}(r.Component),Bo=function(e){function t(){return zn(this,t),Yn(this,Gn(t).apply(this,arguments))}return Kn(t,e),Bn(t,[{key:"render",value:function(){var e=this.props,t=e.isEnabled,n=jn(e,["isEnabled"]);return t?o.a.createElement(Ho,n):this.props.children}}]),t}(r.Component);Un(Bo,"defaultProps",{isEnabled:!0});var Wo=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.isSearchable,r=t.isMulti,o=t.label,a=t.isDisabled;switch(e){case"menu":return"Use Up and Down to choose options".concat(a?"":", press Enter to select the currently focused option",", press Escape to exit the menu, press Tab to select the option and exit the menu.");case"input":return"".concat(o||"Select"," is focused ").concat(n?",type to refine list":"",", press Down to open the menu, ").concat(r?" press left to focus selected values":"");case"value":return"Use left and right to toggle between focused values, press Backspace to remove the currently focused value"}},qo=function(e,t){var n=t.value,r=t.isDisabled;if(n)switch(e){case"deselect-option":case"pop-value":case"remove-value":return"option ".concat(n,", deselected.");case"select-option":return"option ".concat(n,r?" is disabled. Select another option.":", selected.")}},$o=function(e){return!!e.isDisabled},Yo={clearIndicator:co,container:function(e){var t=e.isDisabled;return{label:"container",direction:e.isRtl?"rtl":null,pointerEvents:t?"none":null,position:"relative"}},control:function(e){var t=e.isDisabled,n=e.isFocused,r=e.theme,o=r.colors,a=r.borderRadius,i=r.spacing;return{label:"control",alignItems:"center",backgroundColor:t?o.neutral5:o.neutral0,borderColor:t?o.neutral10:n?o.primary:o.neutral20,borderRadius:a,borderStyle:"solid",borderWidth:1,boxShadow:n?"0 0 0 1px ".concat(o.primary):null,cursor:"default",display:"flex",flexWrap:"wrap",justifyContent:"space-between",minHeight:i.controlHeight,outline:"0 !important",position:"relative",transition:"all 100ms","&:hover":{borderColor:n?o.primary:o.neutral30}}},dropdownIndicator:so,group:function(e){var t=e.theme.spacing;return{paddingBottom:2*t.baseUnit,paddingTop:2*t.baseUnit}},groupHeading:function(e){var t=e.theme.spacing;return{label:"group",color:"#999",cursor:"default",display:"block",fontSize:"75%",fontWeight:"500",marginBottom:"0.25em",paddingLeft:3*t.baseUnit,paddingRight:3*t.baseUnit,textTransform:"uppercase"}},indicatorsContainer:function(){return{alignItems:"center",alignSelf:"stretch",display:"flex",flexShrink:0}},indicatorSeparator:function(e){var t=e.isDisabled,n=e.theme,r=n.spacing.baseUnit,o=n.colors;return{label:"indicatorSeparator",alignSelf:"stretch",backgroundColor:t?o.neutral10:o.neutral20,marginBottom:2*r,marginTop:2*r,width:1}},input:function(e){var t=e.isDisabled,n=e.theme,r=n.spacing,o=n.colors;return{margin:r.baseUnit/2,paddingBottom:r.baseUnit/2,paddingTop:r.baseUnit/2,visibility:t?"hidden":"visible",color:o.neutral80}},loadingIndicator:function(e){var t=e.isFocused,n=e.size,r=e.theme,o=r.colors,a=r.spacing.baseUnit;return{label:"loadingIndicator",color:t?o.neutral60:o.neutral20,display:"flex",padding:2*a,transition:"color 150ms",alignSelf:"center",fontSize:n,lineHeight:1,marginRight:n,textAlign:"center",verticalAlign:"middle"}},loadingMessage:Gr,menu:function(e){var t,n=e.placement,r=e.theme,o=r.borderRadius,a=r.spacing,i=r.colors;return Un(t={label:"menu"},function(e){return e?{bottom:"top",top:"bottom"}[e]:"bottom"}(n),"100%"),Un(t,"backgroundColor",i.neutral0),Un(t,"borderRadius",o),Un(t,"boxShadow","0 0 0 1px hsla(0, 0%, 0%, 0.1), 0 4px 11px hsla(0, 0%, 0%, 0.1)"),Un(t,"marginBottom",a.menuGutter),Un(t,"marginTop",a.menuGutter),Un(t,"position","absolute"),Un(t,"width","100%"),Un(t,"zIndex",1),t},menuList:function(e){var t=e.maxHeight,n=e.theme.spacing.baseUnit;return{maxHeight:t,overflowY:"auto",paddingBottom:n,paddingTop:n,position:"relative",WebkitOverflowScrolling:"touch"}},menuPortal:function(e){var t=e.rect,n=e.offset,r=e.position;return{left:t.left,position:r,top:n,width:t.width,zIndex:1}},multiValue:function(e){var t=e.theme,n=t.spacing,r=t.borderRadius;return{label:"multiValue",backgroundColor:t.colors.neutral10,borderRadius:r/2,display:"flex",margin:n.baseUnit/2,minWidth:0}},multiValueLabel:function(e){var t=e.theme,n=t.borderRadius,r=t.colors,o=e.cropWithEllipsis;return{borderRadius:n/2,color:r.neutral80,fontSize:"85%",overflow:"hidden",padding:3,paddingLeft:6,textOverflow:o?"ellipsis":null,whiteSpace:"nowrap"}},multiValueRemove:function(e){var t=e.theme,n=t.spacing,r=t.borderRadius,o=t.colors;return{alignItems:"center",borderRadius:r/2,backgroundColor:e.isFocused&&o.dangerLight,display:"flex",paddingLeft:n.baseUnit,paddingRight:n.baseUnit,":hover":{backgroundColor:o.dangerLight,color:o.danger}}},noOptionsMessage:Yr,option:function(e){var t=e.isDisabled,n=e.isFocused,r=e.isSelected,o=e.theme,a=o.spacing,i=o.colors;return{label:"option",backgroundColor:r?i.primary:n?i.primary25:"transparent",color:t?i.neutral20:r?i.neutral0:"inherit",cursor:"default",display:"block",fontSize:"inherit",padding:"".concat(2*a.baseUnit,"px ").concat(3*a.baseUnit,"px"),width:"100%",userSelect:"none",WebkitTapHighlightColor:"rgba(0, 0, 0, 0)",":active":{backgroundColor:!t&&(r?i.primary:i.primary50)}}},placeholder:function(e){var t=e.theme,n=t.spacing;return{label:"placeholder",color:t.colors.neutral50,marginLeft:n.baseUnit/2,marginRight:n.baseUnit/2,position:"absolute",top:"50%",transform:"translateY(-50%)"}},singleValue:function(e){var t=e.isDisabled,n=e.theme,r=n.spacing,o=n.colors;return{label:"singleValue",color:t?o.neutral40:o.neutral80,marginLeft:r.baseUnit/2,marginRight:r.baseUnit/2,maxWidth:"calc(100% - ".concat(2*r.baseUnit,"px)"),overflow:"hidden",position:"absolute",textOverflow:"ellipsis",whiteSpace:"nowrap",top:"50%",transform:"translateY(-50%)"}},valueContainer:function(e){var t=e.theme.spacing;return{alignItems:"center",display:"flex",flex:1,flexWrap:"wrap",padding:"".concat(t.baseUnit/2,"px ").concat(2*t.baseUnit,"px"),WebkitOverflowScrolling:"touch",position:"relative",overflow:"hidden"}}};var Go,Qo={borderRadius:4,colors:{primary:"#2684FF",primary75:"#4C9AFF",primary50:"#B2D4FF",primary25:"#DEEBFF",danger:"#DE350B",dangerLight:"#FFBDAD",neutral0:"hsl(0, 0%, 100%)",neutral5:"hsl(0, 0%, 95%)",neutral10:"hsl(0, 0%, 90%)",neutral20:"hsl(0, 0%, 80%)",neutral30:"hsl(0, 0%, 70%)",neutral40:"hsl(0, 0%, 60%)",neutral50:"hsl(0, 0%, 50%)",neutral60:"hsl(0, 0%, 40%)",neutral70:"hsl(0, 0%, 30%)",neutral80:"hsl(0, 0%, 20%)",neutral90:"hsl(0, 0%, 10%)"},spacing:{baseUnit:4,controlHeight:38,menuGutter:8}},Ko={backspaceRemovesValue:!0,blurInputOnSelect:Vr(),captureMenuScroll:!Vr(),closeMenuOnSelect:!0,closeMenuOnScroll:!1,components:{},controlShouldRenderValue:!0,escapeClearsValue:!1,filterOption:function(e,t){var n=Vn({ignoreCase:!0,ignoreAccents:!0,stringify:Oo,trim:!0,matchFrom:"any"},Go),r=n.ignoreCase,o=n.ignoreAccents,a=n.stringify,i=n.trim,u=n.matchFrom,l=i?Co(t):t,s=i?Co(a(e)):a(e);return r&&(l=l.toLowerCase(),s=s.toLowerCase()),o&&(l=To(l),s=To(s)),"start"===u?s.substr(0,l.length)===l:s.indexOf(l)>-1},formatGroupLabel:function(e){return e.label},getOptionLabel:function(e){return e.label},getOptionValue:function(e){return e.value},isDisabled:!1,isLoading:!1,isMulti:!1,isRtl:!1,isSearchable:!0,isOptionDisabled:$o,loadingMessage:function(){return"Loading..."},maxMenuHeight:300,minMenuHeight:140,menuIsOpen:!1,menuPlacement:"bottom",menuPosition:"absolute",menuShouldBlockScroll:!1,menuShouldScrollIntoView:!function(){try{return/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)}catch(e){return!1}}(),noOptionsMessage:function(){return"No options"},openMenuOnFocus:!1,openMenuOnClick:!0,options:[],pageSize:5,placeholder:"Select...",screenReaderStatus:function(e){var t=e.count;return"".concat(t," result").concat(1!==t?"s":""," available")},styles:{},tabIndex:"0",tabSelectsValue:!0},Jo=1,Xo=function(e){function t(e){var n;zn(this,t),Un($n($n(n=Yn(this,Gn(t).call(this,e)))),"state",{ariaLiveSelection:"",ariaLiveContext:"",focusedOption:null,focusedValue:null,inputIsHidden:!1,isFocused:!1,menuOptions:{render:[],focusable:[]},selectValue:[]}),Un($n($n(n)),"blockOptionHover",!1),Un($n($n(n)),"isComposing",!1),Un($n($n(n)),"clearFocusValueOnUpdate",!1),Un($n($n(n)),"commonProps",void 0),Un($n($n(n)),"components",void 0),Un($n($n(n)),"hasGroups",!1),Un($n($n(n)),"initialTouchX",0),Un($n($n(n)),"initialTouchY",0),Un($n($n(n)),"inputIsHiddenAfterUpdate",void 0),Un($n($n(n)),"instancePrefix",""),Un($n($n(n)),"openAfterFocus",!1),Un($n($n(n)),"scrollToFocusedOptionOnUpdate",!1),Un($n($n(n)),"userIsDragging",void 0),Un($n($n(n)),"controlRef",null),Un($n($n(n)),"getControlRef",(function(e){n.controlRef=e})),Un($n($n(n)),"focusedOptionRef",null),Un($n($n(n)),"getFocusedOptionRef",(function(e){n.focusedOptionRef=e})),Un($n($n(n)),"menuListRef",null),Un($n($n(n)),"getMenuListRef",(function(e){n.menuListRef=e})),Un($n($n(n)),"inputRef",null),Un($n($n(n)),"getInputRef",(function(e){n.inputRef=e})),Un($n($n(n)),"cacheComponents",(function(e){n.components=So({components:e})})),Un($n($n(n)),"focus",n.focusInput),Un($n($n(n)),"blur",n.blurInput),Un($n($n(n)),"onChange",(function(e,t){var r=n.props;(0,r.onChange)(e,Vn({},t,{name:r.name}))})),Un($n($n(n)),"setValue",(function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"set-value",r=arguments.length>2?arguments[2]:void 0,o=n.props,a=o.closeMenuOnSelect,i=o.isMulti;n.onInputChange("",{action:"set-value"}),a&&(n.inputIsHiddenAfterUpdate=!i,n.onMenuClose()),n.clearFocusValueOnUpdate=!0,n.onChange(e,{action:t,option:r})})),Un($n($n(n)),"selectOption",(function(e){var t=n.props,r=t.blurInputOnSelect,o=t.isMulti,a=n.state.selectValue;if(o)if(n.isOptionSelected(e,a)){var i=n.getOptionValue(e);n.setValue(a.filter((function(e){return n.getOptionValue(e)!==i})),"deselect-option",e),n.announceAriaLiveSelection({event:"deselect-option",context:{value:n.getOptionLabel(e)}})}else n.isOptionDisabled(e,a)?n.announceAriaLiveSelection({event:"select-option",context:{value:n.getOptionLabel(e),isDisabled:!0}}):(n.setValue([].concat(Mn(a),[e]),"select-option",e),n.announceAriaLiveSelection({event:"select-option",context:{value:n.getOptionLabel(e)}}));else n.isOptionDisabled(e,a)?n.announceAriaLiveSelection({event:"select-option",context:{value:n.getOptionLabel(e),isDisabled:!0}}):(n.setValue(e,"select-option"),n.announceAriaLiveSelection({event:"select-option",context:{value:n.getOptionLabel(e)}}));r&&n.blurInput()})),Un($n($n(n)),"removeValue",(function(e){var t=n.state.selectValue,r=n.getOptionValue(e),o=t.filter((function(e){return n.getOptionValue(e)!==r}));n.onChange(o.length?o:null,{action:"remove-value",removedValue:e}),n.announceAriaLiveSelection({event:"remove-value",context:{value:e?n.getOptionLabel(e):""}}),n.focusInput()})),Un($n($n(n)),"clearValue",(function(){var e=n.props.isMulti;n.onChange(e?[]:null,{action:"clear"})})),Un($n($n(n)),"popValue",(function(){var e=n.state.selectValue,t=e[e.length-1],r=e.slice(0,e.length-1);n.announceAriaLiveSelection({event:"pop-value",context:{value:t?n.getOptionLabel(t):""}}),n.onChange(r.length?r:null,{action:"pop-value",removedValue:t})})),Un($n($n(n)),"getOptionLabel",(function(e){return n.props.getOptionLabel(e)})),Un($n($n(n)),"getOptionValue",(function(e){return n.props.getOptionValue(e)})),Un($n($n(n)),"getStyles",(function(e,t){var r=Yo[e](t);r.boxSizing="border-box";var o=n.props.styles[e];return o?o(r,t):r})),Un($n($n(n)),"getElementId",(function(e){return"".concat(n.instancePrefix,"-").concat(e)})),Un($n($n(n)),"getActiveDescendentId",(function(){var e=n.props.menuIsOpen,t=n.state,r=t.menuOptions,o=t.focusedOption;if(o&&e){var a=r.focusable.indexOf(o),i=r.render[a];return i&&i.key}})),Un($n($n(n)),"announceAriaLiveSelection",(function(e){var t=e.event,r=e.context;n.setState({ariaLiveSelection:qo(t,r)})})),Un($n($n(n)),"announceAriaLiveContext",(function(e){var t=e.event,r=e.context;n.setState({ariaLiveContext:Wo(t,Vn({},r,{label:n.props["aria-label"]}))})})),Un($n($n(n)),"onMenuMouseDown",(function(e){0===e.button&&(e.stopPropagation(),e.preventDefault(),n.focusInput())})),Un($n($n(n)),"onMenuMouseMove",(function(e){n.blockOptionHover=!1})),Un($n($n(n)),"onControlMouseDown",(function(e){var t=n.props.openMenuOnClick;n.state.isFocused?n.props.menuIsOpen?"INPUT"!==e.target.tagName&&n.onMenuClose():t&&n.openMenu("first"):(t&&(n.openAfterFocus=!0),n.focusInput()),"INPUT"!==e.target.tagName&&e.preventDefault()})),Un($n($n(n)),"onDropdownIndicatorMouseDown",(function(e){if(!(e&&"mousedown"===e.type&&0!==e.button||n.props.isDisabled)){var t=n.props,r=t.isMulti,o=t.menuIsOpen;n.focusInput(),o?(n.inputIsHiddenAfterUpdate=!r,n.onMenuClose()):n.openMenu("first"),e.preventDefault(),e.stopPropagation()}})),Un($n($n(n)),"onClearIndicatorMouseDown",(function(e){e&&"mousedown"===e.type&&0!==e.button||(n.clearValue(),e.stopPropagation(),n.openAfterFocus=!1,"touchend"===e.type?n.focusInput():setTimeout((function(){return n.focusInput()})))})),Un($n($n(n)),"onScroll",(function(e){"boolean"==typeof n.props.closeMenuOnScroll?e.target instanceof HTMLElement&&Rr(e.target)&&n.props.onMenuClose():"function"==typeof n.props.closeMenuOnScroll&&n.props.closeMenuOnScroll(e)&&n.props.onMenuClose()})),Un($n($n(n)),"onCompositionStart",(function(){n.isComposing=!0})),Un($n($n(n)),"onCompositionEnd",(function(){n.isComposing=!1})),Un($n($n(n)),"onTouchStart",(function(e){var t=e.touches.item(0);t&&(n.initialTouchX=t.clientX,n.initialTouchY=t.clientY,n.userIsDragging=!1)})),Un($n($n(n)),"onTouchMove",(function(e){var t=e.touches.item(0);if(t){var r=Math.abs(t.clientX-n.initialTouchX),o=Math.abs(t.clientY-n.initialTouchY);n.userIsDragging=r>5||o>5}})),Un($n($n(n)),"onTouchEnd",(function(e){n.userIsDragging||(n.controlRef&&!n.controlRef.contains(e.target)&&n.menuListRef&&!n.menuListRef.contains(e.target)&&n.blurInput(),n.initialTouchX=0,n.initialTouchY=0)})),Un($n($n(n)),"onControlTouchEnd",(function(e){n.userIsDragging||n.onControlMouseDown(e)})),Un($n($n(n)),"onClearIndicatorTouchEnd",(function(e){n.userIsDragging||n.onClearIndicatorMouseDown(e)})),Un($n($n(n)),"onDropdownIndicatorTouchEnd",(function(e){n.userIsDragging||n.onDropdownIndicatorMouseDown(e)})),Un($n($n(n)),"handleInputChange",(function(e){var t=e.currentTarget.value;n.inputIsHiddenAfterUpdate=!1,n.onInputChange(t,{action:"input-change"}),n.onMenuOpen()})),Un($n($n(n)),"onInputFocus",(function(e){var t=n.props,r=t.isSearchable,o=t.isMulti;n.props.onFocus&&n.props.onFocus(e),n.inputIsHiddenAfterUpdate=!1,n.announceAriaLiveContext({event:"input",context:{isSearchable:r,isMulti:o}}),n.setState({isFocused:!0}),(n.openAfterFocus||n.props.openMenuOnFocus)&&n.openMenu("first"),n.openAfterFocus=!1})),Un($n($n(n)),"onInputBlur",(function(e){n.menuListRef&&n.menuListRef.contains(document.activeElement)?n.inputRef.focus():(n.props.onBlur&&n.props.onBlur(e),n.onInputChange("",{action:"input-blur"}),n.onMenuClose(),n.setState({focusedValue:null,isFocused:!1}))})),Un($n($n(n)),"onOptionHover",(function(e){n.blockOptionHover||n.state.focusedOption===e||n.setState({focusedOption:e})})),Un($n($n(n)),"shouldHideSelectedOptions",(function(){var e=n.props,t=e.hideSelectedOptions,r=e.isMulti;return void 0===t?r:t})),Un($n($n(n)),"onKeyDown",(function(e){var t=n.props,r=t.isMulti,o=t.backspaceRemovesValue,a=t.escapeClearsValue,i=t.inputValue,u=t.isClearable,l=t.isDisabled,s=t.menuIsOpen,c=t.onKeyDown,f=t.tabSelectsValue,p=t.openMenuOnFocus,d=n.state,h=d.focusedOption,m=d.focusedValue,y=d.selectValue;if(!(l||"function"==typeof c&&(c(e),e.defaultPrevented))){switch(n.blockOptionHover=!0,e.key){case"ArrowLeft":if(!r||i)return;n.focusValue("previous");break;case"ArrowRight":if(!r||i)return;n.focusValue("next");break;case"Delete":case"Backspace":if(i)return;if(m)n.removeValue(m);else{if(!o)return;r?n.popValue():u&&n.clearValue()}break;case"Tab":if(n.isComposing)return;if(e.shiftKey||!s||!f||!h||p&&n.isOptionSelected(h,y))return;n.selectOption(h);break;case"Enter":if(229===e.keyCode)break;if(s){if(!h)return;if(n.isComposing)return;n.selectOption(h);break}return;case"Escape":s?(n.inputIsHiddenAfterUpdate=!1,n.onInputChange("",{action:"menu-close"}),n.onMenuClose()):u&&a&&n.clearValue();break;case" ":if(i)return;if(!s){n.openMenu("first");break}if(!h)return;n.selectOption(h);break;case"ArrowUp":s?n.focusOption("up"):n.openMenu("last");break;case"ArrowDown":s?n.focusOption("down"):n.openMenu("first");break;case"PageUp":if(!s)return;n.focusOption("pageup");break;case"PageDown":if(!s)return;n.focusOption("pagedown");break;case"Home":if(!s)return;n.focusOption("first");break;case"End":if(!s)return;n.focusOption("last");break;default:return}e.preventDefault()}}));var r=e.value;n.cacheComponents=Xn(n.cacheComponents,to).bind($n($n(n))),n.cacheComponents(e.components),n.instancePrefix="react-select-"+(n.props.instanceId||++Jo);var o=Lr(r),a=e.menuIsOpen?n.buildMenuOptions(e,o):{render:[],focusable:[]};return n.state.menuOptions=a,n.state.selectValue=o,n}return Kn(t,e),Bn(t,[{key:"componentDidMount",value:function(){this.startListeningComposition(),this.startListeningToTouch(),this.props.closeMenuOnScroll&&document&&document.addEventListener&&document.addEventListener("scroll",this.onScroll,!0),this.props.autoFocus&&this.focusInput()}},{key:"UNSAFE_componentWillReceiveProps",value:function(e){var t=this.props,n=t.options,r=t.value,o=t.menuIsOpen,a=t.inputValue;if(this.cacheComponents(e.components),e.value!==r||e.options!==n||e.menuIsOpen!==o||e.inputValue!==a){var i=Lr(e.value),u=e.menuIsOpen?this.buildMenuOptions(e,i):{render:[],focusable:[]},l=this.getNextFocusedValue(i),s=this.getNextFocusedOption(u.focusable);this.setState({menuOptions:u,selectValue:i,focusedOption:s,focusedValue:l})}null!=this.inputIsHiddenAfterUpdate&&(this.setState({inputIsHidden:this.inputIsHiddenAfterUpdate}),delete this.inputIsHiddenAfterUpdate)}},{key:"componentDidUpdate",value:function(e){var t,n,r,o,a,i=this.props,u=i.isDisabled,l=i.menuIsOpen,s=this.state.isFocused;(s&&!u&&e.isDisabled||s&&l&&!e.menuIsOpen)&&this.focusInput(),this.menuListRef&&this.focusedOptionRef&&this.scrollToFocusedOptionOnUpdate&&(t=this.menuListRef,n=this.focusedOptionRef,r=t.getBoundingClientRect(),o=n.getBoundingClientRect(),a=n.offsetHeight/3,o.bottom+a>r.bottom?Mr(t,Math.min(n.offsetTop+n.clientHeight-t.offsetHeight+a,t.scrollHeight)):o.top-a<r.top&&Mr(t,Math.max(n.offsetTop-a,0))),this.scrollToFocusedOptionOnUpdate=!1}},{key:"componentWillUnmount",value:function(){this.stopListeningComposition(),this.stopListeningToTouch(),document.removeEventListener("scroll",this.onScroll,!0)}},{key:"onMenuOpen",value:function(){this.props.onMenuOpen()}},{key:"onMenuClose",value:function(){var e=this.props,t=e.isSearchable,n=e.isMulti;this.announceAriaLiveContext({event:"input",context:{isSearchable:t,isMulti:n}}),this.onInputChange("",{action:"menu-close"}),this.props.onMenuClose()}},{key:"onInputChange",value:function(e,t){this.props.onInputChange(e,t)}},{key:"focusInput",value:function(){this.inputRef&&this.inputRef.focus()}},{key:"blurInput",value:function(){this.inputRef&&this.inputRef.blur()}},{key:"openMenu",value:function(e){var t=this.state,n=t.menuOptions,r=t.selectValue,o=t.isFocused,a=this.props.isMulti,i="first"===e?0:n.focusable.length-1;if(!a){var u=n.focusable.indexOf(r[0]);u>-1&&(i=u)}this.scrollToFocusedOptionOnUpdate=!(o&&this.menuListRef),this.inputIsHiddenAfterUpdate=!1,this.onMenuOpen(),this.setState({focusedValue:null,focusedOption:n.focusable[i]}),this.announceAriaLiveContext({event:"menu"})}},{key:"focusValue",value:function(e){var t=this.props,n=t.isMulti,r=t.isSearchable,o=this.state,a=o.selectValue,i=o.focusedValue;if(n){this.setState({focusedOption:null});var u=a.indexOf(i);i||(u=-1,this.announceAriaLiveContext({event:"value"}));var l=a.length-1,s=-1;if(a.length){switch(e){case"previous":s=0===u?0:-1===u?l:u-1;break;case"next":u>-1&&u<l&&(s=u+1)}-1===s&&this.announceAriaLiveContext({event:"input",context:{isSearchable:r,isMulti:n}}),this.setState({inputIsHidden:-1!==s,focusedValue:a[s]})}}}},{key:"focusOption",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"first",t=this.props.pageSize,n=this.state,r=n.focusedOption,o=n.menuOptions,a=o.focusable;if(a.length){var i=0,u=a.indexOf(r);r||(u=-1,this.announceAriaLiveContext({event:"menu"})),"up"===e?i=u>0?u-1:a.length-1:"down"===e?i=(u+1)%a.length:"pageup"===e?(i=u-t)<0&&(i=0):"pagedown"===e?(i=u+t)>a.length-1&&(i=a.length-1):"last"===e&&(i=a.length-1),this.scrollToFocusedOptionOnUpdate=!0,this.setState({focusedOption:a[i],focusedValue:null}),this.announceAriaLiveContext({event:"menu",context:{isDisabled:$o(a[i])}})}}},{key:"getTheme",value:function(){return this.props.theme?"function"==typeof this.props.theme?this.props.theme(Qo):Vn({},Qo,this.props.theme):Qo}},{key:"getCommonProps",value:function(){var e=this.clearValue,t=this.getStyles,n=this.setValue,r=this.selectOption,o=this.props,a=o.classNamePrefix,i=o.isMulti,u=o.isRtl,l=o.options,s=this.state.selectValue,c=this.hasValue();return{cx:Fr.bind(null,a),clearValue:e,getStyles:t,getValue:function(){return s},hasValue:c,isMulti:i,isRtl:u,options:l,selectOption:r,setValue:n,selectProps:o,theme:this.getTheme()}}},{key:"getNextFocusedValue",value:function(e){if(this.clearFocusValueOnUpdate)return this.clearFocusValueOnUpdate=!1,null;var t=this.state,n=t.focusedValue,r=t.selectValue.indexOf(n);if(r>-1){if(e.indexOf(n)>-1)return n;if(r<e.length)return e[r]}return null}},{key:"getNextFocusedOption",value:function(e){var t=this.state.focusedOption;return t&&e.indexOf(t)>-1?t:e[0]}},{key:"hasValue",value:function(){return this.state.selectValue.length>0}},{key:"hasOptions",value:function(){return!!this.state.menuOptions.render.length}},{key:"countOptions",value:function(){return this.state.menuOptions.focusable.length}},{key:"isClearable",value:function(){var e=this.props,t=e.isClearable,n=e.isMulti;return void 0===t?n:t}},{key:"isOptionDisabled",value:function(e,t){return"function"==typeof this.props.isOptionDisabled&&this.props.isOptionDisabled(e,t)}},{key:"isOptionSelected",value:function(e,t){var n=this;if(t.indexOf(e)>-1)return!0;if("function"==typeof this.props.isOptionSelected)return this.props.isOptionSelected(e,t);var r=this.getOptionValue(e);return t.some((function(e){return n.getOptionValue(e)===r}))}},{key:"filterOption",value:function(e,t){return!this.props.filterOption||this.props.filterOption(e,t)}},{key:"formatOptionLabel",value:function(e,t){if("function"==typeof this.props.formatOptionLabel){var n=this.props.inputValue,r=this.state.selectValue;return this.props.formatOptionLabel(e,{context:t,inputValue:n,selectValue:r})}return this.getOptionLabel(e)}},{key:"formatGroupLabel",value:function(e){return this.props.formatGroupLabel(e)}},{key:"startListeningComposition",value:function(){document&&document.addEventListener&&(document.addEventListener("compositionstart",this.onCompositionStart,!1),document.addEventListener("compositionend",this.onCompositionEnd,!1))}},{key:"stopListeningComposition",value:function(){document&&document.removeEventListener&&(document.removeEventListener("compositionstart",this.onCompositionStart),document.removeEventListener("compositionend",this.onCompositionEnd))}},{key:"startListeningToTouch",value:function(){document&&document.addEventListener&&(document.addEventListener("touchstart",this.onTouchStart,!1),document.addEventListener("touchmove",this.onTouchMove,!1),document.addEventListener("touchend",this.onTouchEnd,!1))}},{key:"stopListeningToTouch",value:function(){document&&document.removeEventListener&&(document.removeEventListener("touchstart",this.onTouchStart),document.removeEventListener("touchmove",this.onTouchMove),document.removeEventListener("touchend",this.onTouchEnd))}},{key:"buildMenuOptions",value:function(e,t){var n=this,r=e.inputValue,o=void 0===r?"":r,a=e.options,i=function(e,r){var a=n.isOptionDisabled(e,t),i=n.isOptionSelected(e,t),u=n.getOptionLabel(e),l=n.getOptionValue(e);if(!(n.shouldHideSelectedOptions()&&i||!n.filterOption({label:u,value:l,data:e},o))){var s=a?void 0:function(){return n.onOptionHover(e)},c=a?void 0:function(){return n.selectOption(e)},f="".concat(n.getElementId("option"),"-").concat(r);return{innerProps:{id:f,onClick:c,onMouseMove:s,onMouseOver:s,tabIndex:-1},data:e,isDisabled:a,isSelected:i,key:f,label:u,type:"option",value:l}}};return a.reduce((function(e,t,r){if(t.options){n.hasGroups||(n.hasGroups=!0);var o=t.options.map((function(t,n){var o=i(t,"".concat(r,"-").concat(n));return o&&e.focusable.push(t),o})).filter(Boolean);if(o.length){var a="".concat(n.getElementId("group"),"-").concat(r);e.render.push({type:"group",key:a,data:t,options:o})}}else{var u=i(t,"".concat(r));u&&(e.render.push(u),e.focusable.push(t))}return e}),{render:[],focusable:[]})}},{key:"constructAriaLiveMessage",value:function(){var e=this.state,t=e.ariaLiveContext,n=e.selectValue,r=e.focusedValue,o=e.focusedOption,a=this.props,i=a.options,u=a.menuIsOpen,l=a.inputValue,s=a.screenReaderStatus,c=r?function(e){var t=e.focusedValue,n=e.getOptionLabel,r=e.selectValue;return"value ".concat(n(t)," focused, ").concat(r.indexOf(t)+1," of ").concat(r.length,".")}({focusedValue:r,getOptionLabel:this.getOptionLabel,selectValue:n}):"",f=o&&u?function(e){var t=e.focusedOption,n=e.getOptionLabel,r=e.options;return"option ".concat(n(t)," focused").concat(t.isDisabled?" disabled":"",", ").concat(r.indexOf(t)+1," of ").concat(r.length,".")}({focusedOption:o,getOptionLabel:this.getOptionLabel,options:i}):"",p=function(e){var t=e.inputValue,n=e.screenReaderMessage;return"".concat(n).concat(t?" for search term "+t:"",".")}({inputValue:l,screenReaderMessage:s({count:this.countOptions()})});return"".concat(c," ").concat(f," ").concat(p," ").concat(t)}},{key:"renderInput",value:function(){var e=this.props,t=e.isDisabled,n=e.isSearchable,r=e.inputId,a=e.inputValue,i=e.tabIndex,u=this.components.Input,l=this.state.inputIsHidden,s=r||this.getElementId("input");if(!n)return o.a.createElement(Po,{id:s,innerRef:this.getInputRef,onBlur:this.onInputBlur,onChange:Nr,onFocus:this.onInputFocus,readOnly:!0,disabled:t,tabIndex:i,value:""});var f={"aria-autocomplete":"list","aria-label":this.props["aria-label"],"aria-labelledby":this.props["aria-labelledby"]},p=this.commonProps,d=p.cx,h=p.theme,m=p.selectProps;return o.a.createElement(u,c({autoCapitalize:"none",autoComplete:"off",autoCorrect:"off",cx:d,getStyles:this.getStyles,id:s,innerRef:this.getInputRef,isDisabled:t,isHidden:l,onBlur:this.onInputBlur,onChange:this.handleInputChange,onFocus:this.onInputFocus,selectProps:m,spellCheck:"false",tabIndex:i,theme:h,type:"text",value:a},f))}},{key:"renderPlaceholderOrValue",value:function(){var e=this,t=this.components,n=t.MultiValue,r=t.MultiValueContainer,a=t.MultiValueLabel,i=t.MultiValueRemove,u=t.SingleValue,l=t.Placeholder,s=this.commonProps,f=this.props,p=f.controlShouldRenderValue,d=f.isDisabled,h=f.isMulti,m=f.inputValue,y=f.placeholder,v=this.state,g=v.selectValue,b=v.focusedValue,E=v.isFocused;if(!this.hasValue()||!p)return m?null:o.a.createElement(l,c({},s,{key:"placeholder",isDisabled:d,isFocused:E}),y);if(h)return g.map((function(t,u){var l=t===b;return o.a.createElement(n,c({},s,{components:{Container:r,Label:a,Remove:i},isFocused:l,isDisabled:d,key:e.getOptionValue(t),index:u,removeProps:{onClick:function(){return e.removeValue(t)},onTouchEnd:function(){return e.removeValue(t)},onMouseDown:function(e){e.preventDefault(),e.stopPropagation()}},data:t}),e.formatOptionLabel(t,"value"))}));if(m)return null;var w=g[0];return o.a.createElement(u,c({},s,{data:w,isDisabled:d}),this.formatOptionLabel(w,"value"))}},{key:"renderClearIndicator",value:function(){var e=this.components.ClearIndicator,t=this.commonProps,n=this.props,r=n.isDisabled,a=n.isLoading,i=this.state.isFocused;if(!this.isClearable()||!e||r||!this.hasValue()||a)return null;var u={onMouseDown:this.onClearIndicatorMouseDown,onTouchEnd:this.onClearIndicatorTouchEnd,"aria-hidden":"true"};return o.a.createElement(e,c({},t,{innerProps:u,isFocused:i}))}},{key:"renderLoadingIndicator",value:function(){var e=this.components.LoadingIndicator,t=this.commonProps,n=this.props,r=n.isDisabled,a=n.isLoading,i=this.state.isFocused;if(!e||!a)return null;return o.a.createElement(e,c({},t,{innerProps:{"aria-hidden":"true"},isDisabled:r,isFocused:i}))}},{key:"renderIndicatorSeparator",value:function(){var e=this.components,t=e.DropdownIndicator,n=e.IndicatorSeparator;if(!t||!n)return null;var r=this.commonProps,a=this.props.isDisabled,i=this.state.isFocused;return o.a.createElement(n,c({},r,{isDisabled:a,isFocused:i}))}},{key:"renderDropdownIndicator",value:function(){var e=this.components.DropdownIndicator;if(!e)return null;var t=this.commonProps,n=this.props.isDisabled,r=this.state.isFocused,a={onMouseDown:this.onDropdownIndicatorMouseDown,onTouchEnd:this.onDropdownIndicatorTouchEnd,"aria-hidden":"true"};return o.a.createElement(e,c({},t,{innerProps:a,isDisabled:n,isFocused:r}))}},{key:"renderMenu",value:function(){var e=this,t=this.components,n=t.Group,r=t.GroupHeading,a=t.Menu,i=t.MenuList,u=t.MenuPortal,l=t.LoadingMessage,s=t.NoOptionsMessage,f=t.Option,p=this.commonProps,d=this.state,h=d.focusedOption,m=d.menuOptions,y=this.props,v=y.captureMenuScroll,g=y.inputValue,b=y.isLoading,E=y.loadingMessage,w=y.minMenuHeight,S=y.maxMenuHeight,k=y.menuIsOpen,T=y.menuPlacement,C=y.menuPosition,O=y.menuPortalTarget,x=y.menuShouldBlockScroll,_=y.menuShouldScrollIntoView,P=y.noOptionsMessage,A=y.onMenuScrollToTop,I=y.onMenuScrollToBottom;if(!k)return null;var N,D=function(t){var n=h===t.data;return t.innerRef=n?e.getFocusedOptionRef:void 0,o.a.createElement(f,c({},p,t,{isFocused:n}),e.formatOptionLabel(t.data,"menu"))};if(this.hasOptions())N=m.render.map((function(t){if("group"===t.type){t.type;var a=jn(t,["type"]),i="".concat(t.key,"-heading");return o.a.createElement(n,c({},p,a,{Heading:r,headingProps:{id:i},label:e.formatGroupLabel(t.data)}),t.options.map((function(e){return D(e)})))}if("option"===t.type)return D(t)}));else if(b){var F=E({inputValue:g});if(null===F)return null;N=o.a.createElement(l,p,F)}else{var L=P({inputValue:g});if(null===L)return null;N=o.a.createElement(s,p,L)}var R={minMenuHeight:w,maxMenuHeight:S,menuPlacement:T,menuPosition:C,menuShouldScrollIntoView:_},j=o.a.createElement(qr,c({},p,R),(function(t){var n=t.ref,r=t.placerProps,u=r.placement,l=r.maxHeight;return o.a.createElement(a,c({},p,R,{innerRef:n,innerProps:{onMouseDown:e.onMenuMouseDown,onMouseMove:e.onMenuMouseMove},isLoading:b,placement:u}),o.a.createElement(Bo,{isEnabled:v,onTopArrive:A,onBottomArrive:I},o.a.createElement(zo,{isEnabled:x},o.a.createElement(i,c({},p,{innerRef:e.getMenuListRef,isLoading:b,maxHeight:l}),N))))}));return O||"fixed"===C?o.a.createElement(u,c({},p,{appendTo:O,controlElement:this.controlRef,menuPlacement:T,menuPosition:C}),j):j}},{key:"renderFormField",value:function(){var e=this,t=this.props,n=t.delimiter,r=t.isDisabled,a=t.isMulti,i=t.name,u=this.state.selectValue;if(i&&!r){if(a){if(n){var l=u.map((function(t){return e.getOptionValue(t)})).join(n);return o.a.createElement("input",{name:i,type:"hidden",value:l})}var s=u.length>0?u.map((function(t,n){return o.a.createElement("input",{key:"i-".concat(n),name:i,type:"hidden",value:e.getOptionValue(t)})})):o.a.createElement("input",{name:i,type:"hidden"});return o.a.createElement("div",null,s)}var c=u[0]?this.getOptionValue(u[0]):"";return o.a.createElement("input",{name:i,type:"hidden",value:c})}}},{key:"renderLiveRegion",value:function(){return this.state.isFocused?o.a.createElement(_o,{"aria-live":"polite"},o.a.createElement("p",{id:"aria-selection-event"}," ",this.state.ariaLiveSelection),o.a.createElement("p",{id:"aria-context"}," ",this.constructAriaLiveMessage())):null}},{key:"render",value:function(){var e=this.components,t=e.Control,n=e.IndicatorsContainer,r=e.SelectContainer,a=e.ValueContainer,i=this.props,u=i.className,l=i.id,s=i.isDisabled,f=i.menuIsOpen,p=this.state.isFocused,d=this.commonProps=this.getCommonProps();return o.a.createElement(r,c({},d,{className:u,innerProps:{id:l,onKeyDown:this.onKeyDown},isDisabled:s,isFocused:p}),this.renderLiveRegion(),o.a.createElement(t,c({},d,{innerRef:this.getControlRef,innerProps:{onMouseDown:this.onControlMouseDown,onTouchEnd:this.onControlTouchEnd},isDisabled:s,isFocused:p,menuIsOpen:f}),o.a.createElement(a,c({},d,{isDisabled:s}),this.renderPlaceholderOrValue(),this.renderInput()),o.a.createElement(n,c({},d,{isDisabled:s}),this.renderClearIndicator(),this.renderLoadingIndicator(),this.renderIndicatorSeparator(),this.renderDropdownIndicator())),this.renderMenu(),this.renderFormField())}}]),t}(r.Component);Un(Xo,"defaultProps",Ko);var Zo,ea,ta,na={defaultInputValue:"",defaultMenuIsOpen:!1,defaultValue:null},ra=(r.Component,Zo=Xo,ta=ea=function(e){function t(){var e,n;zn(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return Un($n($n(n=Yn(this,(e=Gn(t)).call.apply(e,[this].concat(o))))),"select",void 0),Un($n($n(n)),"state",{inputValue:void 0!==n.props.inputValue?n.props.inputValue:n.props.defaultInputValue,menuIsOpen:void 0!==n.props.menuIsOpen?n.props.menuIsOpen:n.props.defaultMenuIsOpen,value:void 0!==n.props.value?n.props.value:n.props.defaultValue}),Un($n($n(n)),"onChange",(function(e,t){n.callProp("onChange",e,t),n.setState({value:e})})),Un($n($n(n)),"onInputChange",(function(e,t){var r=n.callProp("onInputChange",e,t);n.setState({inputValue:void 0!==r?r:e})})),Un($n($n(n)),"onMenuOpen",(function(){n.callProp("onMenuOpen"),n.setState({menuIsOpen:!0})})),Un($n($n(n)),"onMenuClose",(function(){n.callProp("onMenuClose"),n.setState({menuIsOpen:!1})})),n}return Kn(t,e),Bn(t,[{key:"focus",value:function(){this.select.focus()}},{key:"blur",value:function(){this.select.blur()}},{key:"getProp",value:function(e){return void 0!==this.props[e]?this.props[e]:this.state[e]}},{key:"callProp",value:function(e){if("function"==typeof this.props[e]){for(var t,n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];return(t=this.props)[e].apply(t,r)}}},{key:"render",value:function(){var e=this,t=this.props,n=(t.defaultInputValue,t.defaultMenuIsOpen,t.defaultValue,jn(t,["defaultInputValue","defaultMenuIsOpen","defaultValue"]));return o.a.createElement(Zo,c({},n,{ref:function(t){e.select=t},inputValue:this.getProp("inputValue"),menuIsOpen:this.getProp("menuIsOpen"),onChange:this.onChange,onInputChange:this.onInputChange,onMenuClose:this.onMenuClose,onMenuOpen:this.onMenuOpen,value:this.getProp("value")}))}}]),t}(r.Component),Un(ea,"defaultProps",na),ta);function oa(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var aa=function(){function e(t){var n,r,o,a=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),o=function(e,t){var n=a.transformDataToPoints(t),r=a.transformPointsToLabels(n),o=document.getElementById("chart");new Chart(o,{type:"line",data:{labels:r,datasets:[{label:e,data:n,borderWidth:2,borderColor:"#000000",backgroundColor:"#106fbf"}]},options:{}})},(r="initChart")in(n=this)?Object.defineProperty(n,r,{value:o,enumerable:!0,configurable:!0,writable:!0}):n[r]=o}var t,n,r;return t=e,(n=[{key:"getDateFromDisplay",value:function(e){return new Date(this.getDateFrom(e)).toDateString()}},{key:"getDateToDisplay",value:function(e){return new Date(this.getDateTo(e)).toDateString()}},{key:"getTotalCountDisplay",value:function(e){return this.getTotalCount(e)}}])&&oa(t.prototype,n),r&&oa(t,r),e}();function ia(e){return(ia="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ua(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function la(e){return(la=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function sa(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ca(e,t){return(ca=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function fa(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var pa=function(e){function t(e){var n,r,o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,n=!(o=la(t).call(this,e))||"object"!==ia(o)&&"function"!=typeof o?sa(r):o,fa(sa(n),"transformDataToPoints",(function(e){var t=[];return e.SpeedMeasurements&&(t=e.SpeedMeasurements.map((function(e,t){return{t:e.CreateDateDisplayFriendly,y:e.CharsPerSec}}))),t})),fa(sa(n),"transformPointsToLabels",(function(e){var t=1;return e.reduce((function(e,n){return t%2==0?e.push(n.t):e.push(""),t++,e}),[])})),n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ca(e,t)}(t,e),n=t,(r=[{key:"getChartDisplayName",value:function(){return"Characters Per Second"}},{key:"getDateFrom",value:function(e){return e.SpeedDateFrom}},{key:"getDateTo",value:function(e){return e.SpeedDateFrom}},{key:"getTotalCount",value:function(e){return e.SpeedMeasurementCount}}])&&ua(n.prototype,r),o&&ua(n,o),t}(aa);function da(e){return(da="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ha(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ma(e){return(ma=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ya(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function va(e,t){return(va=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ga(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var ba=function(e){function t(e){var n,r,o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,n=!(o=ma(t).call(this,e))||"object"!==da(o)&&"function"!=typeof o?ya(r):o,ga(ya(n),"transformDataToPoints",(function(e){var t=[];return e.SpeedMeasurements&&(t=e.SpeedMeasurements.map((function(e,t){return{t:e.CreateDateDisplayFriendly,y:e.WordPerMin}}))),t})),ga(ya(n),"transformPointsToLabels",(function(e){var t=1;return e.reduce((function(e,n){return t%2==0?e.push(n.t):e.push(""),t++,e}),[])})),n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&va(e,t)}(t,e),n=t,(r=[{key:"getChartDisplayName",value:function(){return"Words Per Minute"}},{key:"getDateFrom",value:function(e){return e.SpeedDateFrom}},{key:"getDateTo",value:function(e){return e.SpeedDateFrom}},{key:"getTotalCount",value:function(e){return e.SpeedMeasurementCount}}])&&ha(n.prototype,r),o&&ha(n,o),t}(aa);function Ea(e){return(Ea="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function wa(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Sa(e){return(Sa=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ka(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Ta(e,t){return(Ta=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Ca={DefaultChartType:"cps",VisualHistoryChartTypes:[{value:"cps",label:"Speed - Characters Per Second"},{value:"wpm",label:"Speed - Words Per Minute"}]},Oa=function(e){function t(e){var n,r,o,a,i,u;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,o=Sa(t).call(this,e),n=!o||"object"!==Ea(o)&&"function"!=typeof o?ka(r):o,a=ka(n),u=function(e){if(e&&n.setState({SelectedChartType:e}),"cps"==n.state.SelectedChartType.value?n.currentChart=new pa:"wpm"==n.state.SelectedChartType.value?n.currentChart=new ba:n.currentChart=null,null!=n.currentChart&&n.state.data){var t=n.currentChart.getChartDisplayName();n.currentChart.initChart(t,n.state.data),document.getElementById("chartDateFrom").innerText=n.currentChart.getDateFromDisplay(n.state.data),document.getElementById("chartDateTo").innerText=n.currentChart.getDateToDisplay(n.state.data),document.getElementById("chartTotalCount").innerText=n.currentChart.getTotalCountDisplay(n.state.data)}},(i="handleChartTypeChange")in a?Object.defineProperty(a,i,{value:u,enumerable:!0,configurable:!0,writable:!0}):a[i]=u,n.state={data:null,isLoading:!0,SelectedChartType:Ca.VisualHistoryChartTypes.filter((function(e){return e.value===Ca.DefaultChartType}))[0]},n.getUserHistory().then((function(e){n.setState({data:e,isLoading:!1})})),n.currentChart=null,n}var n,r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ta(e,t)}(t,e),n=t,(r=[{key:"componentDidUpdate",value:function(){this.state&&this.state.data&&this.handleChartTypeChange()}},{key:"getUserHistory",value:function(){var e=(new Le).getCurrentToken();return fetch(Ce.API_HISTORY_VISUAL,{method:"Post",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify(e)}).then((function(e){return e.json()})).then((function(e){return Promise.resolve(e)}))}},{key:"render",value:function(){return o.a.createElement(o.a.Fragment,null,o.a.createElement(yt,{showLoading:this.state.isLoading}),!1===this.state.isLoading&&o.a.createElement(o.a.Fragment,null,o.a.createElement("div",{className:"react_select_container"},o.a.createElement(ra,{value:this.state.SelectedChartType,onChange:this.handleChartTypeChange,options:Ca.VisualHistoryChartTypes,defaultValue:Ca.DefaultChartType})),o.a.createElement("div",{className:"centered_list"},o.a.createElement("ul",null,o.a.createElement("li",null,o.a.createElement("span",{className:"strong"},"Total Count: "),o.a.createElement("span",{id:"chartTotalCount"})),o.a.createElement("li",null,o.a.createElement("span",{className:"strong"},"Dates From: "),o.a.createElement("span",{id:"chartDateFrom"})),o.a.createElement("li",null,o.a.createElement("span",{className:"strong"},"Dates To: "),o.a.createElement("span",{id:"chartDateTo"})))),o.a.createElement("div",{className:"chart_container"},o.a.createElement("canvas",{id:"chart"}))))}}])&&wa(n.prototype,r),a&&wa(n,a),t}(o.a.Component);function xa(e){return(xa="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Pa(e,t){return!t||"object"!==xa(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Aa(e,t,n){return(Aa="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=Ia(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function Ia(e){return(Ia=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Na(e,t){return(Na=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Da=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=Pa(this,Ia(t).call(this,e))).state={isLoading:!0},n.loadDependancies(),n}var n,r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Na(e,t)}(t,e),n=t,(r=[{key:"loadDependancies",value:function(){var e=this;this.loadScript("/assets/js/external/Chart.bundle.min.js").then((function(){e.setState({isLoading:!1})}))}},{key:"render",value:function(){return this.authenticationComplete()?o.a.createElement(ot,{authed:!0},o.a.createElement("h2",null,"Visual History"),o.a.createElement("div",{className:"content_row"},o.a.createElement(Oa,null))):Aa(Ia(t.prototype),"render",this).call(this)}}])&&_a(n.prototype,r),a&&_a(n,a),t}(Rt);function Fa(e){return(Fa="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function La(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ra(e,t){return!t||"object"!==Fa(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ja(e){return(ja=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Ma(e,t){return(Ma=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Ua=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),Ra(this,ja(t).call(this,e))}var n,r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ma(e,t)}(t,e),n=t,(r=[{key:"render",value:function(){var e=this.props.MaskIsVisible?"loading_mask_screen":"loading_mask_screen_hide";return o.a.createElement("div",{id:"screen_mask",className:e})}}])&&La(n.prototype,r),a&&La(n,a),t}(o.a.Component);function Va(e){return(Va="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function za(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ha(e){return(Ha=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Ba(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Wa(e,t){return(Wa=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function qa(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var $a=function(e){function t(e){var n,r,o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,o=Ha(t).call(this,e),n=!o||"object"!==Va(o)&&"function"!=typeof o?Ba(r):o,qa(Ba(n),"componentDidUpdate",(function(){n.props.IsRunning!=n.state.IsRunning&&(0==n.props.IsRunning?n.stopwatchStop():1==n.props.IsRunning&&n.stopwatchStart(),n.setState({IsRunning:n.props.IsRunning}))})),qa(Ba(n),"stopwatchStart",(function(){var e=setInterval(n.stopwatchTick,250);n.setState({TimerVal:0,StopwatchIntervalId:e})})),qa(Ba(n),"stopwatchStop",(function(){clearInterval(n.state.StopwatchIntervalId)})),qa(Ba(n),"stopwatchTick",(function(){n.setState({TimerVal:n.state.TimerVal+250})})),qa(Ba(n),"formatMsToFriendly",(function(e){var t=Math.floor(e/6e4%60),n=Math.floor(e/1e3%60),r="";return t>0&&(t<=9&&(r+="0"),r+=t+"m "),n>0&&(n<=9&&(r+="0"),r+=n+"s "),r+=("000"+parseInt(e%1e3)).slice(-3)+"ms"})),n.state={StopwatchIntervalId:-1,TimerVal:0,IsRunning:n.props.IsRunning},n}var n,r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Wa(e,t)}(t,e),n=t,(r=[{key:"componentWillUnmount",value:function(){this.stopwatchStop()}},{key:"render",value:function(){return o.a.createElement("div",{id:"stopwatch"},this.formatMsToFriendly(this.state.TimerVal))}}])&&za(n.prototype,r),a&&za(n,a),t}(o.a.Component);function Ya(e){return(Ya="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ga(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Qa(e,t){return!t||"object"!==Ya(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Ka(e){return(Ka=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Ja(e,t){return(Ja=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Xa=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),Qa(this,Ka(t).call(this,e))}var n,r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ja(e,t)}(t,e),n=t,(r=[{key:"render",value:function(){var e=1==this.props.MaskIsVisible?"Theatre Mode Off":"Theatre Mode On",t=1==this.props.IsRunning?"toolbar_top_center":"toolbar_top_center_hide";return o.a.createElement("div",{id:"screen_mask_toolbar",className:t},o.a.createElement("input",{onClick:this.props.onToggleMask,className:"button-size-small",type:"button",value:e}),o.a.createElement("input",{onClick:this.props.onStopSequence,className:"button-size-small",type:"button",value:"Stop Sequence"}),o.a.createElement($a,{IsRunning:this.props.IsRunning}))}}])&&Ga(n.prototype,r),a&&Ga(n,a),t}(o.a.Component);function Za(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ei(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var ti=function(){function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),ei(this,"startNewSession",(function(){var e=(new Le).getCurrentToken(),t=n;return fetch(Ce.API_NEW_SESSION,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify(e)}).then((function(e){return e.json()})).then((function(e){return t.state.SessionId=e.SessionId,t.state.UserId=e.UserId,t.persistSessionSeqData(n.state),Promise.resolve(e)}))})),ei(this,"getNewSequence",(function(){var e=n;return new Promise((function(t){var n=e.getCurrentSession();n&&n.SessionId?e.getNewSequenceWithSession(n).then((function(e){t(e)})):e.startNewSession().then((function(n){e.getNewSequenceWithSession(n).then((function(e){t(e)}))}))}))})),ei(this,"getNewSequenceWithSession",(function(e){return fetch(Ce.API_NEW_SEQUENCE,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify(e)}).then((function(e){return e.json()})).then((function(e){return n.state.SequenceId=e.SequenceId,n.persistSessionSeqData(n.state),Promise.resolve(e)}))})),ei(this,"stopCurrentSequence",(function(e){var t=new Date-n.state.StartTime,r=n.getCurrentSession();return r&&r.SessionId?(r.ElapsedInMilliseconds=t,r.TextEntered=e,fetch(Ce.API_END_SEQUENCE,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify(r)}).then((function(e){return e.json()})).then((function(e){return Promise.resolve(r)}))):Promise.reject()})),this.state={UserId:null,SessionId:null,SequenceId:null,StartTime:null}}var t,n,r;return t=e,(n=[{key:"sequenceStarting",value:function(){this.state.StartTime=new Date}},{key:"getCurrentSession",value:function(){var e=localStorage.getItem(_e);try{if(e)return JSON.parse(e)}catch(e){console.log("session mgr: token parse error: ",e)}return null}},{key:"clearSession",value:function(){localStorage.removeItem(_e)}},{key:"persistSessionSeqData",value:function(e){var t=JSON.stringify(e);localStorage.setItem(_e,t)}}])&&Za(t.prototype,n),r&&Za(t,r),e}();function ni(e){return(ni="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ri(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function oi(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ai(e,t,n){return(ai="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=ii(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function ii(e){return(ii=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ui(e,t){return(ui=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function li(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var si=function(e){function t(e){var n,r,o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,o=ii(t).call(this,e),n=!o||"object"!==ni(o)&&"function"!=typeof o?oi(r):o,li(oi(n),"toggleTheatreMode",(function(){n.setState({UseTheatreMode:!n.state.UseTheatreMode})})),li(oi(n),"setInputTextFocus",(function(){n.inputSequenceField&&n.inputSequenceField.focus()})),li(oi(n),"onTextEnteredChanged",(function(e){n.setState({TextEntered:e.target.value})})),li(oi(n),"onTextEnteredKeyDown",(function(e){1==e.shiftKey&&13==e.keyCode?(e.preventDefault(),n.handleKeyEnter()):13==e.keyCode&&e.preventDefault()})),li(oi(n),"handleKeyEnter",(function(){1==n.state.IsRunning?n.stopSequence():n.startSequence()})),li(oi(n),"startSequence",(function(){1!=n.state.IsLoading&&1!=n.state.IsRunning&&(n.setState({IsLoading:!0}),n.SessionManager.getNewSequence().then((function(e){n.setState({CurrentSequence:e,TextShown:e.Text,IsRunning:!0,IsLoading:!1,UseTheatreMode:!0}),n.setFilledTextareaHeight(),n.SessionManager.sequenceStarting(),n.setInputTextFocus()})))})),li(oi(n),"stopSequence",(function(){n.setState({IsRunning:!1,UseTheatreMode:!1,IsLoading:!0}),n.SessionManager.stopCurrentSequence(n.state.TextEntered).then((function(e){n.props.history.push(Oe.HISTORY_DETAILS+"/"+e.SequenceId)}))})),n.state={TextShown:Ae.NEW_SEQUENCE_INSTRUCTIONS,TextEntered:"",IsRunning:!1,IsLoading:!1,UseTheatreMode:!1,CurrentSequence:{SequenceId:-1},height:Pe.DEFAULT_NEW_SEQUENCE_INPUT_FIELD_HEIGHT},n.SessionManager=new ti,n}var n,r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ui(e,t)}(t,e),n=t,(r=[{key:"componentDidMount",value:function(){var e=this;this.setInputTextFocus(),document.querySelector("body").addEventListener("keydown",(function(t){e.onTextEnteredKeyDown(t)}))}},{key:"autoresize",value:function(){this.setFilledTextareaHeight()}},{key:"setFilledTextareaHeight",value:function(){this.setState({height:this.sizeref.clientHeight+10})}},{key:"render",value:function(){var e=this;return this.authenticationComplete()?o.a.createElement(o.a.Fragment,null,o.a.createElement(Ua,{MaskIsVisible:this.state.UseTheatreMode}),o.a.createElement(Xa,{MaskIsVisible:this.state.UseTheatreMode,IsRunning:this.state.IsRunning,onToggleMask:this.toggleTheatreMode,onStopSequence:this.stopSequence}),o.a.createElement(ot,null,o.a.createElement("h2",null,"New Sequence"),o.a.createElement("div",{className:"position_relative"},o.a.createElement(yt,{showLoading:this.state.IsLoading,position:"top"}),o.a.createElement("div",{className:"content_row_sm show_above_mask"},o.a.createElement("h3",null,"Text to Type"),o.a.createElement(Pn,{TextShown:this.state.TextShown,TextEntered:this.state.TextEntered,sequenceId:this.state.CurrentSequence.SequenceId,peekInRealTime:!0,IsRunning:this.state.IsRunning})),o.a.createElement("div",{className:"content_row_sm show_above_mask"},o.a.createElement("h3",null,"Your Text"),o.a.createElement("form",null,o.a.createElement("textarea",{name:"textEntered",className:"entered_text",ref:function(t){e.inputSequenceField=t},onKeyDown:this.onTextEnteredKeyDown,onChange:this.onTextEnteredChanged,value:this.state.TextEntered,style:{height:this.state.height,resize:this.state.height<=Pe.DEFAULT_NEW_SEQUENCE_INPUT_FIELD_HEIGHT?"none":null}}),!1===this.state.IsRunning&&!1===this.state.IsLoading&&o.a.createElement("input",{onClick:function(){return e.startSequence()},className:"button-size-medium position_center",type:"button",value:"Start Sequence...!"}))),o.a.createElement("div",{className:"content_row_sm"},o.a.createElement("form",null,o.a.createElement("div",{id:"sizeComparison",className:"presented_text_size_ref",ref:function(t){return e.sizeref=t}},this.state.TextShown)))))):ai(ii(t.prototype),"render",this).call(this)}}])&&ri(n.prototype,r),a&&ri(n,a),t}(Rt);function ci(e){return(ci="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function fi(){return(fi=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function pi(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function di(e,t){return!t||"object"!==ci(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function hi(e){return(hi=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function mi(e,t){return(mi=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var yi=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),di(this,hi(t).apply(this,arguments))}var n,r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&mi(e,t)}(t,e),n=t,(r=[{key:"render",value:function(){var e=this;return o.a.createElement("div",null,o.a.createElement(me,null,o.a.createElement(se,{exact:!0,path:Oe.DEFAULT,component:ct}),o.a.createElement(se,{exact:!0,path:Oe.INDEX,component:ct}),o.a.createElement(se,{exact:!0,path:Oe.NEW_SEQUENCE,render:function(t){return o.a.createElement(si,fi({},t,{IsAuthed:e.props.IsAuthed,appLogin:e.props.appLogin,appLogout:e.props.appLogout}))}}),o.a.createElement(se,{exact:!0,path:Oe.LOGIN,render:function(t){return o.a.createElement(kt,fi({},t,{IsAuthed:e.props.IsAuthed,appLogin:e.props.appLogin,appLogout:e.props.appLogout}))}}),o.a.createElement(se,{exact:!0,path:Oe.REGISTER,render:function(t){return o.a.createElement(At,fi({},t,{IsAuthed:e.props.IsAuthed,appLogin:e.props.appLogin,appLogout:e.props.appLogout}))}}),o.a.createElement(se,{exact:!0,path:Oe.MY_ACCT,render:function(t){return o.a.createElement(Bt,fi({},t,{IsAuthed:e.props.IsAuthed,appLogin:e.props.appLogin,appLogout:e.props.appLogout}))}}),o.a.createElement(se,{exact:!0,path:Oe.HISTORY,render:function(t){return o.a.createElement(Kt,fi({},t,{IsAuthed:e.props.IsAuthed,appLogin:e.props.appLogin,appLogout:e.props.appLogout}))}}),o.a.createElement(se,{exact:!0,path:Oe.HISTORY_DETAILS_WITHID,render:function(t){return o.a.createElement(Rn,fi({},t,{IsAuthed:e.props.IsAuthed,appLogin:e.props.appLogin,appLogout:e.props.appLogout}))}}),o.a.createElement(se,{exact:!0,path:Oe.HISTORY_VISUAL,render:function(t){return o.a.createElement(Da,fi({},t,{IsAuthed:e.props.IsAuthed,appLogin:e.props.appLogin,appLogout:e.props.appLogout}))}}),o.a.createElement(se,{component:ct})))}}])&&pi(n.prototype,r),a&&pi(n,a),t}(o.a.Component);function vi(e){return(vi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function gi(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function bi(e,t){return!t||"object"!==vi(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Ei(e){return(Ei=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function wi(e,t){return(wi=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Si=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),bi(this,Ei(t).call(this,e))}var n,r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&wi(e,t)}(t,e),n=t,(r=[{key:"render",value:function(){return o.a.createElement(o.a.Fragment,null,o.a.createElement("div",{id:"footer"},o.a.createElement("div",{id:"footer_contents"},o.a.createElement("span",{className:"float_left"},"UTC: ",(new Date).toUTCString()),o.a.createElement("span",{className:"float_right"},"© ",o.a.createElement("a",{href:"http://kieranemiller.com"},"kieranemiller.com")),o.a.createElement("div",{className:"clear_both"})),o.a.createElement("div",{className:"top_bar"}),o.a.createElement("div",{className:"clear_both"})))}}])&&gi(n.prototype,r),a&&gi(n,a),t}(o.a.Component);n(20);function ki(e){return(ki="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ti(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ci(e){return(Ci=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Oi(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function xi(e,t){return(xi=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Pi=function(e){function t(e){var n,r,o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,o=Ci(t).call(this,e),n=!o||"object"!==ki(o)&&"function"!=typeof o?Oi(r):o,_i(Oi(n),"appLogin",(function(){(new ti).clearSession(),n.setState({IsAuthed:!0})})),_i(Oi(n),"appLogout",(function(){(new ti).clearSession(),(new Le).logout(),n.setState({IsAuthed:!1})})),n.state={IsAuthed:!1},n}var n,r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&xi(e,t)}(t,e),n=t,(r=[{key:"render",value:function(){return o.a.createElement(ye,null,o.a.createElement(Je,{IsAuthed:this.state.IsAuthed,appLogin:this.appLogin,appLogout:this.appLogout}),o.a.createElement(yi,{IsAuthed:this.state.IsAuthed,appLogin:this.appLogin,appLogout:this.appLogout}),o.a.createElement(Si,null))}}])&&Ti(n.prototype,r),a&&Ti(n,a),t}(o.a.Component);i.a.render(o.a.createElement(Pi,null),document.getElementById("app"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNMb29zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5wdXQtYXV0b3NpemUvbGliL0F1dG9zaXplSW5wdXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BhdGgtdG8tcmVnZXhwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ3VkL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9kaXN0L2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzLmNqcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BhdGgtdG8tcmVnZXhwL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Jlc29sdmUtcGF0aG5hbWUvZXNtL3Jlc29sdmUtcGF0aG5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3ZhbHVlLWVxdWFsL2VzbS92YWx1ZS1lcXVhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGlueS1pbnZhcmlhbnQvZGlzdC90aW55LWludmFyaWFudC5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXNtL2hpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21pbmktY3JlYXRlLXJlYWN0LWNvbnRleHQvZGlzdC9lc20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lc20vcmVhY3Qtcm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzbS9yZWFjdC1yb3V0ZXItZG9tLmpzIiwid2VicGFjazovLy8uL2Fzc2V0cy9qcy9yZWFjdC9kZXYvY29uc3RhbnRzLmpzeCIsIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvcmVhY3QvZGV2L2F1dGguanN4Iiwid2VicGFjazovLy8uL2Fzc2V0cy9qcy9yZWFjdC9kZXYvY29tcG9uZW50cy9oZWFkZXItbmF2LWJhci5qc3giLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL3JlYWN0L2Rldi9oZWFkZXIuanN4Iiwid2VicGFjazovLy8uL2Fzc2V0cy9qcy9yZWFjdC9kZXYvcGF0aHMvYmFzZV9jb21wb25lbnQuanN4Iiwid2VicGFjazovLy8uL2Fzc2V0cy9qcy9yZWFjdC9kZXYvY29udGVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL3JlYWN0L2Rldi9wYXRocy9pbmRleC5qc3giLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL3JlYWN0L2Rldi9jb21wb25lbnRzL2xvYWRpbmcuanN4Iiwid2VicGFjazovLy8uL2Fzc2V0cy9qcy9yZWFjdC9kZXYvcGF0aHMvbG9naW4uanN4Iiwid2VicGFjazovLy8uL2Fzc2V0cy9qcy9yZWFjdC9kZXYvcGF0aHMvcmVnaXN0ZXIuanN4Iiwid2VicGFjazovLy8uL2Fzc2V0cy9qcy9yZWFjdC9kZXYvcGF0aHMvc2VjdXJlX2NvbXBvbmVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL3JlYWN0L2Rldi9wYXRocy9teWFjY291bnQuanN4Iiwid2VicGFjazovLy8uL2Fzc2V0cy9qcy9yZWFjdC9kZXYvcGF0aHMvaGlzdG9yeS5qc3giLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL3JlYWN0L2Rldi9jb21wb25lbnRzL2RlbHRhX2luZGljYXRvci5qc3giLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL3JlYWN0L2Rldi9jb21wb25lbnRzL3NwZWVkX2FuYWx5c2lzLmpzeCIsIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvcmVhY3QvZGV2L2NvbXBvbmVudHMvYWNjdXJhY3lfYW5hbHlzaXMuanN4Iiwid2VicGFjazovLy8uL2Fzc2V0cy9qcy9yZWFjdC9kZXYvY29tcG9uZW50cy9yZWFsX3RpbWVfYW5hbHlzaXNfdXBkYXRlci5qc3giLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL3JlYWN0L2Rldi9jb21wb25lbnRzL2tleV9zZXF1ZW5jZV9lcnJvcl9kaXNwbGF5LmpzeCIsIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvcmVhY3QvZGV2L3BhdGhzL2hpc3RvcnlfZGV0YWlscy5qc3giLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlXaXRob3V0SG9sZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2l0ZXJhYmxlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vbm9uSXRlcmFibGVTcHJlYWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2dldFByb3RvdHlwZU9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21lbW9pemUtb25lL2Rpc3QvbWVtb2l6ZS1vbmUuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9zaGVldC9kaXN0L3NoZWV0LmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9zdHlsaXMvZGlzdC9zdHlsaXMuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL2NhY2hlL2Rpc3QvY2FjaGUuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3V0aWxzL2Rpc3QvdXRpbHMuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL2hhc2gvZGlzdC9oYXNoLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi91bml0bGVzcy9kaXN0L3VuaXRsZXNzLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9tZW1vaXplL2Rpc3QvbWVtb2l6ZS5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vc2VyaWFsaXplL2Rpc3Qvc2VyaWFsaXplLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9jc3MvZGlzdC9jc3MuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL2NvcmUvZGlzdC9jb3JlLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zZWxlY3QvZGlzdC9jaHVuay0zOWQzZmRhOC5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2VsZWN0L2Rpc3QvY2h1bmstODA2NDAwMzYuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2VsZWN0L2Rpc3QvYmFzZS9kaXN0L3JlYWN0LXNlbGVjdC1jYWMwYTVhZS5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2VsZWN0L2Rpc3QvY2h1bmstYjM2YmFmMWEuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNlbGVjdC9kaXN0L3JlYWN0LXNlbGVjdC5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvcmVhY3QvZGV2L2NoYXJ0cy9iYXNlX2NoYXJ0LmpzeCIsIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvcmVhY3QvZGV2L2NoYXJ0cy9jaGFyc19wZXJfc2Vjb25kX2NoYXJ0LmpzeCIsIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvcmVhY3QvZGV2L2NoYXJ0cy93b3Jkc19wZXJfbWludXRlX2NoYXJ0LmpzeCIsIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvcmVhY3QvZGV2L2NoYXJ0cy9jaGFydF9jb21wb25lbnQuanN4Iiwid2VicGFjazovLy8uL2Fzc2V0cy9qcy9yZWFjdC9kZXYvcGF0aHMvaGlzdG9yeV92aXN1YWwuanN4Iiwid2VicGFjazovLy8uL2Fzc2V0cy9qcy9yZWFjdC9kZXYvY29tcG9uZW50cy9oaWRlYWJsZV9zY3JlZW5fbWFzay5qc3giLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL3JlYWN0L2Rldi9jb21wb25lbnRzL3N0b3B3YXRjaC5qc3giLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL3JlYWN0L2Rldi9jb21wb25lbnRzL3Rvb2xiYXJfbmV3X3NlcXVlbmNlLmpzeCIsIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvcmVhY3QvZGV2L3Nlc3Npb25fbWdyLmpzeCIsIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvcmVhY3QvZGV2L3BhdGhzL25ld19zZXF1ZW5jZS5qc3giLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL3JlYWN0L2Rldi9yb3V0aW5nLmpzeCIsIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvcmVhY3QvZGV2L2Zvb3Rlci5qc3giLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL3JlYWN0L2Rldi9hcHAuanN4Il0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiY2hlY2tEQ0UiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJlcnIiLCJjb25zb2xlIiwiZXJyb3IiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjb25zdHJ1Y3RvciIsIl9fcHJvdG9fXyIsIl9leHRlbmRzIiwiYXNzaWduIiwidGFyZ2V0IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInByb3BzIiwiZGVzY3JpcHRvciIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiQ29uc3RydWN0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfcmVhY3QiLCJfcmVhY3QyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9wcm9wVHlwZXMyIiwib2JqIiwiZGVmYXVsdCIsInNpemVyU3R5bGUiLCJwb3NpdGlvbiIsInRvcCIsImxlZnQiLCJ2aXNpYmlsaXR5IiwiaGVpZ2h0Iiwib3ZlcmZsb3ciLCJ3aGl0ZVNwYWNlIiwiSU5QVVRfUFJPUFNfQkxBQ0tMSVNUIiwiY29weVN0eWxlcyIsInN0eWxlcyIsIm5vZGUiLCJzdHlsZSIsImZvbnRTaXplIiwiZm9udEZhbWlseSIsImZvbnRXZWlnaHQiLCJmb250U3R5bGUiLCJsZXR0ZXJTcGFjaW5nIiwidGV4dFRyYW5zZm9ybSIsImlzSUUiLCJ3aW5kb3ciLCJuYXZpZ2F0b3IiLCJ0ZXN0IiwidXNlckFnZW50IiwiZ2VuZXJhdGVJZCIsIk1hdGgiLCJyYW5kb20iLCJ0b1N0cmluZyIsInN1YnN0ciIsInVuZGVmaW5lZCIsIkF1dG9zaXplSW5wdXQiLCJfQ29tcG9uZW50IiwiaW5zdGFuY2UiLCJUeXBlRXJyb3IiLCJfY2xhc3NDYWxsQ2hlY2siLCJ0aGlzIiwiX3RoaXMiLCJzZWxmIiwiUmVmZXJlbmNlRXJyb3IiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsImdldFByb3RvdHlwZU9mIiwiaW5wdXRSZWYiLCJlbCIsImlucHV0IiwicGxhY2VIb2xkZXJTaXplclJlZiIsInBsYWNlSG9sZGVyU2l6ZXIiLCJzaXplclJlZiIsInNpemVyIiwic3RhdGUiLCJpbnB1dFdpZHRoIiwibWluV2lkdGgiLCJpbnB1dElkIiwiaWQiLCJzZXRQcm90b3R5cGVPZiIsIl9pbmhlcml0cyIsIm1vdW50ZWQiLCJjb3B5SW5wdXRTdHlsZXMiLCJ1cGRhdGVJbnB1dFdpZHRoIiwibmV4dFByb3BzIiwic2V0U3RhdGUiLCJwcmV2UHJvcHMiLCJwcmV2U3RhdGUiLCJvbkF1dG9zaXplIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImlucHV0U3R5bGVzIiwic2Nyb2xsV2lkdGgiLCJuZXdJbnB1dFdpZHRoIiwicGxhY2Vob2xkZXIiLCJwbGFjZWhvbGRlcklzTWluV2lkdGgiLCJtYXgiLCJ0eXBlIiwiZXh0cmFXaWR0aCIsInBhcnNlSW50IiwiZm9jdXMiLCJibHVyIiwic2VsZWN0IiwiaW5qZWN0U3R5bGVzIiwiY3JlYXRlRWxlbWVudCIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiX19odG1sIiwic2l6ZXJWYWx1ZSIsImRlZmF1bHRWYWx1ZSIsInJlZHVjZSIsInByZXZpb3VzVmFsdWUiLCJjdXJyZW50VmFsdWUiLCJ3cmFwcGVyU3R5bGUiLCJkaXNwbGF5IiwiaW5wdXRTdHlsZSIsImJveFNpemluZyIsIndpZHRoIiwiaW5wdXRQcm9wcyIsImtleXMiLCJpbmRleE9mIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiZm9yRWFjaCIsImZpZWxkIiwiY2xlYW5JbnB1dFByb3BzIiwiY2xhc3NOYW1lIiwiaW5wdXRDbGFzc05hbWUiLCJyZW5kZXJTdHlsZXMiLCJyZWYiLCJDb21wb25lbnQiLCJwcm9wVHlwZXMiLCJzdHJpbmciLCJhbnkiLCJvbmVPZlR5cGUiLCJudW1iZXIiLCJib29sIiwiZnVuYyIsIm9uQ2hhbmdlIiwiZGVmYXVsdFByb3BzIiwiaXNhcnJheSIsInBhdGhUb1JlZ2V4cCIsInBhcnNlIiwiY29tcGlsZSIsInN0ciIsIm9wdGlvbnMiLCJ0b2tlbnNUb0Z1bmN0aW9uIiwidG9rZW5zVG9SZWdFeHAiLCJQQVRIX1JFR0VYUCIsIlJlZ0V4cCIsImpvaW4iLCJyZXMiLCJ0b2tlbnMiLCJpbmRleCIsInBhdGgiLCJkZWZhdWx0RGVsaW1pdGVyIiwiZGVsaW1pdGVyIiwiZXhlYyIsImVzY2FwZWQiLCJvZmZzZXQiLCJzbGljZSIsIm5leHQiLCJwcmVmaXgiLCJjYXB0dXJlIiwiZ3JvdXAiLCJtb2RpZmllciIsImFzdGVyaXNrIiwicHVzaCIsInBhcnRpYWwiLCJyZXBlYXQiLCJvcHRpb25hbCIsInBhdHRlcm4iLCJlc2NhcGVHcm91cCIsImVzY2FwZVN0cmluZyIsImVuY29kZVVSSUNvbXBvbmVudFByZXR0eSIsImVuY29kZVVSSSIsInJlcGxhY2UiLCJjaGFyQ29kZUF0IiwidG9VcHBlckNhc2UiLCJtYXRjaGVzIiwiQXJyYXkiLCJvcHRzIiwiZGF0YSIsImVuY29kZSIsInByZXR0eSIsImVuY29kZVVSSUNvbXBvbmVudCIsInRva2VuIiwic2VnbWVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJqIiwiYXR0YWNoS2V5cyIsInJlIiwiZmxhZ3MiLCJzZW5zaXRpdmUiLCJzdHJpY3QiLCJlbmQiLCJyb3V0ZSIsImVuZHNXaXRoRGVsaW1pdGVyIiwiZ3JvdXBzIiwibWF0Y2giLCJyZWdleHBUb1JlZ2V4cCIsInBhcnRzIiwiYXJyYXlUb1JlZ2V4cCIsInN0cmluZ1RvUmVnZXhwIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwicHJvcElzRW51bWVyYWJsZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwidG9PYmplY3QiLCJ2YWwiLCJ0ZXN0MSIsIlN0cmluZyIsImdldE93blByb3BlcnR5TmFtZXMiLCJ0ZXN0MiIsImZyb21DaGFyQ29kZSIsIm1hcCIsInRlc3QzIiwic3BsaXQiLCJsZXR0ZXIiLCJzaG91bGRVc2VOYXRpdmUiLCJmcm9tIiwic3ltYm9scyIsInRvIiwiZ2xvYmFsIiwiUmVhY3RJcyIsIlJFQUNUX1NUQVRJQ1MiLCJjaGlsZENvbnRleHRUeXBlcyIsImNvbnRleHRUeXBlIiwiY29udGV4dFR5cGVzIiwiZGlzcGxheU5hbWUiLCJnZXREZWZhdWx0UHJvcHMiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJtaXhpbnMiLCJLTk9XTl9TVEFUSUNTIiwiY2FsbGVyIiwiY2FsbGVlIiwiYXJpdHkiLCJNRU1PX1NUQVRJQ1MiLCJjb21wYXJlIiwiVFlQRV9TVEFUSUNTIiwiZ2V0U3RhdGljcyIsImNvbXBvbmVudCIsImlzTWVtbyIsIkZvcndhcmRSZWYiLCJyZW5kZXIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJvYmplY3RQcm90b3R5cGUiLCJob2lzdE5vblJlYWN0U3RhdGljcyIsInRhcmdldENvbXBvbmVudCIsInNvdXJjZUNvbXBvbmVudCIsImJsYWNrbGlzdCIsImluaGVyaXRlZENvbXBvbmVudCIsImNvbmNhdCIsInRhcmdldFN0YXRpY3MiLCJzb3VyY2VTdGF0aWNzIiwiZSIsImgiLCJmb3IiLCJxIiwidSIsInYiLCJ3IiwieCIsInkiLCJ6IiwiYWEiLCJBIiwiaXRlcmF0b3IiLCJCIiwiYSIsImIiLCJDIiwiaXNNb3VudGVkIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVTZXRTdGF0ZSIsIkQiLCJFIiwiY29udGV4dCIsInJlZnMiLCJ1cGRhdGVyIiwiRiIsIkciLCJpc1JlYWN0Q29tcG9uZW50IiwiRXJyb3IiLCJmb3JjZVVwZGF0ZSIsIkgiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsIkkiLCJjdXJyZW50IiwiSiIsIksiLCJMIiwiX19zZWxmIiwiX19zb3VyY2UiLCJNIiwiZyIsImYiLCJjaGlsZHJlbiIsImsiLCIkJHR5cGVvZiIsIl9vd25lciIsIk4iLCJPIiwiUCIsIlEiLCJwb3AiLCJyZXN1bHQiLCJrZXlQcmVmaXgiLCJjb3VudCIsIlIiLCJVIiwiUyIsIlQiLCJpc0FycmF5IiwiZG9uZSIsImVzY2FwZSIsImNhIiwiZGEiLCJWIiwiYmEiLCJXIiwiWCIsIkNoaWxkcmVuIiwidG9BcnJheSIsIm9ubHkiLCJjcmVhdGVSZWYiLCJQdXJlQ29tcG9uZW50IiwiY3JlYXRlQ29udGV4dCIsIl9jYWxjdWxhdGVDaGFuZ2VkQml0cyIsIl9jdXJyZW50VmFsdWUiLCJfY3VycmVudFZhbHVlMiIsIl90aHJlYWRDb3VudCIsIlByb3ZpZGVyIiwiQ29uc3VtZXIiLCJfY29udGV4dCIsImZvcndhcmRSZWYiLCJsYXp5IiwiX2N0b3IiLCJfc3RhdHVzIiwiX3Jlc3VsdCIsIm1lbW8iLCJ1c2VDYWxsYmFjayIsInVzZUNvbnRleHQiLCJ1c2VFZmZlY3QiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwidXNlRGVidWdWYWx1ZSIsInVzZUxheW91dEVmZmVjdCIsInVzZU1lbW8iLCJ1c2VSZWR1Y2VyIiwidXNlUmVmIiwidXNlU3RhdGUiLCJGcmFnbWVudCIsIlByb2ZpbGVyIiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiY2xvbmVFbGVtZW50IiwiY3JlYXRlRmFjdG9yeSIsImlzVmFsaWRFbGVtZW50IiwidmVyc2lvbiIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnIiwic3VzcGVuc2UiLCJSZWFjdEN1cnJlbnRPd25lciIsIklzU29tZVJlbmRlcmVyQWN0aW5nIiwiWSIsIloiLCJlYSIsImV4dHJhY3RFdmVudHMiLCJldmVudFR5cGVzIiwiZmEiLCJwaGFzZWRSZWdpc3RyYXRpb25OYW1lcyIsImhhIiwicmVnaXN0cmF0aW9uTmFtZSIsImlhIiwiamEiLCJkZXBlbmRlbmNpZXMiLCJrYSIsImFwcGx5Iiwib25FcnJvciIsImxhIiwibWEiLCJuYSIsIm9hIiwicGEiLCJxYSIsInNhIiwidWEiLCJ2YSIsIndhIiwiY3VycmVudFRhcmdldCIsInJhIiwieGEiLCJ5YSIsInphIiwiQWEiLCJfZGlzcGF0Y2hMaXN0ZW5lcnMiLCJfZGlzcGF0Y2hJbnN0YW5jZXMiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImlzUGVyc2lzdGVudCIsInJlbGVhc2UiLCJCYSIsIkNhIiwiaW5qZWN0RXZlbnRQbHVnaW5PcmRlciIsImluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSIsIkRhIiwic3RhdGVOb2RlIiwiZGlzYWJsZWQiLCJFYSIsIkZhIiwiR2EiLCJIYSIsIklhIiwiSmEiLCJLYSIsIkxhIiwiTWEiLCJOYSIsIk9hIiwiUGEiLCJRYSIsIlJhIiwiU2EiLCJUYSIsIlVhIiwiV2EiLCJYYSIsInRhZyIsIl9kZWJ1Z093bmVyIiwiX2RlYnVnU291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwicmV0dXJuIiwiWWEiLCJkb2N1bWVudCIsIlphIiwiJGEiLCJhYiIsImJiIiwiY2IiLCJkYiIsImViIiwiZmIiLCJnYiIsImhiIiwiaWIiLCJqYiIsImtiIiwiTWFwIiwibGIiLCJtYiIsIm5iIiwib2IiLCJhY2NlcHRzQm9vbGVhbnMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwibXVzdFVzZVByb3BlcnR5IiwicHJvcGVydHlOYW1lIiwic2FuaXRpemVVUkwiLCJ0b0xvd2VyQ2FzZSIsInNiIiwidGIiLCJ1YiIsInZiIiwicWIiLCJpc05hTiIsInJiIiwicGIiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGVOUyIsIndiIiwibm9kZU5hbWUiLCJ5YiIsIl92YWx1ZVRyYWNrZXIiLCJzZXQiLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwieGIiLCJ6YiIsImNoZWNrZWQiLCJBYiIsImRlZmF1bHRDaGVja2VkIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwiQmIiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwiQ2IiLCJFYiIsIkZiIiwiR2IiLCJvd25lckRvY3VtZW50IiwiYWN0aXZlRWxlbWVudCIsIkliIiwiSGIiLCJKYiIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwiS2IiLCJMYiIsIk1iIiwiTmIiLCJ0ZXh0Q29udGVudCIsInhsaW5rSHJlZiIsIk9iIiwiaHRtbCIsIm1hdGhtbCIsInN2ZyIsIlBiIiwiUWIiLCJSYiIsIlNiIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsInZhbHVlT2YiLCJmaXJzdENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJhcHBlbmRDaGlsZCIsIlRiIiwibGFzdENoaWxkIiwibm9kZVR5cGUiLCJub2RlVmFsdWUiLCJVYiIsIlZiIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiV2IiLCJYYiIsIlliIiwiYW5pbWF0aW9uIiwidHJhbnNpdGlvbiIsIlpiIiwiJGIiLCJhYyIsImJjIiwiZGMiLCJlYyIsImFsdGVybmF0ZSIsImVmZmVjdFRhZyIsImZjIiwibWVtb2l6ZWRTdGF0ZSIsImRlaHlkcmF0ZWQiLCJnYyIsImljIiwiY2hpbGQiLCJzaWJsaW5nIiwiaGMiLCJqYyIsImtjIiwibGMiLCJtYyIsIm5jIiwib2MiLCJwYyIsInFjIiwicmMiLCJzYyIsInRjIiwidWMiLCJ2YyIsInpjIiwiYmxvY2tlZE9uIiwidG9wTGV2ZWxUeXBlIiwiZXZlbnRTeXN0ZW1GbGFncyIsIm5hdGl2ZUV2ZW50IiwiQWMiLCJkZWxldGUiLCJwb2ludGVySWQiLCJCYyIsIkNjIiwiRWMiLCJGYyIsInVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSIsInByaW9yaXR5IiwiaHlkcmF0ZSIsImNvbnRhaW5lckluZm8iLCJHYyIsIkhjIiwiSWMiLCJKYyIsInNoaWZ0IiwiS2MiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwidW5zdGFibGVfTm9ybWFsUHJpb3JpdHkiLCJMYyIsIk1jIiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50IiwicGFyZW50Tm9kZSIsIk5jIiwiT2MiLCJkaXNwYXRjaENvbmZpZyIsIlBjIiwiX3RhcmdldEluc3QiLCJRYyIsIlJjIiwiU2MiLCJUYyIsIlVjIiwiSW50ZXJmYWNlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwiV2MiLCJldmVudFBvb2wiLCJYYyIsImRlc3RydWN0b3IiLCJWYyIsImdldFBvb2xlZCIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsIkRhdGUiLCJub3ciLCJpc1RydXN0ZWQiLCJleHRlbmQiLCJZYyIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJaYyIsImNsaXBib2FyZERhdGEiLCIkYyIsInZpZXciLCJkZXRhaWwiLCJhZCIsInJlbGF0ZWRUYXJnZXQiLCJiZCIsImtleUNvZGUiLCJjaGFyQ29kZSIsImNkIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsImVkIiwiOCIsIjkiLCIxMiIsIjEzIiwiMTYiLCIxNyIsIjE4IiwiMTkiLCIyMCIsIjI3IiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsIjQwIiwiNDUiLCI0NiIsIjExMiIsIjExMyIsIjExNCIsIjExNSIsIjExNiIsIjExNyIsIjExOCIsIjExOSIsIjEyMCIsIjEyMSIsIjEyMiIsIjEyMyIsIjE0NCIsIjE0NSIsIjIyNCIsImZkIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsImdkIiwiZ2V0TW9kaWZpZXJTdGF0ZSIsImhkIiwibG9jYXRpb24iLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwibG9jYWxlIiwid2hpY2giLCJqZCIsImtkIiwibGQiLCJtZCIsIm5kIiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZ2VYIiwicGFnZVkiLCJidXR0b24iLCJidXR0b25zIiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJtb3ZlbWVudFgiLCJtb3ZlbWVudFkiLCJvZCIsInByZXNzdXJlIiwidGFuZ2VudGlhbFByZXNzdXJlIiwidGlsdFgiLCJ0aWx0WSIsInR3aXN0IiwicG9pbnRlclR5cGUiLCJpc1ByaW1hcnkiLCJwZCIsImRhdGFUcmFuc2ZlciIsInFkIiwidG91Y2hlcyIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsInJkIiwic2QiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsInRkIiwidWQiLCJ2ZCIsInhkIiwieWQiLCJ6ZCIsIkFkIiwiQmQiLCJDZCIsIkRkIiwiYnViYmxlZCIsImNhcHR1cmVkIiwiZXZlbnRQcmlvcml0eSIsIkVkIiwiZ2V0RXZlbnRQcmlvcml0eSIsIkZkIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJHZCIsIkhkIiwiSWQiLCJKZCIsIktkIiwidGFyZ2V0SW5zdCIsImFuY2VzdG9ycyIsIkxkIiwiTWQiLCJOZCIsIk9kIiwiUGQiLCJhZGRFdmVudExpc3RlbmVyIiwiUWQiLCJEYyIsIlJkIiwiU2QiLCJXZWFrTWFwIiwieGMiLCJTZXQiLCJ5YyIsImhhcyIsImFkZCIsIlRkIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkQXJlYSIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwibGluZUNsYW1wIiwibGluZUhlaWdodCIsIm9wYWNpdHkiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsIlVkIiwiVmQiLCJ0cmltIiwiV2QiLCJzZXRQcm9wZXJ0eSIsImNoYXJBdCIsInN1YnN0cmluZyIsIlhkIiwibWVudWl0ZW0iLCJhcmVhIiwiYmFzZSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImtleWdlbiIsImxpbmsiLCJtZXRhIiwicGFyYW0iLCJ0cmFjayIsIndiciIsIllkIiwiWmQiLCJpcyIsIiRkIiwiYWUiLCJiZSIsImJvZHkiLCJjZSIsImRlIiwibmV4dFNpYmxpbmciLCJmZSIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudFdpbmRvdyIsImhyZWYiLCJnZSIsImNvbnRlbnRFZGl0YWJsZSIsImhlIiwiaWUiLCJqZSIsImtlIiwibGUiLCJtZSIsIm5lIiwiYXV0b0ZvY3VzIiwib2UiLCJwZSIsInNldFRpbWVvdXQiLCJxZSIsImNsZWFyVGltZW91dCIsInNlIiwicHJldmlvdXNTaWJsaW5nIiwidGUiLCJ1ZSIsInZlIiwid2UiLCJ4ZSIsInllIiwiemUiLCJBZSIsIkJlIiwiQ2UiLCJEZSIsIkVlIiwiRmUiLCJHZSIsIkhlIiwiZG9jdW1lbnRNb2RlIiwiSWUiLCJKZSIsIktlIiwiTGUiLCJiZWZvcmVJbnB1dCIsImNvbXBvc2l0aW9uRW5kIiwiY29tcG9zaXRpb25TdGFydCIsImNvbXBvc2l0aW9uVXBkYXRlIiwiTWUiLCJOZSIsIk9lIiwiUGUiLCJTZSIsIlFlIiwiY2hhciIsIlJlIiwiVGUiLCJjb2xvciIsImRhdGUiLCJkYXRldGltZSIsImVtYWlsIiwibW9udGgiLCJwYXNzd29yZCIsInJhbmdlIiwic2VhcmNoIiwidGVsIiwidGV4dCIsInRpbWUiLCJ1cmwiLCJ3ZWVrIiwiVWUiLCJWZSIsImNoYW5nZSIsIldlIiwiWGUiLCJZZSIsIlplIiwiJGUiLCJhZiIsImJmIiwiY2YiLCJkZXRhY2hFdmVudCIsImRmIiwiZWYiLCJhdHRhY2hFdmVudCIsImZmIiwiZ2YiLCJoZiIsImxmIiwiamYiLCJfaXNJbnB1dEV2ZW50U3VwcG9ydGVkIiwia2YiLCJtb3VzZUVudGVyIiwibW91c2VMZWF2ZSIsInBvaW50ZXJFbnRlciIsInBvaW50ZXJMZWF2ZSIsIm1mIiwiZGVmYXVsdFZpZXciLCJwYXJlbnRXaW5kb3ciLCJvZiIsInBmIiwicWYiLCJyZiIsInNmIiwidGYiLCJ1ZiIsInZmIiwid2YiLCJ4ZiIsInN0YXJ0Iiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJhbmNob3JOb2RlIiwiZ2V0U2VsZWN0aW9uIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJ5ZiIsIm9uU2VsZWN0IiwiU2ltcGxlRXZlbnRQbHVnaW4iLCJFbnRlckxlYXZlRXZlbnRQbHVnaW4iLCJDaGFuZ2VFdmVudFBsdWdpbiIsIlNlbGVjdEV2ZW50UGx1Z2luIiwiQmVmb3JlSW5wdXRFdmVudFBsdWdpbiIsIkFmIiwiQmYiLCJDZiIsIkRmIiwiRWYiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJGZiIsIkdmIiwiSGYiLCJJZiIsImdldENoaWxkQ29udGV4dCIsIkpmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJLZiIsIkxmIiwiTWYiLCJOZiIsInVuc3RhYmxlX2NhbmNlbENhbGxiYWNrIiwiT2YiLCJ1bnN0YWJsZV9zaG91bGRZaWVsZCIsIlBmIiwidW5zdGFibGVfcmVxdWVzdFBhaW50IiwiUWYiLCJ1bnN0YWJsZV9ub3ciLCJSZiIsInVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsIiwiU2YiLCJ1bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSIsIlRmIiwiVWYiLCJWZiIsInVuc3RhYmxlX0xvd1ByaW9yaXR5IiwiV2YiLCJ1bnN0YWJsZV9JZGxlUHJpb3JpdHkiLCJYZiIsIllmIiwiWmYiLCIkZiIsImFnIiwiYmciLCJjZyIsImRnIiwiZWciLCJmZyIsImdnIiwiaGciLCJpZyIsImpnIiwia2ciLCJsZyIsIm1nIiwibmciLCJvZyIsInBnIiwicWciLCJyZyIsInNnIiwidGciLCJ1ZyIsImNoaWxkRXhwaXJhdGlvblRpbWUiLCJ2ZyIsImZpcnN0Q29udGV4dCIsImV4cGlyYXRpb25UaW1lIiwid2ciLCJ4ZyIsIm9ic2VydmVkQml0cyIsInJlc3BvbmRlcnMiLCJ5ZyIsInpnIiwiYmFzZVN0YXRlIiwiZmlyc3RVcGRhdGUiLCJsYXN0VXBkYXRlIiwiZmlyc3RDYXB0dXJlZFVwZGF0ZSIsImxhc3RDYXB0dXJlZFVwZGF0ZSIsImZpcnN0RWZmZWN0IiwibGFzdEVmZmVjdCIsImZpcnN0Q2FwdHVyZWRFZmZlY3QiLCJsYXN0Q2FwdHVyZWRFZmZlY3QiLCJBZyIsIkJnIiwic3VzcGVuc2VDb25maWciLCJwYXlsb2FkIiwiY2FsbGJhY2siLCJuZXh0RWZmZWN0IiwiQ2ciLCJEZyIsInVwZGF0ZVF1ZXVlIiwiRWciLCJGZyIsIkdnIiwiSGciLCJJZyIsIkpnIiwiS2ciLCJMZyIsIk1nIiwiTmciLCJPZyIsIlNnIiwiX3JlYWN0SW50ZXJuYWxGaWJlciIsIlBnIiwiUWciLCJSZyIsIlRnIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiVWciLCJWZyIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIldnIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJYZyIsIllnIiwiX3N0cmluZ1JlZiIsIlpnIiwiJGciLCJhaCIsImJoIiwiZWxlbWVudFR5cGUiLCJjaCIsImltcGxlbWVudGF0aW9uIiwiZGgiLCJlaCIsInRhIiwiZmgiLCJnaCIsImhoIiwiaWgiLCJqaCIsImtoIiwibGgiLCJtaCIsImRvY3VtZW50RWxlbWVudCIsInRhZ05hbWUiLCJuaCIsIm9oIiwicGgiLCJxaCIsIm1lbW9pemVkUHJvcHMiLCJyZXZlYWxPcmRlciIsInJoIiwicmVzcG9uZGVyIiwic2giLCJ0aCIsInVoIiwidmgiLCJ3aCIsInhoIiwieWgiLCJ6aCIsIkFoIiwiQmgiLCJDaCIsIkdoIiwiSGgiLCJJaCIsIkpoIiwiS2giLCJMaCIsIk1oIiwiTmgiLCJxdWV1ZSIsImJhc2VVcGRhdGUiLCJPaCIsIlBoIiwiUWgiLCJsYXN0UmVuZGVyZWRSZWR1Y2VyIiwiZGlzcGF0Y2giLCJhY3Rpb24iLCJsYXN0IiwibGFzdFJlbmRlcmVkU3RhdGUiLCJlYWdlclJlZHVjZXIiLCJlYWdlclN0YXRlIiwiUmgiLCJTaCIsIlRoIiwiVWgiLCJkZXN0cm95IiwiZGVwcyIsIlZoIiwiV2giLCJYaCIsIlloIiwiWmgiLCIkaCIsImFpIiwiYmkiLCJyZWFkQ29udGV4dCIsInVzZVJlc3BvbmRlciIsInVzZURlZmVycmVkVmFsdWUiLCJ1c2VUcmFuc2l0aW9uIiwidW5zdGFibGVfbmV4dCIsImNpIiwiZGkiLCJlaSIsImZpIiwiZ2kiLCJoaSIsInBlbmRpbmdQcm9wcyIsImlpIiwiamkiLCJraSIsImxpIiwibWkiLCJuaSIsIm9pIiwicGkiLCJxaSIsInJpIiwic2kiLCJ0aSIsInVpIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwidmkiLCJ3aSIsInBlbmRpbmdDb250ZXh0IiwiSGkiLCJJaSIsIkppIiwiS2kiLCJ4aSIsInJldHJ5VGltZSIsInlpIiwiZmFsbGJhY2siLCJ1bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjayIsInppIiwiQWkiLCJpc0JhY2t3YXJkcyIsInJlbmRlcmluZyIsInRhaWwiLCJ0YWlsRXhwaXJhdGlvbiIsInRhaWxNb2RlIiwiQmkiLCJDaSIsIkxpIiwiTWkiLCJOaSIsInN0YWNrIiwib25DbGljayIsIm9uY2xpY2siLCJPaSIsIldlYWtTZXQiLCJQaSIsIlNpIiwiUmkiLCJUaSIsIlVpIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJWaSIsIldpIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJRaSIsIlhpIiwiWWkiLCJaaSIsIiRpIiwiaW5zZXJ0QmVmb3JlIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsImFqIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsImJqIiwiY2oiLCJkaiIsInRoZW4iLCJlaiIsImZqIiwiZWxlbWVudCIsImdqIiwiaGoiLCJpaiIsImNvbXBvbmVudERpZENhdGNoIiwiamoiLCJjb21wb25lbnRTdGFjayIsImdrIiwia2oiLCJjZWlsIiwibGoiLCJtaiIsIm5qIiwib2oiLCJwaiIsInFqIiwicmoiLCJzaiIsInRqIiwidWoiLCJ2aiIsIndqIiwieGoiLCJ5aiIsInpqIiwiQWoiLCJCaiIsIkNqIiwiRGoiLCJFaiIsIkZqIiwiR2oiLCJIaiIsIklqIiwiSmoiLCJ0aW1lb3V0TXMiLCJLaiIsIkxqIiwiTWoiLCJOaiIsIk9qIiwibGFzdEV4cGlyZWRUaW1lIiwiUGoiLCJmaXJzdFBlbmRpbmdUaW1lIiwibGFzdFBpbmdlZFRpbWUiLCJuZXh0S25vd25QZW5kaW5nTGV2ZWwiLCJjYWxsYmFja0V4cGlyYXRpb25UaW1lIiwiY2FsbGJhY2tQcmlvcml0eSIsImNhbGxiYWNrTm9kZSIsIlFqIiwidGltZW91dCIsIlJqIiwiU2oiLCJUaiIsIlVqIiwiVmoiLCJXaiIsImZpbmlzaGVkV29yayIsImZpbmlzaGVkRXhwaXJhdGlvblRpbWUiLCJsYXN0U3VzcGVuZGVkVGltZSIsIlhqIiwidGltZW91dEhhbmRsZSIsIllqIiwiYnVzeU1pbkR1cmF0aW9uTXMiLCJidXN5RGVsYXlNcyIsIlpqIiwiYmsiLCJjayIsInBpbmdDYWNoZSIsImRrIiwiZWsiLCJmayIsInNpemUiLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdGVUZXh0Tm9kZSIsImlrIiwiZmlyc3RTdXNwZW5kZWRUaW1lIiwicmFuZ2VDb3VudCIsIkRiIiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsImprIiwiZWUiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwibWluIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwic2Nyb2xsTGVmdCIsInNjcm9sbFRvcCIsIkRoIiwiY2MiLCJkZCIsImhrIiwiRWgiLCJGaCIsInhrIiwiRGkiLCJFaSIsIkZpIiwid2QiLCJHaSIsImtrIiwibGsiLCJtayIsImhpZGRlbiIsIlZhIiwibmsiLCJ1bnN0YWJsZV9vYnNlcnZlZEJpdHMiLCJwayIsInBlbmRpbmdDaGlsZHJlbiIsInFrIiwicmsiLCJzayIsInRrIiwidWsiLCJ3ayIsIndjIiwiX2ludGVybmFsUm9vdCIsInlrIiwiQWsiLCJoYXNBdHRyaWJ1dGUiLCJ6ayIsIkJrIiwidmsiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9ybSIsInVubW91bnQiLCJhayIsIkNrIiwiY3JlYXRlUG9ydGFsIiwiZmluZERPTU5vZGUiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJ1bnN0YWJsZV9jcmVhdGVQb3J0YWwiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsImZsdXNoU3luYyIsIkV2ZW50cyIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiYnVuZGxlVHlwZSIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsIm9uQ29tbWl0RmliZXJSb290Iiwib25Db21taXRGaWJlclVubW91bnQiLCJvayIsIm92ZXJyaWRlSG9va1N0YXRlIiwib3ZlcnJpZGVQcm9wcyIsInNldFN1c3BlbnNlSGFuZGxlciIsInNjaGVkdWxlVXBkYXRlIiwiY3VycmVudERpc3BhdGNoZXJSZWYiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsImZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaCIsInNjaGVkdWxlUmVmcmVzaCIsInNjaGVkdWxlUm9vdCIsInNldFJlZnJlc2hIYW5kbGVyIiwiZ2V0Q3VycmVudEZpYmVyIiwiRGsiLCJFayIsIk1lc3NhZ2VDaGFubmVsIiwidW5zdGFibGVfZm9yY2VGcmFtZVJhdGUiLCJwZXJmb3JtYW5jZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiZmxvb3IiLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwicG9zdE1lc3NhZ2UiLCJzb3J0SW5kZXgiLCJzdGFydFRpbWUiLCJwcmlvcml0eUxldmVsIiwiZGVsYXkiLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJ1bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbiIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwidW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGUiLCJ1bnN0YWJsZV9Qcm9maWxpbmciLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsImVtcHR5RnVuY3Rpb24iLCJlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0IiwicmVzZXRXYXJuaW5nQ2FjaGUiLCJzaGltIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiZ2V0U2hpbSIsImlzUmVxdWlyZWQiLCJSZWFjdFByb3BUeXBlcyIsImFycmF5Iiwic3ltYm9sIiwiYXJyYXlPZiIsImluc3RhbmNlT2YiLCJvYmplY3RPZiIsIm9uZU9mIiwic2hhcGUiLCJleGFjdCIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiRnVuY3Rpb24iLCJhcnIiLCJ0eXBlT2YiLCJBc3luY01vZGUiLCJDb25jdXJyZW50TW9kZSIsIkNvbnRleHRDb25zdW1lciIsIkNvbnRleHRQcm92aWRlciIsIkVsZW1lbnQiLCJMYXp5IiwiTWVtbyIsIlBvcnRhbCIsImlzVmFsaWRFbGVtZW50VHlwZSIsImlzQXN5bmNNb2RlIiwiaXNDb25jdXJyZW50TW9kZSIsImlzQ29udGV4dENvbnN1bWVyIiwiaXNDb250ZXh0UHJvdmlkZXIiLCJpc0VsZW1lbnQiLCJpc0ZvcndhcmRSZWYiLCJpc0ZyYWdtZW50IiwiaXNMYXp5IiwiaXNQb3J0YWwiLCJpc1Byb2ZpbGVyIiwiaXNTdHJpY3RNb2RlIiwiaXNTdXNwZW5zZSIsIl9pbmhlcml0c0xvb3NlIiwiaXNBYnNvbHV0ZSIsInBhdGhuYW1lIiwic3BsaWNlT25lIiwibGlzdCIsImhhc1RyYWlsaW5nU2xhc2giLCJ0b1BhcnRzIiwiZnJvbVBhcnRzIiwiaXNUb0FicyIsImlzRnJvbUFicyIsIm11c3RFbmRBYnMiLCJ1cCIsInBhcnQiLCJ1bnNoaWZ0IiwidmFsdWVFcXVhbCIsImV2ZXJ5IiwiaXRlbSIsImFWYWx1ZSIsImJWYWx1ZSIsImlzUHJvZHVjdGlvbiIsImNvbmRpdGlvbiIsIm1lc3NhZ2UiLCJhZGRMZWFkaW5nU2xhc2giLCJzdHJpcExlYWRpbmdTbGFzaCIsInN0cmlwQmFzZW5hbWUiLCJoYXNCYXNlbmFtZSIsInN0cmlwVHJhaWxpbmdTbGFzaCIsImNyZWF0ZVBhdGgiLCJoYXNoIiwiY3JlYXRlTG9jYXRpb24iLCJjdXJyZW50TG9jYXRpb24iLCJoYXNoSW5kZXgiLCJzZWFyY2hJbmRleCIsInBhcnNlUGF0aCIsImRlY29kZVVSSSIsIlVSSUVycm9yIiwiY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIiLCJwcm9tcHQiLCJsaXN0ZW5lcnMiLCJzZXRQcm9tcHQiLCJuZXh0UHJvbXB0IiwiY29uZmlybVRyYW5zaXRpb25UbyIsImdldFVzZXJDb25maXJtYXRpb24iLCJhcHBlbmRMaXN0ZW5lciIsImZuIiwiaXNBY3RpdmUiLCJsaXN0ZW5lciIsImZpbHRlciIsIm5vdGlmeUxpc3RlbmVycyIsIl9sZW4iLCJhcmdzIiwiX2tleSIsImNhblVzZURPTSIsImdldENvbmZpcm1hdGlvbiIsImNvbmZpcm0iLCJQb3BTdGF0ZUV2ZW50IiwiSGFzaENoYW5nZUV2ZW50IiwiZ2V0SGlzdG9yeVN0YXRlIiwiaGlzdG9yeSIsImNyZWF0ZUJyb3dzZXJIaXN0b3J5IiwiZ2xvYmFsSGlzdG9yeSIsImNhblVzZUhpc3RvcnkiLCJuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciIsIl9wcm9wcyIsIl9wcm9wcyRmb3JjZVJlZnJlc2giLCJmb3JjZVJlZnJlc2giLCJfcHJvcHMkZ2V0VXNlckNvbmZpcm0iLCJfcHJvcHMka2V5TGVuZ3RoIiwia2V5TGVuZ3RoIiwiYmFzZW5hbWUiLCJnZXRET01Mb2NhdGlvbiIsImhpc3RvcnlTdGF0ZSIsIl9yZWYiLCJfd2luZG93JGxvY2F0aW9uIiwiY3JlYXRlS2V5IiwidHJhbnNpdGlvbk1hbmFnZXIiLCJuZXh0U3RhdGUiLCJoYW5kbGVQb3BTdGF0ZSIsImV2ZW50IiwiaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCIsImhhbmRsZVBvcCIsImhhbmRsZUhhc2hDaGFuZ2UiLCJmb3JjZU5leHRQb3AiLCJmcm9tTG9jYXRpb24iLCJ0b0xvY2F0aW9uIiwidG9JbmRleCIsImFsbEtleXMiLCJmcm9tSW5kZXgiLCJkZWx0YSIsImdvIiwicmV2ZXJ0UG9wIiwiaW5pdGlhbExvY2F0aW9uIiwiY3JlYXRlSHJlZiIsImxpc3RlbmVyQ291bnQiLCJjaGVja0RPTUxpc3RlbmVycyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJpc0Jsb2NrZWQiLCJwdXNoU3RhdGUiLCJwcmV2SW5kZXgiLCJuZXh0S2V5cyIsInJlcGxhY2VTdGF0ZSIsImdvQmFjayIsImdvRm9yd2FyZCIsImJsb2NrIiwidW5ibG9jayIsImxpc3RlbiIsInVubGlzdGVuIiwiSGFzaENoYW5nZUV2ZW50JDEiLCJIYXNoUGF0aENvZGVycyIsImhhc2hiYW5nIiwiZW5jb2RlUGF0aCIsImRlY29kZVBhdGgiLCJub3NsYXNoIiwic2xhc2giLCJzdHJpcEhhc2giLCJnZXRIYXNoUGF0aCIsInJlcGxhY2VIYXNoUGF0aCIsImNyZWF0ZUhhc2hIaXN0b3J5IiwiX3Byb3BzJGhhc2hUeXBlIiwiaGFzaFR5cGUiLCJfSGFzaFBhdGhDb2RlcnMkaGFzaFQiLCJpZ25vcmVQYXRoIiwiZW5jb2RlZFBhdGgiLCJwcmV2TG9jYXRpb24iLCJhbGxQYXRocyIsImxhc3RJbmRleE9mIiwiYmFzZVRhZyIsInF1ZXJ5U2VsZWN0b3IiLCJnZXRBdHRyaWJ1dGUiLCJwdXNoSGFzaFBhdGgiLCJuZXh0UGF0aHMiLCJjbGFtcCIsImxvd2VyQm91bmQiLCJ1cHBlckJvdW5kIiwiTUFYX1NJR05FRF8zMV9CSVRfSU5UIiwiY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfUHJvdmlkZXIkY2hpbGRDb250ZXgiLCJfQ29uc3VtZXIkY29udGV4dFR5cGUiLCJjb250ZXh0UHJvcCIsImhhbmRsZXJzIiwiZW1pdHRlciIsIm9uIiwiaGFuZGxlciIsIm9mZiIsIm5ld1ZhbHVlIiwiY2hhbmdlZEJpdHMiLCJfcHJvdG8iLCJvbGRWYWx1ZSIsIl9Db21wb25lbnQyIiwiX3RoaXMyIiwib25VcGRhdGUiLCJfcHJvdG8yIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJleGNsdWRlZCIsInNvdXJjZUtleXMiLCJfUmVhY3QkQ29tcG9uZW50IiwiUm91dGVyIiwiX2lzTW91bnRlZCIsIl9wZW5kaW5nTG9jYXRpb24iLCJzdGF0aWNDb250ZXh0IiwiY29tcHV0ZVJvb3RNYXRjaCIsInBhcmFtcyIsImlzRXhhY3QiLCJMaWZlY3ljbGUiLCJvbk1vdW50Iiwib25Vbm1vdW50IiwiY2FjaGVMaW1pdCIsImNhY2hlQ291bnQiLCJnZW5lcmF0ZVBhdGgiLCJnZW5lcmF0b3IiLCJjb21waWxlUGF0aCIsIlJlZGlyZWN0IiwiY29tcHV0ZWRNYXRjaCIsIl9yZWYkcHVzaCIsIm1ldGhvZCIsImNhY2hlJDEiLCJjYWNoZUxpbWl0JDEiLCJjYWNoZUNvdW50JDEiLCJtYXRjaFBhdGgiLCJfb3B0aW9ucyIsIl9vcHRpb25zJGV4YWN0IiwiX29wdGlvbnMkc3RyaWN0IiwiX29wdGlvbnMkc2Vuc2l0aXZlIiwibWF0Y2hlZCIsIl9jb21waWxlUGF0aCIsImNhY2hlS2V5IiwicGF0aENhY2hlIiwicmVnZXhwIiwiY29tcGlsZVBhdGgkMSIsInZhbHVlcyIsIlJvdXRlIiwiY29udGV4dCQxIiwiX3RoaXMkcHJvcHMiLCJjcmVhdGVVUkwiLCJzdGF0aWNIYW5kbGVyIiwibWV0aG9kTmFtZSIsIm5vb3AiLCJTd2l0Y2giLCJCcm93c2VyUm91dGVyIiwicmVzb2x2ZVRvTG9jYXRpb24iLCJmb3J3YXJkUmVmU2hpbSIsIkxpbmtBbmNob3IiLCJmb3J3YXJkZWRSZWYiLCJpbm5lclJlZiIsIm5hdmlnYXRlIiwiX29uQ2xpY2siLCJyZXN0IiwiZXgiLCJpc01vZGlmaWVkRXZlbnQiLCJMaW5rIiwiX3JlZjIiLCJfcmVmMiRjb21wb25lbnQiLCJmb3J3YXJkUmVmU2hpbSQxIiwiZm9yd2FyZFJlZiQxIiwiX3JlZiRhcmlhQ3VycmVudCIsImFyaWFDdXJyZW50IiwiX3JlZiRhY3RpdmVDbGFzc05hbWUiLCJhY3RpdmVDbGFzc05hbWUiLCJhY3RpdmVTdHlsZSIsImNsYXNzTmFtZVByb3AiLCJpc0FjdGl2ZVByb3AiLCJsb2NhdGlvblByb3AiLCJzdHlsZVByb3AiLCJlc2NhcGVkUGF0aCIsImNsYXNzbmFtZXMiLCJqb2luQ2xhc3NuYW1lcyIsIlVybHMiLCJBUElfQVVUSF9WQUxJREFURSIsIkFQSV9BVVRIX0xPR0lOIiwiQVBJX0FVVEhfVVNFUk5BTUVfQVZBSUxBQkxFIiwiQVBJX0FVVEhfUkVHSVNURVIiLCJBUElfSElTVE9SWSIsIkFQSV9ISVNUT1JZX0RFVEFJTFMiLCJBUElfSElTVE9SWV9WSVNVQUwiLCJBUElfTkVXX1NFU1NJT04iLCJBUElfTkVXX1NFUVVFTkNFIiwiQVBJX0VORF9TRVFVRU5DRSIsIkFQSV9SVU5fQU5BTFlTSVNfRk9SX1NFUSIsIkV4dGVybmFsIiwiSlMiLCJKUVVFUlkiLCJEQVRBVEFCTEVTX0NPUkUiLCJEQVRBVEFCTEVTX1JPV0dST1VQIiwiQ1NTIiwiREFUQVRBQkxFU19BTFQiLCJSb3V0ZXMiLCJERUZBVUxUIiwiSU5ERVgiLCJMT0dJTiIsIkxPR09VVCIsIlJFR0lTVEVSIiwiTkVXX1NFUVVFTkNFIiwiTVlfQUNDVCIsIkhJU1RPUlkiLCJISVNUT1JZX0RFVEFJTFMiLCJISVNUT1JZX0RFVEFJTFNfV0lUSElEIiwiSElTVE9SWV9WSVNVQUwiLCJMb2NhbFN0b3JhZ2UiLCJSdW50aW1lIiwiSVNfREVCVUciLCJERUZBVUxUX05FV19TRVFVRU5DRV9JTlBVVF9GSUVMRF9IRUlHSFQiLCJVc2VyTXNncyIsIkFVVEhfRkFJTFVSRSIsIk5FV19TRVFVRU5DRV9JTlNUUlVDVElPTlMiLCJSZWdpc3RyYXRpb24iLCJQQVNTV09SRF9NQVRDSCIsIlVTRVJOQU1FX0lOX1VTRSIsIk1VU1RfQkVfTk9OX0VNUFRZIiwiSGlnaGxpZ2h0VHlwZSIsIjAiLCIxIiwiMiIsIjMiLCI0IiwiSHR0cEVycm9ySGFuZGxlciIsInJlc3BvbnNlIiwic3RhdHVzVGV4dCIsIlJlYWxUaW1lQW5hbHlzaXNTZXR0aW5ncyIsIkxFTkdUSF9CVUZGRVIiLCJUSUNLX0lOVEVSVkFMX0lOX01TIiwiVU5DSEFOR0VEX1RFWFRfVElDS19USFJFU0hPTEQiLCJBdXRoIiwibG9nZ2VkSW4iLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwibG9nIiwicmVtb3ZlSXRlbSIsInRva2Vuc3RyaW5nIiwic2V0SXRlbSIsInRoYXQiLCJQcm9taXNlIiwicmVzb2x2ZSIsImdldEN1cnJlbnRUb2tlbiIsImlzVmFsaWRUb2tlbiIsInJldCIsImNsZWFyVG9rZW4iLCJ1c2VyIiwiZmV0Y2giLCJoZWFkZXJzIiwiQWNjZXB0IiwicmVzcCIsImpzb24iLCJJc1ZhbGlkIiwic2V0VG9rZW4iLCJkZWNvZGUiLCJleHAiLCJKV1RWYWx1ZSIsInJlamVjdCIsImxvZ2luTmFtZSIsInJlcSIsInVzZXJuYW1lIiwiSXNJblVzZSIsIkhlYWRlck5hdkJhciIsImN1cnJlbnRSb3V0ZSIsInJvdXRlcyIsImFjdGl2ZSIsIklzQXV0aGVkIiwiYXBwTG9nb3V0IiwiY2xpY2tIYW5kbGVyIiwic2hvd1N1Yk1lbnUiLCJjc3MiLCJSZWFjdCIsIndpdGhSb3V0ZXIiLCJ3cmFwcGVkQ29tcG9uZW50UmVmIiwicmVtYWluaW5nUHJvcHMiLCJXcmFwcGVkQ29tcG9uZW50IiwiSGVhZGVyIiwibG9jIiwiYXBwTG9naW4iLCJCYXNlQ29tcG9uZW50Iiwic3JjIiwiYXN5bmMiLCJvbmxvYWQiLCJyZWwiLCJoZWFkIiwiQ29udGVudENvbnRhaW5lciIsIkluZGV4IiwibmF2VG8iLCJMb2FkaW5nIiwic2hvd0xvYWRpbmciLCJMb2dpbiIsImxvZ2luZGF0YSIsImVycm9yTXNnIiwiQXV0aFNlcnZpY2UiLCJsb2dpbiIsInJlZGlyZWN0VG9PbkxvZ2luIiwic2hvd0l0IiwiZ2V0UGF0aFRvUmVkaXJlY3RBZnRlckxvZ2luIiwib25TdWJtaXQiLCJoYW5kbGVTdWJtaXQiLCJodG1sRm9yIiwiaGFuZGxlQ2hhbmdlIiwiUmVnaXN0ZXIiLCJlcnJvcnMiLCJ2YWxpZGF0ZSIsInJlZ2lzdGVyIiwiZmllbGRpZCIsIm1zZyIsInBhc3N3b3JkX3ZlcmlmeSIsImlzVXNlcm5hbWVJblVzZSIsImVycm9yTWVzc2FnZXMiLCJlcnJvckZpZWxkcyIsIlNlY3VyZUNvbXBvbmVudCIsImF1dGgiLCJpc0F1dGhlbnRpY2F0ZWQiLCJhdXRoRmFpbGVkIiwiTXlBY2NvdW50IiwiYXV0aGVudGljYXRpb25Db21wbGV0ZSIsImF1dGhlZCIsIkhpc3RvcnkiLCJpc0xvYWRpbmciLCJsb2FkRGVwZW5kZW5jaWVzIiwibG9hZENzcyIsImxvYWRTY3JpcHQiLCJnZXRVc2VySGlzdG9yeSIsIiQiLCJEYXRhVGFibGUiLCJzY3JvbGxZIiwicm93IiwiY2xpY2siLCJhdHRyIiwiaW5pdEdyaWQiLCJEZWx0YUluZGljYXRvciIsIlZhbHVlIiwiVmFsMSIsIlZhbHVlVG9EaXNwbGF5IiwiVmFsVG9EaXNwbGF5IiwiRGVsdGEiLCJyb3VuZCIsIlZhbDIiLCJhcnJvdyIsImFsdCIsIlNwZWVkQW5hbHlzaXMiLCJTcGVlZFRoaXNTZXEiLCJBbmFseXNpc1NwZWVkIiwiU3BlZWRBbGxUaW1lIiwiQW5hbHlzaXNTcGVlZEFsbFRpbWUiLCJOdW1FbnRpdGllc1JlcHJlc2VudGVkIiwiVG90YWxUaW1lSW5NaWxsaVNlYyIsIlRvdGFsVGltZURpc3BsYXlGcmllbmRseSIsIkNoYXJzUGVyU2VjIiwiV29yZFBlck1pbiIsIkFjY3VyYWN5QW5hbHlzaXMiLCJBY2N1cmFjeVRoaXNTZXEiLCJBbmFseXNpc0FjY3VyYWN5IiwiQWNjdXJhY3lBbGxUaW1lIiwiQW5hbHlzaXNBY2N1cmFjeUFsbFRpbWUiLCJBY2N1cmFjeSIsIk51bUNoYXJzIiwiTnVtV29yZHMiLCJOdW1Db3JyZWN0Q2hhcnMiLCJOdW1JbmNvcnJlY3RDaGFycyIsIk51bUV4dHJhQ2hhcnMiLCJOdW1TaG9ydENoYXJzIiwiUmVhbFRpbWVBbmFseXNpcyIsIkludGVydmFsSWQiLCJzZXRJbnRlcnZhbCIsInRpY2siLCJjbGVhckludGVydmFsIiwiTGFzdFRleHRFdmFsdWF0ZWQiLCJUZXh0RW50ZXJlZCIsIlRpY2tzV2l0aFNhbWVUZXh0IiwiVGlja2V0c1dpdGhTYW1lVGV4dCIsImhhc0NoYW5nZWRTaWduaWZpY2FudGx5IiwiTGFzdFRleHRVc2VkIiwicnVuQW5hbHl6ZSIsIklzUnVubmluZyIsInN0b3AiLCJLZXlTZXF1ZW5jZUVycm9yRGlzcGxheSIsImdldEVycm9yQW5hbHlzaXNGb3JFeGlzdGluZ1NlcXVlbmNlIiwiU2VxdWVuY2VJZCIsInNlcXVlbmNlSWQiLCJpc0Vycm9yIiwicGVla0luUmVhbFRpbWUiLCJ0ZXh0T3JBbmFseXNpc1RvU2hvdyIsImhpZ2hsaWdodCIsIlRleHQiLCJUZXh0U2hvd24iLCJyZWFuYWx5emUiLCJIaXN0b3J5RGV0YWlscyIsImdldEhpc3RvcnlEZXRhaWxzIiwicmVhZE9ubHkiLCJTb3VyY2VUeXBlIiwiU291cmNlS2V5Iiwic291cmNlU3ltYm9sS2V5cyIsIl90b0NvbnN1bWFibGVBcnJheSIsImFycjIiLCJpdGVyIiwiX29iamVjdFNwcmVhZCIsIm93bktleXMiLCJzeW0iLCJfdHlwZW9mMiIsImFyZUlucHV0c0VxdWFsIiwibmV3SW5wdXRzIiwibGFzdElucHV0cyIsInJlc3VsdEZuIiwiaXNFcXVhbCIsImxhc3RUaGlzIiwibGFzdFJlc3VsdCIsImxhc3RBcmdzIiwiY2FsbGVkT25jZSIsIm5ld0FyZ3MiLCJfaSIsIlN0eWxlU2hlZXQiLCJpc1NwZWVkeSIsInNwZWVkeSIsInRhZ3MiLCJjdHIiLCJub25jZSIsImNvbnRhaW5lciIsImJlZm9yZSIsImluc2VydCIsInJ1bGUiLCJfdGFnIiwiY3JlYXRlU3R5bGVFbGVtZW50Iiwic2hlZXQiLCJzdHlsZVNoZWV0cyIsIm93bmVyTm9kZSIsInNoZWV0Rm9yVGFnIiwiaXNJbXBvcnRSdWxlIiwiaW5zZXJ0UnVsZSIsImNzc1J1bGVzIiwiZmx1c2giLCJ1c2UiLCJ0b1NoZWV0IiwiU2hlZXQiLCJydWxlU2hlZXQiLCJjb250ZW50Iiwic2VsZWN0b3JzIiwicGFyZW50cyIsImxpbmUiLCJjb2x1bW4iLCJkZXB0aCIsImF0Iiwic3R5bGlzT3B0aW9ucyIsInN0eWxpcyIsImluc2VydGVkIiwiX2luc2VydCIsIm5vZGVzIiwic3R5bGlzUGx1Z2lucyIsInNlbGVjdG9yIiwic2VyaWFsaXplZCIsInNob3VsZENhY2hlIiwiY2FjaGUiLCJyZWdpc3RlcmVkIiwiZ2V0UmVnaXN0ZXJlZFN0eWxlcyIsInJlZ2lzdGVyZWRTdHlsZXMiLCJjbGFzc05hbWVzIiwicmF3Q2xhc3NOYW1lIiwiaW5zZXJ0U3R5bGVzIiwiaXNTdHJpbmdUYWciLCJtc0dyaWRSb3ciLCJtc0dyaWRSb3dTcGFuIiwibXNHcmlkQ29sdW1uIiwibXNHcmlkQ29sdW1uU3BhbiIsIldlYmtpdExpbmVDbGFtcCIsImh5cGhlbmF0ZVJlZ2V4IiwiYW5pbWF0aW9uUmVnZXgiLCJpc0N1c3RvbVByb3BlcnR5IiwiaXNQcm9jZXNzYWJsZVZhbHVlIiwicHJvY2Vzc1N0eWxlTmFtZSIsImFyZyIsInN0eWxlTmFtZSIsInAxIiwicDIiLCJjdXJzb3IiLCJoYW5kbGVJbnRlcnBvbGF0aW9uIiwibWVyZ2VkUHJvcHMiLCJpbnRlcnBvbGF0aW9uIiwiY291bGRCZVNlbGVjdG9ySW50ZXJwb2xhdGlvbiIsIl9fZW1vdGlvbl9zdHlsZXMiLCJhbmltIiwiaW50ZXJwb2xhdGVkIiwiY3JlYXRlU3RyaW5nRnJvbU9iamVjdCIsInByZXZpb3VzQ3Vyc29yIiwiY2FjaGVkIiwibGFiZWxQYXR0ZXJuIiwic3RyaW5nTW9kZSIsInN0cmluZ3MiLCJyYXciLCJsYXN0SW5kZXgiLCJpZGVudGlmaWVyTmFtZSIsIkVtb3Rpb25DYWNoZUNvbnRleHQiLCJIVE1MRWxlbWVudCIsIlRoZW1lQ29udGV4dCIsIkNhY2hlUHJvdmlkZXIiLCJ0eXBlUHJvcE5hbWUiLCJ0aGVtZSIsImNzc1Byb3AiLCJuZXdQcm9wcyIsIkVtb3Rpb24iLCJhcmdzTGVuZ3RoIiwiY3JlYXRlRWxlbWVudEFyZ0FycmF5IiwibGVuIiwiY2xzIiwidG9BZGQiLCJtZXJnZSIsIkNsYXNzTmFtZXMiLCJjeCIsIl9sZW4yIiwiX2tleTIiLCJlbGUiLCJhcHBseVByZWZpeFRvTmFtZSIsIkJvb2xlYW4iLCJpc0RvY3VtZW50RWxlbWVudCIsImdldFNjcm9sbFRvcCIsInBhZ2VZT2Zmc2V0Iiwic2Nyb2xsVG8iLCJhbmltYXRlZFNjcm9sbFRvIiwiZHVyYXRpb24iLCJpbmNyZW1lbnQiLCJjdXJyZW50VGltZSIsImFuaW1hdGVTY3JvbGwiLCJpc1RvdWNoQ2FwYWJsZSIsImNyZWF0ZUV2ZW50IiwiZ2V0TWVudVBsYWNlbWVudCIsIm1heEhlaWdodCIsIm1lbnVFbCIsIm1pbkhlaWdodCIsInBsYWNlbWVudCIsInNob3VsZFNjcm9sbCIsImlzRml4ZWRQb3NpdGlvbiIsInNwYWNpbmciLCJzY3JvbGxQYXJlbnQiLCJleGNsdWRlU3RhdGljUGFyZW50Iiwib3ZlcmZsb3dSeCIsImRvY0VsIiwicGFyZW50IiwicGFyZW50RWxlbWVudCIsIm92ZXJmbG93WSIsIm92ZXJmbG93WCIsImdldFNjcm9sbFBhcmVudCIsImRlZmF1bHRTdGF0ZSIsIm9mZnNldFBhcmVudCIsInNjcm9sbEhlaWdodCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIl9tZW51RWwkZ2V0Qm91bmRpbmdDbCIsIm1lbnVCb3R0b20iLCJib3R0b20iLCJtZW51SGVpZ2h0IiwibWVudVRvcCIsImNvbnRhaW5lclRvcCIsInZpZXdIZWlnaHQiLCJpbm5lckhlaWdodCIsIm1hcmdpbkJvdHRvbSIsIm1hcmdpblRvcCIsInZpZXdTcGFjZUFib3ZlIiwidmlld1NwYWNlQmVsb3ciLCJzY3JvbGxTcGFjZUFib3ZlIiwic2Nyb2xsU3BhY2VCZWxvdyIsInNjcm9sbERvd24iLCJzY3JvbGxVcCIsIl9jb25zdHJhaW5lZEhlaWdodCIsInNwYWNlQWJvdmUiLCJjb250cm9sSGVpZ2h0IiwiX2NvbnN0cmFpbmVkSGVpZ2h0MiIsImNvZXJjZVBsYWNlbWVudCIsIk1lbnVQbGFjZXIiLCJfZ2V0UHJvdG90eXBlT2YyIiwibWF4TWVudUhlaWdodCIsIm1pbk1lbnVIZWlnaHQiLCJtZW51UGxhY2VtZW50IiwibWVudVBvc2l0aW9uIiwibWVudVNob3VsZFNjcm9sbEludG9WaWV3IiwiZ2V0UG9ydGFsUGxhY2VtZW50IiwiZ2V0UGxhY2VtZW50IiwicGxhY2VyUHJvcHMiLCJnZXRVcGRhdGVkUHJvcHMiLCJub3RpY2VDU1MiLCJfcmVmNSIsIl9yZWY1JHRoZW1lIiwiYmFzZVVuaXQiLCJjb2xvcnMiLCJuZXV0cmFsNDAiLCJwYWRkaW5nIiwidGV4dEFsaWduIiwibm9PcHRpb25zTWVzc2FnZUNTUyIsImxvYWRpbmdNZXNzYWdlQ1NTIiwiZ2V0U3R5bGVzIiwiaW5uZXJQcm9wcyIsIk1lbnVQb3J0YWwiLCJfZ2V0UHJvdG90eXBlT2YzIiwiX3JlZjciLCJfdGhpcyRwcm9wczIiLCJhcHBlbmRUbyIsImNvbnRyb2xFbGVtZW50IiwiaXNGaXhlZCIsInJlY3QiLCJyaWdodCIsImdldEJvdW5kaW5nQ2xpZW50T2JqIiwic2Nyb2xsRGlzdGFuY2UiLCJtZW51V3JhcHBlciIsImtleUxpc3QiLCJoYXNQcm9wIiwiZXhwb3J0ZWRFcXVhbCIsImVxdWFsIiwiYXJyQSIsImFyckIiLCJkYXRlQSIsImRhdGVCIiwiZ2V0VGltZSIsInJlZ2V4cEEiLCJyZWdleHBCIiwid2FybiIsIlZhbHVlQ29udGFpbmVyIiwiaXNNdWx0aSIsImhhc1ZhbHVlIiwiX3RlbXBsYXRlT2JqZWN0IiwiZnJlZXplIiwidmlld0JveCIsImZvY3VzYWJsZSIsImJhc2VDU1MiLCJfcmVmMyIsImlzRm9jdXNlZCIsIl9yZWYzJHRoZW1lIiwibGFiZWwiLCJuZXV0cmFsNjAiLCJuZXV0cmFsMjAiLCJuZXV0cmFsODAiLCJkcm9wZG93bkluZGljYXRvckNTUyIsImNsZWFySW5kaWNhdG9yQ1NTIiwibG9hZGluZ0RvdEFuaW1hdGlvbnMiLCJpbnNlcnRhYmxlIiwiX3JlZjYiLCJiYWNrZ3JvdW5kQ29sb3IiLCJib3JkZXJSYWRpdXMiLCJtYXJnaW5MZWZ0IiwidmVydGljYWxBbGlnbiIsImlzUnRsIiwiaW5kaWNhdG9yIiwiaXNIaWRkZW4iLCJiYWNrZ3JvdW5kIiwiYm9yZGVyIiwib3V0bGluZSIsIl9yZWY0IiwiTXVsdGlWYWx1ZVJlbW92ZSIsIk11bHRpVmFsdWUiLCJjb21wb25lbnRzIiwicmVtb3ZlUHJvcHMiLCJzZWxlY3RQcm9wcyIsIkNvbnRhaW5lciIsIkxhYmVsIiwiUmVtb3ZlIiwiZW1vdGlvbkN4IiwiY3JvcFdpdGhFbGxpcHNpcyIsIkNsZWFySW5kaWNhdG9yIiwibWVudUlzT3BlbiIsImNvbnRyb2wiLCJEcm9wZG93bkluZGljYXRvciIsIkRvd25DaGV2cm9uIiwiQ3Jvc3NJY29uIiwiR3JvdXAiLCJIZWFkaW5nIiwiaGVhZGluZ1Byb3BzIiwiR3JvdXBIZWFkaW5nIiwiY2xlYW5Qcm9wcyIsIkluZGljYXRvcnNDb250YWluZXIiLCJpbmRpY2F0b3JzIiwiSW5kaWNhdG9yU2VwYXJhdG9yIiwiSW5wdXQiLCJMb2FkaW5nSW5kaWNhdG9yIiwibWVudSIsIk1lbnVMaXN0IiwiTG9hZGluZ01lc3NhZ2UiLCJOb09wdGlvbnNNZXNzYWdlIiwiTXVsdGlWYWx1ZUNvbnRhaW5lciIsIk11bHRpVmFsdWVMYWJlbCIsIk9wdGlvbiIsImlzU2VsZWN0ZWQiLCJvcHRpb24iLCJQbGFjZWhvbGRlciIsIlNlbGVjdENvbnRhaW5lciIsIlNpbmdsZVZhbHVlIiwiZGlhY3JpdGljcyIsImxldHRlcnMiLCJzdHJpcERpYWNyaXRpY3MiLCJ0cmltU3RyaW5nIiwiZGVmYXVsdFN0cmluZ2lmeSIsIkR1bW15SW5wdXQiLCJpbiIsIm91dCIsIm9uRXhpdGVkIiwiYXBwZWFyIiwiZW50ZXIiLCJleGl0IiwiZW1vdGlvbiIsInRyYW5zZm9ybSIsIk5vZGVSZXNvbHZlciIsIlNUWUxFX0tFWVMiLCJMT0NLX1NUWUxFUyIsInByZXZlbnRUb3VjaE1vdmUiLCJhbGxvd1RvdWNoTW92ZSIsInByZXZlbnRJbmVydGlhU2Nyb2xsIiwidG90YWxTY3JvbGwiLCJjdXJyZW50U2Nyb2xsIiwib2Zmc2V0SGVpZ2h0IiwiaXNUb3VjaERldmljZSIsIm1heFRvdWNoUG9pbnRzIiwiYWN0aXZlU2Nyb2xsTG9ja3MiLCJTY3JvbGxMb2NrIiwicGFzc2l2ZSIsImFjY291bnRGb3JTY3JvbGxiYXJzIiwidG91Y2hTY3JvbGxUYXJnZXQiLCJ0YXJnZXRTdHlsZSIsIm9yaWdpbmFsU3R5bGVzIiwiY3VycmVudFBhZGRpbmciLCJwYWRkaW5nUmlnaHQiLCJjbGllbnRXaWR0aCIsImFkanVzdGVkUGFkZGluZyIsImlubmVyV2lkdGgiLCJsaXN0ZW5lck9wdGlvbnMiLCJfdGhpczMiLCJfcmVmJDEiLCJfUHVyZUNvbXBvbmVudCIsIlNjcm9sbEJsb2NrIiwiaXNFbmFibGVkIiwiYmx1clNlbGVjdElucHV0IiwiZ2V0U2Nyb2xsVGFyZ2V0IiwiU2Nyb2xsQ2FwdG9yIiwib25Cb3R0b21BcnJpdmUiLCJvbkJvdHRvbUxlYXZlIiwib25Ub3BBcnJpdmUiLCJvblRvcExlYXZlIiwiX3RoaXMkc2Nyb2xsVGFyZ2V0Iiwic2Nyb2xsVGFyZ2V0IiwiY2xpZW50SGVpZ2h0IiwiaXNEZWx0YVBvc2l0aXZlIiwiYXZhaWxhYmxlU2Nyb2xsIiwic2hvdWxkQ2FuY2VsU2Nyb2xsIiwiaXNCb3R0b20iLCJpc1RvcCIsImNhbmNlbFNjcm9sbCIsImhhbmRsZUV2ZW50RGVsdGEiLCJ0b3VjaFN0YXJ0Iiwic3RhcnRMaXN0ZW5pbmciLCJzdG9wTGlzdGVuaW5nIiwib25XaGVlbCIsIm9uVG91Y2hTdGFydCIsIm9uVG91Y2hNb3ZlIiwiU2Nyb2xsQ2FwdG9yU3dpdGNoIiwiaW5zdHJ1Y3Rpb25zQXJpYU1lc3NhZ2UiLCJpc1NlYXJjaGFibGUiLCJ2YWx1ZUV2ZW50QXJpYU1lc3NhZ2UiLCJpc09wdGlvbkRpc2FibGVkIiwiZGVmYXVsdFN0eWxlcyIsImNsZWFySW5kaWNhdG9yIiwiZGlyZWN0aW9uIiwicG9pbnRlckV2ZW50cyIsIl9yZWYkdGhlbWUiLCJhbGlnbkl0ZW1zIiwibmV1dHJhbDUiLCJuZXV0cmFsMCIsImJvcmRlckNvbG9yIiwibmV1dHJhbDEwIiwicHJpbWFyeSIsImJvcmRlclN0eWxlIiwiYm9yZGVyV2lkdGgiLCJib3hTaGFkb3ciLCJmbGV4V3JhcCIsImp1c3RpZnlDb250ZW50IiwibmV1dHJhbDMwIiwiZHJvcGRvd25JbmRpY2F0b3IiLCJwYWRkaW5nQm90dG9tIiwicGFkZGluZ1RvcCIsImdyb3VwSGVhZGluZyIsInBhZGRpbmdMZWZ0IiwiaW5kaWNhdG9yc0NvbnRhaW5lciIsImFsaWduU2VsZiIsImluZGljYXRvclNlcGFyYXRvciIsIl9yZWY0JHRoZW1lIiwibWFyZ2luIiwibG9hZGluZ0luZGljYXRvciIsIm1hcmdpblJpZ2h0IiwibG9hZGluZ01lc3NhZ2UiLCJfcmVmMiR0aGVtZSIsImFsaWduVG9Db250cm9sIiwibWVudUd1dHRlciIsIm1lbnVMaXN0IiwiV2Via2l0T3ZlcmZsb3dTY3JvbGxpbmciLCJtZW51UG9ydGFsIiwibXVsdGlWYWx1ZSIsIm11bHRpVmFsdWVMYWJlbCIsInRleHRPdmVyZmxvdyIsIm11bHRpVmFsdWVSZW1vdmUiLCJkYW5nZXJMaWdodCIsImRhbmdlciIsIm5vT3B0aW9uc01lc3NhZ2UiLCJwcmltYXJ5MjUiLCJ1c2VyU2VsZWN0IiwiV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3IiLCJwcmltYXJ5NTAiLCJuZXV0cmFsNTAiLCJzaW5nbGVWYWx1ZSIsIm1heFdpZHRoIiwidmFsdWVDb250YWluZXIiLCJjb25maWciLCJkZWZhdWx0VGhlbWUiLCJwcmltYXJ5NzUiLCJuZXV0cmFsNzAiLCJuZXV0cmFsOTAiLCJiYWNrc3BhY2VSZW1vdmVzVmFsdWUiLCJibHVySW5wdXRPblNlbGVjdCIsImNhcHR1cmVNZW51U2Nyb2xsIiwiY2xvc2VNZW51T25TZWxlY3QiLCJjbG9zZU1lbnVPblNjcm9sbCIsImNvbnRyb2xTaG91bGRSZW5kZXJWYWx1ZSIsImVzY2FwZUNsZWFyc1ZhbHVlIiwiZmlsdGVyT3B0aW9uIiwicmF3SW5wdXQiLCJfaWdub3JlQ2FzZSRpZ25vcmVBY2MiLCJpZ25vcmVDYXNlIiwiaWdub3JlQWNjZW50cyIsIm1hdGNoRnJvbSIsImNhbmRpZGF0ZSIsImZvcm1hdEdyb3VwTGFiZWwiLCJnZXRPcHRpb25MYWJlbCIsImdldE9wdGlvblZhbHVlIiwibWVudVNob3VsZEJsb2NrU2Nyb2xsIiwiaXNNb2JpbGVEZXZpY2UiLCJvcGVuTWVudU9uRm9jdXMiLCJvcGVuTWVudU9uQ2xpY2siLCJwYWdlU2l6ZSIsInNjcmVlblJlYWRlclN0YXR1cyIsInRhYkluZGV4IiwidGFiU2VsZWN0c1ZhbHVlIiwiaW5zdGFuY2VJZCIsIlNlbGVjdCIsImFyaWFMaXZlU2VsZWN0aW9uIiwiYXJpYUxpdmVDb250ZXh0IiwiZm9jdXNlZE9wdGlvbiIsImZvY3VzZWRWYWx1ZSIsImlucHV0SXNIaWRkZW4iLCJtZW51T3B0aW9ucyIsInNlbGVjdFZhbHVlIiwiY29udHJvbFJlZiIsImZvY3VzZWRPcHRpb25SZWYiLCJtZW51TGlzdFJlZiIsImZvY3VzSW5wdXQiLCJibHVySW5wdXQiLCJhY3Rpb25NZXRhIiwib25JbnB1dENoYW5nZSIsImlucHV0SXNIaWRkZW5BZnRlclVwZGF0ZSIsIm9uTWVudUNsb3NlIiwiY2xlYXJGb2N1c1ZhbHVlT25VcGRhdGUiLCJfdGhpcyRwcm9wczMiLCJpc09wdGlvblNlbGVjdGVkIiwiYW5ub3VuY2VBcmlhTGl2ZVNlbGVjdGlvbiIsInJlbW92ZWRWYWx1ZSIsImxhc3RTZWxlY3RlZFZhbHVlIiwiY3VzdG9tIiwiaW5zdGFuY2VQcmVmaXgiLCJfdGhpcyRzdGF0ZSIsImJsb2NrT3B0aW9uSG92ZXIiLCJvcGVuTWVudSIsIm9wZW5BZnRlckZvY3VzIiwiX3RoaXMkcHJvcHM0IiwiY2xlYXJWYWx1ZSIsImlzQ29tcG9zaW5nIiwidG91Y2giLCJpbml0aWFsVG91Y2hYIiwiaW5pdGlhbFRvdWNoWSIsInVzZXJJc0RyYWdnaW5nIiwiYWJzIiwib25Db250cm9sTW91c2VEb3duIiwib25DbGVhckluZGljYXRvck1vdXNlRG93biIsIm9uRHJvcGRvd25JbmRpY2F0b3JNb3VzZURvd24iLCJpbnB1dFZhbHVlIiwib25NZW51T3BlbiIsIl90aGlzJHByb3BzNSIsIm9uRm9jdXMiLCJhbm5vdW5jZUFyaWFMaXZlQ29udGV4dCIsIm9uQmx1ciIsIl90aGlzJHByb3BzNiIsImhpZGVTZWxlY3RlZE9wdGlvbnMiLCJfdGhpcyRwcm9wczciLCJpc0NsZWFyYWJsZSIsIm9uS2V5RG93biIsIl90aGlzJHN0YXRlMiIsImZvY3VzVmFsdWUiLCJyZW1vdmVWYWx1ZSIsInBvcFZhbHVlIiwic2VsZWN0T3B0aW9uIiwiZm9jdXNPcHRpb24iLCJjYWNoZUNvbXBvbmVudHMiLCJfc2VsZWN0VmFsdWUiLCJfbWVudU9wdGlvbnMiLCJidWlsZE1lbnVPcHRpb25zIiwic3RhcnRMaXN0ZW5pbmdDb21wb3NpdGlvbiIsInN0YXJ0TGlzdGVuaW5nVG9Ub3VjaCIsIm9uU2Nyb2xsIiwiX3RoaXMkcHJvcHM4IiwiZ2V0TmV4dEZvY3VzZWRWYWx1ZSIsImdldE5leHRGb2N1c2VkT3B0aW9uIiwiZm9jdXNlZEVsIiwibWVudVJlY3QiLCJmb2N1c2VkUmVjdCIsIm92ZXJTY3JvbGwiLCJfdGhpcyRwcm9wczkiLCJzY3JvbGxUb0ZvY3VzZWRPcHRpb25PblVwZGF0ZSIsIm9mZnNldFRvcCIsInN0b3BMaXN0ZW5pbmdDb21wb3NpdGlvbiIsInN0b3BMaXN0ZW5pbmdUb1RvdWNoIiwiX3RoaXMkcHJvcHMxMCIsIl90aGlzJHN0YXRlMyIsIm9wZW5BdEluZGV4Iiwic2VsZWN0ZWRJbmRleCIsIl90aGlzJHByb3BzMTEiLCJfdGhpcyRzdGF0ZTQiLCJmb2N1c2VkSW5kZXgiLCJuZXh0Rm9jdXMiLCJfdGhpcyRzdGF0ZTUiLCJjbGFzc05hbWVQcmVmaXgiLCJnZXRUaGVtZSIsIm5leHRTZWxlY3RWYWx1ZSIsIl90aGlzJHN0YXRlNiIsImxhc3RGb2N1c2VkSW5kZXgiLCJsYXN0Rm9jdXNlZE9wdGlvbiIsIl90aGlzJHByb3BzMTIiLCJzb21lIiwiZm9ybWF0T3B0aW9uTGFiZWwiLCJvbkNvbXBvc2l0aW9uU3RhcnQiLCJvbkNvbXBvc2l0aW9uRW5kIiwib25Ub3VjaEVuZCIsIl9wcm9wcyRpbnB1dFZhbHVlIiwidG9PcHRpb24iLCJzaG91bGRIaWRlU2VsZWN0ZWRPcHRpb25zIiwib25Ib3ZlciIsIm9uT3B0aW9uSG92ZXIiLCJvcHRpb25JZCIsImdldEVsZW1lbnRJZCIsIm9uTW91c2VNb3ZlIiwib25Nb3VzZU92ZXIiLCJhY2MiLCJpdGVtSW5kZXgiLCJoYXNHcm91cHMiLCJncm91cElkIiwiX3RoaXMkc3RhdGU3IiwiX3RoaXMkcHJvcHMxMyIsImZvY3VzZWRWYWx1ZU1zZyIsInZhbHVlRm9jdXNBcmlhTWVzc2FnZSIsImZvY3VzZWRPcHRpb25Nc2ciLCJvcHRpb25Gb2N1c0FyaWFNZXNzYWdlIiwicmVzdWx0c01zZyIsInNjcmVlblJlYWRlck1lc3NhZ2UiLCJyZXN1bHRzQXJpYU1lc3NhZ2UiLCJjb3VudE9wdGlvbnMiLCJfdGhpcyRwcm9wczE0IiwiZ2V0SW5wdXRSZWYiLCJvbklucHV0Qmx1ciIsIm9uSW5wdXRGb2N1cyIsImFyaWFBdHRyaWJ1dGVzIiwiX3RoaXMkY29tbW9uUHJvcHMiLCJjb21tb25Qcm9wcyIsImF1dG9DYXBpdGFsaXplIiwiYXV0b0NvbXBsZXRlIiwiYXV0b0NvcnJlY3QiLCJoYW5kbGVJbnB1dENoYW5nZSIsInNwZWxsQ2hlY2siLCJfdGhpczQiLCJfdGhpcyRjb21wb25lbnRzIiwiX3RoaXMkcHJvcHMxNSIsIl90aGlzJHN0YXRlOCIsIm9wdCIsImlzT3B0aW9uRm9jdXNlZCIsIm9uTW91c2VEb3duIiwiX3RoaXMkcHJvcHMxNiIsIm9uQ2xlYXJJbmRpY2F0b3JUb3VjaEVuZCIsIl90aGlzJHByb3BzMTciLCJfdGhpcyRjb21wb25lbnRzMiIsIm9uRHJvcGRvd25JbmRpY2F0b3JUb3VjaEVuZCIsIl90aGlzNSIsIl90aGlzJGNvbXBvbmVudHMzIiwiX3RoaXMkc3RhdGU5IiwiX3RoaXMkcHJvcHMxOCIsIm1lbnVQb3J0YWxUYXJnZXQiLCJvbk1lbnVTY3JvbGxUb1RvcCIsIm9uTWVudVNjcm9sbFRvQm90dG9tIiwibWVudVVJIiwiZ2V0Rm9jdXNlZE9wdGlvblJlZiIsImhhc09wdGlvbnMiLCJoZWFkaW5nSWQiLCJfbWVzc2FnZSIsIm1lbnVQbGFjZW1lbnRQcm9wcyIsIm1lbnVFbGVtZW50IiwiX3JlZjYkcGxhY2VyUHJvcHMiLCJvbk1lbnVNb3VzZURvd24iLCJvbk1lbnVNb3VzZU1vdmUiLCJnZXRNZW51TGlzdFJlZiIsIl90aGlzNiIsIl90aGlzJHByb3BzMTkiLCJfdmFsdWUiLCJjb25zdHJ1Y3RBcmlhTGl2ZU1lc3NhZ2UiLCJfdGhpcyRjb21wb25lbnRzNCIsIl90aGlzJHByb3BzMjAiLCJnZXRDb21tb25Qcm9wcyIsInJlbmRlckxpdmVSZWdpb24iLCJnZXRDb250cm9sUmVmIiwib25Db250cm9sVG91Y2hFbmQiLCJyZW5kZXJQbGFjZWhvbGRlck9yVmFsdWUiLCJyZW5kZXJJbnB1dCIsInJlbmRlckNsZWFySW5kaWNhdG9yIiwicmVuZGVyTG9hZGluZ0luZGljYXRvciIsInJlbmRlckluZGljYXRvclNlcGFyYXRvciIsInJlbmRlckRyb3Bkb3duSW5kaWNhdG9yIiwicmVuZGVyTWVudSIsInJlbmRlckZvcm1GaWVsZCIsIlNlbGVjdENvbXBvbmVudCIsIl9jbGFzcyIsIl90ZW1wIiwiZGVmYXVsdElucHV0VmFsdWUiLCJkZWZhdWx0TWVudUlzT3BlbiIsIlN0YXRlTWFuYWdlciIsImNhbGxQcm9wIiwiZ2V0UHJvcCIsIkJhc2VDaGFydCIsInRpdGxlIiwicG9pbnRzIiwidHJhbnNmb3JtRGF0YVRvUG9pbnRzIiwibGFiZWxzIiwidHJhbnNmb3JtUG9pbnRzVG9MYWJlbHMiLCJjdHgiLCJnZXRFbGVtZW50QnlJZCIsIkNoYXJ0IiwiZGF0YXNldHMiLCJnZXREYXRlRnJvbSIsInRvRGF0ZVN0cmluZyIsImdldERhdGVUbyIsImdldFRvdGFsQ291bnQiLCJDaGFyc1BlclNlY29uZENoYXJ0IiwiU3BlZWRNZWFzdXJlbWVudHMiLCJDcmVhdGVEYXRlRGlzcGxheUZyaWVuZGx5IiwiY291bnRlciIsIlNwZWVkRGF0ZUZyb20iLCJTcGVlZE1lYXN1cmVtZW50Q291bnQiLCJXb3Jkc1Blck1pbnV0ZUNoYXJ0IiwiQ2hhcnRzIiwiRGVmYXVsdENoYXJ0VHlwZSIsIlZpc3VhbEhpc3RvcnlDaGFydFR5cGVzIiwiQ2hhcnREaXNwbGF5ZXIiLCJzZWxlY3Rpb24iLCJTZWxlY3RlZENoYXJ0VHlwZSIsImN1cnJlbnRDaGFydCIsImdldENoYXJ0RGlzcGxheU5hbWUiLCJpbml0Q2hhcnQiLCJpbm5lclRleHQiLCJnZXREYXRlRnJvbURpc3BsYXkiLCJnZXREYXRlVG9EaXNwbGF5IiwiZ2V0VG90YWxDb3VudERpc3BsYXkiLCJoYW5kbGVDaGFydFR5cGVDaGFuZ2UiLCJIaXN0b3J5VmlzdWFsIiwibG9hZERlcGVuZGFuY2llcyIsIkhpZGVhYmxlU2NyZWVuTWFzayIsIk1hc2tJc1Zpc2libGUiLCJTdG9wd2F0Y2giLCJzdG9wd2F0Y2hTdG9wIiwic3RvcHdhdGNoU3RhcnQiLCJpbnRlcnZhbElkIiwic3RvcHdhdGNoVGljayIsIlRpbWVyVmFsIiwiU3RvcHdhdGNoSW50ZXJ2YWxJZCIsIm1zIiwic2VjIiwiZm9ybWF0TXNUb0ZyaWVuZGx5IiwiVG9vbGJhck5ld1NlcXVlbmNlIiwiYnV0dG9uVGV4dCIsInRvb2xiYXJWaXNpYmlsaXR5Q3NzIiwib25Ub2dnbGVNYXNrIiwib25TdG9wU2VxdWVuY2UiLCJTZXNzaW9uTWFuYWdlciIsIlNlc3Npb25JZCIsIlVzZXJJZCIsInBlcnNpc3RTZXNzaW9uU2VxRGF0YSIsImN1cnJlbnRTZXNzaW9uIiwiZ2V0Q3VycmVudFNlc3Npb24iLCJnZXROZXdTZXF1ZW5jZVdpdGhTZXNzaW9uIiwic3RhcnROZXdTZXNzaW9uIiwibmV3U2Vzc2lvbiIsInNlc3Npb24iLCJ1c2Vyc1RleHQiLCJlbGFwc2VkIiwiU3RhcnRUaW1lIiwiRWxhcHNlZEluTWlsbGlzZWNvbmRzIiwic2Vzc2lvbkRhdGEiLCJOZXdTZXF1ZW5jZSIsIlVzZVRoZWF0cmVNb2RlIiwiaW5wdXRTZXF1ZW5jZUZpZWxkIiwiaGFuZGxlS2V5RW50ZXIiLCJzdG9wU2VxdWVuY2UiLCJzdGFydFNlcXVlbmNlIiwiSXNMb2FkaW5nIiwiZ2V0TmV3U2VxdWVuY2UiLCJDdXJyZW50U2VxdWVuY2UiLCJzZXRGaWxsZWRUZXh0YXJlYUhlaWdodCIsInNlcXVlbmNlU3RhcnRpbmciLCJzZXRJbnB1dFRleHRGb2N1cyIsInN0b3BDdXJyZW50U2VxdWVuY2UiLCJvblRleHRFbnRlcmVkS2V5RG93biIsInNpemVyZWYiLCJ0b2dnbGVUaGVhdHJlTW9kZSIsIm9uVGV4dEVudGVyZWRDaGFuZ2VkIiwicmVzaXplIiwiUm91dGluZyIsIkZvb3RlciIsInRvVVRDU3RyaW5nIiwiQXBwIiwiY2xlYXJTZXNzaW9uIiwibG9nb3V0IiwiUmVhY3RET00iXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxLQVF2RHJCLEVBQW9Cc0IsRUFBSSxTQUFTRCxFQUFPRSxHQUV2QyxHQURVLEVBQVBBLElBQVVGLEVBQVFyQixFQUFvQnFCLElBQy9CLEVBQVBFLEVBQVUsT0FBT0YsRUFDcEIsR0FBVyxFQUFQ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QkFBS2hSLEdBQUcsVUFDSix5QkFBS0EsR0FBRyxtQkFDSiwwQkFBTTZDLFVBQVUsY0FBaEIsU0FBbUMsSUFBSW1mLE1BQU9zK0QsZUFDOUMsMEJBQU16OUUsVUFBVSxlQUFoQixLQUNXLHVCQUFHbXVCLEtBQUssNEJBQVIsc0JBRVgseUJBQUtudUIsVUFBVSxnQkFHbkIseUJBQUtBLFVBQVUsWUFDZix5QkFBS0EsVUFBVSxzQixnQ0FqQkMrb0QsSUFBTTNvRCxXLDgyQkNTcENzOUUsRyxZQUNGLFdBQVl4a0YsR0FBTyxNLElBQUEsTyw0RkFBQSxTLEVBQ2YsSyxFQUFBLGdCQUFNQSxHQUFOLEcsa0RBRGUscUJBUVIsWUFDVSxJQUFJb2lGLElBQ1ZxQyxlQUVYLEVBQUtqZ0YsU0FBUyxDQUFFZ3JELFVBQVUsT0FaWCxzQkFlUCxZQUNTLElBQUk0eUIsSUFDVnFDLGdCQUVBLElBQUlwM0IsSUFDVnEzQixTQUVMLEVBQUtsZ0YsU0FBUyxDQUFFZ3JELFVBQVUsT0FuQjFCLEVBQUszckQsTUFBUSxDQUNUMnJELFVBQVUsR0FKQyxFLGlTQTBCZixPQUNJLGtCQUFDLEdBQUQsS0FDSSxrQkFBQyxHQUFELENBQ0lBLFNBQVV4c0QsS0FBS2EsTUFBTTJyRCxTQUNyQlksU0FBVXB0RCxLQUFLb3RELFNBQ2ZYLFVBQVd6c0QsS0FBS3lzRCxZQUdwQixrQkFBQyxHQUFELENBQ0lELFNBQVV4c0QsS0FBS2EsTUFBTTJyRCxTQUNyQlksU0FBVXB0RCxLQUFLb3RELFNBQ2ZYLFVBQVd6c0QsS0FBS3lzRCxZQUdwQixrQkFBQyxHQUFELFksZ0NBekNFSSxJQUFNM29ELFdBK0N4Qnk5RSxJQUFTdDJFLE9BQ0wsa0JBQUMsR0FBRCxNQUNBK0wsU0FBU2lsRSxlQUFlIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAyMSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoUmVhY3RJcy5pc0VsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsImZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW5oZXJpdHNMb29zZTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHR2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgc2l6ZXJTdHlsZSA9IHtcblx0cG9zaXRpb246ICdhYnNvbHV0ZScsXG5cdHRvcDogMCxcblx0bGVmdDogMCxcblx0dmlzaWJpbGl0eTogJ2hpZGRlbicsXG5cdGhlaWdodDogMCxcblx0b3ZlcmZsb3c6ICdzY3JvbGwnLFxuXHR3aGl0ZVNwYWNlOiAncHJlJ1xufTtcblxudmFyIElOUFVUX1BST1BTX0JMQUNLTElTVCA9IFsnZXh0cmFXaWR0aCcsICdpbmplY3RTdHlsZXMnLCAnaW5wdXRDbGFzc05hbWUnLCAnaW5wdXRSZWYnLCAnaW5wdXRTdHlsZScsICdtaW5XaWR0aCcsICdvbkF1dG9zaXplJywgJ3BsYWNlaG9sZGVySXNNaW5XaWR0aCddO1xuXG52YXIgY2xlYW5JbnB1dFByb3BzID0gZnVuY3Rpb24gY2xlYW5JbnB1dFByb3BzKGlucHV0UHJvcHMpIHtcblx0SU5QVVRfUFJPUFNfQkxBQ0tMSVNULmZvckVhY2goZnVuY3Rpb24gKGZpZWxkKSB7XG5cdFx0cmV0dXJuIGRlbGV0ZSBpbnB1dFByb3BzW2ZpZWxkXTtcblx0fSk7XG5cdHJldHVybiBpbnB1dFByb3BzO1xufTtcblxudmFyIGNvcHlTdHlsZXMgPSBmdW5jdGlvbiBjb3B5U3R5bGVzKHN0eWxlcywgbm9kZSkge1xuXHRub2RlLnN0eWxlLmZvbnRTaXplID0gc3R5bGVzLmZvbnRTaXplO1xuXHRub2RlLnN0eWxlLmZvbnRGYW1pbHkgPSBzdHlsZXMuZm9udEZhbWlseTtcblx0bm9kZS5zdHlsZS5mb250V2VpZ2h0ID0gc3R5bGVzLmZvbnRXZWlnaHQ7XG5cdG5vZGUuc3R5bGUuZm9udFN0eWxlID0gc3R5bGVzLmZvbnRTdHlsZTtcblx0bm9kZS5zdHlsZS5sZXR0ZXJTcGFjaW5nID0gc3R5bGVzLmxldHRlclNwYWNpbmc7XG5cdG5vZGUuc3R5bGUudGV4dFRyYW5zZm9ybSA9IHN0eWxlcy50ZXh0VHJhbnNmb3JtO1xufTtcblxudmFyIGlzSUUgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cubmF2aWdhdG9yID8gL01TSUUgfFRyaWRlbnRcXC98RWRnZVxcLy8udGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCkgOiBmYWxzZTtcblxudmFyIGdlbmVyYXRlSWQgPSBmdW5jdGlvbiBnZW5lcmF0ZUlkKCkge1xuXHQvLyB3ZSBvbmx5IG5lZWQgYW4gYXV0by1nZW5lcmF0ZWQgSUQgZm9yIHN0eWxlc2hlZXQgaW5qZWN0aW9uLCB3aGljaCBpcyBvbmx5XG5cdC8vIHVzZWQgZm9yIElFLiBzbyBpZiB0aGUgYnJvd3NlciBpcyBub3QgSUUsIHRoaXMgc2hvdWxkIHJldHVybiB1bmRlZmluZWQuXG5cdHJldHVybiBpc0lFID8gJ18nICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDEyKSA6IHVuZGVmaW5lZDtcbn07XG5cbnZhciBBdXRvc2l6ZUlucHV0ID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcblx0X2luaGVyaXRzKEF1dG9zaXplSW5wdXQsIF9Db21wb25lbnQpO1xuXG5cdGZ1bmN0aW9uIEF1dG9zaXplSW5wdXQocHJvcHMpIHtcblx0XHRfY2xhc3NDYWxsQ2hlY2sodGhpcywgQXV0b3NpemVJbnB1dCk7XG5cblx0XHR2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQXV0b3NpemVJbnB1dC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEF1dG9zaXplSW5wdXQpKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cblx0XHRfdGhpcy5pbnB1dFJlZiA9IGZ1bmN0aW9uIChlbCkge1xuXHRcdFx0X3RoaXMuaW5wdXQgPSBlbDtcblx0XHRcdGlmICh0eXBlb2YgX3RoaXMucHJvcHMuaW5wdXRSZWYgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0X3RoaXMucHJvcHMuaW5wdXRSZWYoZWwpO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRfdGhpcy5wbGFjZUhvbGRlclNpemVyUmVmID0gZnVuY3Rpb24gKGVsKSB7XG5cdFx0XHRfdGhpcy5wbGFjZUhvbGRlclNpemVyID0gZWw7XG5cdFx0fTtcblxuXHRcdF90aGlzLnNpemVyUmVmID0gZnVuY3Rpb24gKGVsKSB7XG5cdFx0XHRfdGhpcy5zaXplciA9IGVsO1xuXHRcdH07XG5cblx0XHRfdGhpcy5zdGF0ZSA9IHtcblx0XHRcdGlucHV0V2lkdGg6IHByb3BzLm1pbldpZHRoLFxuXHRcdFx0aW5wdXRJZDogcHJvcHMuaWQgfHwgZ2VuZXJhdGVJZCgpXG5cdFx0fTtcblx0XHRyZXR1cm4gX3RoaXM7XG5cdH1cblxuXHRfY3JlYXRlQ2xhc3MoQXV0b3NpemVJbnB1dCwgW3tcblx0XHRrZXk6ICdjb21wb25lbnREaWRNb3VudCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuXHRcdFx0dGhpcy5tb3VudGVkID0gdHJ1ZTtcblx0XHRcdHRoaXMuY29weUlucHV0U3R5bGVzKCk7XG5cdFx0XHR0aGlzLnVwZGF0ZUlucHV0V2lkdGgoKTtcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIFVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuXHRcdFx0dmFyIGlkID0gbmV4dFByb3BzLmlkO1xuXG5cdFx0XHRpZiAoaWQgIT09IHRoaXMucHJvcHMuaWQpIHtcblx0XHRcdFx0dGhpcy5zZXRTdGF0ZSh7IGlucHV0SWQ6IGlkIHx8IGdlbmVyYXRlSWQoKSB9KTtcblx0XHRcdH1cblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdjb21wb25lbnREaWRVcGRhdGUnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzLCBwcmV2U3RhdGUpIHtcblx0XHRcdGlmIChwcmV2U3RhdGUuaW5wdXRXaWR0aCAhPT0gdGhpcy5zdGF0ZS5pbnB1dFdpZHRoKSB7XG5cdFx0XHRcdGlmICh0eXBlb2YgdGhpcy5wcm9wcy5vbkF1dG9zaXplID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdFx0dGhpcy5wcm9wcy5vbkF1dG9zaXplKHRoaXMuc3RhdGUuaW5wdXRXaWR0aCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHRoaXMudXBkYXRlSW5wdXRXaWR0aCgpO1xuXHRcdH1cblx0fSwge1xuXHRcdGtleTogJ2NvbXBvbmVudFdpbGxVbm1vdW50Jyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG5cdFx0XHR0aGlzLm1vdW50ZWQgPSBmYWxzZTtcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdjb3B5SW5wdXRTdHlsZXMnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBjb3B5SW5wdXRTdHlsZXMoKSB7XG5cdFx0XHRpZiAoIXRoaXMubW91bnRlZCB8fCAhd2luZG93LmdldENvbXB1dGVkU3R5bGUpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGlucHV0U3R5bGVzID0gdGhpcy5pbnB1dCAmJiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLmlucHV0KTtcblx0XHRcdGlmICghaW5wdXRTdHlsZXMpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0Y29weVN0eWxlcyhpbnB1dFN0eWxlcywgdGhpcy5zaXplcik7XG5cdFx0XHRpZiAodGhpcy5wbGFjZUhvbGRlclNpemVyKSB7XG5cdFx0XHRcdGNvcHlTdHlsZXMoaW5wdXRTdHlsZXMsIHRoaXMucGxhY2VIb2xkZXJTaXplcik7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAndXBkYXRlSW5wdXRXaWR0aCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZUlucHV0V2lkdGgoKSB7XG5cdFx0XHRpZiAoIXRoaXMubW91bnRlZCB8fCAhdGhpcy5zaXplciB8fCB0eXBlb2YgdGhpcy5zaXplci5zY3JvbGxXaWR0aCA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0dmFyIG5ld0lucHV0V2lkdGggPSB2b2lkIDA7XG5cdFx0XHRpZiAodGhpcy5wcm9wcy5wbGFjZWhvbGRlciAmJiAoIXRoaXMucHJvcHMudmFsdWUgfHwgdGhpcy5wcm9wcy52YWx1ZSAmJiB0aGlzLnByb3BzLnBsYWNlaG9sZGVySXNNaW5XaWR0aCkpIHtcblx0XHRcdFx0bmV3SW5wdXRXaWR0aCA9IE1hdGgubWF4KHRoaXMuc2l6ZXIuc2Nyb2xsV2lkdGgsIHRoaXMucGxhY2VIb2xkZXJTaXplci5zY3JvbGxXaWR0aCkgKyAyO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bmV3SW5wdXRXaWR0aCA9IHRoaXMuc2l6ZXIuc2Nyb2xsV2lkdGggKyAyO1xuXHRcdFx0fVxuXHRcdFx0Ly8gYWRkIGV4dHJhV2lkdGggdG8gdGhlIGRldGVjdGVkIHdpZHRoLiBmb3IgbnVtYmVyIHR5cGVzLCB0aGlzIGRlZmF1bHRzIHRvIDE2IHRvIGFsbG93IGZvciB0aGUgc3RlcHBlciBVSVxuXHRcdFx0dmFyIGV4dHJhV2lkdGggPSB0aGlzLnByb3BzLnR5cGUgPT09ICdudW1iZXInICYmIHRoaXMucHJvcHMuZXh0cmFXaWR0aCA9PT0gdW5kZWZpbmVkID8gMTYgOiBwYXJzZUludCh0aGlzLnByb3BzLmV4dHJhV2lkdGgpIHx8IDA7XG5cdFx0XHRuZXdJbnB1dFdpZHRoICs9IGV4dHJhV2lkdGg7XG5cdFx0XHRpZiAobmV3SW5wdXRXaWR0aCA8IHRoaXMucHJvcHMubWluV2lkdGgpIHtcblx0XHRcdFx0bmV3SW5wdXRXaWR0aCA9IHRoaXMucHJvcHMubWluV2lkdGg7XG5cdFx0XHR9XG5cdFx0XHRpZiAobmV3SW5wdXRXaWR0aCAhPT0gdGhpcy5zdGF0ZS5pbnB1dFdpZHRoKSB7XG5cdFx0XHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0XHRcdGlucHV0V2lkdGg6IG5ld0lucHV0V2lkdGhcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAnZ2V0SW5wdXQnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBnZXRJbnB1dCgpIHtcblx0XHRcdHJldHVybiB0aGlzLmlucHV0O1xuXHRcdH1cblx0fSwge1xuXHRcdGtleTogJ2ZvY3VzJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gZm9jdXMoKSB7XG5cdFx0XHR0aGlzLmlucHV0LmZvY3VzKCk7XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAnYmx1cicsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGJsdXIoKSB7XG5cdFx0XHR0aGlzLmlucHV0LmJsdXIoKTtcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdzZWxlY3QnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBzZWxlY3QoKSB7XG5cdFx0XHR0aGlzLmlucHV0LnNlbGVjdCgpO1xuXHRcdH1cblx0fSwge1xuXHRcdGtleTogJ3JlbmRlclN0eWxlcycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIHJlbmRlclN0eWxlcygpIHtcblx0XHRcdC8vIHRoaXMgbWV0aG9kIGluamVjdHMgc3R5bGVzIHRvIGhpZGUgSUUncyBjbGVhciBpbmRpY2F0b3IsIHdoaWNoIG1lc3Nlc1xuXHRcdFx0Ly8gd2l0aCBpbnB1dCBzaXplIGRldGVjdGlvbi4gdGhlIHN0eWxlc2hlZXQgaXMgb25seSBpbmplY3RlZCB3aGVuIHRoZVxuXHRcdFx0Ly8gYnJvd3NlciBpcyBJRSwgYW5kIGNhbiBhbHNvIGJlIGRpc2FibGVkIGJ5IHRoZSBgaW5qZWN0U3R5bGVzYCBwcm9wLlxuXHRcdFx0dmFyIGluamVjdFN0eWxlcyA9IHRoaXMucHJvcHMuaW5qZWN0U3R5bGVzO1xuXG5cdFx0XHRyZXR1cm4gaXNJRSAmJiBpbmplY3RTdHlsZXMgPyBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnc3R5bGUnLCB7IGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiB7XG5cdFx0XHRcdFx0X19odG1sOiAnaW5wdXQjJyArIHRoaXMuc3RhdGUuaW5wdXRJZCArICc6Oi1tcy1jbGVhciB7ZGlzcGxheTogbm9uZTt9J1xuXHRcdFx0XHR9IH0pIDogbnVsbDtcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdyZW5kZXInLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG5cdFx0XHR2YXIgc2l6ZXJWYWx1ZSA9IFt0aGlzLnByb3BzLmRlZmF1bHRWYWx1ZSwgdGhpcy5wcm9wcy52YWx1ZSwgJyddLnJlZHVjZShmdW5jdGlvbiAocHJldmlvdXNWYWx1ZSwgY3VycmVudFZhbHVlKSB7XG5cdFx0XHRcdGlmIChwcmV2aW91c1ZhbHVlICE9PSBudWxsICYmIHByZXZpb3VzVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdHJldHVybiBwcmV2aW91c1ZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBjdXJyZW50VmFsdWU7XG5cdFx0XHR9KTtcblxuXHRcdFx0dmFyIHdyYXBwZXJTdHlsZSA9IF9leHRlbmRzKHt9LCB0aGlzLnByb3BzLnN0eWxlKTtcblx0XHRcdGlmICghd3JhcHBlclN0eWxlLmRpc3BsYXkpIHdyYXBwZXJTdHlsZS5kaXNwbGF5ID0gJ2lubGluZS1ibG9jayc7XG5cblx0XHRcdHZhciBpbnB1dFN0eWxlID0gX2V4dGVuZHMoe1xuXHRcdFx0XHRib3hTaXppbmc6ICdjb250ZW50LWJveCcsXG5cdFx0XHRcdHdpZHRoOiB0aGlzLnN0YXRlLmlucHV0V2lkdGggKyAncHgnXG5cdFx0XHR9LCB0aGlzLnByb3BzLmlucHV0U3R5bGUpO1xuXG5cdFx0XHR2YXIgaW5wdXRQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyh0aGlzLnByb3BzLCBbXSk7XG5cblx0XHRcdGNsZWFuSW5wdXRQcm9wcyhpbnB1dFByb3BzKTtcblx0XHRcdGlucHV0UHJvcHMuY2xhc3NOYW1lID0gdGhpcy5wcm9wcy5pbnB1dENsYXNzTmFtZTtcblx0XHRcdGlucHV0UHJvcHMuaWQgPSB0aGlzLnN0YXRlLmlucHV0SWQ7XG5cdFx0XHRpbnB1dFByb3BzLnN0eWxlID0gaW5wdXRTdHlsZTtcblxuXHRcdFx0cmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHRcdFx0XHQnZGl2Jyxcblx0XHRcdFx0eyBjbGFzc05hbWU6IHRoaXMucHJvcHMuY2xhc3NOYW1lLCBzdHlsZTogd3JhcHBlclN0eWxlIH0sXG5cdFx0XHRcdHRoaXMucmVuZGVyU3R5bGVzKCksXG5cdFx0XHRcdF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdpbnB1dCcsIF9leHRlbmRzKHt9LCBpbnB1dFByb3BzLCB7IHJlZjogdGhpcy5pbnB1dFJlZiB9KSksXG5cdFx0XHRcdF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHRcdFx0XHRcdCdkaXYnLFxuXHRcdFx0XHRcdHsgcmVmOiB0aGlzLnNpemVyUmVmLCBzdHlsZTogc2l6ZXJTdHlsZSB9LFxuXHRcdFx0XHRcdHNpemVyVmFsdWVcblx0XHRcdFx0KSxcblx0XHRcdFx0dGhpcy5wcm9wcy5wbGFjZWhvbGRlciA/IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHRcdFx0XHRcdCdkaXYnLFxuXHRcdFx0XHRcdHsgcmVmOiB0aGlzLnBsYWNlSG9sZGVyU2l6ZXJSZWYsIHN0eWxlOiBzaXplclN0eWxlIH0sXG5cdFx0XHRcdFx0dGhpcy5wcm9wcy5wbGFjZWhvbGRlclxuXHRcdFx0XHQpIDogbnVsbFxuXHRcdFx0KTtcblx0XHR9XG5cdH1dKTtcblxuXHRyZXR1cm4gQXV0b3NpemVJbnB1dDtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbkF1dG9zaXplSW5wdXQucHJvcFR5cGVzID0ge1xuXHRjbGFzc05hbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLCAvLyBjbGFzc05hbWUgZm9yIHRoZSBvdXRlciBlbGVtZW50XG5cdGRlZmF1bHRWYWx1ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5hbnksIC8vIGRlZmF1bHQgZmllbGQgdmFsdWVcblx0ZXh0cmFXaWR0aDogX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZlR5cGUoWy8vIGFkZGl0aW9uYWwgd2lkdGggZm9yIGlucHV0IGVsZW1lbnRcblx0X3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsIF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nXSksXG5cdGlkOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZywgLy8gaWQgdG8gdXNlIGZvciB0aGUgaW5wdXQsIGNhbiBiZSBzZXQgZm9yIGNvbnNpc3RlbnQgc25hcHNob3RzXG5cdGluamVjdFN0eWxlczogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLCAvLyBpbmplY3QgdGhlIGN1c3RvbSBzdHlsZXNoZWV0IHRvIGhpZGUgY2xlYXIgVUksIGRlZmF1bHRzIHRvIHRydWVcblx0aW5wdXRDbGFzc05hbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLCAvLyBjbGFzc05hbWUgZm9yIHRoZSBpbnB1dCBlbGVtZW50XG5cdGlucHV0UmVmOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsIC8vIHJlZiBjYWxsYmFjayBmb3IgdGhlIGlucHV0IGVsZW1lbnRcblx0aW5wdXRTdHlsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsIC8vIGNzcyBzdHlsZXMgZm9yIHRoZSBpbnB1dCBlbGVtZW50XG5cdG1pbldpZHRoOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mVHlwZShbLy8gbWluaW11bSB3aWR0aCBmb3IgaW5wdXQgZWxlbWVudFxuXHRfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlciwgX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmddKSxcblx0b25BdXRvc2l6ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLCAvLyBvbkF1dG9zaXplIGhhbmRsZXI6IGZ1bmN0aW9uKG5ld1dpZHRoKSB7fVxuXHRvbkNoYW5nZTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLCAvLyBvbkNoYW5nZSBoYW5kbGVyOiBmdW5jdGlvbihldmVudCkge31cblx0cGxhY2Vob2xkZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLCAvLyBwbGFjZWhvbGRlciB0ZXh0XG5cdHBsYWNlaG9sZGVySXNNaW5XaWR0aDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLCAvLyBkb24ndCBjb2xsYXBzZSBzaXplIHRvIGxlc3MgdGhhbiB0aGUgcGxhY2Vob2xkZXJcblx0c3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LCAvLyBjc3Mgc3R5bGVzIGZvciB0aGUgb3V0ZXIgZWxlbWVudFxuXHR2YWx1ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5hbnkgLy8gZmllbGQgdmFsdWVcbn07XG5BdXRvc2l6ZUlucHV0LmRlZmF1bHRQcm9wcyA9IHtcblx0bWluV2lkdGg6IDEsXG5cdGluamVjdFN0eWxlczogdHJ1ZVxufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gQXV0b3NpemVJbnB1dDsiLCJ2YXIgaXNhcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKVxuXG4vKipcbiAqIEV4cG9zZSBgcGF0aFRvUmVnZXhwYC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBwYXRoVG9SZWdleHBcbm1vZHVsZS5leHBvcnRzLnBhcnNlID0gcGFyc2Vcbm1vZHVsZS5leHBvcnRzLmNvbXBpbGUgPSBjb21waWxlXG5tb2R1bGUuZXhwb3J0cy50b2tlbnNUb0Z1bmN0aW9uID0gdG9rZW5zVG9GdW5jdGlvblxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9SZWdFeHAgPSB0b2tlbnNUb1JlZ0V4cFxuXG4vKipcbiAqIFRoZSBtYWluIHBhdGggbWF0Y2hpbmcgcmVnZXhwIHV0aWxpdHkuXG4gKlxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xudmFyIFBBVEhfUkVHRVhQID0gbmV3IFJlZ0V4cChbXG4gIC8vIE1hdGNoIGVzY2FwZWQgY2hhcmFjdGVycyB0aGF0IHdvdWxkIG90aGVyd2lzZSBhcHBlYXIgaW4gZnV0dXJlIG1hdGNoZXMuXG4gIC8vIFRoaXMgYWxsb3dzIHRoZSB1c2VyIHRvIGVzY2FwZSBzcGVjaWFsIGNoYXJhY3RlcnMgdGhhdCB3b24ndCB0cmFuc2Zvcm0uXG4gICcoXFxcXFxcXFwuKScsXG4gIC8vIE1hdGNoIEV4cHJlc3Mtc3R5bGUgcGFyYW1ldGVycyBhbmQgdW4tbmFtZWQgcGFyYW1ldGVycyB3aXRoIGEgcHJlZml4XG4gIC8vIGFuZCBvcHRpb25hbCBzdWZmaXhlcy4gTWF0Y2hlcyBhcHBlYXIgYXM6XG4gIC8vXG4gIC8vIFwiLzp0ZXN0KFxcXFxkKyk/XCIgPT4gW1wiL1wiLCBcInRlc3RcIiwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgXCI/XCIsIHVuZGVmaW5lZF1cbiAgLy8gXCIvcm91dGUoXFxcXGQrKVwiICA9PiBbdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkXVxuICAvLyBcIi8qXCIgICAgICAgICAgICA9PiBbXCIvXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCIqXCJdXG4gICcoW1xcXFwvLl0pPyg/Oig/OlxcXFw6KFxcXFx3KykoPzpcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKT98XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSkoWysqP10pP3woXFxcXCopKSdcbl0uam9pbignfCcpLCAnZycpXG5cbi8qKlxuICogUGFyc2UgYSBzdHJpbmcgZm9yIHRoZSByYXcgdG9rZW5zLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gb3B0aW9uc1xuICogQHJldHVybiB7IUFycmF5fVxuICovXG5mdW5jdGlvbiBwYXJzZSAoc3RyLCBvcHRpb25zKSB7XG4gIHZhciB0b2tlbnMgPSBbXVxuICB2YXIga2V5ID0gMFxuICB2YXIgaW5kZXggPSAwXG4gIHZhciBwYXRoID0gJydcbiAgdmFyIGRlZmF1bHREZWxpbWl0ZXIgPSBvcHRpb25zICYmIG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJ1xuICB2YXIgcmVzXG5cbiAgd2hpbGUgKChyZXMgPSBQQVRIX1JFR0VYUC5leGVjKHN0cikpICE9IG51bGwpIHtcbiAgICB2YXIgbSA9IHJlc1swXVxuICAgIHZhciBlc2NhcGVkID0gcmVzWzFdXG4gICAgdmFyIG9mZnNldCA9IHJlcy5pbmRleFxuICAgIHBhdGggKz0gc3RyLnNsaWNlKGluZGV4LCBvZmZzZXQpXG4gICAgaW5kZXggPSBvZmZzZXQgKyBtLmxlbmd0aFxuXG4gICAgLy8gSWdub3JlIGFscmVhZHkgZXNjYXBlZCBzZXF1ZW5jZXMuXG4gICAgaWYgKGVzY2FwZWQpIHtcbiAgICAgIHBhdGggKz0gZXNjYXBlZFsxXVxuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICB2YXIgbmV4dCA9IHN0cltpbmRleF1cbiAgICB2YXIgcHJlZml4ID0gcmVzWzJdXG4gICAgdmFyIG5hbWUgPSByZXNbM11cbiAgICB2YXIgY2FwdHVyZSA9IHJlc1s0XVxuICAgIHZhciBncm91cCA9IHJlc1s1XVxuICAgIHZhciBtb2RpZmllciA9IHJlc1s2XVxuICAgIHZhciBhc3RlcmlzayA9IHJlc1s3XVxuXG4gICAgLy8gUHVzaCB0aGUgY3VycmVudCBwYXRoIG9udG8gdGhlIHRva2Vucy5cbiAgICBpZiAocGF0aCkge1xuICAgICAgdG9rZW5zLnB1c2gocGF0aClcbiAgICAgIHBhdGggPSAnJ1xuICAgIH1cblxuICAgIHZhciBwYXJ0aWFsID0gcHJlZml4ICE9IG51bGwgJiYgbmV4dCAhPSBudWxsICYmIG5leHQgIT09IHByZWZpeFxuICAgIHZhciByZXBlYXQgPSBtb2RpZmllciA9PT0gJysnIHx8IG1vZGlmaWVyID09PSAnKidcbiAgICB2YXIgb3B0aW9uYWwgPSBtb2RpZmllciA9PT0gJz8nIHx8IG1vZGlmaWVyID09PSAnKidcbiAgICB2YXIgZGVsaW1pdGVyID0gcmVzWzJdIHx8IGRlZmF1bHREZWxpbWl0ZXJcbiAgICB2YXIgcGF0dGVybiA9IGNhcHR1cmUgfHwgZ3JvdXBcblxuICAgIHRva2Vucy5wdXNoKHtcbiAgICAgIG5hbWU6IG5hbWUgfHwga2V5KyssXG4gICAgICBwcmVmaXg6IHByZWZpeCB8fCAnJyxcbiAgICAgIGRlbGltaXRlcjogZGVsaW1pdGVyLFxuICAgICAgb3B0aW9uYWw6IG9wdGlvbmFsLFxuICAgICAgcmVwZWF0OiByZXBlYXQsXG4gICAgICBwYXJ0aWFsOiBwYXJ0aWFsLFxuICAgICAgYXN0ZXJpc2s6ICEhYXN0ZXJpc2ssXG4gICAgICBwYXR0ZXJuOiBwYXR0ZXJuID8gZXNjYXBlR3JvdXAocGF0dGVybikgOiAoYXN0ZXJpc2sgPyAnLionIDogJ1teJyArIGVzY2FwZVN0cmluZyhkZWxpbWl0ZXIpICsgJ10rPycpXG4gICAgfSlcbiAgfVxuXG4gIC8vIE1hdGNoIGFueSBjaGFyYWN0ZXJzIHN0aWxsIHJlbWFpbmluZy5cbiAgaWYgKGluZGV4IDwgc3RyLmxlbmd0aCkge1xuICAgIHBhdGggKz0gc3RyLnN1YnN0cihpbmRleClcbiAgfVxuXG4gIC8vIElmIHRoZSBwYXRoIGV4aXN0cywgcHVzaCBpdCBvbnRvIHRoZSBlbmQuXG4gIGlmIChwYXRoKSB7XG4gICAgdG9rZW5zLnB1c2gocGF0aClcbiAgfVxuXG4gIHJldHVybiB0b2tlbnNcbn1cblxuLyoqXG4gKiBDb21waWxlIGEgc3RyaW5nIHRvIGEgdGVtcGxhdGUgZnVuY3Rpb24gZm9yIHRoZSBwYXRoLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gICAgICAgICAgICAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFmdW5jdGlvbihPYmplY3Q9LCBPYmplY3Q9KX1cbiAqL1xuZnVuY3Rpb24gY29tcGlsZSAoc3RyLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb0Z1bmN0aW9uKHBhcnNlKHN0ciwgb3B0aW9ucykpXG59XG5cbi8qKlxuICogUHJldHRpZXIgZW5jb2Rpbmcgb2YgVVJJIHBhdGggc2VnbWVudHMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVVUklDb21wb25lbnRQcmV0dHkgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvW1xcLz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFbmNvZGUgdGhlIGFzdGVyaXNrIHBhcmFtZXRlci4gU2ltaWxhciB0byBgcHJldHR5YCwgYnV0IGFsbG93cyBzbGFzaGVzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlQXN0ZXJpc2sgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvWz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBtZXRob2QgZm9yIHRyYW5zZm9ybWluZyB0b2tlbnMgaW50byB0aGUgcGF0aCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9GdW5jdGlvbiAodG9rZW5zKSB7XG4gIC8vIENvbXBpbGUgYWxsIHRoZSB0b2tlbnMgaW50byByZWdleHBzLlxuICB2YXIgbWF0Y2hlcyA9IG5ldyBBcnJheSh0b2tlbnMubGVuZ3RoKVxuXG4gIC8vIENvbXBpbGUgYWxsIHRoZSBwYXR0ZXJucyBiZWZvcmUgY29tcGlsYXRpb24uXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHR5cGVvZiB0b2tlbnNbaV0gPT09ICdvYmplY3QnKSB7XG4gICAgICBtYXRjaGVzW2ldID0gbmV3IFJlZ0V4cCgnXig/OicgKyB0b2tlbnNbaV0ucGF0dGVybiArICcpJCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChvYmosIG9wdHMpIHtcbiAgICB2YXIgcGF0aCA9ICcnXG4gICAgdmFyIGRhdGEgPSBvYmogfHwge31cbiAgICB2YXIgb3B0aW9ucyA9IG9wdHMgfHwge31cbiAgICB2YXIgZW5jb2RlID0gb3B0aW9ucy5wcmV0dHkgPyBlbmNvZGVVUklDb21wb25lbnRQcmV0dHkgOiBlbmNvZGVVUklDb21wb25lbnRcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV1cblxuICAgICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcGF0aCArPSB0b2tlblxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHZhciB2YWx1ZSA9IGRhdGFbdG9rZW4ubmFtZV1cbiAgICAgIHZhciBzZWdtZW50XG5cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgIC8vIFByZXBlbmQgcGFydGlhbCBzZWdtZW50IHByZWZpeGVzLlxuICAgICAgICAgIGlmICh0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgICBwYXRoICs9IHRva2VuLnByZWZpeFxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBiZSBkZWZpbmVkJylcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoaXNhcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCByZXBlYXQsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHZhbHVlKSArICdgJylcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IGJlIGVtcHR5JylcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbHVlLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgc2VnbWVudCA9IGVuY29kZSh2YWx1ZVtqXSlcblxuICAgICAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBhbGwgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBtYXRjaCBcIicgKyB0b2tlbi5wYXR0ZXJuICsgJ1wiLCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeShzZWdtZW50KSArICdgJylcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwYXRoICs9IChqID09PSAwID8gdG9rZW4ucHJlZml4IDogdG9rZW4uZGVsaW1pdGVyKSArIHNlZ21lbnRcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHNlZ21lbnQgPSB0b2tlbi5hc3RlcmlzayA/IGVuY29kZUFzdGVyaXNrKHZhbHVlKSA6IGVuY29kZSh2YWx1ZSlcblxuICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBtYXRjaCBcIicgKyB0b2tlbi5wYXR0ZXJuICsgJ1wiLCBidXQgcmVjZWl2ZWQgXCInICsgc2VnbWVudCArICdcIicpXG4gICAgICB9XG5cbiAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4ICsgc2VnbWVudFxuICAgIH1cblxuICAgIHJldHVybiBwYXRoXG4gIH1cbn1cblxuLyoqXG4gKiBFc2NhcGUgYSByZWd1bGFyIGV4cHJlc3Npb24gc3RyaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZVN0cmluZyAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXxcXC9cXFxcXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogRXNjYXBlIHRoZSBjYXB0dXJpbmcgZ3JvdXAgYnkgZXNjYXBpbmcgc3BlY2lhbCBjaGFyYWN0ZXJzIGFuZCBtZWFuaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gZ3JvdXBcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlR3JvdXAgKGdyb3VwKSB7XG4gIHJldHVybiBncm91cC5yZXBsYWNlKC8oWz0hOiRcXC8oKV0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEF0dGFjaCB0aGUga2V5cyBhcyBhIHByb3BlcnR5IG9mIHRoZSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcmVcbiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGF0dGFjaEtleXMgKHJlLCBrZXlzKSB7XG4gIHJlLmtleXMgPSBrZXlzXG4gIHJldHVybiByZVxufVxuXG4vKipcbiAqIEdldCB0aGUgZmxhZ3MgZm9yIGEgcmVnZXhwIGZyb20gdGhlIG9wdGlvbnMuXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGZsYWdzIChvcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zLnNlbnNpdGl2ZSA/ICcnIDogJ2knXG59XG5cbi8qKlxuICogUHVsbCBvdXQga2V5cyBmcm9tIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHJlZ2V4cFRvUmVnZXhwIChwYXRoLCBrZXlzKSB7XG4gIC8vIFVzZSBhIG5lZ2F0aXZlIGxvb2thaGVhZCB0byBtYXRjaCBvbmx5IGNhcHR1cmluZyBncm91cHMuXG4gIHZhciBncm91cHMgPSBwYXRoLnNvdXJjZS5tYXRjaCgvXFwoKD8hXFw/KS9nKVxuXG4gIGlmIChncm91cHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdyb3Vwcy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5cy5wdXNoKHtcbiAgICAgICAgbmFtZTogaSxcbiAgICAgICAgcHJlZml4OiBudWxsLFxuICAgICAgICBkZWxpbWl0ZXI6IG51bGwsXG4gICAgICAgIG9wdGlvbmFsOiBmYWxzZSxcbiAgICAgICAgcmVwZWF0OiBmYWxzZSxcbiAgICAgICAgcGFydGlhbDogZmFsc2UsXG4gICAgICAgIGFzdGVyaXNrOiBmYWxzZSxcbiAgICAgICAgcGF0dGVybjogbnVsbFxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhwYXRoLCBrZXlzKVxufVxuXG4vKipcbiAqIFRyYW5zZm9ybSBhbiBhcnJheSBpbnRvIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gIHBhdGhcbiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGFycmF5VG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgdmFyIHBhcnRzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICBwYXJ0cy5wdXNoKHBhdGhUb1JlZ2V4cChwYXRoW2ldLCBrZXlzLCBvcHRpb25zKS5zb3VyY2UpXG4gIH1cblxuICB2YXIgcmVnZXhwID0gbmV3IFJlZ0V4cCgnKD86JyArIHBhcnRzLmpvaW4oJ3wnKSArICcpJywgZmxhZ3Mob3B0aW9ucykpXG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocmVnZXhwLCBrZXlzKVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIHBhdGggcmVnZXhwIGZyb20gc3RyaW5nIGlucHV0LlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHN0cmluZ1RvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb1JlZ0V4cChwYXJzZShwYXRoLCBvcHRpb25zKSwga2V5cywgb3B0aW9ucylcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBmdW5jdGlvbiBmb3IgdGFraW5nIHRva2VucyBhbmQgcmV0dXJuaW5nIGEgUmVnRXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gICAgICAgICAgdG9rZW5zXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19IGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9SZWdFeHAgKHRva2Vucywga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKVxuICAgIGtleXMgPSBbXVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICB2YXIgc3RyaWN0ID0gb3B0aW9ucy5zdHJpY3RcbiAgdmFyIGVuZCA9IG9wdGlvbnMuZW5kICE9PSBmYWxzZVxuICB2YXIgcm91dGUgPSAnJ1xuXG4gIC8vIEl0ZXJhdGUgb3ZlciB0aGUgdG9rZW5zIGFuZCBjcmVhdGUgb3VyIHJlZ2V4cCBzdHJpbmcuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgcm91dGUgKz0gZXNjYXBlU3RyaW5nKHRva2VuKVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcHJlZml4ID0gZXNjYXBlU3RyaW5nKHRva2VuLnByZWZpeClcbiAgICAgIHZhciBjYXB0dXJlID0gJyg/OicgKyB0b2tlbi5wYXR0ZXJuICsgJyknXG5cbiAgICAgIGtleXMucHVzaCh0b2tlbilcblxuICAgICAgaWYgKHRva2VuLnJlcGVhdCkge1xuICAgICAgICBjYXB0dXJlICs9ICcoPzonICsgcHJlZml4ICsgY2FwdHVyZSArICcpKidcbiAgICAgIH1cblxuICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgIGlmICghdG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgIGNhcHR1cmUgPSAnKD86JyArIHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSk/J1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyk/J1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpJ1xuICAgICAgfVxuXG4gICAgICByb3V0ZSArPSBjYXB0dXJlXG4gICAgfVxuICB9XG5cbiAgdmFyIGRlbGltaXRlciA9IGVzY2FwZVN0cmluZyhvcHRpb25zLmRlbGltaXRlciB8fCAnLycpXG4gIHZhciBlbmRzV2l0aERlbGltaXRlciA9IHJvdXRlLnNsaWNlKC1kZWxpbWl0ZXIubGVuZ3RoKSA9PT0gZGVsaW1pdGVyXG5cbiAgLy8gSW4gbm9uLXN0cmljdCBtb2RlIHdlIGFsbG93IGEgc2xhc2ggYXQgdGhlIGVuZCBvZiBtYXRjaC4gSWYgdGhlIHBhdGggdG9cbiAgLy8gbWF0Y2ggYWxyZWFkeSBlbmRzIHdpdGggYSBzbGFzaCwgd2UgcmVtb3ZlIGl0IGZvciBjb25zaXN0ZW5jeS4gVGhlIHNsYXNoXG4gIC8vIGlzIHZhbGlkIGF0IHRoZSBlbmQgb2YgYSBwYXRoIG1hdGNoLCBub3QgaW4gdGhlIG1pZGRsZS4gVGhpcyBpcyBpbXBvcnRhbnRcbiAgLy8gaW4gbm9uLWVuZGluZyBtb2RlLCB3aGVyZSBcIi90ZXN0L1wiIHNob3VsZG4ndCBtYXRjaCBcIi90ZXN0Ly9yb3V0ZVwiLlxuICBpZiAoIXN0cmljdCkge1xuICAgIHJvdXRlID0gKGVuZHNXaXRoRGVsaW1pdGVyID8gcm91dGUuc2xpY2UoMCwgLWRlbGltaXRlci5sZW5ndGgpIDogcm91dGUpICsgJyg/OicgKyBkZWxpbWl0ZXIgKyAnKD89JCkpPydcbiAgfVxuXG4gIGlmIChlbmQpIHtcbiAgICByb3V0ZSArPSAnJCdcbiAgfSBlbHNlIHtcbiAgICAvLyBJbiBub24tZW5kaW5nIG1vZGUsIHdlIG5lZWQgdGhlIGNhcHR1cmluZyBncm91cHMgdG8gbWF0Y2ggYXMgbXVjaCBhc1xuICAgIC8vIHBvc3NpYmxlIGJ5IHVzaW5nIGEgcG9zaXRpdmUgbG9va2FoZWFkIHRvIHRoZSBlbmQgb3IgbmV4dCBwYXRoIHNlZ21lbnQuXG4gICAgcm91dGUgKz0gc3RyaWN0ICYmIGVuZHNXaXRoRGVsaW1pdGVyID8gJycgOiAnKD89JyArIGRlbGltaXRlciArICd8JCknXG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhuZXcgUmVnRXhwKCdeJyArIHJvdXRlLCBmbGFncyhvcHRpb25zKSksIGtleXMpXG59XG5cbi8qKlxuICogTm9ybWFsaXplIHRoZSBnaXZlbiBwYXRoIHN0cmluZywgcmV0dXJuaW5nIGEgcmVndWxhciBleHByZXNzaW9uLlxuICpcbiAqIEFuIGVtcHR5IGFycmF5IGNhbiBiZSBwYXNzZWQgaW4gZm9yIHRoZSBrZXlzLCB3aGljaCB3aWxsIGhvbGQgdGhlXG4gKiBwbGFjZWhvbGRlciBrZXkgZGVzY3JpcHRpb25zLiBGb3IgZXhhbXBsZSwgdXNpbmcgYC91c2VyLzppZGAsIGBrZXlzYCB3aWxsXG4gKiBjb250YWluIGBbeyBuYW1lOiAnaWQnLCBkZWxpbWl0ZXI6ICcvJywgb3B0aW9uYWw6IGZhbHNlLCByZXBlYXQ6IGZhbHNlIH1dYC5cbiAqXG4gKiBAcGFyYW0gIHsoc3RyaW5nfFJlZ0V4cHxBcnJheSl9IHBhdGhcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0gICAgICAga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBwYXRoVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucylcbiAgICBrZXlzID0gW11cbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgaWYgKHBhdGggaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICByZXR1cm4gcmVnZXhwVG9SZWdleHAocGF0aCwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSlcbiAgfVxuXG4gIGlmIChpc2FycmF5KHBhdGgpKSB7XG4gICAgcmV0dXJuIGFycmF5VG9SZWdleHAoLyoqIEB0eXBlIHshQXJyYXl9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbiAgfVxuXG4gIHJldHVybiBzdHJpbmdUb1JlZ2V4cCgvKiogQHR5cGUge3N0cmluZ30gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxufVxuIiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLy8gQGZsb3dcbid1c2Ugc3RyaWN0JztcblxudmFyIGtleSA9ICdfX2dsb2JhbF91bmlxdWVfaWRfXyc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBnbG9iYWxba2V5XSA9IChnbG9iYWxba2V5XSB8fCAwKSArIDE7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG52YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG52YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgICBjb250ZXh0VHlwZTogdHJ1ZSxcbiAgICBjb250ZXh0VHlwZXM6IHRydWUsXG4gICAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICAgIGRpc3BsYXlOYW1lOiB0cnVlLFxuICAgIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IHRydWUsXG4gICAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICAgIG1peGluczogdHJ1ZSxcbiAgICBwcm9wVHlwZXM6IHRydWUsXG4gICAgdHlwZTogdHJ1ZVxufTtcblxudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gICAgbmFtZTogdHJ1ZSxcbiAgICBsZW5ndGg6IHRydWUsXG4gICAgcHJvdG90eXBlOiB0cnVlLFxuICAgIGNhbGxlcjogdHJ1ZSxcbiAgICBjYWxsZWU6IHRydWUsXG4gICAgYXJndW1lbnRzOiB0cnVlLFxuICAgIGFyaXR5OiB0cnVlXG59O1xuXG52YXIgRk9SV0FSRF9SRUZfU1RBVElDUyA9IHtcbiAgICAnJCR0eXBlb2YnOiB0cnVlLFxuICAgIHJlbmRlcjogdHJ1ZSxcbiAgICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgcHJvcFR5cGVzOiB0cnVlXG59O1xuXG52YXIgTUVNT19TVEFUSUNTID0ge1xuICAgICckJHR5cGVvZic6IHRydWUsXG4gICAgY29tcGFyZTogdHJ1ZSxcbiAgICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgcHJvcFR5cGVzOiB0cnVlLFxuICAgIHR5cGU6IHRydWVcbn07XG5cbnZhciBUWVBFX1NUQVRJQ1MgPSB7fTtcblRZUEVfU1RBVElDU1tSZWFjdElzLkZvcndhcmRSZWZdID0gRk9SV0FSRF9SRUZfU1RBVElDUztcblxuZnVuY3Rpb24gZ2V0U3RhdGljcyhjb21wb25lbnQpIHtcbiAgICBpZiAoUmVhY3RJcy5pc01lbW8oY29tcG9uZW50KSkge1xuICAgICAgICByZXR1cm4gTUVNT19TVEFUSUNTO1xuICAgIH1cbiAgICByZXR1cm4gVFlQRV9TVEFUSUNTW2NvbXBvbmVudFsnJCR0eXBlb2YnXV0gfHwgUkVBQ1RfU1RBVElDUztcbn1cblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgb2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcblxuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICAgIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuXG4gICAgICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuICAgICAgICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICAgICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICAgICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAgICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0YXJnZXRTdGF0aWNzID0gZ2V0U3RhdGljcyh0YXJnZXRDb21wb25lbnQpO1xuICAgICAgICB2YXIgc291cmNlU3RhdGljcyA9IGdldFN0YXRpY3Moc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgICAgaWYgKCFLTk9XTl9TVEFUSUNTW2tleV0gJiYgIShibGFja2xpc3QgJiYgYmxhY2tsaXN0W2tleV0pICYmICEoc291cmNlU3RhdGljcyAmJiBzb3VyY2VTdGF0aWNzW2tleV0pICYmICEodGFyZ2V0U3RhdGljcyAmJiB0YXJnZXRTdGF0aWNzW2tleV0pKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEF2b2lkIGZhaWx1cmVzIGZyb20gcmVhZC1vbmx5IHByb3BlcnRpZXNcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaG9pc3ROb25SZWFjdFN0YXRpY3M7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjExLjBcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBoPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixwPW4/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMscT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYscj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyx0PW4/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LHU9bj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsdj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSx3PW4/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAseD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMix5PW4/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzO24mJlN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpO1xudmFyIHo9bj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSxhYT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2O24mJlN5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTtuJiZTeW1ib2wuZm9yKFwicmVhY3QucmVzcG9uZGVyXCIpO24mJlN5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTt2YXIgQT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7XG5mdW5jdGlvbiBCKGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifXZhciBDPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxEPXt9O1xuZnVuY3Rpb24gRShhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1EO3RoaXMudXBkYXRlcj1jfHxDfUUucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307RS5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtpZihcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hKXRocm93IEVycm9yKEIoODUpKTt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0UucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O2Z1bmN0aW9uIEYoKXt9Ri5wcm90b3R5cGU9RS5wcm90b3R5cGU7ZnVuY3Rpb24gRyhhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1EO3RoaXMudXBkYXRlcj1jfHxDfXZhciBIPUcucHJvdG90eXBlPW5ldyBGO1xuSC5jb25zdHJ1Y3Rvcj1HO2goSCxFLnByb3RvdHlwZSk7SC5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgST17Y3VycmVudDpudWxsfSxKPXtjdXJyZW50Om51bGx9LEs9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxMPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBNKGEsYixjKXt2YXIgZSxkPXt9LGc9bnVsbCxsPW51bGw7aWYobnVsbCE9Yilmb3IoZSBpbiB2b2lkIDAhPT1iLnJlZiYmKGw9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KSxiKUsuY2FsbChiLGUpJiYhTC5oYXNPd25Qcm9wZXJ0eShlKSYmKGRbZV09YltlXSk7dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWQuY2hpbGRyZW49YztlbHNlIGlmKDE8Zil7Zm9yKHZhciBrPUFycmF5KGYpLG09MDttPGY7bSsrKWtbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1rfWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihlIGluIGY9YS5kZWZhdWx0UHJvcHMsZil2b2lkIDA9PT1kW2VdJiYoZFtlXT1mW2VdKTtyZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEsa2V5OmcscmVmOmwscHJvcHM6ZCxfb3duZXI6Si5jdXJyZW50fX1cbmZ1bmN0aW9uIGJhKGEsYil7cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfX1mdW5jdGlvbiBOKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1wfWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrKFwiXCIrYSkucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIE89L1xcLysvZyxQPVtdO2Z1bmN0aW9uIFEoYSxiLGMsZSl7aWYoUC5sZW5ndGgpe3ZhciBkPVAucG9wKCk7ZC5yZXN1bHQ9YTtkLmtleVByZWZpeD1iO2QuZnVuYz1jO2QuY29udGV4dD1lO2QuY291bnQ9MDtyZXR1cm4gZH1yZXR1cm57cmVzdWx0OmEsa2V5UHJlZml4OmIsZnVuYzpjLGNvbnRleHQ6ZSxjb3VudDowfX1cbmZ1bmN0aW9uIFIoYSl7YS5yZXN1bHQ9bnVsbDthLmtleVByZWZpeD1udWxsO2EuZnVuYz1udWxsO2EuY29udGV4dD1udWxsO2EuY291bnQ9MDsxMD5QLmxlbmd0aCYmUC5wdXNoKGEpfVxuZnVuY3Rpb24gUyhhLGIsYyxlKXt2YXIgZD10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09ZHx8XCJib29sZWFuXCI9PT1kKWE9bnVsbDt2YXIgZz0hMTtpZihudWxsPT09YSlnPSEwO2Vsc2Ugc3dpdGNoKGQpe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6Zz0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgcDpjYXNlIHE6Zz0hMH19aWYoZylyZXR1cm4gYyhlLGEsXCJcIj09PWI/XCIuXCIrVChhLDApOmIpLDE7Zz0wO2I9XCJcIj09PWI/XCIuXCI6YitcIjpcIjtpZihBcnJheS5pc0FycmF5KGEpKWZvcih2YXIgbD0wO2w8YS5sZW5ndGg7bCsrKXtkPWFbbF07dmFyIGY9YitUKGQsbCk7Zys9UyhkLGYsYyxlKX1lbHNlIGlmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGE/Zj1udWxsOihmPUEmJmFbQV18fGFbXCJAQGl0ZXJhdG9yXCJdLGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGY/ZjpudWxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksbD1cbjA7IShkPWEubmV4dCgpKS5kb25lOylkPWQudmFsdWUsZj1iK1QoZCxsKyspLGcrPVMoZCxmLGMsZSk7ZWxzZSBpZihcIm9iamVjdFwiPT09ZCl0aHJvdyBjPVwiXCIrYSxFcnJvcihCKDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1jP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmMsXCJcIikpO3JldHVybiBnfWZ1bmN0aW9uIFUoYSxiLGMpe3JldHVybiBudWxsPT1hPzA6UyhhLFwiXCIsYixjKX1mdW5jdGlvbiBUKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKGEua2V5KTpiLnRvU3RyaW5nKDM2KX1mdW5jdGlvbiBjYShhLGIpe2EuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyl9XG5mdW5jdGlvbiBkYShhLGIsYyl7dmFyIGU9YS5yZXN1bHQsZD1hLmtleVByZWZpeDthPWEuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyk7QXJyYXkuaXNBcnJheShhKT9WKGEsZSxjLGZ1bmN0aW9uKGEpe3JldHVybiBhfSk6bnVsbCE9YSYmKE4oYSkmJihhPWJhKGEsZCsoIWEua2V5fHxiJiZiLmtleT09PWEua2V5P1wiXCI6KFwiXCIrYS5rZXkpLnJlcGxhY2UoTyxcIiQmL1wiKStcIi9cIikrYykpLGUucHVzaChhKSl9ZnVuY3Rpb24gVihhLGIsYyxlLGQpe3ZhciBnPVwiXCI7bnVsbCE9YyYmKGc9KFwiXCIrYykucmVwbGFjZShPLFwiJCYvXCIpK1wiL1wiKTtiPVEoYixnLGUsZCk7VShhLGRhLGIpO1IoYil9ZnVuY3Rpb24gVygpe3ZhciBhPUkuY3VycmVudDtpZihudWxsPT09YSl0aHJvdyBFcnJvcihCKDMyMSkpO3JldHVybiBhfVxudmFyIFg9e0NoaWxkcmVuOnttYXA6ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGU9W107VihhLGUsbnVsbCxiLGMpO3JldHVybiBlfSxmb3JFYWNoOmZ1bmN0aW9uKGEsYixjKXtpZihudWxsPT1hKXJldHVybiBhO2I9UShudWxsLG51bGwsYixjKTtVKGEsY2EsYik7UihiKX0sY291bnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIFUoYSxmdW5jdGlvbigpe3JldHVybiBudWxsfSxudWxsKX0sdG9BcnJheTpmdW5jdGlvbihhKXt2YXIgYj1bXTtWKGEsYixudWxsLGZ1bmN0aW9uKGEpe3JldHVybiBhfSk7cmV0dXJuIGJ9LG9ubHk6ZnVuY3Rpb24oYSl7aWYoIU4oYSkpdGhyb3cgRXJyb3IoQigxNDMpKTtyZXR1cm4gYX19LGNyZWF0ZVJlZjpmdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fSxDb21wb25lbnQ6RSxQdXJlQ29tcG9uZW50OkcsY3JlYXRlQ29udGV4dDpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2E9eyQkdHlwZW9mOncsX2NhbGN1bGF0ZUNoYW5nZWRCaXRzOmIsXG5fY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnYsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX0sZm9yd2FyZFJlZjpmdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6eCxyZW5kZXI6YX19LGxhenk6ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOmFhLF9jdG9yOmEsX3N0YXR1czotMSxfcmVzdWx0Om51bGx9fSxtZW1vOmZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOnosdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fSx1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlQ2FsbGJhY2soYSxiKX0sdXNlQ29udGV4dDpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlQ29udGV4dChhLGIpfSx1c2VFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZUVmZmVjdChhLGIpfSx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsXG5iLGMpe3JldHVybiBXKCkudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsYyl9LHVzZURlYnVnVmFsdWU6ZnVuY3Rpb24oKXt9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlTGF5b3V0RWZmZWN0KGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZU1lbW8oYSxiKX0sdXNlUmVkdWNlcjpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIFcoKS51c2VSZWR1Y2VyKGEsYixjKX0sdXNlUmVmOmZ1bmN0aW9uKGEpe3JldHVybiBXKCkudXNlUmVmKGEpfSx1c2VTdGF0ZTpmdW5jdGlvbihhKXtyZXR1cm4gVygpLnVzZVN0YXRlKGEpfSxGcmFnbWVudDpyLFByb2ZpbGVyOnUsU3RyaWN0TW9kZTp0LFN1c3BlbnNlOnksY3JlYXRlRWxlbWVudDpNLGNsb25lRWxlbWVudDpmdW5jdGlvbihhLGIsYyl7aWYobnVsbD09PWF8fHZvaWQgMD09PWEpdGhyb3cgRXJyb3IoQigyNjcsYSkpO3ZhciBlPWgoe30sYS5wcm9wcyksZD1hLmtleSxnPWEucmVmLGw9YS5fb3duZXI7XG5pZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGc9Yi5yZWYsbD1KLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoZD1cIlwiK2Iua2V5KTtpZihhLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMpdmFyIGY9YS50eXBlLmRlZmF1bHRQcm9wcztmb3IoayBpbiBiKUsuY2FsbChiLGspJiYhTC5oYXNPd25Qcm9wZXJ0eShrKSYmKGVba109dm9pZCAwPT09YltrXSYmdm9pZCAwIT09Zj9mW2tdOmJba10pfXZhciBrPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ayllLmNoaWxkcmVuPWM7ZWxzZSBpZigxPGspe2Y9QXJyYXkoayk7Zm9yKHZhciBtPTA7bTxrO20rKylmW21dPWFyZ3VtZW50c1ttKzJdO2UuY2hpbGRyZW49Zn1yZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEudHlwZSxrZXk6ZCxyZWY6Zyxwcm9wczplLF9vd25lcjpsfX0sY3JlYXRlRmFjdG9yeTpmdW5jdGlvbihhKXt2YXIgYj1NLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn0saXNWYWxpZEVsZW1lbnQ6Tix2ZXJzaW9uOlwiMTYuMTEuMFwiLFxuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6SSxSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzp7c3VzcGVuc2U6bnVsbH0sUmVhY3RDdXJyZW50T3duZXI6SixJc1NvbWVSZW5kZXJlckFjdGluZzp7Y3VycmVudDohMX0sYXNzaWduOmh9fSxZPXtkZWZhdWx0Olh9LFo9WSYmWHx8WTttb2R1bGUuZXhwb3J0cz1aLmRlZmF1bHR8fFo7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjExLjBcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwicmVhY3RcIiksbj1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxxPXJlcXVpcmUoXCJzY2hlZHVsZXJcIik7ZnVuY3Rpb24gdShhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1pZighYWEpdGhyb3cgRXJyb3IodSgyMjcpKTt2YXIgYmE9bnVsbCxjYT17fTtcbmZ1bmN0aW9uIGRhKCl7aWYoYmEpZm9yKHZhciBhIGluIGNhKXt2YXIgYj1jYVthXSxjPWJhLmluZGV4T2YoYSk7aWYoISgtMTxjKSl0aHJvdyBFcnJvcih1KDk2LGEpKTtpZighZWFbY10pe2lmKCFiLmV4dHJhY3RFdmVudHMpdGhyb3cgRXJyb3IodSg5NyxhKSk7ZWFbY109YjtjPWIuZXZlbnRUeXBlcztmb3IodmFyIGQgaW4gYyl7dmFyIGU9dm9pZCAwO3ZhciBmPWNbZF0sZz1iLGg9ZDtpZihmYS5oYXNPd25Qcm9wZXJ0eShoKSl0aHJvdyBFcnJvcih1KDk5LGgpKTtmYVtoXT1mO3ZhciBrPWYucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7aWYoayl7Zm9yKGUgaW4gaylrLmhhc093blByb3BlcnR5KGUpJiZoYShrW2VdLGcsaCk7ZT0hMH1lbHNlIGYucmVnaXN0cmF0aW9uTmFtZT8oaGEoZi5yZWdpc3RyYXRpb25OYW1lLGcsaCksZT0hMCk6ZT0hMTtpZighZSl0aHJvdyBFcnJvcih1KDk4LGQsYSkpO319fX1cbmZ1bmN0aW9uIGhhKGEsYixjKXtpZihpYVthXSl0aHJvdyBFcnJvcih1KDEwMCxhKSk7aWFbYV09YjtqYVthXT1iLmV2ZW50VHlwZXNbY10uZGVwZW5kZW5jaWVzfXZhciBlYT1bXSxmYT17fSxpYT17fSxqYT17fTtmdW5jdGlvbiBrYShhLGIsYyxkLGUsZixnLGgsayl7dmFyIGw9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbCl9Y2F0Y2gobSl7dGhpcy5vbkVycm9yKG0pfX12YXIgbGE9ITEsbWE9bnVsbCxuYT0hMSxvYT1udWxsLHBhPXtvbkVycm9yOmZ1bmN0aW9uKGEpe2xhPSEwO21hPWF9fTtmdW5jdGlvbiBxYShhLGIsYyxkLGUsZixnLGgsayl7bGE9ITE7bWE9bnVsbDtrYS5hcHBseShwYSxhcmd1bWVudHMpfVxuZnVuY3Rpb24gcmEoYSxiLGMsZCxlLGYsZyxoLGspe3FhLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihsYSl7aWYobGEpe3ZhciBsPW1hO2xhPSExO21hPW51bGx9ZWxzZSB0aHJvdyBFcnJvcih1KDE5OCkpO25hfHwobmE9ITAsb2E9bCl9fXZhciBzYT1udWxsLHVhPW51bGwsdmE9bnVsbDtmdW5jdGlvbiB3YShhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9dmEoYyk7cmEoZCxiLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1mdW5jdGlvbiB4YShhLGIpe2lmKG51bGw9PWIpdGhyb3cgRXJyb3IodSgzMCkpO2lmKG51bGw9PWEpcmV0dXJuIGI7aWYoQXJyYXkuaXNBcnJheShhKSl7aWYoQXJyYXkuaXNBcnJheShiKSlyZXR1cm4gYS5wdXNoLmFwcGx5KGEsYiksYTthLnB1c2goYik7cmV0dXJuIGF9cmV0dXJuIEFycmF5LmlzQXJyYXkoYik/W2FdLmNvbmNhdChiKTpbYSxiXX1cbmZ1bmN0aW9uIHlhKGEsYixjKXtBcnJheS5pc0FycmF5KGEpP2EuZm9yRWFjaChiLGMpOmEmJmIuY2FsbChjLGEpfXZhciB6YT1udWxsO2Z1bmN0aW9uIEFhKGEpe2lmKGEpe3ZhciBiPWEuX2Rpc3BhdGNoTGlzdGVuZXJzLGM9YS5fZGlzcGF0Y2hJbnN0YW5jZXM7aWYoQXJyYXkuaXNBcnJheShiKSlmb3IodmFyIGQ9MDtkPGIubGVuZ3RoJiYhYS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpO2QrKyl3YShhLGJbZF0sY1tkXSk7ZWxzZSBiJiZ3YShhLGIsYyk7YS5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbDthLl9kaXNwYXRjaEluc3RhbmNlcz1udWxsO2EuaXNQZXJzaXN0ZW50KCl8fGEuY29uc3RydWN0b3IucmVsZWFzZShhKX19ZnVuY3Rpb24gQmEoYSl7bnVsbCE9PWEmJih6YT14YSh6YSxhKSk7YT16YTt6YT1udWxsO2lmKGEpe3lhKGEsQWEpO2lmKHphKXRocm93IEVycm9yKHUoOTUpKTtpZihuYSl0aHJvdyBhPW9hLG5hPSExLG9hPW51bGwsYTt9fVxudmFyIENhPXtpbmplY3RFdmVudFBsdWdpbk9yZGVyOmZ1bmN0aW9uKGEpe2lmKGJhKXRocm93IEVycm9yKHUoMTAxKSk7YmE9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYSk7ZGEoKX0saW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lOmZ1bmN0aW9uKGEpe3ZhciBiPSExLGM7Zm9yKGMgaW4gYSlpZihhLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD1hW2NdO2lmKCFjYS5oYXNPd25Qcm9wZXJ0eShjKXx8Y2FbY10hPT1kKXtpZihjYVtjXSl0aHJvdyBFcnJvcih1KDEwMixjKSk7Y2FbY109ZDtiPSEwfX1iJiZkYSgpfX07XG5mdW5jdGlvbiBEYShhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKCFjKXJldHVybiBudWxsO3ZhciBkPXNhKGMpO2lmKCFkKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2lmKGMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjKXRocm93IEVycm9yKHUoMjMxLGIsdHlwZW9mIGMpKTtcbnJldHVybiBjfXZhciBFYT1hYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDtFYS5oYXNPd25Qcm9wZXJ0eShcIlJlYWN0Q3VycmVudERpc3BhdGNoZXJcIil8fChFYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyPXtjdXJyZW50Om51bGx9KTtFYS5oYXNPd25Qcm9wZXJ0eShcIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnXCIpfHwoRWEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWc9e3N1c3BlbnNlOm51bGx9KTtcbnZhciBGYT0vXiguKilbXFxcXFxcL10vLHc9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixHYT13P1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLEhhPXc/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixJYT13P1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxKYT13P1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxLYT13P1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCxMYT13P1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxNYT13P1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLE5hPXc/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxPYT13P1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixQYT13P1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxRYT13P1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpOlxuNjAxMjAsUmE9dz9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSxTYT13P1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2O3cmJlN5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTt3JiZTeW1ib2wuZm9yKFwicmVhY3QucmVzcG9uZGVyXCIpO3cmJlN5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTt2YXIgVGE9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIFVhKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1UYSYmYVtUYV18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1cbmZ1bmN0aW9uIFZhKGEpe2lmKC0xPT09YS5fc3RhdHVzKXthLl9zdGF0dXM9MDt2YXIgYj1hLl9jdG9yO2I9YigpO2EuX3Jlc3VsdD1iO2IudGhlbihmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYj1iLmRlZmF1bHQsYS5fc3RhdHVzPTEsYS5fcmVzdWx0PWIpfSxmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYS5fc3RhdHVzPTIsYS5fcmVzdWx0PWIpfSl9fVxuZnVuY3Rpb24gV2EoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSBJYTpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSBIYTpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgS2E6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgSmE6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBQYTpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSBRYTpyZXR1cm5cIlN1c3BlbnNlTGlzdFwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBNYTpyZXR1cm5cIkNvbnRleHQuQ29uc3VtZXJcIjtjYXNlIExhOnJldHVyblwiQ29udGV4dC5Qcm92aWRlclwiO2Nhc2UgT2E6dmFyIGI9YS5yZW5kZXI7Yj1iLmRpc3BsYXlOYW1lfHxiLm5hbWV8fFwiXCI7cmV0dXJuIGEuZGlzcGxheU5hbWV8fChcIlwiIT09Yj9cIkZvcndhcmRSZWYoXCIrYitcIilcIjpcblwiRm9yd2FyZFJlZlwiKTtjYXNlIFJhOnJldHVybiBXYShhLnR5cGUpO2Nhc2UgU2E6aWYoYT0xPT09YS5fc3RhdHVzP2EuX3Jlc3VsdDpudWxsKXJldHVybiBXYShhKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBYYShhKXt2YXIgYj1cIlwiO2Rve2E6c3dpdGNoKGEudGFnKXtjYXNlIDM6Y2FzZSA0OmNhc2UgNjpjYXNlIDc6Y2FzZSAxMDpjYXNlIDk6dmFyIGM9XCJcIjticmVhayBhO2RlZmF1bHQ6dmFyIGQ9YS5fZGVidWdPd25lcixlPWEuX2RlYnVnU291cmNlLGY9V2EoYS50eXBlKTtjPW51bGw7ZCYmKGM9V2EoZC50eXBlKSk7ZD1mO2Y9XCJcIjtlP2Y9XCIgKGF0IFwiK2UuZmlsZU5hbWUucmVwbGFjZShGYSxcIlwiKStcIjpcIitlLmxpbmVOdW1iZXIrXCIpXCI6YyYmKGY9XCIgKGNyZWF0ZWQgYnkgXCIrYytcIilcIik7Yz1cIlxcbiAgICBpbiBcIisoZHx8XCJVbmtub3duXCIpK2Z9Yis9YzthPWEucmV0dXJufXdoaWxlKGEpO3JldHVybiBifVxudmFyIFlhPSEoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KSxaYT1udWxsLCRhPW51bGwsYWI9bnVsbDtmdW5jdGlvbiBiYihhKXtpZihhPXVhKGEpKXtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgWmEpdGhyb3cgRXJyb3IodSgyODApKTt2YXIgYj1zYShhLnN0YXRlTm9kZSk7WmEoYS5zdGF0ZU5vZGUsYS50eXBlLGIpfX1mdW5jdGlvbiBjYihhKXskYT9hYj9hYi5wdXNoKGEpOmFiPVthXTokYT1hfWZ1bmN0aW9uIGRiKCl7aWYoJGEpe3ZhciBhPSRhLGI9YWI7YWI9JGE9bnVsbDtiYihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspYmIoYlthXSl9fWZ1bmN0aW9uIGViKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gZmIoYSxiLGMsZCl7cmV0dXJuIGEoYixjLGQpfWZ1bmN0aW9uIGdiKCl7fVxudmFyIGhiPWViLGliPSExLGpiPSExO2Z1bmN0aW9uIGtiKCl7aWYobnVsbCE9PSRhfHxudWxsIT09YWIpZ2IoKSxkYigpfW5ldyBNYXA7dmFyIGxiPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxtYj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LG5iPXt9LG9iPXt9O1xuZnVuY3Rpb24gcGIoYSl7aWYobWIuY2FsbChvYixhKSlyZXR1cm4hMDtpZihtYi5jYWxsKG5iLGEpKXJldHVybiExO2lmKGxiLnRlc3QoYSkpcmV0dXJuIG9iW2FdPSEwO25iW2FdPSEwO3JldHVybiExfWZ1bmN0aW9uIHFiKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gcmIoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8cWIoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1mdW5jdGlvbiBCKGEsYixjLGQsZSxmKXt0aGlzLmFjY2VwdHNCb29sZWFucz0yPT09Ynx8Mz09PWJ8fDQ9PT1iO3RoaXMuYXR0cmlidXRlTmFtZT1kO3RoaXMuYXR0cmlidXRlTmFtZXNwYWNlPWU7dGhpcy5tdXN0VXNlUHJvcGVydHk9Yzt0aGlzLnByb3BlcnR5TmFtZT1hO3RoaXMudHlwZT1iO3RoaXMuc2FuaXRpemVVUkw9Zn12YXIgRD17fTtcblwiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDAsITEsYSxudWxsLCExKX0pO1tbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTtEW2JdPW5ldyBCKGIsMSwhMSxhWzFdLG51bGwsITEpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7XG5bXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwiZm9jdXNhYmxlXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDIsITEsYSxudWxsLCExKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7XG5bXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDMsITAsYSxudWxsLCExKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDQsITEsYSxudWxsLCExKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNiwhMSxhLG51bGwsITEpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTt2YXIgc2I9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiB0YihhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShzYixcbnRiKTtEW2JdPW5ldyBCKGIsMSwhMSxhLG51bGwsITEpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uoc2IsdGIpO0RbYl09bmV3IEIoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITEpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uoc2IsdGIpO0RbYl09bmV3IEIoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIiwhMSl9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTtcbkQueGxpbmtIcmVmPW5ldyBCKFwieGxpbmtIcmVmXCIsMSwhMSxcInhsaW5rOmhyZWZcIixcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMCk7W1wic3JjXCIsXCJocmVmXCIsXCJhY3Rpb25cIixcImZvcm1BY3Rpb25cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMCl9KTtmdW5jdGlvbiB1YihhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19XG5mdW5jdGlvbiB2YihhLGIsYyxkKXt2YXIgZT1ELmhhc093blByb3BlcnR5KGIpP0RbYl06bnVsbDt2YXIgZj1udWxsIT09ZT8wPT09ZS50eXBlOmQ/ITE6ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdPyExOiEwO2Z8fChyYihiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/cGIoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpKX1cbmZ1bmN0aW9uIHdiKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiB4YihhKXt2YXIgYj13YihhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24geWIoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPXhiKGEpKX1mdW5jdGlvbiB6YihhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9d2IoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1mdW5jdGlvbiBBYihhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gbih7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9XG5mdW5jdGlvbiBCYihhLGIpe3ZhciBjPW51bGw9PWIuZGVmYXVsdFZhbHVlP1wiXCI6Yi5kZWZhdWx0VmFsdWUsZD1udWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQ7Yz11YihudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpkLGluaXRpYWxWYWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fWZ1bmN0aW9uIENiKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmdmIoYSxcImNoZWNrZWRcIixiLCExKX1cbmZ1bmN0aW9uIEViKGEsYil7Q2IoYSxiKTt2YXIgYz11YihiLnZhbHVlKSxkPWIudHlwZTtpZihudWxsIT1jKWlmKFwibnVtYmVyXCI9PT1kKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2Vsc2UgaWYoXCJzdWJtaXRcIj09PWR8fFwicmVzZXRcIj09PWQpe2EucmVtb3ZlQXR0cmlidXRlKFwidmFsdWVcIik7cmV0dXJufWIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT9GYihhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiZGYihhLGIudHlwZSx1YihiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uIEdiKGEsYixjKXtpZihiLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikpe3ZhciBkPWIudHlwZTtpZighKFwic3VibWl0XCIhPT1kJiZcInJlc2V0XCIhPT1kfHx2b2lkIDAhPT1iLnZhbHVlJiZudWxsIT09Yi52YWx1ZSkpcmV0dXJuO2I9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO2N8fGI9PT1hLnZhbHVlfHwoYS52YWx1ZT1iKTthLmRlZmF1bHRWYWx1ZT1ifWM9YS5uYW1lO1wiXCIhPT1jJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9IWEuZGVmYXVsdENoZWNrZWQ7YS5kZWZhdWx0Q2hlY2tlZD0hIWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZDtcIlwiIT09YyYmKGEubmFtZT1jKX1cbmZ1bmN0aW9uIEZiKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8YS5vd25lckRvY3VtZW50LmFjdGl2ZUVsZW1lbnQhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX1mdW5jdGlvbiBIYihhKXt2YXIgYj1cIlwiO2FhLkNoaWxkcmVuLmZvckVhY2goYSxmdW5jdGlvbihhKXtudWxsIT1hJiYoYis9YSl9KTtyZXR1cm4gYn1mdW5jdGlvbiBJYihhLGIpe2E9bih7Y2hpbGRyZW46dm9pZCAwfSxiKTtpZihiPUhiKGIuY2hpbGRyZW4pKWEuY2hpbGRyZW49YjtyZXR1cm4gYX1cbmZ1bmN0aW9uIEpiKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIit1YihjKTtiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gS2IoYSxiKXtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXRocm93IEVycm9yKHUoOTEpKTtyZXR1cm4gbih7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBMYihhLGIpe3ZhciBjPWIudmFsdWU7aWYobnVsbD09Yyl7Yz1iLmRlZmF1bHRWYWx1ZTtiPWIuY2hpbGRyZW47aWYobnVsbCE9Yil7aWYobnVsbCE9Yyl0aHJvdyBFcnJvcih1KDkyKSk7aWYoQXJyYXkuaXNBcnJheShiKSl7aWYoISgxPj1iLmxlbmd0aCkpdGhyb3cgRXJyb3IodSg5MykpO2I9YlswXX1jPWJ9bnVsbD09YyYmKGM9XCJcIil9YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6dWIoYyl9fVxuZnVuY3Rpb24gTWIoYSxiKXt2YXIgYz11YihiLnZhbHVlKSxkPXViKGIuZGVmYXVsdFZhbHVlKTtudWxsIT1jJiYoYz1cIlwiK2MsYyE9PWEudmFsdWUmJihhLnZhbHVlPWMpLG51bGw9PWIuZGVmYXVsdFZhbHVlJiZhLmRlZmF1bHRWYWx1ZSE9PWMmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9ZCYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrZCl9ZnVuY3Rpb24gTmIoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmXCJcIiE9PWImJm51bGwhPT1iJiYoYS52YWx1ZT1iKX12YXIgT2I9e2h0bWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsbWF0aG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLHN2ZzpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJ9O1xuZnVuY3Rpb24gUGIoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1mdW5jdGlvbiBRYihhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/UGIoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgUmIsU2I9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKGEubmFtZXNwYWNlVVJJIT09T2Iuc3ZnfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7UmI9UmJ8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7UmIuaW5uZXJIVE1MPVwiPHN2Zz5cIitiLnZhbHVlT2YoKS50b1N0cmluZygpK1wiPC9zdmc+XCI7Zm9yKGI9UmIuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24gVGIoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1mdW5jdGlvbiBVYihhLGIpe3ZhciBjPXt9O2NbYS50b0xvd2VyQ2FzZSgpXT1iLnRvTG93ZXJDYXNlKCk7Y1tcIldlYmtpdFwiK2FdPVwid2Via2l0XCIrYjtjW1wiTW96XCIrYV09XCJtb3pcIitiO3JldHVybiBjfXZhciBWYj17YW5pbWF0aW9uZW5kOlViKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOlViKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6VWIoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6VWIoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxXYj17fSxYYj17fTtcbllhJiYoWGI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgVmIuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgVmIuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgVmIuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgVmIudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtmdW5jdGlvbiBZYihhKXtpZihXYlthXSlyZXR1cm4gV2JbYV07aWYoIVZiW2FdKXJldHVybiBhO3ZhciBiPVZiW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIFhiKXJldHVybiBXYlthXT1iW2NdO3JldHVybiBhfXZhciBaYj1ZYihcImFuaW1hdGlvbmVuZFwiKSwkYj1ZYihcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxhYz1ZYihcImFuaW1hdGlvbnN0YXJ0XCIpLGJjPVliKFwidHJhbnNpdGlvbmVuZFwiKSxkYz1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2Ugc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiBlYyhhKXt2YXIgYj1hLGM9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7YT1iO2RvIGI9YSwwIT09KGIuZWZmZWN0VGFnJjEwMjYpJiYoYz1iLnJldHVybiksYT1iLnJldHVybjt3aGlsZShhKX1yZXR1cm4gMz09PWIudGFnP2M6bnVsbH1mdW5jdGlvbiBmYyhhKXtpZigxMz09PWEudGFnKXt2YXIgYj1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWImJihhPWEuYWx0ZXJuYXRlLG51bGwhPT1hJiYoYj1hLm1lbW9pemVkU3RhdGUpKTtpZihudWxsIT09YilyZXR1cm4gYi5kZWh5ZHJhdGVkfXJldHVybiBudWxsfWZ1bmN0aW9uIGdjKGEpe2lmKGVjKGEpIT09YSl0aHJvdyBFcnJvcih1KDE4OCkpO31cbmZ1bmN0aW9uIGhjKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXtiPWVjKGEpO2lmKG51bGw9PT1iKXRocm93IEVycm9yKHUoMTg4KSk7cmV0dXJuIGIhPT1hP251bGw6YX1mb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Yy5yZXR1cm47aWYobnVsbD09PWUpYnJlYWs7dmFyIGY9ZS5hbHRlcm5hdGU7aWYobnVsbD09PWYpe2Q9ZS5yZXR1cm47aWYobnVsbCE9PWQpe2M9ZDtjb250aW51ZX1icmVha31pZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKGY9ZS5jaGlsZDtmOyl7aWYoZj09PWMpcmV0dXJuIGdjKGUpLGE7aWYoZj09PWQpcmV0dXJuIGdjKGUpLGI7Zj1mLnNpYmxpbmd9dGhyb3cgRXJyb3IodSgxODgpKTt9aWYoYy5yZXR1cm4hPT1kLnJldHVybiljPWUsZD1mO2Vsc2V7Zm9yKHZhciBnPSExLGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09XG5jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31oPWguc2libGluZ31pZighZyl0aHJvdyBFcnJvcih1KDE4OSkpO319aWYoYy5hbHRlcm5hdGUhPT1kKXRocm93IEVycm9yKHUoMTkwKSk7fWlmKDMhPT1jLnRhZyl0aHJvdyBFcnJvcih1KDE4OCkpO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gaWMoYSl7YT1oYyhhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkKWIuY2hpbGQucmV0dXJuPWIsYj1iLmNoaWxkO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDshYi5zaWJsaW5nOyl7aWYoIWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH1cbnZhciBqYyxrYyxsYyxtYz0hMSxuYz1bXSxvYz1udWxsLHBjPW51bGwscWM9bnVsbCxyYz1uZXcgTWFwLHNjPW5ldyBNYXAsdGM9W10sdWM9XCJtb3VzZWRvd24gbW91c2V1cCB0b3VjaGNhbmNlbCB0b3VjaGVuZCB0b3VjaHN0YXJ0IGF1eGNsaWNrIGRibGNsaWNrIHBvaW50ZXJjYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlcnVwIGRyYWdlbmQgZHJhZ3N0YXJ0IGRyb3AgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIGlucHV0IHRleHRJbnB1dCBjbG9zZSBjYW5jZWwgY29weSBjdXQgcGFzdGUgY2xpY2sgY2hhbmdlIGNvbnRleHRtZW51IHJlc2V0IHN1Ym1pdFwiLnNwbGl0KFwiIFwiKSx2Yz1cImZvY3VzIGJsdXIgZHJhZ2VudGVyIGRyYWdsZWF2ZSBtb3VzZW92ZXIgbW91c2VvdXQgcG9pbnRlcm92ZXIgcG9pbnRlcm91dCBnb3Rwb2ludGVyY2FwdHVyZSBsb3N0cG9pbnRlcmNhcHR1cmVcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiB3YyhhKXt2YXIgYj14YyhhKTt1Yy5mb3JFYWNoKGZ1bmN0aW9uKGMpe3ljKGMsYSxiKX0pO3ZjLmZvckVhY2goZnVuY3Rpb24oYyl7eWMoYyxhLGIpfSl9ZnVuY3Rpb24gemMoYSxiLGMsZCl7cmV0dXJue2Jsb2NrZWRPbjphLHRvcExldmVsVHlwZTpiLGV2ZW50U3lzdGVtRmxhZ3M6Y3wzMixuYXRpdmVFdmVudDpkfX1mdW5jdGlvbiBBYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNcIjpjYXNlIFwiYmx1clwiOm9jPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpwYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjpxYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6cmMuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6c2MuZGVsZXRlKGIucG9pbnRlcklkKX19XG5mdW5jdGlvbiBCYyhhLGIsYyxkLGUpe2lmKG51bGw9PT1hfHxhLm5hdGl2ZUV2ZW50IT09ZSlyZXR1cm4gYT16YyhiLGMsZCxlKSxudWxsIT09YiYmKGI9Q2MoYiksbnVsbCE9PWImJmtjKGIpKSxhO2EuZXZlbnRTeXN0ZW1GbGFnc3w9ZDtyZXR1cm4gYX1mdW5jdGlvbiBEYyhhLGIsYyxkKXtzd2l0Y2goYil7Y2FzZSBcImZvY3VzXCI6cmV0dXJuIG9jPUJjKG9jLGEsYixjLGQpLCEwO2Nhc2UgXCJkcmFnZW50ZXJcIjpyZXR1cm4gcGM9QmMocGMsYSxiLGMsZCksITA7Y2FzZSBcIm1vdXNlb3ZlclwiOnJldHVybiBxYz1CYyhxYyxhLGIsYyxkKSwhMDtjYXNlIFwicG9pbnRlcm92ZXJcIjp2YXIgZT1kLnBvaW50ZXJJZDtyYy5zZXQoZSxCYyhyYy5nZXQoZSl8fG51bGwsYSxiLGMsZCkpO3JldHVybiEwO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOnJldHVybiBlPWQucG9pbnRlcklkLHNjLnNldChlLEJjKHNjLmdldChlKXx8bnVsbCxhLGIsYyxkKSksITB9cmV0dXJuITF9XG5mdW5jdGlvbiBFYyhhKXt2YXIgYj1GYyhhLnRhcmdldCk7aWYobnVsbCE9PWIpe3ZhciBjPWVjKGIpO2lmKG51bGwhPT1jKWlmKGI9Yy50YWcsMTM9PT1iKXtpZihiPWZjKGMpLG51bGwhPT1iKXthLmJsb2NrZWRPbj1iO3EudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5KGEucHJpb3JpdHksZnVuY3Rpb24oKXtsYyhjKX0pO3JldHVybn19ZWxzZSBpZigzPT09YiYmYy5zdGF0ZU5vZGUuaHlkcmF0ZSl7YS5ibG9ja2VkT249Mz09PWMudGFnP2Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtyZXR1cm59fWEuYmxvY2tlZE9uPW51bGx9ZnVuY3Rpb24gR2MoYSl7aWYobnVsbCE9PWEuYmxvY2tlZE9uKXJldHVybiExO3ZhciBiPUhjKGEudG9wTGV2ZWxUeXBlLGEuZXZlbnRTeXN0ZW1GbGFncyxhLm5hdGl2ZUV2ZW50KTtpZihudWxsIT09Yil7dmFyIGM9Q2MoYik7bnVsbCE9PWMmJmtjKGMpO2EuYmxvY2tlZE9uPWI7cmV0dXJuITF9cmV0dXJuITB9XG5mdW5jdGlvbiBJYyhhLGIsYyl7R2MoYSkmJmMuZGVsZXRlKGIpfWZ1bmN0aW9uIEpjKCl7Zm9yKG1jPSExOzA8bmMubGVuZ3RoOyl7dmFyIGE9bmNbMF07aWYobnVsbCE9PWEuYmxvY2tlZE9uKXthPUNjKGEuYmxvY2tlZE9uKTtudWxsIT09YSYmamMoYSk7YnJlYWt9dmFyIGI9SGMoYS50b3BMZXZlbFR5cGUsYS5ldmVudFN5c3RlbUZsYWdzLGEubmF0aXZlRXZlbnQpO251bGwhPT1iP2EuYmxvY2tlZE9uPWI6bmMuc2hpZnQoKX1udWxsIT09b2MmJkdjKG9jKSYmKG9jPW51bGwpO251bGwhPT1wYyYmR2MocGMpJiYocGM9bnVsbCk7bnVsbCE9PXFjJiZHYyhxYykmJihxYz1udWxsKTtyYy5mb3JFYWNoKEljKTtzYy5mb3JFYWNoKEljKX1mdW5jdGlvbiBLYyhhLGIpe2EuYmxvY2tlZE9uPT09YiYmKGEuYmxvY2tlZE9uPW51bGwsbWN8fChtYz0hMCxxLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2socS51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxKYykpKX1cbmZ1bmN0aW9uIExjKGEpe2Z1bmN0aW9uIGIoYil7cmV0dXJuIEtjKGIsYSl9aWYoMDxuYy5sZW5ndGgpe0tjKG5jWzBdLGEpO2Zvcih2YXIgYz0xO2M8bmMubGVuZ3RoO2MrKyl7dmFyIGQ9bmNbY107ZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCl9fW51bGwhPT1vYyYmS2Mob2MsYSk7bnVsbCE9PXBjJiZLYyhwYyxhKTtudWxsIT09cWMmJktjKHFjLGEpO3JjLmZvckVhY2goYik7c2MuZm9yRWFjaChiKTtmb3IoYz0wO2M8dGMubGVuZ3RoO2MrKylkPXRjW2NdLGQuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpO2Zvcig7MDx0Yy5sZW5ndGgmJihjPXRjWzBdLG51bGw9PT1jLmJsb2NrZWRPbik7KUVjKGMpLG51bGw9PT1jLmJsb2NrZWRPbiYmdGMuc2hpZnQoKX1cbmZ1bmN0aW9uIE1jKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX1mdW5jdGlvbiBOYyhhKXtkbyBhPWEucmV0dXJuO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfWZ1bmN0aW9uIE9jKGEsYixjKXtpZihiPURhKGEsYy5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lc1tiXSkpYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9eGEoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9eGEoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSl9XG5mdW5jdGlvbiBQYyhhKXtpZihhJiZhLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKXtmb3IodmFyIGI9YS5fdGFyZ2V0SW5zdCxjPVtdO2I7KWMucHVzaChiKSxiPU5jKGIpO2ZvcihiPWMubGVuZ3RoOzA8Yi0tOylPYyhjW2JdLFwiY2FwdHVyZWRcIixhKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKU9jKGNbYl0sXCJidWJibGVkXCIsYSl9fWZ1bmN0aW9uIFFjKGEsYixjKXthJiZjJiZjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJihiPURhKGEsYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSkmJihjLl9kaXNwYXRjaExpc3RlbmVycz14YShjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz14YShjLl9kaXNwYXRjaEluc3RhbmNlcyxhKSl9ZnVuY3Rpb24gUmMoYSl7YSYmYS5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiZRYyhhLl90YXJnZXRJbnN0LG51bGwsYSl9XG5mdW5jdGlvbiBTYyhhKXt5YShhLFBjKX1mdW5jdGlvbiBUYygpe3JldHVybiEwfWZ1bmN0aW9uIFVjKCl7cmV0dXJuITF9ZnVuY3Rpb24gRShhLGIsYyxkKXt0aGlzLmRpc3BhdGNoQ29uZmlnPWE7dGhpcy5fdGFyZ2V0SW5zdD1iO3RoaXMubmF0aXZlRXZlbnQ9YzthPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlO2Zvcih2YXIgZSBpbiBhKWEuaGFzT3duUHJvcGVydHkoZSkmJigoYj1hW2VdKT90aGlzW2VdPWIoYyk6XCJ0YXJnZXRcIj09PWU/dGhpcy50YXJnZXQ9ZDp0aGlzW2VdPWNbZV0pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1jLmRlZmF1bHRQcmV2ZW50ZWQ/Yy5kZWZhdWx0UHJldmVudGVkOiExPT09Yy5yZXR1cm5WYWx1ZSk/VGM6VWM7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1VYztyZXR1cm4gdGhpc31cbm4oRS5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1UYyl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1UYyl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt0aGlzLmlzUGVyc2lzdGVudD1UY30saXNQZXJzaXN0ZW50OlVjLGRlc3RydWN0b3I6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZSxcbmI7Zm9yKGIgaW4gYSl0aGlzW2JdPW51bGw7dGhpcy5uYXRpdmVFdmVudD10aGlzLl90YXJnZXRJbnN0PXRoaXMuZGlzcGF0Y2hDb25maWc9bnVsbDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXRoaXMuaXNEZWZhdWx0UHJldmVudGVkPVVjO3RoaXMuX2Rpc3BhdGNoSW5zdGFuY2VzPXRoaXMuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGx9fSk7RS5JbnRlcmZhY2U9e3R5cGU6bnVsbCx0YXJnZXQ6bnVsbCxjdXJyZW50VGFyZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LGV2ZW50UGhhc2U6bnVsbCxidWJibGVzOm51bGwsY2FuY2VsYWJsZTpudWxsLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6bnVsbCxpc1RydXN0ZWQ6bnVsbH07XG5FLmV4dGVuZD1mdW5jdGlvbihhKXtmdW5jdGlvbiBiKCl7fWZ1bmN0aW9uIGMoKXtyZXR1cm4gZC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9dmFyIGQ9dGhpcztiLnByb3RvdHlwZT1kLnByb3RvdHlwZTt2YXIgZT1uZXcgYjtuKGUsYy5wcm90b3R5cGUpO2MucHJvdG90eXBlPWU7Yy5wcm90b3R5cGUuY29uc3RydWN0b3I9YztjLkludGVyZmFjZT1uKHt9LGQuSW50ZXJmYWNlLGEpO2MuZXh0ZW5kPWQuZXh0ZW5kO1ZjKGMpO3JldHVybiBjfTtWYyhFKTtmdW5jdGlvbiBXYyhhLGIsYyxkKXtpZih0aGlzLmV2ZW50UG9vbC5sZW5ndGgpe3ZhciBlPXRoaXMuZXZlbnRQb29sLnBvcCgpO3RoaXMuY2FsbChlLGEsYixjLGQpO3JldHVybiBlfXJldHVybiBuZXcgdGhpcyhhLGIsYyxkKX1cbmZ1bmN0aW9uIFhjKGEpe2lmKCEoYSBpbnN0YW5jZW9mIHRoaXMpKXRocm93IEVycm9yKHUoMjc5KSk7YS5kZXN0cnVjdG9yKCk7MTA+dGhpcy5ldmVudFBvb2wubGVuZ3RoJiZ0aGlzLmV2ZW50UG9vbC5wdXNoKGEpfWZ1bmN0aW9uIFZjKGEpe2EuZXZlbnRQb29sPVtdO2EuZ2V0UG9vbGVkPVdjO2EucmVsZWFzZT1YY312YXIgWWM9RS5leHRlbmQoe2FuaW1hdGlvbk5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLFpjPUUuZXh0ZW5kKHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksJGM9RS5leHRlbmQoe3ZpZXc6bnVsbCxkZXRhaWw6bnVsbH0pLGFkPSRjLmV4dGVuZCh7cmVsYXRlZFRhcmdldDpudWxsfSk7XG5mdW5jdGlvbiBiZChhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iOzEwPT09YSYmKGE9MTMpO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1cbnZhciBjZD17RXNjOlwiRXNjYXBlXCIsU3BhY2ViYXI6XCIgXCIsTGVmdDpcIkFycm93TGVmdFwiLFVwOlwiQXJyb3dVcFwiLFJpZ2h0OlwiQXJyb3dSaWdodFwiLERvd246XCJBcnJvd0Rvd25cIixEZWw6XCJEZWxldGVcIixXaW46XCJPU1wiLE1lbnU6XCJDb250ZXh0TWVudVwiLEFwcHM6XCJDb250ZXh0TWVudVwiLFNjcm9sbDpcIlNjcm9sbExvY2tcIixNb3pQcmludGFibGVLZXk6XCJVbmlkZW50aWZpZWRcIn0sZWQ9ezg6XCJCYWNrc3BhY2VcIiw5OlwiVGFiXCIsMTI6XCJDbGVhclwiLDEzOlwiRW50ZXJcIiwxNjpcIlNoaWZ0XCIsMTc6XCJDb250cm9sXCIsMTg6XCJBbHRcIiwxOTpcIlBhdXNlXCIsMjA6XCJDYXBzTG9ja1wiLDI3OlwiRXNjYXBlXCIsMzI6XCIgXCIsMzM6XCJQYWdlVXBcIiwzNDpcIlBhZ2VEb3duXCIsMzU6XCJFbmRcIiwzNjpcIkhvbWVcIiwzNzpcIkFycm93TGVmdFwiLDM4OlwiQXJyb3dVcFwiLDM5OlwiQXJyb3dSaWdodFwiLDQwOlwiQXJyb3dEb3duXCIsNDU6XCJJbnNlcnRcIiw0NjpcIkRlbGV0ZVwiLDExMjpcIkYxXCIsMTEzOlwiRjJcIiwxMTQ6XCJGM1wiLDExNTpcIkY0XCIsXG4xMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIiwxMTk6XCJGOFwiLDEyMDpcIkY5XCIsMTIxOlwiRjEwXCIsMTIyOlwiRjExXCIsMTIzOlwiRjEyXCIsMTQ0OlwiTnVtTG9ja1wiLDE0NTpcIlNjcm9sbExvY2tcIiwyMjQ6XCJNZXRhXCJ9LGZkPXtBbHQ6XCJhbHRLZXlcIixDb250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBnZChhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPWZkW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gaGQoKXtyZXR1cm4gZ2R9XG52YXIgaWQ9JGMuZXh0ZW5kKHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPWNkW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPWJkKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9lZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGxvY2F0aW9uOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLHJlcGVhdDpudWxsLGxvY2FsZTpudWxsLGdldE1vZGlmaWVyU3RhdGU6aGQsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlP2JkKGEpOjB9LGtleUNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH0sd2hpY2g6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/YmQoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSxqZD0wLGtkPTAsbGQ9ITEsbWQ9ITEsbmQ9JGMuZXh0ZW5kKHtzY3JlZW5YOm51bGwsc2NyZWVuWTpudWxsLGNsaWVudFg6bnVsbCxjbGllbnRZOm51bGwscGFnZVg6bnVsbCxwYWdlWTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOmhkLGJ1dHRvbjpudWxsLGJ1dHRvbnM6bnVsbCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlbGF0ZWRUYXJnZXR8fChhLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQpfSxtb3ZlbWVudFg6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFhcImluIGEpcmV0dXJuIGEubW92ZW1lbnRYO3ZhciBiPWpkO2pkPWEuc2NyZWVuWDtyZXR1cm4gbGQ/XCJtb3VzZW1vdmVcIj09PWEudHlwZT9hLnNjcmVlblgtXG5iOjA6KGxkPSEwLDApfSxtb3ZlbWVudFk6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFlcImluIGEpcmV0dXJuIGEubW92ZW1lbnRZO3ZhciBiPWtkO2tkPWEuc2NyZWVuWTtyZXR1cm4gbWQ/XCJtb3VzZW1vdmVcIj09PWEudHlwZT9hLnNjcmVlblktYjowOihtZD0hMCwwKX19KSxvZD1uZC5leHRlbmQoe3BvaW50ZXJJZDpudWxsLHdpZHRoOm51bGwsaGVpZ2h0Om51bGwscHJlc3N1cmU6bnVsbCx0YW5nZW50aWFsUHJlc3N1cmU6bnVsbCx0aWx0WDpudWxsLHRpbHRZOm51bGwsdHdpc3Q6bnVsbCxwb2ludGVyVHlwZTpudWxsLGlzUHJpbWFyeTpudWxsfSkscGQ9bmQuZXh0ZW5kKHtkYXRhVHJhbnNmZXI6bnVsbH0pLHFkPSRjLmV4dGVuZCh7dG91Y2hlczpudWxsLHRhcmdldFRvdWNoZXM6bnVsbCxjaGFuZ2VkVG91Y2hlczpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOmhkfSkscmQ9RS5leHRlbmQoe3Byb3BlcnR5TmFtZTpudWxsLFxuZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSxzZD1uZC5leHRlbmQoe2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpbiBhPy1hLndoZWVsRGVsdGFYOjB9LGRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjpudWxsLGRlbHRhTW9kZTpudWxsfSksdGQ9W1tcImJsdXJcIixcImJsdXJcIiwwXSxbXCJjYW5jZWxcIixcImNhbmNlbFwiLDBdLFtcImNsaWNrXCIsXCJjbGlja1wiLDBdLFtcImNsb3NlXCIsXCJjbG9zZVwiLDBdLFtcImNvbnRleHRtZW51XCIsXCJjb250ZXh0TWVudVwiLDBdLFtcImNvcHlcIixcImNvcHlcIiwwXSxbXCJjdXRcIixcImN1dFwiLDBdLFtcImF1eGNsaWNrXCIsXCJhdXhDbGlja1wiLDBdLFtcImRibGNsaWNrXCIsXCJkb3VibGVDbGlja1wiLDBdLFtcImRyYWdlbmRcIixcImRyYWdFbmRcIixcbjBdLFtcImRyYWdzdGFydFwiLFwiZHJhZ1N0YXJ0XCIsMF0sW1wiZHJvcFwiLFwiZHJvcFwiLDBdLFtcImZvY3VzXCIsXCJmb2N1c1wiLDBdLFtcImlucHV0XCIsXCJpbnB1dFwiLDBdLFtcImludmFsaWRcIixcImludmFsaWRcIiwwXSxbXCJrZXlkb3duXCIsXCJrZXlEb3duXCIsMF0sW1wia2V5cHJlc3NcIixcImtleVByZXNzXCIsMF0sW1wia2V5dXBcIixcImtleVVwXCIsMF0sW1wibW91c2Vkb3duXCIsXCJtb3VzZURvd25cIiwwXSxbXCJtb3VzZXVwXCIsXCJtb3VzZVVwXCIsMF0sW1wicGFzdGVcIixcInBhc3RlXCIsMF0sW1wicGF1c2VcIixcInBhdXNlXCIsMF0sW1wicGxheVwiLFwicGxheVwiLDBdLFtcInBvaW50ZXJjYW5jZWxcIixcInBvaW50ZXJDYW5jZWxcIiwwXSxbXCJwb2ludGVyZG93blwiLFwicG9pbnRlckRvd25cIiwwXSxbXCJwb2ludGVydXBcIixcInBvaW50ZXJVcFwiLDBdLFtcInJhdGVjaGFuZ2VcIixcInJhdGVDaGFuZ2VcIiwwXSxbXCJyZXNldFwiLFwicmVzZXRcIiwwXSxbXCJzZWVrZWRcIixcInNlZWtlZFwiLDBdLFtcInN1Ym1pdFwiLFwic3VibWl0XCIsMF0sW1widG91Y2hjYW5jZWxcIixcInRvdWNoQ2FuY2VsXCIsXG4wXSxbXCJ0b3VjaGVuZFwiLFwidG91Y2hFbmRcIiwwXSxbXCJ0b3VjaHN0YXJ0XCIsXCJ0b3VjaFN0YXJ0XCIsMF0sW1widm9sdW1lY2hhbmdlXCIsXCJ2b2x1bWVDaGFuZ2VcIiwwXSxbXCJkcmFnXCIsXCJkcmFnXCIsMV0sW1wiZHJhZ2VudGVyXCIsXCJkcmFnRW50ZXJcIiwxXSxbXCJkcmFnZXhpdFwiLFwiZHJhZ0V4aXRcIiwxXSxbXCJkcmFnbGVhdmVcIixcImRyYWdMZWF2ZVwiLDFdLFtcImRyYWdvdmVyXCIsXCJkcmFnT3ZlclwiLDFdLFtcIm1vdXNlbW92ZVwiLFwibW91c2VNb3ZlXCIsMV0sW1wibW91c2VvdXRcIixcIm1vdXNlT3V0XCIsMV0sW1wibW91c2VvdmVyXCIsXCJtb3VzZU92ZXJcIiwxXSxbXCJwb2ludGVybW92ZVwiLFwicG9pbnRlck1vdmVcIiwxXSxbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyT3V0XCIsMV0sW1wicG9pbnRlcm92ZXJcIixcInBvaW50ZXJPdmVyXCIsMV0sW1wic2Nyb2xsXCIsXCJzY3JvbGxcIiwxXSxbXCJ0b2dnbGVcIixcInRvZ2dsZVwiLDFdLFtcInRvdWNobW92ZVwiLFwidG91Y2hNb3ZlXCIsMV0sW1wid2hlZWxcIixcIndoZWVsXCIsMV0sW1wiYWJvcnRcIixcImFib3J0XCIsXG4yXSxbWmIsXCJhbmltYXRpb25FbmRcIiwyXSxbJGIsXCJhbmltYXRpb25JdGVyYXRpb25cIiwyXSxbYWMsXCJhbmltYXRpb25TdGFydFwiLDJdLFtcImNhbnBsYXlcIixcImNhblBsYXlcIiwyXSxbXCJjYW5wbGF5dGhyb3VnaFwiLFwiY2FuUGxheVRocm91Z2hcIiwyXSxbXCJkdXJhdGlvbmNoYW5nZVwiLFwiZHVyYXRpb25DaGFuZ2VcIiwyXSxbXCJlbXB0aWVkXCIsXCJlbXB0aWVkXCIsMl0sW1wiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIiwyXSxbXCJlbmRlZFwiLFwiZW5kZWRcIiwyXSxbXCJlcnJvclwiLFwiZXJyb3JcIiwyXSxbXCJnb3Rwb2ludGVyY2FwdHVyZVwiLFwiZ290UG9pbnRlckNhcHR1cmVcIiwyXSxbXCJsb2FkXCIsXCJsb2FkXCIsMl0sW1wibG9hZGVkZGF0YVwiLFwibG9hZGVkRGF0YVwiLDJdLFtcImxvYWRlZG1ldGFkYXRhXCIsXCJsb2FkZWRNZXRhZGF0YVwiLDJdLFtcImxvYWRzdGFydFwiLFwibG9hZFN0YXJ0XCIsMl0sW1wibG9zdHBvaW50ZXJjYXB0dXJlXCIsXCJsb3N0UG9pbnRlckNhcHR1cmVcIiwyXSxbXCJwbGF5aW5nXCIsXCJwbGF5aW5nXCIsMl0sW1wicHJvZ3Jlc3NcIixcblwicHJvZ3Jlc3NcIiwyXSxbXCJzZWVraW5nXCIsXCJzZWVraW5nXCIsMl0sW1wic3RhbGxlZFwiLFwic3RhbGxlZFwiLDJdLFtcInN1c3BlbmRcIixcInN1c3BlbmRcIiwyXSxbXCJ0aW1ldXBkYXRlXCIsXCJ0aW1lVXBkYXRlXCIsMl0sW2JjLFwidHJhbnNpdGlvbkVuZFwiLDJdLFtcIndhaXRpbmdcIixcIndhaXRpbmdcIiwyXV0sdWQ9e30sdmQ9e30seGQ9MDtmb3IoO3hkPHRkLmxlbmd0aDt4ZCsrKXt2YXIgeWQ9dGRbeGRdLHpkPXlkWzBdLEFkPXlkWzFdLEJkPXlkWzJdLENkPVwib25cIisoQWRbMF0udG9VcHBlckNhc2UoKStBZC5zbGljZSgxKSksRGQ9e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOkNkLGNhcHR1cmVkOkNkK1wiQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W3pkXSxldmVudFByaW9yaXR5OkJkfTt1ZFtBZF09RGQ7dmRbemRdPURkfVxudmFyIEVkPXtldmVudFR5cGVzOnVkLGdldEV2ZW50UHJpb3JpdHk6ZnVuY3Rpb24oYSl7YT12ZFthXTtyZXR1cm4gdm9pZCAwIT09YT9hLmV2ZW50UHJpb3JpdHk6Mn0sZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT12ZFthXTtpZighZSlyZXR1cm4gbnVsbDtzd2l0Y2goYSl7Y2FzZSBcImtleXByZXNzXCI6aWYoMD09PWJkKGMpKXJldHVybiBudWxsO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6YT1pZDticmVhaztjYXNlIFwiYmx1clwiOmNhc2UgXCJmb2N1c1wiOmE9YWQ7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKXJldHVybiBudWxsO2Nhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6YT1uZDticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjphPVxucGQ7YnJlYWs7Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6YT1xZDticmVhaztjYXNlIFpiOmNhc2UgJGI6Y2FzZSBhYzphPVljO2JyZWFrO2Nhc2UgYmM6YT1yZDticmVhaztjYXNlIFwic2Nyb2xsXCI6YT0kYzticmVhaztjYXNlIFwid2hlZWxcIjphPXNkO2JyZWFrO2Nhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJwYXN0ZVwiOmE9WmM7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcnVwXCI6YT1vZDticmVhaztkZWZhdWx0OmE9RX1iPWEuZ2V0UG9vbGVkKGUsYixjLGQpO1NjKGIpO3JldHVybiBifX0sRmQ9cS51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxcbkdkPXEudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5LEhkPUVkLmdldEV2ZW50UHJpb3JpdHksSWQ9MTAsSmQ9W107XG5mdW5jdGlvbiBLZChhKXt2YXIgYj1hLnRhcmdldEluc3QsYz1iO2Rve2lmKCFjKXthLmFuY2VzdG9ycy5wdXNoKGMpO2JyZWFrfXZhciBkPWM7aWYoMz09PWQudGFnKWQ9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlbHNle2Zvcig7ZC5yZXR1cm47KWQ9ZC5yZXR1cm47ZD0zIT09ZC50YWc/bnVsbDpkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvfWlmKCFkKWJyZWFrO2I9Yy50YWc7NSE9PWImJjYhPT1ifHxhLmFuY2VzdG9ycy5wdXNoKGMpO2M9RmMoZCl9d2hpbGUoYyk7Zm9yKGM9MDtjPGEuYW5jZXN0b3JzLmxlbmd0aDtjKyspe2I9YS5hbmNlc3RvcnNbY107dmFyIGU9TWMoYS5uYXRpdmVFdmVudCk7ZD1hLnRvcExldmVsVHlwZTtmb3IodmFyIGY9YS5uYXRpdmVFdmVudCxnPWEuZXZlbnRTeXN0ZW1GbGFncyxoPW51bGwsaz0wO2s8ZWEubGVuZ3RoO2srKyl7dmFyIGw9ZWFba107bCYmKGw9bC5leHRyYWN0RXZlbnRzKGQsYixmLGUsZykpJiYoaD14YShoLGwpKX1CYShoKX19XG52YXIgTGQ9ITA7ZnVuY3Rpb24gRihhLGIpe01kKGIsYSwhMSl9ZnVuY3Rpb24gTWQoYSxiLGMpe3N3aXRjaChIZChiKSl7Y2FzZSAwOnZhciBkPU5kLmJpbmQobnVsbCxiLDEpO2JyZWFrO2Nhc2UgMTpkPU9kLmJpbmQobnVsbCxiLDEpO2JyZWFrO2RlZmF1bHQ6ZD1QZC5iaW5kKG51bGwsYiwxKX1jP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGQsITApOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGQsITEpfWZ1bmN0aW9uIE5kKGEsYixjKXtpYnx8Z2IoKTt2YXIgZD1QZCxlPWliO2liPSEwO3RyeXtmYihkLGEsYixjKX1maW5hbGx5eyhpYj1lKXx8a2IoKX19ZnVuY3Rpb24gT2QoYSxiLGMpe0dkKEZkLFBkLmJpbmQobnVsbCxhLGIsYykpfVxuZnVuY3Rpb24gUWQoYSxiLGMsZCl7aWYoSmQubGVuZ3RoKXt2YXIgZT1KZC5wb3AoKTtlLnRvcExldmVsVHlwZT1hO2UuZXZlbnRTeXN0ZW1GbGFncz1iO2UubmF0aXZlRXZlbnQ9YztlLnRhcmdldEluc3Q9ZDthPWV9ZWxzZSBhPXt0b3BMZXZlbFR5cGU6YSxldmVudFN5c3RlbUZsYWdzOmIsbmF0aXZlRXZlbnQ6Yyx0YXJnZXRJbnN0OmQsYW5jZXN0b3JzOltdfTt0cnl7aWYoYj1LZCxjPWEsamIpYihjLHZvaWQgMCk7ZWxzZXtqYj0hMDt0cnl7aGIoYixjLHZvaWQgMCl9ZmluYWxseXtqYj0hMSxrYigpfX19ZmluYWxseXthLnRvcExldmVsVHlwZT1udWxsLGEubmF0aXZlRXZlbnQ9bnVsbCxhLnRhcmdldEluc3Q9bnVsbCxhLmFuY2VzdG9ycy5sZW5ndGg9MCxKZC5sZW5ndGg8SWQmJkpkLnB1c2goYSl9fVxuZnVuY3Rpb24gUGQoYSxiLGMpe2lmKExkKWlmKDA8bmMubGVuZ3RoJiYtMTx1Yy5pbmRleE9mKGEpKWE9emMobnVsbCxhLGIsYyksbmMucHVzaChhKTtlbHNle3ZhciBkPUhjKGEsYixjKTtudWxsPT09ZD9BYyhhLGMpOi0xPHVjLmluZGV4T2YoYSk/KGE9emMoZCxhLGIsYyksbmMucHVzaChhKSk6RGMoZCxhLGIsYyl8fChBYyhhLGMpLFFkKGEsYixjLG51bGwpKX19ZnVuY3Rpb24gSGMoYSxiLGMpe3ZhciBkPU1jKGMpO2Q9RmMoZCk7aWYobnVsbCE9PWQpe3ZhciBlPWVjKGQpO2lmKG51bGw9PT1lKWQ9bnVsbDtlbHNle3ZhciBmPWUudGFnO2lmKDEzPT09Zil7ZD1mYyhlKTtpZihudWxsIT09ZClyZXR1cm4gZDtkPW51bGx9ZWxzZSBpZigzPT09Zil7aWYoZS5zdGF0ZU5vZGUuaHlkcmF0ZSlyZXR1cm4gMz09PWUudGFnP2Uuc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtkPW51bGx9ZWxzZSBlIT09ZCYmKGQ9bnVsbCl9fVFkKGEsYixjLGQpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gUmQoYSl7aWYoIVlhKXJldHVybiExO2E9XCJvblwiK2E7dmFyIGI9YSBpbiBkb2N1bWVudDtifHwoYj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGIuc2V0QXR0cmlidXRlKGEsXCJyZXR1cm47XCIpLGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIGJbYV0pO3JldHVybiBifXZhciBTZD1uZXcgKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwKTtmdW5jdGlvbiB4YyhhKXt2YXIgYj1TZC5nZXQoYSk7dm9pZCAwPT09YiYmKGI9bmV3IFNldCxTZC5zZXQoYSxiKSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiB5YyhhLGIsYyl7aWYoIWMuaGFzKGEpKXtzd2l0Y2goYSl7Y2FzZSBcInNjcm9sbFwiOk1kKGIsXCJzY3JvbGxcIiwhMCk7YnJlYWs7Y2FzZSBcImZvY3VzXCI6Y2FzZSBcImJsdXJcIjpNZChiLFwiZm9jdXNcIiwhMCk7TWQoYixcImJsdXJcIiwhMCk7Yy5hZGQoXCJibHVyXCIpO2MuYWRkKFwiZm9jdXNcIik7YnJlYWs7Y2FzZSBcImNhbmNlbFwiOmNhc2UgXCJjbG9zZVwiOlJkKGEpJiZNZChiLGEsITApO2JyZWFrO2Nhc2UgXCJpbnZhbGlkXCI6Y2FzZSBcInN1Ym1pdFwiOmNhc2UgXCJyZXNldFwiOmJyZWFrO2RlZmF1bHQ6LTE9PT1kYy5pbmRleE9mKGEpJiZGKGEsYil9Yy5hZGQoYSl9fVxudmFyIFRkPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxcbmZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LFVkPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhUZCkuZm9yRWFjaChmdW5jdGlvbihhKXtVZC5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO1RkW2JdPVRkW2FdfSl9KTtmdW5jdGlvbiBWZChhLGIsYyl7cmV0dXJuIG51bGw9PWJ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwiXCI9PT1iP1wiXCI6Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBifHwwPT09Ynx8VGQuaGFzT3duUHJvcGVydHkoYSkmJlRkW2FdPyhcIlwiK2IpLnRyaW0oKTpiK1wicHhcIn1cbmZ1bmN0aW9uIFdkKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKSxlPVZkKGMsYltjXSxkKTtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIFhkPW4oe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiBZZChhLGIpe2lmKGIpe2lmKFhkW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IodSgxMzcsYSxcIlwiKSk7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl7aWYobnVsbCE9Yi5jaGlsZHJlbil0aHJvdyBFcnJvcih1KDYwKSk7aWYoIShcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJlwiX19odG1sXCJpbiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcih1KDYxKSk7fWlmKG51bGwhPWIuc3R5bGUmJlwib2JqZWN0XCIhPT10eXBlb2YgYi5zdHlsZSl0aHJvdyBFcnJvcih1KDYyLFwiXCIpKTt9fVxuZnVuY3Rpb24gWmQoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fWZ1bmN0aW9uICRkKGEsYil7YT05PT09YS5ub2RlVHlwZXx8MTE9PT1hLm5vZGVUeXBlP2E6YS5vd25lckRvY3VtZW50O3ZhciBjPXhjKGEpO2I9amFbYl07Zm9yKHZhciBkPTA7ZDxiLmxlbmd0aDtkKyspeWMoYltkXSxhLGMpfWZ1bmN0aW9uIGFlKCl7fVxuZnVuY3Rpb24gYmUoYSl7YT1hfHwoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkb2N1bWVudD9kb2N1bWVudDp2b2lkIDApO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYSlyZXR1cm4gbnVsbDt0cnl7cmV0dXJuIGEuYWN0aXZlRWxlbWVudHx8YS5ib2R5fWNhdGNoKGIpe3JldHVybiBhLmJvZHl9fWZ1bmN0aW9uIGNlKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1mdW5jdGlvbiBkZShhLGIpe3ZhciBjPWNlKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPWNlKGMpfX1cbmZ1bmN0aW9uIGVlKGEsYil7cmV0dXJuIGEmJmI/YT09PWI/ITA6YSYmMz09PWEubm9kZVR5cGU/ITE6YiYmMz09PWIubm9kZVR5cGU/ZWUoYSxiLnBhcmVudE5vZGUpOlwiY29udGFpbnNcImluIGE/YS5jb250YWlucyhiKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uPyEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTYpOiExOiExfWZ1bmN0aW9uIGZlKCl7Zm9yKHZhciBhPXdpbmRvdyxiPWJlKCk7YiBpbnN0YW5jZW9mIGEuSFRNTElGcmFtZUVsZW1lbnQ7KXt0cnl7dmFyIGM9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNvbnRlbnRXaW5kb3cubG9jYXRpb24uaHJlZn1jYXRjaChkKXtjPSExfWlmKGMpYT1iLmNvbnRlbnRXaW5kb3c7ZWxzZSBicmVhaztiPWJlKGEuZG9jdW1lbnQpfXJldHVybiBifVxuZnVuY3Rpb24gZ2UoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX12YXIgaGU9XCIkXCIsaWU9XCIvJFwiLGplPVwiJD9cIixrZT1cIiQhXCIsbGU9bnVsbCxtZT1udWxsO2Z1bmN0aW9uIG5lKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6cmV0dXJuISFiLmF1dG9Gb2N1c31yZXR1cm4hMX1cbmZ1bmN0aW9uIG9lKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJvcHRpb25cIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH12YXIgcGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAscWU9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwO2Z1bmN0aW9uIHJlKGEpe2Zvcig7bnVsbCE9YTthPWEubmV4dFNpYmxpbmcpe3ZhciBiPWEubm9kZVR5cGU7aWYoMT09PWJ8fDM9PT1iKWJyZWFrfXJldHVybiBhfVxuZnVuY3Rpb24gc2UoYSl7YT1hLnByZXZpb3VzU2libGluZztmb3IodmFyIGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihjPT09aGV8fGM9PT1rZXx8Yz09PWplKXtpZigwPT09YilyZXR1cm4gYTtiLS19ZWxzZSBjPT09aWUmJmIrK31hPWEucHJldmlvdXNTaWJsaW5nfXJldHVybiBudWxsfXZhciB0ZT1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSx1ZT1cIl9fcmVhY3RJbnRlcm5hbEluc3RhbmNlJFwiK3RlLHZlPVwiX19yZWFjdEV2ZW50SGFuZGxlcnMkXCIrdGUsd2U9XCJfX3JlYWN0Q29udGFpbmVyZSRcIit0ZTtcbmZ1bmN0aW9uIEZjKGEpe3ZhciBiPWFbdWVdO2lmKGIpcmV0dXJuIGI7Zm9yKHZhciBjPWEucGFyZW50Tm9kZTtjOyl7aWYoYj1jW3dlXXx8Y1t1ZV0pe2M9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWIuY2hpbGR8fG51bGwhPT1jJiZudWxsIT09Yy5jaGlsZClmb3IoYT1zZShhKTtudWxsIT09YTspe2lmKGM9YVt1ZV0pcmV0dXJuIGM7YT1zZShhKX1yZXR1cm4gYn1hPWM7Yz1hLnBhcmVudE5vZGV9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQ2MoYSl7YT1hW3VlXXx8YVt3ZV07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnJiYxMyE9PWEudGFnJiYzIT09YS50YWc/bnVsbDphfWZ1bmN0aW9uIHhlKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTt0aHJvdyBFcnJvcih1KDMzKSk7fWZ1bmN0aW9uIHllKGEpe3JldHVybiBhW3ZlXXx8bnVsbH12YXIgemU9bnVsbCxBZT1udWxsLEJlPW51bGw7XG5mdW5jdGlvbiBDZSgpe2lmKEJlKXJldHVybiBCZTt2YXIgYSxiPUFlLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIHplP3plLnZhbHVlOnplLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuIEJlPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9dmFyIERlPUUuZXh0ZW5kKHtkYXRhOm51bGx9KSxFZT1FLmV4dGVuZCh7ZGF0YTpudWxsfSksRmU9WzksMTMsMjcsMzJdLEdlPVlhJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyxIZT1udWxsO1lhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJihIZT1kb2N1bWVudC5kb2N1bWVudE1vZGUpO1xudmFyIEllPVlhJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYhSGUsSmU9WWEmJighR2V8fEhlJiY4PEhlJiYxMT49SGUpLEtlPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLExlPXtiZWZvcmVJbnB1dDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkJlZm9yZUlucHV0XCIsY2FwdHVyZWQ6XCJvbkJlZm9yZUlucHV0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdfSxjb21wb3NpdGlvbkVuZDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uRW5kXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uRW5kQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uZW5kIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblN0YXJ0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25TdGFydFwiLFxuY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25VcGRhdGU6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblVwZGF0ZVwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvblVwZGF0ZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnVwZGF0ZSBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX19LE1lPSExO1xuZnVuY3Rpb24gTmUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT1GZS5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiYmx1clwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIE9lKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIFBlPSExO2Z1bmN0aW9uIFFlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBPZShiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7TWU9ITA7cmV0dXJuIEtlO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PUtlJiZNZT9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBSZShhLGIpe2lmKFBlKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFHZSYmTmUoYSxiKT8oYT1DZSgpLEJlPUFlPXplPW51bGwsUGU9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIEplJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBTZT17ZXZlbnRUeXBlczpMZSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlO2lmKEdlKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOnZhciBmPUxlLmNvbXBvc2l0aW9uU3RhcnQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpmPUxlLmNvbXBvc2l0aW9uRW5kO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6Zj1MZS5jb21wb3NpdGlvblVwZGF0ZTticmVhayBifWY9dm9pZCAwfWVsc2UgUGU/TmUoYSxjKSYmKGY9TGUuY29tcG9zaXRpb25FbmQpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoZj1MZS5jb21wb3NpdGlvblN0YXJ0KTtmPyhKZSYmXCJrb1wiIT09Yy5sb2NhbGUmJihQZXx8ZiE9PUxlLmNvbXBvc2l0aW9uU3RhcnQ/Zj09PUxlLmNvbXBvc2l0aW9uRW5kJiZQZSYmKGU9Q2UoKSk6KHplPWQsQWU9XCJ2YWx1ZVwiaW4gemU/emUudmFsdWU6emUudGV4dENvbnRlbnQsUGU9ITApKSxmPURlLmdldFBvb2xlZChmLFxuYixjLGQpLGU/Zi5kYXRhPWU6KGU9T2UoYyksbnVsbCE9PWUmJihmLmRhdGE9ZSkpLFNjKGYpLGU9Zik6ZT1udWxsOyhhPUllP1FlKGEsYyk6UmUoYSxjKSk/KGI9RWUuZ2V0UG9vbGVkKExlLmJlZm9yZUlucHV0LGIsYyxkKSxiLmRhdGE9YSxTYyhiKSk6Yj1udWxsO3JldHVybiBudWxsPT09ZT9iOm51bGw9PT1iP2U6W2UsYl19fSxUZT17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBVZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIVRlW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1cbnZhciBWZT17Y2hhbmdlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ2hhbmdlXCIsY2FwdHVyZWQ6XCJvbkNoYW5nZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjaGFuZ2UgY2xpY2sgZm9jdXMgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fTtmdW5jdGlvbiBXZShhLGIsYyl7YT1FLmdldFBvb2xlZChWZS5jaGFuZ2UsYSxiLGMpO2EudHlwZT1cImNoYW5nZVwiO2NiKGMpO1NjKGEpO3JldHVybiBhfXZhciBYZT1udWxsLFllPW51bGw7ZnVuY3Rpb24gWmUoYSl7QmEoYSl9ZnVuY3Rpb24gJGUoYSl7dmFyIGI9eGUoYSk7aWYoemIoYikpcmV0dXJuIGF9ZnVuY3Rpb24gYWYoYSxiKXtpZihcImNoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgYmY9ITE7WWEmJihiZj1SZChcImlucHV0XCIpJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpKTtcbmZ1bmN0aW9uIGNmKCl7WGUmJihYZS5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixkZiksWWU9WGU9bnVsbCl9ZnVuY3Rpb24gZGYoYSl7aWYoXCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJiRlKFllKSlpZihhPVdlKFllLGEsTWMoYSkpLGliKUJhKGEpO2Vsc2V7aWI9ITA7dHJ5e2ViKFplLGEpfWZpbmFsbHl7aWI9ITEsa2IoKX19fWZ1bmN0aW9uIGVmKGEsYixjKXtcImZvY3VzXCI9PT1hPyhjZigpLFhlPWIsWWU9YyxYZS5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixkZikpOlwiYmx1clwiPT09YSYmY2YoKX1mdW5jdGlvbiBmZihhKXtpZihcInNlbGVjdGlvbmNoYW5nZVwiPT09YXx8XCJrZXl1cFwiPT09YXx8XCJrZXlkb3duXCI9PT1hKXJldHVybiAkZShZZSl9ZnVuY3Rpb24gZ2YoYSxiKXtpZihcImNsaWNrXCI9PT1hKXJldHVybiAkZShiKX1mdW5jdGlvbiBoZihhLGIpe2lmKFwiaW5wdXRcIj09PWF8fFwiY2hhbmdlXCI9PT1hKXJldHVybiAkZShiKX1cbnZhciBqZj17ZXZlbnRUeXBlczpWZSxfaXNJbnB1dEV2ZW50U3VwcG9ydGVkOmJmLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9Yj94ZShiKTp3aW5kb3csZj1lLm5vZGVOYW1lJiZlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7aWYoXCJzZWxlY3RcIj09PWZ8fFwiaW5wdXRcIj09PWYmJlwiZmlsZVwiPT09ZS50eXBlKXZhciBnPWFmO2Vsc2UgaWYoVWUoZSkpaWYoYmYpZz1oZjtlbHNle2c9ZmY7dmFyIGg9ZWZ9ZWxzZShmPWUubm9kZU5hbWUpJiZcImlucHV0XCI9PT1mLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1lLnR5cGV8fFwicmFkaW9cIj09PWUudHlwZSkmJihnPWdmKTtpZihnJiYoZz1nKGEsYikpKXJldHVybiBXZShnLGMsZCk7aCYmaChhLGUsYik7XCJibHVyXCI9PT1hJiYoYT1lLl93cmFwcGVyU3RhdGUpJiZhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1lLnR5cGUmJkZiKGUsXCJudW1iZXJcIixlLnZhbHVlKX19LGtmPXttb3VzZUVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUVudGVyXCIsXG5kZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0sbW91c2VMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VMZWF2ZVwiLGRlcGVuZGVuY2llczpbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdfSxwb2ludGVyRW50ZXI6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvblBvaW50ZXJFbnRlclwiLGRlcGVuZGVuY2llczpbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXX0scG9pbnRlckxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyTGVhdmVcIixkZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19fSxsZixtZj17ZXZlbnRUeXBlczprZixleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9XCJtb3VzZW92ZXJcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEsZz1cIm1vdXNlb3V0XCI9PT1hfHxcInBvaW50ZXJvdXRcIj09PWE7aWYoZiYmMD09PShlJjMyKSYmKGMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCl8fCFnJiYhZilyZXR1cm4gbnVsbDtcbmU9ZC53aW5kb3c9PT1kP2Q6KGU9ZC5vd25lckRvY3VtZW50KT9lLmRlZmF1bHRWaWV3fHxlLnBhcmVudFdpbmRvdzp3aW5kb3c7aWYoZyl7aWYoZz1iLGI9KGI9Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCk/RmMoYik6bnVsbCxudWxsIT09YiYmKGY9ZWMoYiksYiE9PWZ8fDUhPT1iLnRhZyYmNiE9PWIudGFnKSliPW51bGx9ZWxzZSBnPW51bGw7aWYoZz09PWIpcmV0dXJuIG51bGw7aWYoXCJtb3VzZW91dFwiPT09YXx8XCJtb3VzZW92ZXJcIj09PWEpe3ZhciBoPW5kO3ZhciBrPWtmLm1vdXNlTGVhdmU7dmFyIGw9a2YubW91c2VFbnRlcjt2YXIgbT1cIm1vdXNlXCJ9ZWxzZSBpZihcInBvaW50ZXJvdXRcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEpaD1vZCxrPWtmLnBvaW50ZXJMZWF2ZSxsPWtmLnBvaW50ZXJFbnRlcixtPVwicG9pbnRlclwiO2E9bnVsbD09Zz9lOnhlKGcpO2U9bnVsbD09Yj9lOnhlKGIpO2s9aC5nZXRQb29sZWQoayxnLGMsZCk7ay50eXBlPW0rXCJsZWF2ZVwiO2sudGFyZ2V0PVxuYTtrLnJlbGF0ZWRUYXJnZXQ9ZTtkPWguZ2V0UG9vbGVkKGwsYixjLGQpO2QudHlwZT1tK1wiZW50ZXJcIjtkLnRhcmdldD1lO2QucmVsYXRlZFRhcmdldD1hO2g9ZzttPWI7aWYoaCYmbSlhOntsPWg7YT1tO2c9MDtmb3IoYj1sO2I7Yj1OYyhiKSlnKys7Yj0wO2ZvcihlPWE7ZTtlPU5jKGUpKWIrKztmb3IoOzA8Zy1iOylsPU5jKGwpLGctLTtmb3IoOzA8Yi1nOylhPU5jKGEpLGItLTtmb3IoO2ctLTspe2lmKGw9PT1hfHxsPT09YS5hbHRlcm5hdGUpYnJlYWsgYTtsPU5jKGwpO2E9TmMoYSl9bD1udWxsfWVsc2UgbD1udWxsO2E9bDtmb3IobD1bXTtoJiZoIT09YTspe2c9aC5hbHRlcm5hdGU7aWYobnVsbCE9PWcmJmc9PT1hKWJyZWFrO2wucHVzaChoKTtoPU5jKGgpfWZvcihoPVtdO20mJm0hPT1hOyl7Zz1tLmFsdGVybmF0ZTtpZihudWxsIT09ZyYmZz09PWEpYnJlYWs7aC5wdXNoKG0pO209TmMobSl9Zm9yKG09MDttPGwubGVuZ3RoO20rKylRYyhsW21dLFwiYnViYmxlZFwiLGspO2ZvcihtPVxuaC5sZW5ndGg7MDxtLS07KVFjKGhbbV0sXCJjYXB0dXJlZFwiLGQpO2lmKGM9PT1sZilyZXR1cm4gbGY9bnVsbCxba107bGY9YztyZXR1cm5bayxkXX19O2Z1bmN0aW9uIG5mKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgb2Y9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6bmYscGY9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtmdW5jdGlvbiBxZihhLGIpe2lmKG9mKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKylpZighcGYuY2FsbChiLGNbZF0pfHwhb2YoYVtjW2RdXSxiW2NbZF1dKSlyZXR1cm4hMTtyZXR1cm4hMH1cbnZhciByZj1ZYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLHNmPXtzZWxlY3Q6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25TZWxlY3RcIixjYXB0dXJlZDpcIm9uU2VsZWN0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXMga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fSx0Zj1udWxsLHVmPW51bGwsdmY9bnVsbCx3Zj0hMTtcbmZ1bmN0aW9uIHhmKGEsYil7dmFyIGM9Yi53aW5kb3c9PT1iP2IuZG9jdW1lbnQ6OT09PWIubm9kZVR5cGU/YjpiLm93bmVyRG9jdW1lbnQ7aWYod2Z8fG51bGw9PXRmfHx0ZiE9PWJlKGMpKXJldHVybiBudWxsO2M9dGY7XCJzZWxlY3Rpb25TdGFydFwiaW4gYyYmZ2UoYyk/Yz17c3RhcnQ6Yy5zZWxlY3Rpb25TdGFydCxlbmQ6Yy5zZWxlY3Rpb25FbmR9OihjPShjLm93bmVyRG9jdW1lbnQmJmMub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxjPXthbmNob3JOb2RlOmMuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6Yy5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmMuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmMuZm9jdXNPZmZzZXR9KTtyZXR1cm4gdmYmJnFmKHZmLGMpP251bGw6KHZmPWMsYT1FLmdldFBvb2xlZChzZi5zZWxlY3QsdWYsYSxiKSxhLnR5cGU9XCJzZWxlY3RcIixhLnRhcmdldD10ZixTYyhhKSxhKX1cbnZhciB5Zj17ZXZlbnRUeXBlczpzZixleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWQud2luZG93PT09ZD9kLmRvY3VtZW50Ojk9PT1kLm5vZGVUeXBlP2Q6ZC5vd25lckRvY3VtZW50LGY7aWYoIShmPSFlKSl7YTp7ZT14YyhlKTtmPWphLm9uU2VsZWN0O2Zvcih2YXIgZz0wO2c8Zi5sZW5ndGg7ZysrKWlmKCFlLmhhcyhmW2ddKSl7ZT0hMTticmVhayBhfWU9ITB9Zj0hZX1pZihmKXJldHVybiBudWxsO2U9Yj94ZShiKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c1wiOmlmKFVlKGUpfHxcInRydWVcIj09PWUuY29udGVudEVkaXRhYmxlKXRmPWUsdWY9Yix2Zj1udWxsO2JyZWFrO2Nhc2UgXCJibHVyXCI6dmY9dWY9dGY9bnVsbDticmVhaztjYXNlIFwibW91c2Vkb3duXCI6d2Y9ITA7YnJlYWs7Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwiZHJhZ2VuZFwiOnJldHVybiB3Zj0hMSx4ZihjLGQpO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihyZilicmVhaztcbmNhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6cmV0dXJuIHhmKGMsZCl9cmV0dXJuIG51bGx9fTtDYS5pbmplY3RFdmVudFBsdWdpbk9yZGVyKFwiUmVzcG9uZGVyRXZlbnRQbHVnaW4gU2ltcGxlRXZlbnRQbHVnaW4gRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIENoYW5nZUV2ZW50UGx1Z2luIFNlbGVjdEV2ZW50UGx1Z2luIEJlZm9yZUlucHV0RXZlbnRQbHVnaW5cIi5zcGxpdChcIiBcIikpO3ZhciB6Zj1DYztzYT15ZTt1YT16Zjt2YT14ZTtDYS5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWUoe1NpbXBsZUV2ZW50UGx1Z2luOkVkLEVudGVyTGVhdmVFdmVudFBsdWdpbjptZixDaGFuZ2VFdmVudFBsdWdpbjpqZixTZWxlY3RFdmVudFBsdWdpbjp5ZixCZWZvcmVJbnB1dEV2ZW50UGx1Z2luOlNlfSk7bmV3IFNldDt2YXIgQWY9W10sQmY9LTE7ZnVuY3Rpb24gRyhhKXswPkJmfHwoYS5jdXJyZW50PUFmW0JmXSxBZltCZl09bnVsbCxCZi0tKX1cbmZ1bmN0aW9uIEkoYSxiKXtCZisrO0FmW0JmXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9dmFyIENmPXt9LEo9e2N1cnJlbnQ6Q2Z9LEs9e2N1cnJlbnQ6ITF9LERmPUNmO2Z1bmN0aW9uIEVmKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gQ2Y7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9ZnVuY3Rpb24gTChhKXthPWEuY2hpbGRDb250ZXh0VHlwZXM7cmV0dXJuIG51bGwhPT1hJiZ2b2lkIDAhPT1hfVxuZnVuY3Rpb24gRmYoYSl7RyhLLGEpO0coSixhKX1mdW5jdGlvbiBHZihhKXtHKEssYSk7RyhKLGEpfWZ1bmN0aW9uIEhmKGEsYixjKXtpZihKLmN1cnJlbnQhPT1DZil0aHJvdyBFcnJvcih1KDE2OCkpO0koSixiLGEpO0koSyxjLGEpfWZ1bmN0aW9uIElmKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTthPWIuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBjO2Q9ZC5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gZClpZighKGUgaW4gYSkpdGhyb3cgRXJyb3IodSgxMDgsV2EoYil8fFwiVW5rbm93blwiLGUpKTtyZXR1cm4gbih7fSxjLHt9LGQpfWZ1bmN0aW9uIEpmKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2I9YiYmYi5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8Q2Y7RGY9Si5jdXJyZW50O0koSixiLGEpO0koSyxLLmN1cnJlbnQsYSk7cmV0dXJuITB9XG5mdW5jdGlvbiBLZihhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoIWQpdGhyb3cgRXJyb3IodSgxNjkpKTtjPyhiPUlmKGEsYixEZiksZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1iLEcoSyxhKSxHKEosYSksSShKLGIsYSkpOkcoSyxhKTtJKEssYyxhKX1cbnZhciBMZj1xLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSxNZj1xLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2ssTmY9cS51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayxPZj1xLnVuc3RhYmxlX3Nob3VsZFlpZWxkLFBmPXEudW5zdGFibGVfcmVxdWVzdFBhaW50LFFmPXEudW5zdGFibGVfbm93LFJmPXEudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwsU2Y9cS51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSxUZj1xLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LFVmPXEudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksVmY9cS51bnN0YWJsZV9Mb3dQcmlvcml0eSxXZj1xLnVuc3RhYmxlX0lkbGVQcmlvcml0eSxYZj17fSxZZj12b2lkIDAhPT1QZj9QZjpmdW5jdGlvbigpe30sWmY9bnVsbCwkZj1udWxsLGFnPSExLGJnPVFmKCksY2c9MUU0PmJnP1FmOmZ1bmN0aW9uKCl7cmV0dXJuIFFmKCktYmd9O1xuZnVuY3Rpb24gZGcoKXtzd2l0Y2goUmYoKSl7Y2FzZSBTZjpyZXR1cm4gOTk7Y2FzZSBUZjpyZXR1cm4gOTg7Y2FzZSBVZjpyZXR1cm4gOTc7Y2FzZSBWZjpyZXR1cm4gOTY7Y2FzZSBXZjpyZXR1cm4gOTU7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDMzMikpO319ZnVuY3Rpb24gZWcoYSl7c3dpdGNoKGEpe2Nhc2UgOTk6cmV0dXJuIFNmO2Nhc2UgOTg6cmV0dXJuIFRmO2Nhc2UgOTc6cmV0dXJuIFVmO2Nhc2UgOTY6cmV0dXJuIFZmO2Nhc2UgOTU6cmV0dXJuIFdmO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgzMzIpKTt9fWZ1bmN0aW9uIGZnKGEsYil7YT1lZyhhKTtyZXR1cm4gTGYoYSxiKX1mdW5jdGlvbiBnZyhhLGIsYyl7YT1lZyhhKTtyZXR1cm4gTWYoYSxiLGMpfWZ1bmN0aW9uIGhnKGEpe251bGw9PT1aZj8oWmY9W2FdLCRmPU1mKFNmLGlnKSk6WmYucHVzaChhKTtyZXR1cm4gWGZ9ZnVuY3Rpb24gamcoKXtpZihudWxsIT09JGYpe3ZhciBhPSRmOyRmPW51bGw7TmYoYSl9aWcoKX1cbmZ1bmN0aW9uIGlnKCl7aWYoIWFnJiZudWxsIT09WmYpe2FnPSEwO3ZhciBhPTA7dHJ5e3ZhciBiPVpmO2ZnKDk5LGZ1bmN0aW9uKCl7Zm9yKDthPGIubGVuZ3RoO2ErKyl7dmFyIGM9YlthXTtkbyBjPWMoITApO3doaWxlKG51bGwhPT1jKX19KTtaZj1udWxsfWNhdGNoKGMpe3Rocm93IG51bGwhPT1aZiYmKFpmPVpmLnNsaWNlKGErMSkpLE1mKFNmLGpnKSxjO31maW5hbGx5e2FnPSExfX19dmFyIGtnPTM7ZnVuY3Rpb24gbGcoYSxiLGMpe2MvPTEwO3JldHVybiAxMDczNzQxODIxLSgoKDEwNzM3NDE4MjEtYStiLzEwKS9jfDApKzEpKmN9ZnVuY3Rpb24gbWcoYSxiKXtpZihhJiZhLmRlZmF1bHRQcm9wcyl7Yj1uKHt9LGIpO2E9YS5kZWZhdWx0UHJvcHM7Zm9yKHZhciBjIGluIGEpdm9pZCAwPT09YltjXSYmKGJbY109YVtjXSl9cmV0dXJuIGJ9dmFyIG5nPXtjdXJyZW50Om51bGx9LG9nPW51bGwscGc9bnVsbCxxZz1udWxsO2Z1bmN0aW9uIHJnKCl7cWc9cGc9b2c9bnVsbH1cbmZ1bmN0aW9uIHNnKGEsYil7dmFyIGM9YS50eXBlLl9jb250ZXh0O0kobmcsYy5fY3VycmVudFZhbHVlLGEpO2MuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIHRnKGEpe3ZhciBiPW5nLmN1cnJlbnQ7RyhuZyxhKTthLnR5cGUuX2NvbnRleHQuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIHVnKGEsYil7Zm9yKDtudWxsIT09YTspe3ZhciBjPWEuYWx0ZXJuYXRlO2lmKGEuY2hpbGRFeHBpcmF0aW9uVGltZTxiKWEuY2hpbGRFeHBpcmF0aW9uVGltZT1iLG51bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGMuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtlbHNlIGlmKG51bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiljLmNoaWxkRXhwaXJhdGlvblRpbWU9YjtlbHNlIGJyZWFrO2E9YS5yZXR1cm59fVxuZnVuY3Rpb24gdmcoYSxiKXtvZz1hO3FnPXBnPW51bGw7YT1hLmRlcGVuZGVuY2llcztudWxsIT09YSYmbnVsbCE9PWEuZmlyc3RDb250ZXh0JiYoYS5leHBpcmF0aW9uVGltZT49YiYmKHdnPSEwKSxhLmZpcnN0Q29udGV4dD1udWxsKX1mdW5jdGlvbiB4ZyhhLGIpe2lmKHFnIT09YSYmITEhPT1iJiYwIT09Yil7aWYoXCJudW1iZXJcIiE9PXR5cGVvZiBifHwxMDczNzQxODIzPT09YilxZz1hLGI9MTA3Mzc0MTgyMztiPXtjb250ZXh0OmEsb2JzZXJ2ZWRCaXRzOmIsbmV4dDpudWxsfTtpZihudWxsPT09cGcpe2lmKG51bGw9PT1vZyl0aHJvdyBFcnJvcih1KDMwOCkpO3BnPWI7b2cuZGVwZW5kZW5jaWVzPXtleHBpcmF0aW9uVGltZTowLGZpcnN0Q29udGV4dDpiLHJlc3BvbmRlcnM6bnVsbH19ZWxzZSBwZz1wZy5uZXh0PWJ9cmV0dXJuIGEuX2N1cnJlbnRWYWx1ZX12YXIgeWc9ITE7XG5mdW5jdGlvbiB6ZyhhKXtyZXR1cm57YmFzZVN0YXRlOmEsZmlyc3RVcGRhdGU6bnVsbCxsYXN0VXBkYXRlOm51bGwsZmlyc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGxhc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGZpcnN0RWZmZWN0Om51bGwsbGFzdEVmZmVjdDpudWxsLGZpcnN0Q2FwdHVyZWRFZmZlY3Q6bnVsbCxsYXN0Q2FwdHVyZWRFZmZlY3Q6bnVsbH19ZnVuY3Rpb24gQWcoYSl7cmV0dXJue2Jhc2VTdGF0ZTphLmJhc2VTdGF0ZSxmaXJzdFVwZGF0ZTphLmZpcnN0VXBkYXRlLGxhc3RVcGRhdGU6YS5sYXN0VXBkYXRlLGZpcnN0Q2FwdHVyZWRVcGRhdGU6bnVsbCxsYXN0Q2FwdHVyZWRVcGRhdGU6bnVsbCxmaXJzdEVmZmVjdDpudWxsLGxhc3RFZmZlY3Q6bnVsbCxmaXJzdENhcHR1cmVkRWZmZWN0Om51bGwsbGFzdENhcHR1cmVkRWZmZWN0Om51bGx9fVxuZnVuY3Rpb24gQmcoYSxiKXtyZXR1cm57ZXhwaXJhdGlvblRpbWU6YSxzdXNwZW5zZUNvbmZpZzpiLHRhZzowLHBheWxvYWQ6bnVsbCxjYWxsYmFjazpudWxsLG5leHQ6bnVsbCxuZXh0RWZmZWN0Om51bGx9fWZ1bmN0aW9uIENnKGEsYil7bnVsbD09PWEubGFzdFVwZGF0ZT9hLmZpcnN0VXBkYXRlPWEubGFzdFVwZGF0ZT1iOihhLmxhc3RVcGRhdGUubmV4dD1iLGEubGFzdFVwZGF0ZT1iKX1cbmZ1bmN0aW9uIERnKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7aWYobnVsbD09PWMpe3ZhciBkPWEudXBkYXRlUXVldWU7dmFyIGU9bnVsbDtudWxsPT09ZCYmKGQ9YS51cGRhdGVRdWV1ZT16ZyhhLm1lbW9pemVkU3RhdGUpKX1lbHNlIGQ9YS51cGRhdGVRdWV1ZSxlPWMudXBkYXRlUXVldWUsbnVsbD09PWQ/bnVsbD09PWU/KGQ9YS51cGRhdGVRdWV1ZT16ZyhhLm1lbW9pemVkU3RhdGUpLGU9Yy51cGRhdGVRdWV1ZT16ZyhjLm1lbW9pemVkU3RhdGUpKTpkPWEudXBkYXRlUXVldWU9QWcoZSk6bnVsbD09PWUmJihlPWMudXBkYXRlUXVldWU9QWcoZCkpO251bGw9PT1lfHxkPT09ZT9DZyhkLGIpOm51bGw9PT1kLmxhc3RVcGRhdGV8fG51bGw9PT1lLmxhc3RVcGRhdGU/KENnKGQsYiksQ2coZSxiKSk6KENnKGQsYiksZS5sYXN0VXBkYXRlPWIpfVxuZnVuY3Rpb24gRWcoYSxiKXt2YXIgYz1hLnVwZGF0ZVF1ZXVlO2M9bnVsbD09PWM/YS51cGRhdGVRdWV1ZT16ZyhhLm1lbW9pemVkU3RhdGUpOkZnKGEsYyk7bnVsbD09PWMubGFzdENhcHR1cmVkVXBkYXRlP2MuZmlyc3RDYXB0dXJlZFVwZGF0ZT1jLmxhc3RDYXB0dXJlZFVwZGF0ZT1iOihjLmxhc3RDYXB0dXJlZFVwZGF0ZS5uZXh0PWIsYy5sYXN0Q2FwdHVyZWRVcGRhdGU9Yil9ZnVuY3Rpb24gRmcoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmYj09PWMudXBkYXRlUXVldWUmJihiPWEudXBkYXRlUXVldWU9QWcoYikpO3JldHVybiBifVxuZnVuY3Rpb24gR2coYSxiLGMsZCxlLGYpe3N3aXRjaChjLnRhZyl7Y2FzZSAxOnJldHVybiBhPWMucGF5bG9hZCxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hLmNhbGwoZixkLGUpOmE7Y2FzZSAzOmEuZWZmZWN0VGFnPWEuZWZmZWN0VGFnJi00MDk3fDY0O2Nhc2UgMDphPWMucGF5bG9hZDtlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EuY2FsbChmLGQsZSk6YTtpZihudWxsPT09ZXx8dm9pZCAwPT09ZSlicmVhaztyZXR1cm4gbih7fSxkLGUpO2Nhc2UgMjp5Zz0hMH1yZXR1cm4gZH1cbmZ1bmN0aW9uIEhnKGEsYixjLGQsZSl7eWc9ITE7Yj1GZyhhLGIpO2Zvcih2YXIgZj1iLmJhc2VTdGF0ZSxnPW51bGwsaD0wLGs9Yi5maXJzdFVwZGF0ZSxsPWY7bnVsbCE9PWs7KXt2YXIgbT1rLmV4cGlyYXRpb25UaW1lO208ZT8obnVsbD09PWcmJihnPWssZj1sKSxoPG0mJihoPW0pKTooSWcobSxrLnN1c3BlbnNlQ29uZmlnKSxsPUdnKGEsYixrLGwsYyxkKSxudWxsIT09ay5jYWxsYmFjayYmKGEuZWZmZWN0VGFnfD0zMixrLm5leHRFZmZlY3Q9bnVsbCxudWxsPT09Yi5sYXN0RWZmZWN0P2IuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWs6KGIubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWssYi5sYXN0RWZmZWN0PWspKSk7az1rLm5leHR9bT1udWxsO2ZvcihrPWIuZmlyc3RDYXB0dXJlZFVwZGF0ZTtudWxsIT09azspe3ZhciBDPWsuZXhwaXJhdGlvblRpbWU7QzxlPyhudWxsPT09bSYmKG09ayxudWxsPT09ZyYmKGY9bCkpLGg8QyYmKGg9QykpOihsPUdnKGEsYixrLGwsYyxkKSxudWxsIT09XG5rLmNhbGxiYWNrJiYoYS5lZmZlY3RUYWd8PTMyLGsubmV4dEVmZmVjdD1udWxsLG51bGw9PT1iLmxhc3RDYXB0dXJlZEVmZmVjdD9iLmZpcnN0Q2FwdHVyZWRFZmZlY3Q9Yi5sYXN0Q2FwdHVyZWRFZmZlY3Q9azooYi5sYXN0Q2FwdHVyZWRFZmZlY3QubmV4dEVmZmVjdD1rLGIubGFzdENhcHR1cmVkRWZmZWN0PWspKSk7az1rLm5leHR9bnVsbD09PWcmJihiLmxhc3RVcGRhdGU9bnVsbCk7bnVsbD09PW0/Yi5sYXN0Q2FwdHVyZWRVcGRhdGU9bnVsbDphLmVmZmVjdFRhZ3w9MzI7bnVsbD09PWcmJm51bGw9PT1tJiYoZj1sKTtiLmJhc2VTdGF0ZT1mO2IuZmlyc3RVcGRhdGU9ZztiLmZpcnN0Q2FwdHVyZWRVcGRhdGU9bTtKZyhoKTthLmV4cGlyYXRpb25UaW1lPWg7YS5tZW1vaXplZFN0YXRlPWx9XG5mdW5jdGlvbiBLZyhhLGIsYyl7bnVsbCE9PWIuZmlyc3RDYXB0dXJlZFVwZGF0ZSYmKG51bGwhPT1iLmxhc3RVcGRhdGUmJihiLmxhc3RVcGRhdGUubmV4dD1iLmZpcnN0Q2FwdHVyZWRVcGRhdGUsYi5sYXN0VXBkYXRlPWIubGFzdENhcHR1cmVkVXBkYXRlKSxiLmZpcnN0Q2FwdHVyZWRVcGRhdGU9Yi5sYXN0Q2FwdHVyZWRVcGRhdGU9bnVsbCk7TGcoYi5maXJzdEVmZmVjdCxjKTtiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1udWxsO0xnKGIuZmlyc3RDYXB0dXJlZEVmZmVjdCxjKTtiLmZpcnN0Q2FwdHVyZWRFZmZlY3Q9Yi5sYXN0Q2FwdHVyZWRFZmZlY3Q9bnVsbH1mdW5jdGlvbiBMZyhhLGIpe2Zvcig7bnVsbCE9PWE7KXt2YXIgYz1hLmNhbGxiYWNrO2lmKG51bGwhPT1jKXthLmNhbGxiYWNrPW51bGw7dmFyIGQ9YjtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgYyl0aHJvdyBFcnJvcih1KDE5MSxjKSk7Yy5jYWxsKGQpfWE9YS5uZXh0RWZmZWN0fX1cbnZhciBNZz1FYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxOZz0obmV3IGFhLkNvbXBvbmVudCkucmVmcztmdW5jdGlvbiBPZyhhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6bih7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jO2Q9YS51cGRhdGVRdWV1ZTtudWxsIT09ZCYmMD09PWEuZXhwaXJhdGlvblRpbWUmJihkLmJhc2VTdGF0ZT1jKX1cbnZhciBTZz17aXNNb3VudGVkOmZ1bmN0aW9uKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxGaWJlcik/ZWMoYSk9PT1hOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPVBnKCksZT1NZy5zdXNwZW5zZTtkPVFnKGQsYSxlKTtlPUJnKGQsZSk7ZS5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihlLmNhbGxiYWNrPWMpO0RnKGEsZSk7UmcoYSxkKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGQ9UGcoKSxlPU1nLnN1c3BlbnNlO2Q9UWcoZCxhLGUpO2U9QmcoZCxlKTtlLnRhZz0xO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTtEZyhhLGUpO1JnKGEsZCl9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihhLGIpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBjPVBnKCksZD1NZy5zdXNwZW5zZTtcbmM9UWcoYyxhLGQpO2Q9QmcoYyxkKTtkLnRhZz0yO3ZvaWQgMCE9PWImJm51bGwhPT1iJiYoZC5jYWxsYmFjaz1iKTtEZyhhLGQpO1JnKGEsYyl9fTtmdW5jdGlvbiBUZyhhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFxZihjLGQpfHwhcWYoZSxmKTohMH1cbmZ1bmN0aW9uIFVnKGEsYixjKXt2YXIgZD0hMSxlPUNmO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPXhnKGYpOihlPUwoYik/RGY6Si5jdXJyZW50LGQ9Yi5jb250ZXh0VHlwZXMsZj0oZD1udWxsIT09ZCYmdm9pZCAwIT09ZCk/RWYoYSxlKTpDZik7Yj1uZXcgYihjLGYpO2EubWVtb2l6ZWRTdGF0ZT1udWxsIT09Yi5zdGF0ZSYmdm9pZCAwIT09Yi5zdGF0ZT9iLnN0YXRlOm51bGw7Yi51cGRhdGVyPVNnO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbEZpYmVyPWE7ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIFZnKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZTZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIFdnKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlO2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9Tmc7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2UuY29udGV4dD14ZyhmKTooZj1MKGIpP0RmOkouY3VycmVudCxlLmNvbnRleHQ9RWYoYSxmKSk7Zj1hLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiYoSGcoYSxmLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7Zj1iLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKE9nKGEsYixmLGMpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT1cbnR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudHx8KGI9ZS5zdGF0ZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYiE9PWUuc3RhdGUmJlNnLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLGY9YS51cGRhdGVRdWV1ZSxudWxsIT09ZiYmKEhnKGEsZixjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZWZmZWN0VGFnfD00KX12YXIgWGc9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIFlnKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjtpZihjKXtpZigxIT09Yy50YWcpdGhyb3cgRXJyb3IodSgzMDkpKTt2YXIgZD1jLnN0YXRlTm9kZX1pZighZCl0aHJvdyBFcnJvcih1KDE0NyxhKSk7dmFyIGU9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWUpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZC5yZWZzO2I9PT1OZyYmKGI9ZC5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2IuX3N0cmluZ1JlZj1lO3JldHVybiBifWlmKFwic3RyaW5nXCIhPT10eXBlb2YgYSl0aHJvdyBFcnJvcih1KDI4NCkpO2lmKCFjLl9vd25lcil0aHJvdyBFcnJvcih1KDI5MCxhKSk7fXJldHVybiBhfVxuZnVuY3Rpb24gWmcoYSxiKXtpZihcInRleHRhcmVhXCIhPT1hLnR5cGUpdGhyb3cgRXJyb3IodSgzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIsXCJcIikpO31cbmZ1bmN0aW9uICRnKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmxhc3RFZmZlY3Q7bnVsbCE9PWQ/KGQubmV4dEVmZmVjdD1jLGIubGFzdEVmZmVjdD1jKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1jO2MubmV4dEVmZmVjdD1udWxsO2MuZWZmZWN0VGFnPTh9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiLGMpe2E9YWgoYSxiLGMpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5lZmZlY3RUYWc9XG4yLGMpOmQ7Yi5lZmZlY3RUYWc9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZWZmZWN0VGFnPTIpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj1iaChjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYyxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIuZWxlbWVudFR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMsZCksZC5yZWY9WWcoYSxiLGMpLGQucmV0dXJuPWEsZDtkPWNoKGMudHlwZSxjLmtleSxjLnByb3BzLG51bGwsYS5tb2RlLGQpO2QucmVmPVlnKGEsYixjKTtkLnJldHVybj1hO3JldHVybiBkfWZ1bmN0aW9uIGwoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1cbmMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9ZGgoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdLGQpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbShhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9ZWgoYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIEMoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPWJoKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIEdhOnJldHVybiBjPWNoKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLGMucmVmPVlnKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSBIYTpyZXR1cm4gYj1kaChiLGEubW9kZSxjKSxiLnJldHVybj1hLGJ9aWYoWGcoYil8fFxuVWEoYikpcmV0dXJuIGI9ZWgoYixhLm1vZGUsYyxudWxsKSxiLnJldHVybj1hLGI7WmcoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB5KGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIEdhOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09SWE/bShhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmsoYSxiLGMsZCk6bnVsbDtjYXNlIEhhOnJldHVybiBjLmtleT09PWU/bChhLGIsYyxkKTpudWxsfWlmKFhnKGMpfHxVYShjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDptKGEsYixjLGQsbnVsbCk7WmcoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBIKGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9XG5hLmdldChjKXx8bnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2UgR2E6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGQudHlwZT09PUlhP20oYixhLGQucHJvcHMuY2hpbGRyZW4sZSxkLmtleSk6ayhiLGEsZCxlKTtjYXNlIEhhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpfWlmKFhnKGQpfHxVYShkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxtKGIsYSxkLGUsbnVsbCk7WmcoYixkKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB6KGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLG09bnVsbCxyPWcseD1nPTAsQT1udWxsO251bGwhPT1yJiZ4PGgubGVuZ3RoO3grKyl7ci5pbmRleD54PyhBPXIscj1udWxsKTpBPXIuc2libGluZzt2YXIgcD15KGUscixoW3hdLGspO2lmKG51bGw9PT1wKXtudWxsPT09ciYmKHI9QSk7YnJlYWt9YSYmXG5yJiZudWxsPT09cC5hbHRlcm5hdGUmJmIoZSxyKTtnPWYocCxnLHgpO251bGw9PT1tP2w9cDptLnNpYmxpbmc9cDttPXA7cj1BfWlmKHg9PT1oLmxlbmd0aClyZXR1cm4gYyhlLHIpLGw7aWYobnVsbD09PXIpe2Zvcig7eDxoLmxlbmd0aDt4Kyspcj1DKGUsaFt4XSxrKSxudWxsIT09ciYmKGc9ZihyLGcseCksbnVsbD09PW0/bD1yOm0uc2libGluZz1yLG09cik7cmV0dXJuIGx9Zm9yKHI9ZChlLHIpO3g8aC5sZW5ndGg7eCsrKUE9SChyLGUseCxoW3hdLGspLG51bGwhPT1BJiYoYSYmbnVsbCE9PUEuYWx0ZXJuYXRlJiZyLmRlbGV0ZShudWxsPT09QS5rZXk/eDpBLmtleSksZz1mKEEsZyx4KSxudWxsPT09bT9sPUE6bS5zaWJsaW5nPUEsbT1BKTthJiZyLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfWZ1bmN0aW9uIHRhKGUsZyxoLGspe3ZhciBsPVVhKGgpO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBsKXRocm93IEVycm9yKHUoMTUwKSk7aD1sLmNhbGwoaCk7XG5pZihudWxsPT1oKXRocm93IEVycm9yKHUoMTUxKSk7Zm9yKHZhciBtPWw9bnVsbCxyPWcseD1nPTAsQT1udWxsLHA9aC5uZXh0KCk7bnVsbCE9PXImJiFwLmRvbmU7eCsrLHA9aC5uZXh0KCkpe3IuaW5kZXg+eD8oQT1yLHI9bnVsbCk6QT1yLnNpYmxpbmc7dmFyIHo9eShlLHIscC52YWx1ZSxrKTtpZihudWxsPT09eil7bnVsbD09PXImJihyPUEpO2JyZWFrfWEmJnImJm51bGw9PT16LmFsdGVybmF0ZSYmYihlLHIpO2c9Zih6LGcseCk7bnVsbD09PW0/bD16Om0uc2libGluZz16O209ejtyPUF9aWYocC5kb25lKXJldHVybiBjKGUsciksbDtpZihudWxsPT09cil7Zm9yKDshcC5kb25lO3grKyxwPWgubmV4dCgpKXA9QyhlLHAudmFsdWUsayksbnVsbCE9PXAmJihnPWYocCxnLHgpLG51bGw9PT1tP2w9cDptLnNpYmxpbmc9cCxtPXApO3JldHVybiBsfWZvcihyPWQoZSxyKTshcC5kb25lO3grKyxwPWgubmV4dCgpKXA9SChyLGUseCxwLnZhbHVlLGspLG51bGwhPT1wJiYoYSYmbnVsbCE9PVxucC5hbHRlcm5hdGUmJnIuZGVsZXRlKG51bGw9PT1wLmtleT94OnAua2V5KSxnPWYocCxnLHgpLG51bGw9PT1tP2w9cDptLnNpYmxpbmc9cCxtPXApO2EmJnIuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9cmV0dXJuIGZ1bmN0aW9uKGEsZCxmLGgpe3ZhciBrPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PUlhJiZudWxsPT09Zi5rZXk7ayYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7dmFyIGw9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZjtpZihsKXN3aXRjaChmLiQkdHlwZW9mKXtjYXNlIEdhOmE6e2w9Zi5rZXk7Zm9yKGs9ZDtudWxsIT09azspe2lmKGsua2V5PT09bClpZig3PT09ay50YWc/Zi50eXBlPT09SWE6ay5lbGVtZW50VHlwZT09PWYudHlwZSl7YyhhLGsuc2libGluZyk7ZD1lKGssZi50eXBlPT09SWE/Zi5wcm9wcy5jaGlsZHJlbjpmLnByb3BzLGgpO2QucmVmPVlnKGEsayxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLFxuayk7YnJlYWt9ZWxzZSBiKGEsayk7az1rLnNpYmxpbmd9Zi50eXBlPT09SWE/KGQ9ZWgoZi5wcm9wcy5jaGlsZHJlbixhLm1vZGUsaCxmLmtleSksZC5yZXR1cm49YSxhPWQpOihoPWNoKGYudHlwZSxmLmtleSxmLnByb3BzLG51bGwsYS5tb2RlLGgpLGgucmVmPVlnKGEsZCxmKSxoLnJldHVybj1hLGE9aCl9cmV0dXJuIGcoYSk7Y2FzZSBIYTphOntmb3Ioaz1mLmtleTtudWxsIT09ZDspe2lmKGQua2V5PT09aylpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10saCk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPWRoKGYsYS5tb2RlLGgpO2QucmV0dXJuPWE7YT1kfXJldHVybiBnKGEpfWlmKFwic3RyaW5nXCI9PT1cbnR5cGVvZiBmfHxcIm51bWJlclwiPT09dHlwZW9mIGYpcmV0dXJuIGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYsaCksZC5yZXR1cm49YSxhPWQpOihjKGEsZCksZD1iaChmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKTtpZihYZyhmKSlyZXR1cm4geihhLGQsZixoKTtpZihVYShmKSlyZXR1cm4gdGEoYSxkLGYsaCk7bCYmWmcoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYmJiFrKXN3aXRjaChhLnRhZyl7Y2FzZSAxOmNhc2UgMDp0aHJvdyBhPWEudHlwZSxFcnJvcih1KDE1MixhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fFwiQ29tcG9uZW50XCIpKTt9cmV0dXJuIGMoYSxkKX19dmFyIGZoPSRnKCEwKSxnaD0kZyghMSksaGg9e30saWg9e2N1cnJlbnQ6aGh9LGpoPXtjdXJyZW50OmhofSxraD17Y3VycmVudDpoaH07ZnVuY3Rpb24gbGgoYSl7aWYoYT09PWhoKXRocm93IEVycm9yKHUoMTc0KSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBtaChhLGIpe0koa2gsYixhKTtJKGpoLGEsYSk7SShpaCxoaCxhKTt2YXIgYz1iLm5vZGVUeXBlO3N3aXRjaChjKXtjYXNlIDk6Y2FzZSAxMTpiPShiPWIuZG9jdW1lbnRFbGVtZW50KT9iLm5hbWVzcGFjZVVSSTpRYihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6Yz04PT09Yz9iLnBhcmVudE5vZGU6YixiPWMubmFtZXNwYWNlVVJJfHxudWxsLGM9Yy50YWdOYW1lLGI9UWIoYixjKX1HKGloLGEpO0koaWgsYixhKX1mdW5jdGlvbiBuaChhKXtHKGloLGEpO0coamgsYSk7RyhraCxhKX1mdW5jdGlvbiBvaChhKXtsaChraC5jdXJyZW50KTt2YXIgYj1saChpaC5jdXJyZW50KTt2YXIgYz1RYihiLGEudHlwZSk7YiE9PWMmJihJKGpoLGEsYSksSShpaCxjLGEpKX1mdW5jdGlvbiBwaChhKXtqaC5jdXJyZW50PT09YSYmKEcoaWgsYSksRyhqaCxhKSl9dmFyIE09e2N1cnJlbnQ6MH07XG5mdW5jdGlvbiBxaChhKXtmb3IodmFyIGI9YTtudWxsIT09Yjspe2lmKDEzPT09Yi50YWcpe3ZhciBjPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGw9PT1jfHxjLmRhdGE9PT1qZXx8Yy5kYXRhPT09a2UpKXJldHVybiBifWVsc2UgaWYoMTk9PT1iLnRhZyYmdm9pZCAwIT09Yi5tZW1vaXplZFByb3BzLnJldmVhbE9yZGVyKXtpZigwIT09KGIuZWZmZWN0VGFnJjY0KSlyZXR1cm4gYn1lbHNlIGlmKG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9cmV0dXJuIG51bGx9ZnVuY3Rpb24gcmgoYSxiKXtyZXR1cm57cmVzcG9uZGVyOmEscHJvcHM6Yn19XG52YXIgc2g9RWEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixOPUVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLHRoPTAsdWg9bnVsbCxPPW51bGwsdmg9bnVsbCx3aD1udWxsLFA9bnVsbCx4aD1udWxsLHloPTAsemg9bnVsbCxBaD0wLEJoPSExLENoPW51bGwsR2g9MDtmdW5jdGlvbiBRKCl7dGhyb3cgRXJyb3IodSgzMjEpKTt9ZnVuY3Rpb24gSGgoYSxiKXtpZihudWxsPT09YilyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoJiZjPGEubGVuZ3RoO2MrKylpZighb2YoYVtjXSxiW2NdKSlyZXR1cm4hMTtyZXR1cm4hMH1cbmZ1bmN0aW9uIEloKGEsYixjLGQsZSxmKXt0aD1mO3VoPWI7dmg9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGw7c2guY3VycmVudD1udWxsPT09dmg/Smg6S2g7Yj1jKGQsZSk7aWYoQmgpe2RvIEJoPSExLEdoKz0xLHZoPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsLHhoPXdoLHpoPVA9Tz1udWxsLHNoLmN1cnJlbnQ9S2gsYj1jKGQsZSk7d2hpbGUoQmgpO0NoPW51bGw7R2g9MH1zaC5jdXJyZW50PUxoO2E9dWg7YS5tZW1vaXplZFN0YXRlPXdoO2EuZXhwaXJhdGlvblRpbWU9eWg7YS51cGRhdGVRdWV1ZT16aDthLmVmZmVjdFRhZ3w9QWg7YT1udWxsIT09TyYmbnVsbCE9PU8ubmV4dDt0aD0wO3hoPVA9d2g9dmg9Tz11aD1udWxsO3loPTA7emg9bnVsbDtBaD0wO2lmKGEpdGhyb3cgRXJyb3IodSgzMDApKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIE1oKCl7c2guY3VycmVudD1MaDt0aD0wO3hoPVA9d2g9dmg9Tz11aD1udWxsO3loPTA7emg9bnVsbDtBaD0wO0JoPSExO0NoPW51bGw7R2g9MH1mdW5jdGlvbiBOaCgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwscXVldWU6bnVsbCxiYXNlVXBkYXRlOm51bGwsbmV4dDpudWxsfTtudWxsPT09UD93aD1QPWE6UD1QLm5leHQ9YTtyZXR1cm4gUH1mdW5jdGlvbiBPaCgpe2lmKG51bGwhPT14aClQPXhoLHhoPVAubmV4dCxPPXZoLHZoPW51bGwhPT1PP08ubmV4dDpudWxsO2Vsc2V7aWYobnVsbD09PXZoKXRocm93IEVycm9yKHUoMzEwKSk7Tz12aDt2YXIgYT17bWVtb2l6ZWRTdGF0ZTpPLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOk8uYmFzZVN0YXRlLHF1ZXVlOk8ucXVldWUsYmFzZVVwZGF0ZTpPLmJhc2VVcGRhdGUsbmV4dDpudWxsfTtQPW51bGw9PT1QP3doPWE6UC5uZXh0PWE7dmg9Ty5uZXh0fXJldHVybiBQfVxuZnVuY3Rpb24gUGgoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiBRaChhKXt2YXIgYj1PaCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcih1KDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO2lmKDA8R2gpe3ZhciBkPWMuZGlzcGF0Y2g7aWYobnVsbCE9PUNoKXt2YXIgZT1DaC5nZXQoYyk7aWYodm9pZCAwIT09ZSl7Q2guZGVsZXRlKGMpO3ZhciBmPWIubWVtb2l6ZWRTdGF0ZTtkbyBmPWEoZixlLmFjdGlvbiksZT1lLm5leHQ7d2hpbGUobnVsbCE9PWUpO29mKGYsYi5tZW1vaXplZFN0YXRlKXx8KHdnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtiLmJhc2VVcGRhdGU9PT1jLmxhc3QmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWY7cmV0dXJuW2YsZF19fXJldHVybltiLm1lbW9pemVkU3RhdGUsZF19ZD1jLmxhc3Q7dmFyIGc9Yi5iYXNlVXBkYXRlO2Y9Yi5iYXNlU3RhdGU7bnVsbCE9PWc/KG51bGwhPT1kJiYoZC5uZXh0PW51bGwpLGQ9Zy5uZXh0KTpkPW51bGwhPT1kP2QubmV4dDpudWxsO2lmKG51bGwhPT1cbmQpe3ZhciBoPWU9bnVsbCxrPWQsbD0hMTtkb3t2YXIgbT1rLmV4cGlyYXRpb25UaW1lO208dGg/KGx8fChsPSEwLGg9ZyxlPWYpLG0+eWgmJih5aD1tLEpnKHloKSkpOihJZyhtLGsuc3VzcGVuc2VDb25maWcpLGY9ay5lYWdlclJlZHVjZXI9PT1hP2suZWFnZXJTdGF0ZTphKGYsay5hY3Rpb24pKTtnPWs7az1rLm5leHR9d2hpbGUobnVsbCE9PWsmJmshPT1kKTtsfHwoaD1nLGU9Zik7b2YoZixiLm1lbW9pemVkU3RhdGUpfHwod2c9ITApO2IubWVtb2l6ZWRTdGF0ZT1mO2IuYmFzZVVwZGF0ZT1oO2IuYmFzZVN0YXRlPWU7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1mfXJldHVybltiLm1lbW9pemVkU3RhdGUsYy5kaXNwYXRjaF19XG5mdW5jdGlvbiBSaChhKXt2YXIgYj1OaCgpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhJiYoYT1hKCkpO2IubWVtb2l6ZWRTdGF0ZT1iLmJhc2VTdGF0ZT1hO2E9Yi5xdWV1ZT17bGFzdDpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjpQaCxsYXN0UmVuZGVyZWRTdGF0ZTphfTthPWEuZGlzcGF0Y2g9U2guYmluZChudWxsLHVoLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19ZnVuY3Rpb24gVGgoYSl7cmV0dXJuIFFoKFBoLGEpfWZ1bmN0aW9uIFVoKGEsYixjLGQpe2E9e3RhZzphLGNyZWF0ZTpiLGRlc3Ryb3k6YyxkZXBzOmQsbmV4dDpudWxsfTtudWxsPT09emg/KHpoPXtsYXN0RWZmZWN0Om51bGx9LHpoLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihiPXpoLmxhc3RFZmZlY3QsbnVsbD09PWI/emgubGFzdEVmZmVjdD1hLm5leHQ9YTooYz1iLm5leHQsYi5uZXh0PWEsYS5uZXh0PWMsemgubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBWaChhLGIsYyxkKXt2YXIgZT1OaCgpO0FofD1hO2UubWVtb2l6ZWRTdGF0ZT1VaChiLGMsdm9pZCAwLHZvaWQgMD09PWQ/bnVsbDpkKX1mdW5jdGlvbiBXaChhLGIsYyxkKXt2YXIgZT1PaCgpO2Q9dm9pZCAwPT09ZD9udWxsOmQ7dmFyIGY9dm9pZCAwO2lmKG51bGwhPT1PKXt2YXIgZz1PLm1lbW9pemVkU3RhdGU7Zj1nLmRlc3Ryb3k7aWYobnVsbCE9PWQmJkhoKGQsZy5kZXBzKSl7VWgoMCxjLGYsZCk7cmV0dXJufX1BaHw9YTtlLm1lbW9pemVkU3RhdGU9VWgoYixjLGYsZCl9ZnVuY3Rpb24gWGgoYSxiKXtyZXR1cm4gVmgoNTE2LDE5MixhLGIpfWZ1bmN0aW9uIFloKGEsYil7cmV0dXJuIFdoKDUxNiwxOTIsYSxiKX1cbmZ1bmN0aW9uIFpoKGEsYil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGE9YSgpLGIoYSksZnVuY3Rpb24oKXtiKG51bGwpfTtpZihudWxsIT09YiYmdm9pZCAwIT09YilyZXR1cm4gYT1hKCksYi5jdXJyZW50PWEsZnVuY3Rpb24oKXtiLmN1cnJlbnQ9bnVsbH19ZnVuY3Rpb24gJGgoKXt9ZnVuY3Rpb24gYWkoYSxiKXtOaCgpLm1lbW9pemVkU3RhdGU9W2Esdm9pZCAwPT09Yj9udWxsOmJdO3JldHVybiBhfWZ1bmN0aW9uIGJpKGEsYil7dmFyIGM9T2goKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJkhoKGIsZFsxXSkpcmV0dXJuIGRbMF07Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfVxuZnVuY3Rpb24gU2goYSxiLGMpe2lmKCEoMjU+R2gpKXRocm93IEVycm9yKHUoMzAxKSk7dmFyIGQ9YS5hbHRlcm5hdGU7aWYoYT09PXVofHxudWxsIT09ZCYmZD09PXVoKWlmKEJoPSEwLGE9e2V4cGlyYXRpb25UaW1lOnRoLHN1c3BlbnNlQ29uZmlnOm51bGwsYWN0aW9uOmMsZWFnZXJSZWR1Y2VyOm51bGwsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH0sbnVsbD09PUNoJiYoQ2g9bmV3IE1hcCksYz1DaC5nZXQoYiksdm9pZCAwPT09YylDaC5zZXQoYixhKTtlbHNle2ZvcihiPWM7bnVsbCE9PWIubmV4dDspYj1iLm5leHQ7Yi5uZXh0PWF9ZWxzZXt2YXIgZT1QZygpLGY9TWcuc3VzcGVuc2U7ZT1RZyhlLGEsZik7Zj17ZXhwaXJhdGlvblRpbWU6ZSxzdXNwZW5zZUNvbmZpZzpmLGFjdGlvbjpjLGVhZ2VyUmVkdWNlcjpudWxsLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9O3ZhciBnPWIubGFzdDtpZihudWxsPT09ZylmLm5leHQ9ZjtlbHNle3ZhciBoPWcubmV4dDtudWxsIT09aCYmXG4oZi5uZXh0PWgpO2cubmV4dD1mfWIubGFzdD1mO2lmKDA9PT1hLmV4cGlyYXRpb25UaW1lJiYobnVsbD09PWR8fDA9PT1kLmV4cGlyYXRpb25UaW1lKSYmKGQ9Yi5sYXN0UmVuZGVyZWRSZWR1Y2VyLG51bGwhPT1kKSl0cnl7dmFyIGs9Yi5sYXN0UmVuZGVyZWRTdGF0ZSxsPWQoayxjKTtmLmVhZ2VyUmVkdWNlcj1kO2YuZWFnZXJTdGF0ZT1sO2lmKG9mKGwsaykpcmV0dXJufWNhdGNoKG0pe31maW5hbGx5e31SZyhhLGUpfX1cbnZhciBMaD17cmVhZENvbnRleHQ6eGcsdXNlQ2FsbGJhY2s6USx1c2VDb250ZXh0OlEsdXNlRWZmZWN0OlEsdXNlSW1wZXJhdGl2ZUhhbmRsZTpRLHVzZUxheW91dEVmZmVjdDpRLHVzZU1lbW86USx1c2VSZWR1Y2VyOlEsdXNlUmVmOlEsdXNlU3RhdGU6USx1c2VEZWJ1Z1ZhbHVlOlEsdXNlUmVzcG9uZGVyOlEsdXNlRGVmZXJyZWRWYWx1ZTpRLHVzZVRyYW5zaXRpb246UX0sSmg9e3JlYWRDb250ZXh0OnhnLHVzZUNhbGxiYWNrOmFpLHVzZUNvbnRleHQ6eGcsdXNlRWZmZWN0OlhoLHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBWaCg0LDM2LFpoLmJpbmQobnVsbCxiLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVmgoNCwzNixhLGIpfSx1c2VNZW1vOmZ1bmN0aW9uKGEsYil7dmFyIGM9TmgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1cblthLGJdO3JldHVybiBhfSx1c2VSZWR1Y2VyOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1OaCgpO2I9dm9pZCAwIT09Yz9jKGIpOmI7ZC5tZW1vaXplZFN0YXRlPWQuYmFzZVN0YXRlPWI7YT1kLnF1ZXVlPXtsYXN0Om51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOmEsbGFzdFJlbmRlcmVkU3RhdGU6Yn07YT1hLmRpc3BhdGNoPVNoLmJpbmQobnVsbCx1aCxhKTtyZXR1cm5bZC5tZW1vaXplZFN0YXRlLGFdfSx1c2VSZWY6ZnVuY3Rpb24oYSl7dmFyIGI9TmgoKTthPXtjdXJyZW50OmF9O3JldHVybiBiLm1lbW9pemVkU3RhdGU9YX0sdXNlU3RhdGU6UmgsdXNlRGVidWdWYWx1ZTokaCx1c2VSZXNwb25kZXI6cmgsdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhLGIpe3ZhciBjPVJoKGEpLGQ9Y1swXSxlPWNbMV07WGgoZnVuY3Rpb24oKXtxLnVuc3RhYmxlX25leHQoZnVuY3Rpb24oKXt2YXIgYz1OLnN1c3BlbnNlO04uc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2UoYSl9ZmluYWxseXtOLnN1c3BlbnNlPVxuY319KX0sW2EsYl0pO3JldHVybiBkfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKGEpe3ZhciBiPVJoKCExKSxjPWJbMF0sZD1iWzFdO3JldHVyblthaShmdW5jdGlvbihiKXtkKCEwKTtxLnVuc3RhYmxlX25leHQoZnVuY3Rpb24oKXt2YXIgYz1OLnN1c3BlbnNlO04uc3VzcGVuc2U9dm9pZCAwPT09YT9udWxsOmE7dHJ5e2QoITEpLGIoKX1maW5hbGx5e04uc3VzcGVuc2U9Y319KX0sW2EsY10pLGNdfX0sS2g9e3JlYWRDb250ZXh0OnhnLHVzZUNhbGxiYWNrOmJpLHVzZUNvbnRleHQ6eGcsdXNlRWZmZWN0OlloLHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBXaCg0LDM2LFpoLmJpbmQobnVsbCxiLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gV2goNCwzNixhLGIpfSx1c2VNZW1vOmZ1bmN0aW9uKGEsYil7dmFyIGM9T2goKTtiPXZvaWQgMD09PWI/XG5udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmSGgoYixkWzFdKSlyZXR1cm4gZFswXTthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6UWgsdXNlUmVmOmZ1bmN0aW9uKCl7cmV0dXJuIE9oKCkubWVtb2l6ZWRTdGF0ZX0sdXNlU3RhdGU6VGgsdXNlRGVidWdWYWx1ZTokaCx1c2VSZXNwb25kZXI6cmgsdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhLGIpe3ZhciBjPVRoKGEpLGQ9Y1swXSxlPWNbMV07WWgoZnVuY3Rpb24oKXtxLnVuc3RhYmxlX25leHQoZnVuY3Rpb24oKXt2YXIgYz1OLnN1c3BlbnNlO04uc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2UoYSl9ZmluYWxseXtOLnN1c3BlbnNlPWN9fSl9LFthLGJdKTtyZXR1cm4gZH0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbihhKXt2YXIgYj1UaCghMSksYz1iWzBdLGQ9YlsxXTtyZXR1cm5bYmkoZnVuY3Rpb24oYil7ZCghMCk7cS51bnN0YWJsZV9uZXh0KGZ1bmN0aW9uKCl7dmFyIGM9XG5OLnN1c3BlbnNlO04uc3VzcGVuc2U9dm9pZCAwPT09YT9udWxsOmE7dHJ5e2QoITEpLGIoKX1maW5hbGx5e04uc3VzcGVuc2U9Y319KX0sW2EsY10pLGNdfX0sY2k9bnVsbCxkaT1udWxsLGVpPSExO2Z1bmN0aW9uIGZpKGEsYil7dmFyIGM9Z2koNSxudWxsLG51bGwsMCk7Yy5lbGVtZW50VHlwZT1cIkRFTEVURURcIjtjLnR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2MuZWZmZWN0VGFnPTg7bnVsbCE9PWEubGFzdEVmZmVjdD8oYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxhLmxhc3RFZmZlY3Q9Yyk6YS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9Y31cbmZ1bmN0aW9uIGhpKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgMTM6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBpaShhKXtpZihlaSl7dmFyIGI9ZGk7aWYoYil7dmFyIGM9YjtpZighaGkoYSxiKSl7Yj1yZShjLm5leHRTaWJsaW5nKTtpZighYnx8IWhpKGEsYikpe2EuZWZmZWN0VGFnPWEuZWZmZWN0VGFnJi0xMDI1fDI7ZWk9ITE7Y2k9YTtyZXR1cm59ZmkoY2ksYyl9Y2k9YTtkaT1yZShiLmZpcnN0Q2hpbGQpfWVsc2UgYS5lZmZlY3RUYWc9YS5lZmZlY3RUYWcmLTEwMjV8MixlaT0hMSxjaT1hfX1mdW5jdGlvbiBqaShhKXtmb3IoYT1hLnJldHVybjtudWxsIT09YSYmNSE9PWEudGFnJiYzIT09YS50YWcmJjEzIT09YS50YWc7KWE9YS5yZXR1cm47Y2k9YX1cbmZ1bmN0aW9uIGtpKGEpe2lmKGEhPT1jaSlyZXR1cm4hMTtpZighZWkpcmV0dXJuIGppKGEpLGVpPSEwLCExO3ZhciBiPWEudHlwZTtpZig1IT09YS50YWd8fFwiaGVhZFwiIT09YiYmXCJib2R5XCIhPT1iJiYhb2UoYixhLm1lbW9pemVkUHJvcHMpKWZvcihiPWRpO2I7KWZpKGEsYiksYj1yZShiLm5leHRTaWJsaW5nKTtqaShhKTtpZigxMz09PWEudGFnKXthPWEubWVtb2l6ZWRTdGF0ZTthPW51bGwhPT1hP2EuZGVoeWRyYXRlZDpudWxsO2lmKCFhKXRocm93IEVycm9yKHUoMzE3KSk7YTp7YT1hLm5leHRTaWJsaW5nO2ZvcihiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoYz09PWllKXtpZigwPT09Yil7ZGk9cmUoYS5uZXh0U2libGluZyk7YnJlYWsgYX1iLS19ZWxzZSBjIT09aGUmJmMhPT1rZSYmYyE9PWplfHxiKyt9YT1hLm5leHRTaWJsaW5nfWRpPW51bGx9fWVsc2UgZGk9Y2k/cmUoYS5zdGF0ZU5vZGUubmV4dFNpYmxpbmcpOm51bGw7cmV0dXJuITB9XG5mdW5jdGlvbiBsaSgpe2RpPWNpPW51bGw7ZWk9ITF9dmFyIG1pPUVhLlJlYWN0Q3VycmVudE93bmVyLHdnPSExO2Z1bmN0aW9uIFIoYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT9naChiLG51bGwsYyxkKTpmaChiLGEuY2hpbGQsYyxkKX1mdW5jdGlvbiBuaShhLGIsYyxkLGUpe2M9Yy5yZW5kZXI7dmFyIGY9Yi5yZWY7dmcoYixlKTtkPUloKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXdnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5lZmZlY3RUYWcmPS01MTcsYS5leHBpcmF0aW9uVGltZTw9ZSYmKGEuZXhwaXJhdGlvblRpbWU9MCksb2koYSxiLGUpO2IuZWZmZWN0VGFnfD0xO1IoYSxiLGQsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBwaShhLGIsYyxkLGUsZil7aWYobnVsbD09PWEpe3ZhciBnPWMudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYmIXFpKGcpJiZ2b2lkIDA9PT1nLmRlZmF1bHRQcm9wcyYmbnVsbD09PWMuY29tcGFyZSYmdm9pZCAwPT09Yy5kZWZhdWx0UHJvcHMpcmV0dXJuIGIudGFnPTE1LGIudHlwZT1nLHJpKGEsYixnLGQsZSxmKTthPWNoKGMudHlwZSxudWxsLGQsbnVsbCxiLm1vZGUsZik7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfWc9YS5jaGlsZDtpZihlPGYmJihlPWcubWVtb2l6ZWRQcm9wcyxjPWMuY29tcGFyZSxjPW51bGwhPT1jP2M6cWYsYyhlLGQpJiZhLnJlZj09PWIucmVmKSlyZXR1cm4gb2koYSxiLGYpO2IuZWZmZWN0VGFnfD0xO2E9YWgoZyxkLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1cbmZ1bmN0aW9uIHJpKGEsYixjLGQsZSxmKXtyZXR1cm4gbnVsbCE9PWEmJnFmKGEubWVtb2l6ZWRQcm9wcyxkKSYmYS5yZWY9PT1iLnJlZiYmKHdnPSExLGU8Zik/b2koYSxiLGYpOnNpKGEsYixjLGQsZil9ZnVuY3Rpb24gdGkoYSxiKXt2YXIgYz1iLnJlZjtpZihudWxsPT09YSYmbnVsbCE9PWN8fG51bGwhPT1hJiZhLnJlZiE9PWMpYi5lZmZlY3RUYWd8PTEyOH1mdW5jdGlvbiBzaShhLGIsYyxkLGUpe3ZhciBmPUwoYyk/RGY6Si5jdXJyZW50O2Y9RWYoYixmKTt2ZyhiLGUpO2M9SWgoYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhd2cpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmVmZmVjdFRhZyY9LTUxNyxhLmV4cGlyYXRpb25UaW1lPD1lJiYoYS5leHBpcmF0aW9uVGltZT0wKSxvaShhLGIsZSk7Yi5lZmZlY3RUYWd8PTE7UihhLGIsYyxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIHVpKGEsYixjLGQsZSl7aWYoTChjKSl7dmFyIGY9ITA7SmYoYil9ZWxzZSBmPSExO3ZnKGIsZSk7aWYobnVsbD09PWIuc3RhdGVOb2RlKW51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKSxVZyhiLGMsZCxlKSxXZyhiLGMsZCxlKSxkPSEwO2Vsc2UgaWYobnVsbD09PWEpe3ZhciBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzO2cucHJvcHM9aDt2YXIgaz1nLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD14ZyhsKToobD1MKGMpP0RmOkouY3VycmVudCxsPUVmKGIsbCkpO3ZhciBtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLEM9XCJmdW5jdGlvblwiPT09dHlwZW9mIG18fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlO0N8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8ayE9PWwpJiZWZyhiLGcsZCxsKTt5Zz0hMTt2YXIgeT1iLm1lbW9pemVkU3RhdGU7az1nLnN0YXRlPXk7dmFyIEg9Yi51cGRhdGVRdWV1ZTtudWxsIT09SCYmKEhnKGIsSCxkLGcsZSksaz1iLm1lbW9pemVkU3RhdGUpO2ghPT1kfHx5IT09a3x8Sy5jdXJyZW50fHx5Zz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihPZyhiLGMsbSxkKSxrPWIubWVtb2l6ZWRTdGF0ZSksKGg9eWd8fFRnKGIsYyxoLGQseSxrLGwpKT8oQ3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50JiZnLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlxuZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWspLGcucHJvcHM9ZCxnLnN0YXRlPWssZy5jb250ZXh0PWwsZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksZD0hMSl9ZWxzZSBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzLGcucHJvcHM9Yi50eXBlPT09Yi5lbGVtZW50VHlwZT9oOm1nKGIudHlwZSxoKSxrPWcuY29udGV4dCxsPWMuY29udGV4dFR5cGUsXCJvYmplY3RcIj09PXR5cGVvZiBsJiZudWxsIT09bD9sPXhnKGwpOihsPUwoYyk/RGY6Si5jdXJyZW50LGw9RWYoYixsKSksbT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcywoQz1cblwiZnVuY3Rpb25cIj09PXR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PWR8fGshPT1sKSYmVmcoYixnLGQsbCkseWc9ITEsaz1iLm1lbW9pemVkU3RhdGUseT1nLnN0YXRlPWssSD1iLnVwZGF0ZVF1ZXVlLG51bGwhPT1IJiYoSGcoYixILGQsZyxlKSx5PWIubWVtb2l6ZWRTdGF0ZSksaCE9PWR8fGshPT15fHxLLmN1cnJlbnR8fHlnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbSYmKE9nKGIsYyxtLGQpLHk9Yi5tZW1vaXplZFN0YXRlKSwobT15Z3x8VGcoYixjLGgsZCxrLHksbCkpPyhDfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8XG4oXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQseSxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLHksbCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZWZmZWN0VGFnfD0yNTYpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksYi5tZW1vaXplZFByb3BzPVxuZCxiLm1lbW9pemVkU3RhdGU9eSksZy5wcm9wcz1kLGcuc3RhdGU9eSxnLmNvbnRleHQ9bCxkPW0pOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjU2KSxkPSExKTtyZXR1cm4gdmkoYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24gdmkoYSxiLGMsZCxlLGYpe3RpKGEsYik7dmFyIGc9MCE9PShiLmVmZmVjdFRhZyY2NCk7aWYoIWQmJiFnKXJldHVybiBlJiZLZihiLGMsITEpLG9pKGEsYixmKTtkPWIuc3RhdGVOb2RlO21pLmN1cnJlbnQ9Yjt2YXIgaD1nJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I/bnVsbDpkLnJlbmRlcigpO2IuZWZmZWN0VGFnfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPWZoKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9ZmgoYixudWxsLGgsZikpOlIoYSxiLGgsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7ZSYmS2YoYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiB3aShhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P0hmKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJkhmKGEsYi5jb250ZXh0LCExKTttaChhLGIuY29udGFpbmVySW5mbyl9XG52YXIgeGk9e2RlaHlkcmF0ZWQ6bnVsbCxyZXRyeVRpbWU6MH07XG5mdW5jdGlvbiB5aShhLGIsYyl7dmFyIGQ9Yi5tb2RlLGU9Yi5wZW5kaW5nUHJvcHMsZj1NLmN1cnJlbnQsZz0hMSxoOyhoPTAhPT0oYi5lZmZlY3RUYWcmNjQpKXx8KGg9MCE9PShmJjIpJiYobnVsbD09PWF8fG51bGwhPT1hLm1lbW9pemVkU3RhdGUpKTtoPyhnPSEwLGIuZWZmZWN0VGFnJj0tNjUpOm51bGwhPT1hJiZudWxsPT09YS5tZW1vaXplZFN0YXRlfHx2b2lkIDA9PT1lLmZhbGxiYWNrfHwhMD09PWUudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fChmfD0xKTtJKE0sZiYxLGIpO2lmKG51bGw9PT1hKXt2b2lkIDAhPT1lLmZhbGxiYWNrJiZpaShiKTtpZihnKXtnPWUuZmFsbGJhY2s7ZT1laChudWxsLGQsMCxudWxsKTtlLnJldHVybj1iO2lmKDA9PT0oYi5tb2RlJjIpKWZvcihhPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkLGUuY2hpbGQ9YTtudWxsIT09YTspYS5yZXR1cm49ZSxhPWEuc2libGluZztjPWVoKGcsZCxjLG51bGwpO2MucmV0dXJuPVxuYjtlLnNpYmxpbmc9YztiLm1lbW9pemVkU3RhdGU9eGk7Yi5jaGlsZD1lO3JldHVybiBjfWQ9ZS5jaGlsZHJlbjtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gYi5jaGlsZD1naChiLG51bGwsZCxjKX1pZihudWxsIT09YS5tZW1vaXplZFN0YXRlKXthPWEuY2hpbGQ7ZD1hLnNpYmxpbmc7aWYoZyl7ZT1lLmZhbGxiYWNrO2M9YWgoYSxhLnBlbmRpbmdQcm9wcywwKTtjLnJldHVybj1iO2lmKDA9PT0oYi5tb2RlJjIpJiYoZz1udWxsIT09Yi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCxnIT09YS5jaGlsZCkpZm9yKGMuY2hpbGQ9ZztudWxsIT09ZzspZy5yZXR1cm49YyxnPWcuc2libGluZztkPWFoKGQsZSxkLmV4cGlyYXRpb25UaW1lKTtkLnJldHVybj1iO2Muc2libGluZz1kO2MuY2hpbGRFeHBpcmF0aW9uVGltZT0wO2IubWVtb2l6ZWRTdGF0ZT14aTtiLmNoaWxkPWM7cmV0dXJuIGR9Yz1maChiLGEuY2hpbGQsZS5jaGlsZHJlbixjKTtiLm1lbW9pemVkU3RhdGU9XG5udWxsO3JldHVybiBiLmNoaWxkPWN9YT1hLmNoaWxkO2lmKGcpe2c9ZS5mYWxsYmFjaztlPWVoKG51bGwsZCwwLG51bGwpO2UucmV0dXJuPWI7ZS5jaGlsZD1hO251bGwhPT1hJiYoYS5yZXR1cm49ZSk7aWYoMD09PShiLm1vZGUmMikpZm9yKGE9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQsZS5jaGlsZD1hO251bGwhPT1hOylhLnJldHVybj1lLGE9YS5zaWJsaW5nO2M9ZWgoZyxkLGMsbnVsbCk7Yy5yZXR1cm49YjtlLnNpYmxpbmc9YztjLmVmZmVjdFRhZ3w9MjtlLmNoaWxkRXhwaXJhdGlvblRpbWU9MDtiLm1lbW9pemVkU3RhdGU9eGk7Yi5jaGlsZD1lO3JldHVybiBjfWIubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBiLmNoaWxkPWZoKGIsYSxlLmNoaWxkcmVuLGMpfVxuZnVuY3Rpb24gemkoYSxiKXthLmV4cGlyYXRpb25UaW1lPGImJihhLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZjLmV4cGlyYXRpb25UaW1lPGImJihjLmV4cGlyYXRpb25UaW1lPWIpO3VnKGEucmV0dXJuLGIpfWZ1bmN0aW9uIEFpKGEsYixjLGQsZSxmKXt2YXIgZz1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWc/YS5tZW1vaXplZFN0YXRlPXtpc0JhY2t3YXJkczpiLHJlbmRlcmluZzpudWxsLGxhc3Q6ZCx0YWlsOmMsdGFpbEV4cGlyYXRpb246MCx0YWlsTW9kZTplLGxhc3RFZmZlY3Q6Zn06KGcuaXNCYWNrd2FyZHM9YixnLnJlbmRlcmluZz1udWxsLGcubGFzdD1kLGcudGFpbD1jLGcudGFpbEV4cGlyYXRpb249MCxnLnRhaWxNb2RlPWUsZy5sYXN0RWZmZWN0PWYpfVxuZnVuY3Rpb24gQmkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5yZXZlYWxPcmRlcixmPWQudGFpbDtSKGEsYixkLmNoaWxkcmVuLGMpO2Q9TS5jdXJyZW50O2lmKDAhPT0oZCYyKSlkPWQmMXwyLGIuZWZmZWN0VGFnfD02NDtlbHNle2lmKG51bGwhPT1hJiYwIT09KGEuZWZmZWN0VGFnJjY0KSlhOmZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtpZigxMz09PWEudGFnKW51bGwhPT1hLm1lbW9pemVkU3RhdGUmJnppKGEsYyk7ZWxzZSBpZigxOT09PWEudGFnKXppKGEsYyk7ZWxzZSBpZihudWxsIT09YS5jaGlsZCl7YS5jaGlsZC5yZXR1cm49YTthPWEuY2hpbGQ7Y29udGludWV9aWYoYT09PWIpYnJlYWsgYTtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fGEucmV0dXJuPT09YilicmVhayBhO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjthPWEuc2libGluZ31kJj0xfUkoTSxkLGIpO2lmKDA9PT0oYi5tb2RlJjIpKWIubWVtb2l6ZWRTdGF0ZT1cbm51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWE9Yy5hbHRlcm5hdGUsbnVsbCE9PWEmJm51bGw9PT1xaChhKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO0FpKGIsITEsZSxjLGYsYi5sYXN0RWZmZWN0KTticmVhaztjYXNlIFwiYmFja3dhcmRzXCI6Yz1udWxsO2U9Yi5jaGlsZDtmb3IoYi5jaGlsZD1udWxsO251bGwhPT1lOyl7YT1lLmFsdGVybmF0ZTtpZihudWxsIT09YSYmbnVsbD09PXFoKGEpKXtiLmNoaWxkPWU7YnJlYWt9YT1lLnNpYmxpbmc7ZS5zaWJsaW5nPWM7Yz1lO2U9YX1BaShiLCEwLGMsbnVsbCxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcInRvZ2V0aGVyXCI6QWkoYiwhMSxudWxsLG51bGwsdm9pZCAwLGIubGFzdEVmZmVjdCk7YnJlYWs7ZGVmYXVsdDpiLm1lbW9pemVkU3RhdGU9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIG9pKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTt2YXIgZD1iLmV4cGlyYXRpb25UaW1lOzAhPT1kJiZKZyhkKTtpZihiLmNoaWxkRXhwaXJhdGlvblRpbWU8YylyZXR1cm4gbnVsbDtpZihudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQpdGhyb3cgRXJyb3IodSgxNTMpKTtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO2M9YWgoYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9YWgoYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfWZ1bmN0aW9uIENpKGEpe2EuZWZmZWN0VGFnfD00fXZhciBIaSxJaSxKaSxLaTtcbkhpPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTtJaT1mdW5jdGlvbigpe307XG5KaT1mdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPWEubWVtb2l6ZWRQcm9wcztpZihmIT09ZCl7dmFyIGc9Yi5zdGF0ZU5vZGU7bGgoaWguY3VycmVudCk7YT1udWxsO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpmPUFiKGcsZik7ZD1BYihnLGQpO2E9W107YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmY9SWIoZyxmKTtkPUliKGcsZCk7YT1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6Zj1uKHt9LGYse3ZhbHVlOnZvaWQgMH0pO2Q9bih7fSxkLHt2YWx1ZTp2b2lkIDB9KTthPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmY9S2IoZyxmKTtkPUtiKGcsZCk7YT1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBmLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihnLm9uY2xpY2s9YWUpfVlkKGMsZCk7dmFyIGgsaztjPW51bGw7Zm9yKGggaW4gZilpZighZC5oYXNPd25Qcm9wZXJ0eShoKSYmZi5oYXNPd25Qcm9wZXJ0eShoKSYmbnVsbCE9ZltoXSlpZihcInN0eWxlXCI9PT1cbmgpZm9yKGsgaW4gZz1mW2hdLGcpZy5oYXNPd25Qcm9wZXJ0eShrKSYmKGN8fChjPXt9KSxjW2tdPVwiXCIpO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1oJiZcImNoaWxkcmVuXCIhPT1oJiZcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09aCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWgmJlwiYXV0b0ZvY3VzXCIhPT1oJiYoaWEuaGFzT3duUHJvcGVydHkoaCk/YXx8KGE9W10pOihhPWF8fFtdKS5wdXNoKGgsbnVsbCkpO2ZvcihoIGluIGQpe3ZhciBsPWRbaF07Zz1udWxsIT1mP2ZbaF06dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkoaCkmJmwhPT1nJiYobnVsbCE9bHx8bnVsbCE9ZykpaWYoXCJzdHlsZVwiPT09aClpZihnKXtmb3IoayBpbiBnKSFnLmhhc093blByb3BlcnR5KGspfHxsJiZsLmhhc093blByb3BlcnR5KGspfHwoY3x8KGM9e30pLGNba109XCJcIik7Zm9yKGsgaW4gbClsLmhhc093blByb3BlcnR5KGspJiZnW2tdIT09bFtrXSYmKGN8fChjPXt9KSxcbmNba109bFtrXSl9ZWxzZSBjfHwoYXx8KGE9W10pLGEucHVzaChoLGMpKSxjPWw7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWg/KGw9bD9sLl9faHRtbDp2b2lkIDAsZz1nP2cuX19odG1sOnZvaWQgMCxudWxsIT1sJiZnIT09bCYmKGE9YXx8W10pLnB1c2goaCxcIlwiK2wpKTpcImNoaWxkcmVuXCI9PT1oP2c9PT1sfHxcInN0cmluZ1wiIT09dHlwZW9mIGwmJlwibnVtYmVyXCIhPT10eXBlb2YgbHx8KGE9YXx8W10pLnB1c2goaCxcIlwiK2wpOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1oJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09aCYmKGlhLmhhc093blByb3BlcnR5KGgpPyhudWxsIT1sJiYkZChlLGgpLGF8fGc9PT1sfHwoYT1bXSkpOihhPWF8fFtdKS5wdXNoKGgsbCkpfWMmJihhPWF8fFtdKS5wdXNoKFwic3R5bGVcIixjKTtlPWE7KGIudXBkYXRlUXVldWU9ZSkmJkNpKGIpfX07S2k9ZnVuY3Rpb24oYSxiLGMsZCl7YyE9PWQmJkNpKGIpfTtcbmZ1bmN0aW9uIExpKGEsYil7c3dpdGNoKGEudGFpbE1vZGUpe2Nhc2UgXCJoaWRkZW5cIjpiPWEudGFpbDtmb3IodmFyIGM9bnVsbDtudWxsIT09YjspbnVsbCE9PWIuYWx0ZXJuYXRlJiYoYz1iKSxiPWIuc2libGluZztudWxsPT09Yz9hLnRhaWw9bnVsbDpjLnNpYmxpbmc9bnVsbDticmVhaztjYXNlIFwiY29sbGFwc2VkXCI6Yz1hLnRhaWw7Zm9yKHZhciBkPW51bGw7bnVsbCE9PWM7KW51bGwhPT1jLmFsdGVybmF0ZSYmKGQ9YyksYz1jLnNpYmxpbmc7bnVsbD09PWQ/Ynx8bnVsbD09PWEudGFpbD9hLnRhaWw9bnVsbDphLnRhaWwuc2libGluZz1udWxsOmQuc2libGluZz1udWxsfX1cbmZ1bmN0aW9uIE1pKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAxOkwoYS50eXBlKSYmRmYoYSk7dmFyIGI9YS5lZmZlY3RUYWc7cmV0dXJuIGImNDA5Nj8oYS5lZmZlY3RUYWc9YiYtNDA5N3w2NCxhKTpudWxsO2Nhc2UgMzpuaChhKTtHZihhKTtiPWEuZWZmZWN0VGFnO2lmKDAhPT0oYiY2NCkpdGhyb3cgRXJyb3IodSgyODUpKTthLmVmZmVjdFRhZz1iJi00MDk3fDY0O3JldHVybiBhO2Nhc2UgNTpyZXR1cm4gcGgoYSksbnVsbDtjYXNlIDEzOnJldHVybiBHKE0sYSksYj1hLmVmZmVjdFRhZyxiJjQwOTY/KGEuZWZmZWN0VGFnPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDE5OnJldHVybiBHKE0sYSksbnVsbDtjYXNlIDQ6cmV0dXJuIG5oKGEpLG51bGw7Y2FzZSAxMDpyZXR1cm4gdGcoYSksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX1mdW5jdGlvbiBOaShhLGIpe3JldHVybnt2YWx1ZTphLHNvdXJjZTpiLHN0YWNrOlhhKGIpfX1cbnZhciBPaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha1NldD9XZWFrU2V0OlNldDtmdW5jdGlvbiBQaShhLGIpe3ZhciBjPWIuc291cmNlLGQ9Yi5zdGFjaztudWxsPT09ZCYmbnVsbCE9PWMmJihkPVhhKGMpKTtudWxsIT09YyYmV2EoYy50eXBlKTtiPWIudmFsdWU7bnVsbCE9PWEmJjE9PT1hLnRhZyYmV2EoYS50eXBlKTt0cnl7Y29uc29sZS5lcnJvcihiKX1jYXRjaChlKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgZTt9KX19ZnVuY3Rpb24gUWkoYSxiKXt0cnl7Yi5wcm9wcz1hLm1lbW9pemVkUHJvcHMsYi5zdGF0ZT1hLm1lbW9pemVkU3RhdGUsYi5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGMpe1JpKGEsYyl9fWZ1bmN0aW9uIFNpKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXRyeXtiKG51bGwpfWNhdGNoKGMpe1JpKGEsYyl9ZWxzZSBiLmN1cnJlbnQ9bnVsbH1cbmZ1bmN0aW9uIFRpKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlVpKDIsMCxiKTticmVhaztjYXNlIDE6aWYoYi5lZmZlY3RUYWcmMjU2JiZudWxsIT09YSl7dmFyIGM9YS5tZW1vaXplZFByb3BzLGQ9YS5tZW1vaXplZFN0YXRlO2E9Yi5zdGF0ZU5vZGU7Yj1hLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGIuZWxlbWVudFR5cGU9PT1iLnR5cGU/YzptZyhiLnR5cGUsYyksZCk7YS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT1ifWJyZWFrO2Nhc2UgMzpjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OmJyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgxNjMpKTt9fVxuZnVuY3Rpb24gVWkoYSxiLGMpe2M9Yy51cGRhdGVRdWV1ZTtjPW51bGwhPT1jP2MubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1jKXt2YXIgZD1jPWMubmV4dDtkb3tpZigwIT09KGQudGFnJmEpKXt2YXIgZT1kLmRlc3Ryb3k7ZC5kZXN0cm95PXZvaWQgMDt2b2lkIDAhPT1lJiZlKCl9MCE9PShkLnRhZyZiKSYmKGU9ZC5jcmVhdGUsZC5kZXN0cm95PWUoKSk7ZD1kLm5leHR9d2hpbGUoZCE9PWMpfX1cbmZ1bmN0aW9uIFZpKGEsYixjKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgV2kmJldpKGIpO3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmE9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YSYmKGE9YS5sYXN0RWZmZWN0LG51bGwhPT1hKSl7dmFyIGQ9YS5uZXh0O2ZnKDk3PGM/OTc6YyxmdW5jdGlvbigpe3ZhciBhPWQ7ZG97dmFyIGM9YS5kZXN0cm95O2lmKHZvaWQgMCE9PWMpe3ZhciBnPWI7dHJ5e2MoKX1jYXRjaChoKXtSaShnLGgpfX1hPWEubmV4dH13aGlsZShhIT09ZCl9KX1icmVhaztjYXNlIDE6U2koYik7Yz1iLnN0YXRlTm9kZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5jb21wb25lbnRXaWxsVW5tb3VudCYmUWkoYixjKTticmVhaztjYXNlIDU6U2koYik7YnJlYWs7Y2FzZSA0OlhpKGEsYixjKX19XG5mdW5jdGlvbiBZaShhKXt2YXIgYj1hLmFsdGVybmF0ZTthLnJldHVybj1udWxsO2EuY2hpbGQ9bnVsbDthLm1lbW9pemVkU3RhdGU9bnVsbDthLnVwZGF0ZVF1ZXVlPW51bGw7YS5kZXBlbmRlbmNpZXM9bnVsbDthLmFsdGVybmF0ZT1udWxsO2EuZmlyc3RFZmZlY3Q9bnVsbDthLmxhc3RFZmZlY3Q9bnVsbDthLnBlbmRpbmdQcm9wcz1udWxsO2EubWVtb2l6ZWRQcm9wcz1udWxsO251bGwhPT1iJiZZaShiKX1mdW5jdGlvbiBaaShhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uICRpKGEpe2E6e2Zvcih2YXIgYj1hLnJldHVybjtudWxsIT09Yjspe2lmKFppKGIpKXt2YXIgYz1iO2JyZWFrIGF9Yj1iLnJldHVybn10aHJvdyBFcnJvcih1KDE2MCkpO31iPWMuc3RhdGVOb2RlO3N3aXRjaChjLnRhZyl7Y2FzZSA1OnZhciBkPSExO2JyZWFrO2Nhc2UgMzpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2Nhc2UgNDpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgxNjEpKTt9Yy5lZmZlY3RUYWcmMTYmJihUYihiLFwiXCIpLGMuZWZmZWN0VGFnJj0tMTcpO2E6Yjpmb3IoYz1hOzspe2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8WmkoYy5yZXR1cm4pKXtjPW51bGw7YnJlYWsgYX1jPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Zm9yKGM9Yy5zaWJsaW5nOzUhPT1jLnRhZyYmNiE9PWMudGFnJiYxOCE9PWMudGFnOyl7aWYoYy5lZmZlY3RUYWcmMiljb250aW51ZSBiO1xuaWYobnVsbD09PWMuY2hpbGR8fDQ9PT1jLnRhZyljb250aW51ZSBiO2Vsc2UgYy5jaGlsZC5yZXR1cm49YyxjPWMuY2hpbGR9aWYoIShjLmVmZmVjdFRhZyYyKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1mb3IodmFyIGU9YTs7KXt2YXIgZj01PT09ZS50YWd8fDY9PT1lLnRhZztpZihmKXt2YXIgZz1mP2Uuc3RhdGVOb2RlOmUuc3RhdGVOb2RlLmluc3RhbmNlO2lmKGMpaWYoZCl7Zj1iO3ZhciBoPWc7Zz1jOzg9PT1mLm5vZGVUeXBlP2YucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoaCxnKTpmLmluc2VydEJlZm9yZShoLGcpfWVsc2UgYi5pbnNlcnRCZWZvcmUoZyxjKTtlbHNlIGQ/KGg9Yiw4PT09aC5ub2RlVHlwZT8oZj1oLnBhcmVudE5vZGUsZi5pbnNlcnRCZWZvcmUoZyxoKSk6KGY9aCxmLmFwcGVuZENoaWxkKGcpKSxoPWguX3JlYWN0Um9vdENvbnRhaW5lcixudWxsIT09aCYmdm9pZCAwIT09aHx8bnVsbCE9PWYub25jbGlja3x8KGYub25jbGljaz1hZSkpOmIuYXBwZW5kQ2hpbGQoZyl9ZWxzZSBpZig0IT09XG5lLnRhZyYmbnVsbCE9PWUuY2hpbGQpe2UuY2hpbGQucmV0dXJuPWU7ZT1lLmNoaWxkO2NvbnRpbnVlfWlmKGU9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWUuc2libGluZzspe2lmKG51bGw9PT1lLnJldHVybnx8ZS5yZXR1cm49PT1hKXJldHVybjtlPWUucmV0dXJufWUuc2libGluZy5yZXR1cm49ZS5yZXR1cm47ZT1lLnNpYmxpbmd9fVxuZnVuY3Rpb24gWGkoYSxiLGMpe2Zvcih2YXIgZD1iLGU9ITEsZixnOzspe2lmKCFlKXtlPWQucmV0dXJuO2E6Zm9yKDs7KXtpZihudWxsPT09ZSl0aHJvdyBFcnJvcih1KDE2MCkpO2Y9ZS5zdGF0ZU5vZGU7c3dpdGNoKGUudGFnKXtjYXNlIDU6Zz0hMTticmVhayBhO2Nhc2UgMzpmPWYuY29udGFpbmVySW5mbztnPSEwO2JyZWFrIGE7Y2FzZSA0OmY9Zi5jb250YWluZXJJbmZvO2c9ITA7YnJlYWsgYX1lPWUucmV0dXJufWU9ITB9aWYoNT09PWQudGFnfHw2PT09ZC50YWcpe2E6Zm9yKHZhciBoPWEsaz1kLGw9YyxtPWs7OylpZihWaShoLG0sbCksbnVsbCE9PW0uY2hpbGQmJjQhPT1tLnRhZyltLmNoaWxkLnJldHVybj1tLG09bS5jaGlsZDtlbHNle2lmKG09PT1rKWJyZWFrO2Zvcig7bnVsbD09PW0uc2libGluZzspe2lmKG51bGw9PT1tLnJldHVybnx8bS5yZXR1cm49PT1rKWJyZWFrIGE7bT1tLnJldHVybn1tLnNpYmxpbmcucmV0dXJuPW0ucmV0dXJuO209bS5zaWJsaW5nfWc/KGg9XG5mLGs9ZC5zdGF0ZU5vZGUsOD09PWgubm9kZVR5cGU/aC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGspOmgucmVtb3ZlQ2hpbGQoaykpOmYucmVtb3ZlQ2hpbGQoZC5zdGF0ZU5vZGUpfWVsc2UgaWYoND09PWQudGFnKXtpZihudWxsIT09ZC5jaGlsZCl7Zj1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2c9ITA7ZC5jaGlsZC5yZXR1cm49ZDtkPWQuY2hpbGQ7Y29udGludWV9fWVsc2UgaWYoVmkoYSxkLGMpLG51bGwhPT1kLmNoaWxkKXtkLmNoaWxkLnJldHVybj1kO2Q9ZC5jaGlsZDtjb250aW51ZX1pZihkPT09YilicmVhaztmb3IoO251bGw9PT1kLnNpYmxpbmc7KXtpZihudWxsPT09ZC5yZXR1cm58fGQucmV0dXJuPT09YilyZXR1cm47ZD1kLnJldHVybjs0PT09ZC50YWcmJihlPSExKX1kLnNpYmxpbmcucmV0dXJuPWQucmV0dXJuO2Q9ZC5zaWJsaW5nfX1cbmZ1bmN0aW9uIGFqKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6VWkoNCw4LGIpO2JyZWFrO2Nhc2UgMTpicmVhaztjYXNlIDU6dmFyIGM9Yi5zdGF0ZU5vZGU7aWYobnVsbCE9Yyl7dmFyIGQ9Yi5tZW1vaXplZFByb3BzLGU9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOmQ7YT1iLnR5cGU7dmFyIGY9Yi51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYobnVsbCE9PWYpe2NbdmVdPWQ7XCJpbnB1dFwiPT09YSYmXCJyYWRpb1wiPT09ZC50eXBlJiZudWxsIT1kLm5hbWUmJkNiKGMsZCk7WmQoYSxlKTtiPVpkKGEsZCk7Zm9yKGU9MDtlPGYubGVuZ3RoO2UrPTIpe3ZhciBnPWZbZV0saD1mW2UrMV07XCJzdHlsZVwiPT09Zz9XZChjLGgpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWc/U2IoYyxoKTpcImNoaWxkcmVuXCI9PT1nP1RiKGMsaCk6dmIoYyxnLGgsYil9c3dpdGNoKGEpe2Nhc2UgXCJpbnB1dFwiOkViKGMsZCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6TWIoYyxcbmQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSxjLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFkLm11bHRpcGxlLGE9ZC52YWx1ZSxudWxsIT1hP0piKGMsISFkLm11bHRpcGxlLGEsITEpOmIhPT0hIWQubXVsdGlwbGUmJihudWxsIT1kLmRlZmF1bHRWYWx1ZT9KYihjLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk6SmIoYywhIWQubXVsdGlwbGUsZC5tdWx0aXBsZT9bXTpcIlwiLCExKSl9fX1icmVhaztjYXNlIDY6aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHUoMTYyKSk7Yi5zdGF0ZU5vZGUubm9kZVZhbHVlPWIubWVtb2l6ZWRQcm9wczticmVhaztjYXNlIDM6Yj1iLnN0YXRlTm9kZTtiLmh5ZHJhdGUmJihiLmh5ZHJhdGU9ITEsTGMoYi5jb250YWluZXJJbmZvKSk7YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDEzOmM9YjtudWxsPT09Yi5tZW1vaXplZFN0YXRlP2Q9ITE6KGQ9ITAsYz1iLmNoaWxkLGJqPWNnKCkpO1xuaWYobnVsbCE9PWMpYTpmb3IoYT1jOzspe2lmKDU9PT1hLnRhZylmPWEuc3RhdGVOb2RlLGQ/KGY9Zi5zdHlsZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5zZXRQcm9wZXJ0eT9mLnNldFByb3BlcnR5KFwiZGlzcGxheVwiLFwibm9uZVwiLFwiaW1wb3J0YW50XCIpOmYuZGlzcGxheT1cIm5vbmVcIik6KGY9YS5zdGF0ZU5vZGUsZT1hLm1lbW9pemVkUHJvcHMuc3R5bGUsZT12b2lkIDAhPT1lJiZudWxsIT09ZSYmZS5oYXNPd25Qcm9wZXJ0eShcImRpc3BsYXlcIik/ZS5kaXNwbGF5Om51bGwsZi5zdHlsZS5kaXNwbGF5PVZkKFwiZGlzcGxheVwiLGUpKTtlbHNlIGlmKDY9PT1hLnRhZylhLnN0YXRlTm9kZS5ub2RlVmFsdWU9ZD9cIlwiOmEubWVtb2l6ZWRQcm9wcztlbHNlIGlmKDEzPT09YS50YWcmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUmJm51bGw9PT1hLm1lbW9pemVkU3RhdGUuZGVoeWRyYXRlZCl7Zj1hLmNoaWxkLnNpYmxpbmc7Zi5yZXR1cm49YTthPWY7Y29udGludWV9ZWxzZSBpZihudWxsIT09YS5jaGlsZCl7YS5jaGlsZC5yZXR1cm49XG5hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YylicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1jKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfWNqKGIpO2JyZWFrO2Nhc2UgMTk6Y2ooYik7YnJlYWs7Y2FzZSAxNzpicmVhaztjYXNlIDIwOmJyZWFrO2Nhc2UgMjE6YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDE2MykpO319ZnVuY3Rpb24gY2ooYSl7dmFyIGI9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09Yil7YS51cGRhdGVRdWV1ZT1udWxsO3ZhciBjPWEuc3RhdGVOb2RlO251bGw9PT1jJiYoYz1hLnN0YXRlTm9kZT1uZXcgT2kpO2IuZm9yRWFjaChmdW5jdGlvbihiKXt2YXIgZD1kai5iaW5kKG51bGwsYSxiKTtjLmhhcyhiKXx8KGMuYWRkKGIpLGIudGhlbihkLGQpKX0pfX12YXIgZWo9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7XG5mdW5jdGlvbiBmaihhLGIsYyl7Yz1CZyhjLG51bGwpO2MudGFnPTM7Yy5wYXlsb2FkPXtlbGVtZW50Om51bGx9O3ZhciBkPWIudmFsdWU7Yy5jYWxsYmFjaz1mdW5jdGlvbigpe2dqfHwoZ2o9ITAsaGo9ZCk7UGkoYSxiKX07cmV0dXJuIGN9XG5mdW5jdGlvbiBpaihhLGIsYyl7Yz1CZyhjLG51bGwpO2MudGFnPTM7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXtQaShhLGIpO3JldHVybiBkKGUpfX12YXIgZj1hLnN0YXRlTm9kZTtudWxsIT09ZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09amo/amo9bmV3IFNldChbdGhpc10pOmpqLmFkZCh0aGlzKSxQaShhLGIpKTt2YXIgYz1iLnN0YWNrO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYi52YWx1ZSx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWM/YzpcIlwifSl9KTtyZXR1cm4gY31cbnZhciBraj1NYXRoLmNlaWwsbGo9RWEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixtaj1FYS5SZWFjdEN1cnJlbnRPd25lcixTPTAsbmo9OCxvaj0xNixwaj0zMixxaj0wLHJqPTEsc2o9Mix0aj0zLHVqPTQsdmo9NSxUPVMsVT1udWxsLFY9bnVsbCxXPTAsWD1xaix3aj1udWxsLHhqPTEwNzM3NDE4MjMseWo9MTA3Mzc0MTgyMyx6aj1udWxsLEFqPTAsQmo9ITEsYmo9MCxDaj01MDAsWT1udWxsLGdqPSExLGhqPW51bGwsamo9bnVsbCxEaj0hMSxFaj1udWxsLEZqPTkwLEdqPW51bGwsSGo9MCxJaj1udWxsLEpqPTA7ZnVuY3Rpb24gUGcoKXtyZXR1cm4oVCYob2p8cGopKSE9PVM/MTA3Mzc0MTgyMS0oY2coKS8xMHwwKTowIT09Smo/Smo6Smo9MTA3Mzc0MTgyMS0oY2coKS8xMHwwKX1cbmZ1bmN0aW9uIFFnKGEsYixjKXtiPWIubW9kZTtpZigwPT09KGImMikpcmV0dXJuIDEwNzM3NDE4MjM7dmFyIGQ9ZGcoKTtpZigwPT09KGImNCkpcmV0dXJuIDk5PT09ZD8xMDczNzQxODIzOjEwNzM3NDE4MjI7aWYoKFQmb2opIT09UylyZXR1cm4gVztpZihudWxsIT09YylhPWxnKGEsYy50aW1lb3V0TXN8MHx8NUUzLDI1MCk7ZWxzZSBzd2l0Y2goZCl7Y2FzZSA5OTphPTEwNzM3NDE4MjM7YnJlYWs7Y2FzZSA5ODphPWxnKGEsMTUwLDEwMCk7YnJlYWs7Y2FzZSA5NzpjYXNlIDk2OmE9bGcoYSw1RTMsMjUwKTticmVhaztjYXNlIDk1OmE9MjticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHUoMzI2KSk7fW51bGwhPT1VJiZhPT09VyYmLS1hO3JldHVybiBhfVxuZnVuY3Rpb24gUmcoYSxiKXtpZig1MDxIail0aHJvdyBIaj0wLElqPW51bGwsRXJyb3IodSgxODUpKTthPUtqKGEsYik7aWYobnVsbCE9PWEpe3ZhciBjPWRnKCk7MTA3Mzc0MTgyMz09PWI/KFQmbmopIT09UyYmKFQmKG9qfHBqKSk9PT1TP0xqKGEpOihaKGEpLFQ9PT1TJiZqZygpKTpaKGEpOyhUJjQpPT09U3x8OTghPT1jJiY5OSE9PWN8fChudWxsPT09R2o/R2o9bmV3IE1hcChbW2EsYl1dKTooYz1Hai5nZXQoYSksKHZvaWQgMD09PWN8fGM+YikmJkdqLnNldChhLGIpKSl9fVxuZnVuY3Rpb24gS2ooYSxiKXthLmV4cGlyYXRpb25UaW1lPGImJihhLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZjLmV4cGlyYXRpb25UaW1lPGImJihjLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBkPWEucmV0dXJuLGU9bnVsbDtpZihudWxsPT09ZCYmMz09PWEudGFnKWU9YS5zdGF0ZU5vZGU7ZWxzZSBmb3IoO251bGwhPT1kOyl7Yz1kLmFsdGVybmF0ZTtkLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGQuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtudWxsIT09YyYmYy5jaGlsZEV4cGlyYXRpb25UaW1lPGImJihjLmNoaWxkRXhwaXJhdGlvblRpbWU9Yik7aWYobnVsbD09PWQucmV0dXJuJiYzPT09ZC50YWcpe2U9ZC5zdGF0ZU5vZGU7YnJlYWt9ZD1kLnJldHVybn1udWxsIT09ZSYmKFU9PT1lJiYoSmcoYiksWD09PXVqJiZNaihlLFcpKSxOaihlLGIpKTtyZXR1cm4gZX1cbmZ1bmN0aW9uIE9qKGEpe3ZhciBiPWEubGFzdEV4cGlyZWRUaW1lO2lmKDAhPT1iKXJldHVybiBiO2I9YS5maXJzdFBlbmRpbmdUaW1lO2lmKCFQaihhLGIpKXJldHVybiBiO2I9YS5sYXN0UGluZ2VkVGltZTthPWEubmV4dEtub3duUGVuZGluZ0xldmVsO3JldHVybiBiPmE/YjphfVxuZnVuY3Rpb24gWihhKXtpZigwIT09YS5sYXN0RXhwaXJlZFRpbWUpYS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPTEwNzM3NDE4MjMsYS5jYWxsYmFja1ByaW9yaXR5PTk5LGEuY2FsbGJhY2tOb2RlPWhnKExqLmJpbmQobnVsbCxhKSk7ZWxzZXt2YXIgYj1PaihhKSxjPWEuY2FsbGJhY2tOb2RlO2lmKDA9PT1iKW51bGwhPT1jJiYoYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9MCxhLmNhbGxiYWNrUHJpb3JpdHk9OTApO2Vsc2V7dmFyIGQ9UGcoKTsxMDczNzQxODIzPT09Yj9kPTk5OjE9PT1ifHwyPT09Yj9kPTk1OihkPTEwKigxMDczNzQxODIxLWIpLTEwKigxMDczNzQxODIxLWQpLGQ9MD49ZD85OToyNTA+PWQ/OTg6NTI1MD49ZD85Nzo5NSk7aWYobnVsbCE9PWMpe3ZhciBlPWEuY2FsbGJhY2tQcmlvcml0eTtpZihhLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9PT1iJiZlPj1kKXJldHVybjtjIT09WGYmJk5mKGMpfWEuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT1cbmI7YS5jYWxsYmFja1ByaW9yaXR5PWQ7Yj0xMDczNzQxODIzPT09Yj9oZyhMai5iaW5kKG51bGwsYSkpOmdnKGQsUWouYmluZChudWxsLGEpLHt0aW1lb3V0OjEwKigxMDczNzQxODIxLWIpLWNnKCl9KTthLmNhbGxiYWNrTm9kZT1ifX19XG5mdW5jdGlvbiBRaihhLGIpe0pqPTA7aWYoYilyZXR1cm4gYj1QZygpLFJqKGEsYiksWihhKSxudWxsO3ZhciBjPU9qKGEpO2lmKDAhPT1jKXtiPWEuY2FsbGJhY2tOb2RlO2lmKChUJihvanxwaikpIT09Uyl0aHJvdyBFcnJvcih1KDMyNykpO1NqKCk7YT09PVUmJmM9PT1XfHxUaihhLGMpO2lmKG51bGwhPT1WKXt2YXIgZD1UO1R8PW9qO3ZhciBlPVVqKGEpO2RvIHRyeXtWaigpO2JyZWFrfWNhdGNoKGgpe1dqKGEsaCl9d2hpbGUoMSk7cmcoKTtUPWQ7bGouY3VycmVudD1lO2lmKFg9PT1yail0aHJvdyBiPXdqLFRqKGEsYyksTWooYSxjKSxaKGEpLGI7aWYobnVsbD09PVYpc3dpdGNoKGU9YS5maW5pc2hlZFdvcms9YS5jdXJyZW50LmFsdGVybmF0ZSxhLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9YyxkPVgsVT1udWxsLGQpe2Nhc2UgcWo6Y2FzZSByajp0aHJvdyBFcnJvcih1KDM0NSkpO2Nhc2Ugc2o6UmooYSwyPGM/MjpjKTticmVhaztjYXNlIHRqOk1qKGEsYyk7ZD1hLmxhc3RTdXNwZW5kZWRUaW1lO1xuYz09PWQmJihhLm5leHRLbm93blBlbmRpbmdMZXZlbD1YaihlKSk7aWYoMTA3Mzc0MTgyMz09PXhqJiYoZT1iaitDai1jZygpLDEwPGUpKXtpZihCail7dmFyIGY9YS5sYXN0UGluZ2VkVGltZTtpZigwPT09Znx8Zj49Yyl7YS5sYXN0UGluZ2VkVGltZT1jO1RqKGEsYyk7YnJlYWt9fWY9T2ooYSk7aWYoMCE9PWYmJmYhPT1jKWJyZWFrO2lmKDAhPT1kJiZkIT09Yyl7YS5sYXN0UGluZ2VkVGltZT1kO2JyZWFrfWEudGltZW91dEhhbmRsZT1wZShZai5iaW5kKG51bGwsYSksZSk7YnJlYWt9WWooYSk7YnJlYWs7Y2FzZSB1ajpNaihhLGMpO2Q9YS5sYXN0U3VzcGVuZGVkVGltZTtjPT09ZCYmKGEubmV4dEtub3duUGVuZGluZ0xldmVsPVhqKGUpKTtpZihCaiYmKGU9YS5sYXN0UGluZ2VkVGltZSwwPT09ZXx8ZT49Yykpe2EubGFzdFBpbmdlZFRpbWU9YztUaihhLGMpO2JyZWFrfWU9T2ooYSk7aWYoMCE9PWUmJmUhPT1jKWJyZWFrO2lmKDAhPT1kJiZkIT09Yyl7YS5sYXN0UGluZ2VkVGltZT1cbmQ7YnJlYWt9MTA3Mzc0MTgyMyE9PXlqP2Q9MTAqKDEwNzM3NDE4MjEteWopLWNnKCk6MTA3Mzc0MTgyMz09PXhqP2Q9MDooZD0xMCooMTA3Mzc0MTgyMS14aiktNUUzLGU9Y2coKSxjPTEwKigxMDczNzQxODIxLWMpLWUsZD1lLWQsMD5kJiYoZD0wKSxkPSgxMjA+ZD8xMjA6NDgwPmQ/NDgwOjEwODA+ZD8xMDgwOjE5MjA+ZD8xOTIwOjNFMz5kPzNFMzo0MzIwPmQ/NDMyMDoxOTYwKmtqKGQvMTk2MCkpLWQsYzxkJiYoZD1jKSk7aWYoMTA8ZCl7YS50aW1lb3V0SGFuZGxlPXBlKFlqLmJpbmQobnVsbCxhKSxkKTticmVha31ZaihhKTticmVhaztjYXNlIHZqOmlmKDEwNzM3NDE4MjMhPT14aiYmbnVsbCE9PXpqKXtmPXhqO3ZhciBnPXpqO2Q9Zy5idXN5TWluRHVyYXRpb25Nc3wwOzA+PWQ/ZD0wOihlPWcuYnVzeURlbGF5TXN8MCxmPWNnKCktKDEwKigxMDczNzQxODIxLWYpLShnLnRpbWVvdXRNc3wwfHw1RTMpKSxkPWY8PWU/MDplK2QtZik7aWYoMTA8ZCl7TWooYSxjKTthLnRpbWVvdXRIYW5kbGU9XG5wZShZai5iaW5kKG51bGwsYSksZCk7YnJlYWt9fVlqKGEpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgzMjkpKTt9WihhKTtpZihhLmNhbGxiYWNrTm9kZT09PWIpcmV0dXJuIFFqLmJpbmQobnVsbCxhKX19cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBMaihhKXt2YXIgYj1hLmxhc3RFeHBpcmVkVGltZTtiPTAhPT1iP2I6MTA3Mzc0MTgyMztpZihhLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9PT1iKVlqKGEpO2Vsc2V7aWYoKFQmKG9qfHBqKSkhPT1TKXRocm93IEVycm9yKHUoMzI3KSk7U2ooKTthPT09VSYmYj09PVd8fFRqKGEsYik7aWYobnVsbCE9PVYpe3ZhciBjPVQ7VHw9b2o7dmFyIGQ9VWooYSk7ZG8gdHJ5e1pqKCk7YnJlYWt9Y2F0Y2goZSl7V2ooYSxlKX13aGlsZSgxKTtyZygpO1Q9Yztsai5jdXJyZW50PWQ7aWYoWD09PXJqKXRocm93IGM9d2osVGooYSxiKSxNaihhLGIpLFooYSksYztpZihudWxsIT09Vil0aHJvdyBFcnJvcih1KDI2MSkpO2EuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPWI7VT1udWxsO1lqKGEpO1ooYSl9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gYWsoKXtpZihudWxsIT09R2ope3ZhciBhPUdqO0dqPW51bGw7YS5mb3JFYWNoKGZ1bmN0aW9uKGEsYyl7UmooYyxhKTtaKGMpfSk7amcoKX19ZnVuY3Rpb24gYmsoYSxiKXt2YXIgYz1UO1R8PTE7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7VD1jLFQ9PT1TJiZqZygpfX1mdW5jdGlvbiBjayhhLGIpe3ZhciBjPVQ7VCY9LTI7VHw9bmo7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7VD1jLFQ9PT1TJiZqZygpfX1cbmZ1bmN0aW9uIFRqKGEsYil7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9MDt2YXIgYz1hLnRpbWVvdXRIYW5kbGU7LTEhPT1jJiYoYS50aW1lb3V0SGFuZGxlPS0xLHFlKGMpKTtpZihudWxsIT09Vilmb3IoYz1WLnJldHVybjtudWxsIT09Yzspe3ZhciBkPWM7c3dpdGNoKGQudGFnKXtjYXNlIDE6dmFyIGU9ZC50eXBlLmNoaWxkQ29udGV4dFR5cGVzO251bGwhPT1lJiZ2b2lkIDAhPT1lJiZGZihkKTticmVhaztjYXNlIDM6bmgoZCk7R2YoZCk7YnJlYWs7Y2FzZSA1OnBoKGQpO2JyZWFrO2Nhc2UgNDpuaChkKTticmVhaztjYXNlIDEzOkcoTSxkKTticmVhaztjYXNlIDE5OkcoTSxkKTticmVhaztjYXNlIDEwOnRnKGQpfWM9Yy5yZXR1cm59VT1hO1Y9YWgoYS5jdXJyZW50LG51bGwsYik7Vz1iO1g9cWo7d2o9bnVsbDt5aj14aj0xMDczNzQxODIzO3pqPW51bGw7QWo9MDtCaj0hMX1cbmZ1bmN0aW9uIFdqKGEsYil7ZG97dHJ5e3JnKCk7TWgoKTtpZihudWxsPT09Vnx8bnVsbD09PVYucmV0dXJuKXJldHVybiBYPXJqLHdqPWIsbnVsbDthOnt2YXIgYz1hLGQ9Vi5yZXR1cm4sZT1WLGY9YjtiPVc7ZS5lZmZlY3RUYWd8PTIwNDg7ZS5maXJzdEVmZmVjdD1lLmxhc3RFZmZlY3Q9bnVsbDtpZihudWxsIT09ZiYmXCJvYmplY3RcIj09PXR5cGVvZiBmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi50aGVuKXt2YXIgZz1mLGg9MCE9PShNLmN1cnJlbnQmMSksaz1kO2Rve3ZhciBsO2lmKGw9MTM9PT1rLnRhZyl7dmFyIG09ay5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1tKWw9bnVsbCE9PW0uZGVoeWRyYXRlZD8hMDohMTtlbHNle3ZhciBDPWsubWVtb2l6ZWRQcm9wcztsPXZvaWQgMD09PUMuZmFsbGJhY2s/ITE6ITAhPT1DLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrPyEwOmg/ITE6ITB9fWlmKGwpe3ZhciB5PWsudXBkYXRlUXVldWU7aWYobnVsbD09PXkpe3ZhciBIPW5ldyBTZXQ7XG5ILmFkZChnKTtrLnVwZGF0ZVF1ZXVlPUh9ZWxzZSB5LmFkZChnKTtpZigwPT09KGsubW9kZSYyKSl7ay5lZmZlY3RUYWd8PTY0O2UuZWZmZWN0VGFnJj0tMjk4MTtpZigxPT09ZS50YWcpaWYobnVsbD09PWUuYWx0ZXJuYXRlKWUudGFnPTE3O2Vsc2V7dmFyIHo9QmcoMTA3Mzc0MTgyMyxudWxsKTt6LnRhZz0yO0RnKGUseil9ZS5leHBpcmF0aW9uVGltZT0xMDczNzQxODIzO2JyZWFrIGF9Zj12b2lkIDA7ZT1iO3ZhciB0YT1jLnBpbmdDYWNoZTtudWxsPT09dGE/KHRhPWMucGluZ0NhY2hlPW5ldyBlaixmPW5ldyBTZXQsdGEuc2V0KGcsZikpOihmPXRhLmdldChnKSx2b2lkIDA9PT1mJiYoZj1uZXcgU2V0LHRhLnNldChnLGYpKSk7aWYoIWYuaGFzKGUpKXtmLmFkZChlKTt2YXIgcj1kay5iaW5kKG51bGwsYyxnLGUpO2cudGhlbihyLHIpfWsuZWZmZWN0VGFnfD00MDk2O2suZXhwaXJhdGlvblRpbWU9YjticmVhayBhfWs9ay5yZXR1cm59d2hpbGUobnVsbCE9PWspO2Y9RXJyb3IoKFdhKGUudHlwZSl8fFxuXCJBIFJlYWN0IGNvbXBvbmVudFwiKStcIiBzdXNwZW5kZWQgd2hpbGUgcmVuZGVyaW5nLCBidXQgbm8gZmFsbGJhY2sgVUkgd2FzIHNwZWNpZmllZC5cXG5cXG5BZGQgYSA8U3VzcGVuc2UgZmFsbGJhY2s9Li4uPiBjb21wb25lbnQgaGlnaGVyIGluIHRoZSB0cmVlIHRvIHByb3ZpZGUgYSBsb2FkaW5nIGluZGljYXRvciBvciBwbGFjZWhvbGRlciB0byBkaXNwbGF5LlwiK1hhKGUpKX1YIT09dmomJihYPXNqKTtmPU5pKGYsZSk7az1kO2Rve3N3aXRjaChrLnRhZyl7Y2FzZSAzOmc9ZjtrLmVmZmVjdFRhZ3w9NDA5NjtrLmV4cGlyYXRpb25UaW1lPWI7dmFyIHg9ZmooayxnLGIpO0VnKGsseCk7YnJlYWsgYTtjYXNlIDE6Zz1mO3ZhciBBPWsudHlwZSxwPWsuc3RhdGVOb2RlO2lmKDA9PT0oay5lZmZlY3RUYWcmNjQpJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIEEuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxudWxsIT09cCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHAuY29tcG9uZW50RGlkQ2F0Y2gmJlxuKG51bGw9PT1qanx8IWpqLmhhcyhwKSkpKXtrLmVmZmVjdFRhZ3w9NDA5NjtrLmV4cGlyYXRpb25UaW1lPWI7dmFyIHQ9aWooayxnLGIpO0VnKGssdCk7YnJlYWsgYX19az1rLnJldHVybn13aGlsZShudWxsIT09ayl9Vj1layhWKX1jYXRjaCh2KXtiPXY7Y29udGludWV9YnJlYWt9d2hpbGUoMSl9ZnVuY3Rpb24gVWooKXt2YXIgYT1sai5jdXJyZW50O2xqLmN1cnJlbnQ9TGg7cmV0dXJuIG51bGw9PT1hP0xoOmF9ZnVuY3Rpb24gSWcoYSxiKXthPHhqJiYyPGEmJih4aj1hKTtudWxsIT09YiYmYTx5aiYmMjxhJiYoeWo9YSx6aj1iKX1mdW5jdGlvbiBKZyhhKXthPkFqJiYoQWo9YSl9ZnVuY3Rpb24gWmooKXtmb3IoO251bGwhPT1WOylWPWZrKFYpfWZ1bmN0aW9uIFZqKCl7Zm9yKDtudWxsIT09ViYmIU9mKCk7KVY9ZmsoVil9XG5mdW5jdGlvbiBmayhhKXt2YXIgYj1nayhhLmFsdGVybmF0ZSxhLFcpO2EubWVtb2l6ZWRQcm9wcz1hLnBlbmRpbmdQcm9wcztudWxsPT09YiYmKGI9ZWsoYSkpO21qLmN1cnJlbnQ9bnVsbDtyZXR1cm4gYn1cbmZ1bmN0aW9uIGVrKGEpe1Y9YTtkb3t2YXIgYj1WLmFsdGVybmF0ZTthPVYucmV0dXJuO2lmKDA9PT0oVi5lZmZlY3RUYWcmMjA0OCkpe2E6e3ZhciBjPWI7Yj1WO3ZhciBkPVc7dmFyIGU9Yi5wZW5kaW5nUHJvcHM7c3dpdGNoKGIudGFnKXtjYXNlIDI6YnJlYWs7Y2FzZSAxNjpicmVhaztjYXNlIDE1OmNhc2UgMDpicmVhaztjYXNlIDE6TChiLnR5cGUpJiZGZihiKTticmVhaztjYXNlIDM6bmgoYik7R2YoYik7ZT1iLnN0YXRlTm9kZTtlLnBlbmRpbmdDb250ZXh0JiYoZS5jb250ZXh0PWUucGVuZGluZ0NvbnRleHQsZS5wZW5kaW5nQ29udGV4dD1udWxsKTsobnVsbD09PWN8fG51bGw9PT1jLmNoaWxkKSYma2koYikmJkNpKGIpO0lpKGIpO2JyZWFrO2Nhc2UgNTpwaChiKTtkPWxoKGtoLmN1cnJlbnQpO3ZhciBmPWIudHlwZTtpZihudWxsIT09YyYmbnVsbCE9Yi5zdGF0ZU5vZGUpSmkoYyxiLGYsZSxkKSxjLnJlZiE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCk7ZWxzZSBpZihlKXt2YXIgZz1cbmxoKGloLmN1cnJlbnQpO2lmKGtpKGIpKXtlPWI7dmFyIGg9ZS5zdGF0ZU5vZGU7Yz1lLnR5cGU7dmFyIGs9ZS5tZW1vaXplZFByb3BzLGw9ZDtoW3VlXT1lO2hbdmVdPWs7Zj12b2lkIDA7ZD1oO3N3aXRjaChjKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkYoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGg9MDtoPGRjLmxlbmd0aDtoKyspRihkY1toXSxkKTticmVhaztjYXNlIFwic291cmNlXCI6RihcImVycm9yXCIsZCk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RihcImVycm9yXCIsZCk7RihcImxvYWRcIixkKTticmVhaztjYXNlIFwiZm9ybVwiOkYoXCJyZXNldFwiLGQpO0YoXCJzdWJtaXRcIixkKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkYoXCJ0b2dnbGVcIixkKTticmVhaztjYXNlIFwiaW5wdXRcIjpCYihkLGspO0YoXCJpbnZhbGlkXCIsZCk7JGQobCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpkLl93cmFwcGVyU3RhdGU9XG57d2FzTXVsdGlwbGU6ISFrLm11bHRpcGxlfTtGKFwiaW52YWxpZFwiLGQpOyRkKGwsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpMYihkLGspLEYoXCJpbnZhbGlkXCIsZCksJGQobCxcIm9uQ2hhbmdlXCIpfVlkKGMsayk7aD1udWxsO2ZvcihmIGluIGspay5oYXNPd25Qcm9wZXJ0eShmKSYmKGc9a1tmXSxcImNoaWxkcmVuXCI9PT1mP1wic3RyaW5nXCI9PT10eXBlb2YgZz9kLnRleHRDb250ZW50IT09ZyYmKGg9W1wiY2hpbGRyZW5cIixnXSk6XCJudW1iZXJcIj09PXR5cGVvZiBnJiZkLnRleHRDb250ZW50IT09XCJcIitnJiYoaD1bXCJjaGlsZHJlblwiLFwiXCIrZ10pOmlhLmhhc093blByb3BlcnR5KGYpJiZudWxsIT1nJiYkZChsLGYpKTtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6eWIoZCk7R2IoZCxrLCEwKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjp5YihkKTtOYihkLGspO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2Ygay5vbkNsaWNrJiZcbihkLm9uY2xpY2s9YWUpfWY9aDtlLnVwZGF0ZVF1ZXVlPWY7ZT1udWxsIT09Zj8hMDohMTtlJiZDaShiKX1lbHNle2M9YjtsPWY7az1lO2g9OT09PWQubm9kZVR5cGU/ZDpkLm93bmVyRG9jdW1lbnQ7Zz09PU9iLmh0bWwmJihnPVBiKGwpKTtnPT09T2IuaHRtbD9cInNjcmlwdFwiPT09bD8oaz1oLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksay5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixoPWsucmVtb3ZlQ2hpbGQoay5maXJzdENoaWxkKSk6XCJzdHJpbmdcIj09PXR5cGVvZiBrLmlzP2g9aC5jcmVhdGVFbGVtZW50KGwse2lzOmsuaXN9KTooaD1oLmNyZWF0ZUVsZW1lbnQobCksXCJzZWxlY3RcIj09PWwmJihsPWgsay5tdWx0aXBsZT9sLm11bHRpcGxlPSEwOmsuc2l6ZSYmKGwuc2l6ZT1rLnNpemUpKSk6aD1oLmNyZWF0ZUVsZW1lbnROUyhnLGwpO2s9aDtrW3VlXT1jO2tbdmVdPWU7SGkoayxiLCExLCExKTtiLnN0YXRlTm9kZT1rO2w9ZjtjPWU7dmFyIG09ZCxDPVpkKGwsYyk7c3dpdGNoKGwpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RihcImxvYWRcIixcbmspO2Q9YzticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZD0wO2Q8ZGMubGVuZ3RoO2QrKylGKGRjW2RdLGspO2Q9YzticmVhaztjYXNlIFwic291cmNlXCI6RihcImVycm9yXCIsayk7ZD1jO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkYoXCJlcnJvclwiLGspO0YoXCJsb2FkXCIsayk7ZD1jO2JyZWFrO2Nhc2UgXCJmb3JtXCI6RihcInJlc2V0XCIsayk7RihcInN1Ym1pdFwiLGspO2Q9YzticmVhaztjYXNlIFwiZGV0YWlsc1wiOkYoXCJ0b2dnbGVcIixrKTtkPWM7YnJlYWs7Y2FzZSBcImlucHV0XCI6QmIoayxjKTtkPUFiKGssYyk7RihcImludmFsaWRcIixrKTskZChtLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmQ9SWIoayxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6ay5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIWMubXVsdGlwbGV9O2Q9bih7fSxjLHt2YWx1ZTp2b2lkIDB9KTtGKFwiaW52YWxpZFwiLGspOyRkKG0sXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpMYihrLFxuYyk7ZD1LYihrLGMpO0YoXCJpbnZhbGlkXCIsayk7JGQobSxcIm9uQ2hhbmdlXCIpO2JyZWFrO2RlZmF1bHQ6ZD1jfVlkKGwsZCk7aD12b2lkIDA7Zz1sO3ZhciB5PWssSD1kO2ZvcihoIGluIEgpaWYoSC5oYXNPd25Qcm9wZXJ0eShoKSl7dmFyIHo9SFtoXTtcInN0eWxlXCI9PT1oP1dkKHkseik6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09aD8oej16P3ouX19odG1sOnZvaWQgMCxudWxsIT16JiZTYih5LHopKTpcImNoaWxkcmVuXCI9PT1oP1wic3RyaW5nXCI9PT10eXBlb2Ygej8oXCJ0ZXh0YXJlYVwiIT09Z3x8XCJcIiE9PXopJiZUYih5LHopOlwibnVtYmVyXCI9PT10eXBlb2YgeiYmVGIoeSxcIlwiK3opOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1oJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09aCYmXCJhdXRvRm9jdXNcIiE9PWgmJihpYS5oYXNPd25Qcm9wZXJ0eShoKT9udWxsIT16JiYkZChtLGgpOm51bGwhPXomJnZiKHksaCx6LEMpKX1zd2l0Y2gobCl7Y2FzZSBcImlucHV0XCI6eWIoayk7XG5HYihrLGMsITEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOnliKGspO05iKGssYyk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPWMudmFsdWUmJmsuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiK3ViKGMudmFsdWUpKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZD1rO2QubXVsdGlwbGU9ISFjLm11bHRpcGxlO2s9Yy52YWx1ZTtudWxsIT1rP0piKGQsISFjLm11bHRpcGxlLGssITEpOm51bGwhPWMuZGVmYXVsdFZhbHVlJiZKYihkLCEhYy5tdWx0aXBsZSxjLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoay5vbmNsaWNrPWFlKX0oZT1uZShmLGUpKSYmQ2koYil9bnVsbCE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCl9ZWxzZSBpZihudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IodSgxNjYpKTticmVhaztjYXNlIDY6aWYoYyYmbnVsbCE9Yi5zdGF0ZU5vZGUpS2koYyxiLGMubWVtb2l6ZWRQcm9wcyxlKTtlbHNle2lmKFwic3RyaW5nXCIhPT1cbnR5cGVvZiBlJiZudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IodSgxNjYpKTtkPWxoKGtoLmN1cnJlbnQpO2xoKGloLmN1cnJlbnQpO2tpKGIpPyhlPWIsZj1lLnN0YXRlTm9kZSxkPWUubWVtb2l6ZWRQcm9wcyxmW3VlXT1lLChlPWYubm9kZVZhbHVlIT09ZCkmJkNpKGIpKTooZj1iLGU9KDk9PT1kLm5vZGVUeXBlP2Q6ZC5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShlKSxlW3VlXT1mLGIuc3RhdGVOb2RlPWUpfWJyZWFrO2Nhc2UgMTE6YnJlYWs7Y2FzZSAxMzpHKE0sYik7ZT1iLm1lbW9pemVkU3RhdGU7aWYoMCE9PShiLmVmZmVjdFRhZyY2NCkpe2IuZXhwaXJhdGlvblRpbWU9ZDticmVhayBhfWU9bnVsbCE9PWU7Zj0hMTtudWxsPT09Yz92b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMuZmFsbGJhY2smJmtpKGIpOihkPWMubWVtb2l6ZWRTdGF0ZSxmPW51bGwhPT1kLGV8fG51bGw9PT1kfHwoZD1jLmNoaWxkLnNpYmxpbmcsbnVsbCE9PWQmJihrPWIuZmlyc3RFZmZlY3QsXG5udWxsIT09az8oYi5maXJzdEVmZmVjdD1kLGQubmV4dEVmZmVjdD1rKTooYi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9ZCxkLm5leHRFZmZlY3Q9bnVsbCksZC5lZmZlY3RUYWc9OCkpKTtpZihlJiYhZiYmMCE9PShiLm1vZGUmMikpaWYobnVsbD09PWMmJiEwIT09Yi5tZW1vaXplZFByb3BzLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrfHwwIT09KE0uY3VycmVudCYxKSlYPT09cWomJihYPXRqKTtlbHNle2lmKFg9PT1xanx8WD09PXRqKVg9dWo7MCE9PUFqJiZudWxsIT09VSYmKE1qKFUsVyksTmooVSxBaikpfWlmKGV8fGYpYi5lZmZlY3RUYWd8PTQ7YnJlYWs7Y2FzZSA3OmJyZWFrO2Nhc2UgODpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgNDpuaChiKTtJaShiKTticmVhaztjYXNlIDEwOnRnKGIpO2JyZWFrO2Nhc2UgOTpicmVhaztjYXNlIDE0OmJyZWFrO2Nhc2UgMTc6TChiLnR5cGUpJiZGZihiKTticmVhaztjYXNlIDE5OkcoTSxiKTtlPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsPT09XG5lKWJyZWFrO2Y9MCE9PShiLmVmZmVjdFRhZyY2NCk7az1lLnJlbmRlcmluZztpZihudWxsPT09aylpZihmKUxpKGUsITEpO2Vsc2V7aWYoWCE9PXFqfHxudWxsIT09YyYmMCE9PShjLmVmZmVjdFRhZyY2NCkpZm9yKGM9Yi5jaGlsZDtudWxsIT09Yzspe2s9cWgoYyk7aWYobnVsbCE9PWspe2IuZWZmZWN0VGFnfD02NDtMaShlLCExKTtmPWsudXBkYXRlUXVldWU7bnVsbCE9PWYmJihiLnVwZGF0ZVF1ZXVlPWYsYi5lZmZlY3RUYWd8PTQpO251bGw9PT1lLmxhc3RFZmZlY3QmJihiLmZpcnN0RWZmZWN0PW51bGwpO2IubGFzdEVmZmVjdD1lLmxhc3RFZmZlY3Q7ZT1kO2ZvcihmPWIuY2hpbGQ7bnVsbCE9PWY7KWQ9ZixjPWUsZC5lZmZlY3RUYWcmPTIsZC5uZXh0RWZmZWN0PW51bGwsZC5maXJzdEVmZmVjdD1udWxsLGQubGFzdEVmZmVjdD1udWxsLGs9ZC5hbHRlcm5hdGUsbnVsbD09PWs/KGQuY2hpbGRFeHBpcmF0aW9uVGltZT0wLGQuZXhwaXJhdGlvblRpbWU9YyxkLmNoaWxkPW51bGwsXG5kLm1lbW9pemVkUHJvcHM9bnVsbCxkLm1lbW9pemVkU3RhdGU9bnVsbCxkLnVwZGF0ZVF1ZXVlPW51bGwsZC5kZXBlbmRlbmNpZXM9bnVsbCk6KGQuY2hpbGRFeHBpcmF0aW9uVGltZT1rLmNoaWxkRXhwaXJhdGlvblRpbWUsZC5leHBpcmF0aW9uVGltZT1rLmV4cGlyYXRpb25UaW1lLGQuY2hpbGQ9ay5jaGlsZCxkLm1lbW9pemVkUHJvcHM9ay5tZW1vaXplZFByb3BzLGQubWVtb2l6ZWRTdGF0ZT1rLm1lbW9pemVkU3RhdGUsZC51cGRhdGVRdWV1ZT1rLnVwZGF0ZVF1ZXVlLGM9ay5kZXBlbmRlbmNpZXMsZC5kZXBlbmRlbmNpZXM9bnVsbD09PWM/bnVsbDp7ZXhwaXJhdGlvblRpbWU6Yy5leHBpcmF0aW9uVGltZSxmaXJzdENvbnRleHQ6Yy5maXJzdENvbnRleHQscmVzcG9uZGVyczpjLnJlc3BvbmRlcnN9KSxmPWYuc2libGluZztJKE0sTS5jdXJyZW50JjF8MixiKTtiPWIuY2hpbGQ7YnJlYWsgYX1jPWMuc2libGluZ319ZWxzZXtpZighZilpZihjPXFoKGspLG51bGwhPT1jKXtpZihiLmVmZmVjdFRhZ3w9XG42NCxmPSEwLGQ9Yy51cGRhdGVRdWV1ZSxudWxsIT09ZCYmKGIudXBkYXRlUXVldWU9ZCxiLmVmZmVjdFRhZ3w9NCksTGkoZSwhMCksbnVsbD09PWUudGFpbCYmXCJoaWRkZW5cIj09PWUudGFpbE1vZGUpe2I9Yi5sYXN0RWZmZWN0PWUubGFzdEVmZmVjdDtudWxsIT09YiYmKGIubmV4dEVmZmVjdD1udWxsKTticmVha319ZWxzZSBjZygpPmUudGFpbEV4cGlyYXRpb24mJjE8ZCYmKGIuZWZmZWN0VGFnfD02NCxmPSEwLExpKGUsITEpLGIuZXhwaXJhdGlvblRpbWU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPWQtMSk7ZS5pc0JhY2t3YXJkcz8oay5zaWJsaW5nPWIuY2hpbGQsYi5jaGlsZD1rKTooZD1lLmxhc3QsbnVsbCE9PWQ/ZC5zaWJsaW5nPWs6Yi5jaGlsZD1rLGUubGFzdD1rKX1pZihudWxsIT09ZS50YWlsKXswPT09ZS50YWlsRXhwaXJhdGlvbiYmKGUudGFpbEV4cGlyYXRpb249Y2coKSs1MDApO2Q9ZS50YWlsO2UucmVuZGVyaW5nPWQ7ZS50YWlsPWQuc2libGluZztlLmxhc3RFZmZlY3Q9XG5iLmxhc3RFZmZlY3Q7ZC5zaWJsaW5nPW51bGw7ZT1NLmN1cnJlbnQ7ZT1mP2UmMXwyOmUmMTtJKE0sZSxiKTtiPWQ7YnJlYWsgYX1icmVhaztjYXNlIDIwOmJyZWFrO2Nhc2UgMjE6YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDE1NixiLnRhZykpO31iPW51bGx9ZT1WO2lmKDE9PT1XfHwxIT09ZS5jaGlsZEV4cGlyYXRpb25UaW1lKXtmPTA7Zm9yKGQ9ZS5jaGlsZDtudWxsIT09ZDspYz1kLmV4cGlyYXRpb25UaW1lLGs9ZC5jaGlsZEV4cGlyYXRpb25UaW1lLGM+ZiYmKGY9Yyksaz5mJiYoZj1rKSxkPWQuc2libGluZztlLmNoaWxkRXhwaXJhdGlvblRpbWU9Zn1pZihudWxsIT09YilyZXR1cm4gYjtudWxsIT09YSYmMD09PShhLmVmZmVjdFRhZyYyMDQ4KSYmKG51bGw9PT1hLmZpcnN0RWZmZWN0JiYoYS5maXJzdEVmZmVjdD1WLmZpcnN0RWZmZWN0KSxudWxsIT09Vi5sYXN0RWZmZWN0JiYobnVsbCE9PWEubGFzdEVmZmVjdCYmKGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PVYuZmlyc3RFZmZlY3QpLFxuYS5sYXN0RWZmZWN0PVYubGFzdEVmZmVjdCksMTxWLmVmZmVjdFRhZyYmKG51bGwhPT1hLmxhc3RFZmZlY3Q/YS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9VjphLmZpcnN0RWZmZWN0PVYsYS5sYXN0RWZmZWN0PVYpKX1lbHNle2I9TWkoVixXKTtpZihudWxsIT09YilyZXR1cm4gYi5lZmZlY3RUYWcmPTIwNDcsYjtudWxsIT09YSYmKGEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PW51bGwsYS5lZmZlY3RUYWd8PTIwNDgpfWI9Vi5zaWJsaW5nO2lmKG51bGwhPT1iKXJldHVybiBiO1Y9YX13aGlsZShudWxsIT09Vik7WD09PXFqJiYoWD12aik7cmV0dXJuIG51bGx9ZnVuY3Rpb24gWGooYSl7dmFyIGI9YS5leHBpcmF0aW9uVGltZTthPWEuY2hpbGRFeHBpcmF0aW9uVGltZTtyZXR1cm4gYj5hP2I6YX1mdW5jdGlvbiBZaihhKXt2YXIgYj1kZygpO2ZnKDk5LGlrLmJpbmQobnVsbCxhLGIpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGlrKGEsYil7U2ooKTtpZigoVCYob2p8cGopKSE9PVMpdGhyb3cgRXJyb3IodSgzMjcpKTt2YXIgYz1hLmZpbmlzaGVkV29yayxkPWEuZmluaXNoZWRFeHBpcmF0aW9uVGltZTtpZihudWxsPT09YylyZXR1cm4gbnVsbDthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRFeHBpcmF0aW9uVGltZT0wO2lmKGM9PT1hLmN1cnJlbnQpdGhyb3cgRXJyb3IodSgxNzcpKTthLmNhbGxiYWNrTm9kZT1udWxsO2EuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT0wO2EuY2FsbGJhY2tQcmlvcml0eT05MDthLm5leHRLbm93blBlbmRpbmdMZXZlbD0wO3ZhciBlPVhqKGMpO2EuZmlyc3RQZW5kaW5nVGltZT1lO2Q8PWEubGFzdFN1c3BlbmRlZFRpbWU/YS5maXJzdFN1c3BlbmRlZFRpbWU9YS5sYXN0U3VzcGVuZGVkVGltZT1hLm5leHRLbm93blBlbmRpbmdMZXZlbD0wOmQ8PWEuZmlyc3RTdXNwZW5kZWRUaW1lJiYoYS5maXJzdFN1c3BlbmRlZFRpbWU9ZC0xKTtkPD1hLmxhc3RQaW5nZWRUaW1lJiZcbihhLmxhc3RQaW5nZWRUaW1lPTApO2Q8PWEubGFzdEV4cGlyZWRUaW1lJiYoYS5sYXN0RXhwaXJlZFRpbWU9MCk7YT09PVUmJihWPVU9bnVsbCxXPTApOzE8Yy5lZmZlY3RUYWc/bnVsbCE9PWMubGFzdEVmZmVjdD8oYy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxlPWMuZmlyc3RFZmZlY3QpOmU9YzplPWMuZmlyc3RFZmZlY3Q7aWYobnVsbCE9PWUpe3ZhciBmPVQ7VHw9cGo7bWouY3VycmVudD1udWxsO2xlPUxkO3ZhciBnPWZlKCk7aWYoZ2UoZykpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGcpdmFyIGg9e3N0YXJ0Omcuc2VsZWN0aW9uU3RhcnQsZW5kOmcuc2VsZWN0aW9uRW5kfTtlbHNlIGE6e2g9KGg9Zy5vd25lckRvY3VtZW50KSYmaC5kZWZhdWx0Vmlld3x8d2luZG93O3ZhciBrPWguZ2V0U2VsZWN0aW9uJiZoLmdldFNlbGVjdGlvbigpO2lmKGsmJjAhPT1rLnJhbmdlQ291bnQpe2g9ay5hbmNob3JOb2RlO3ZhciBsPWsuYW5jaG9yT2Zmc2V0LG09ay5mb2N1c05vZGU7az1rLmZvY3VzT2Zmc2V0O1xudHJ5e2gubm9kZVR5cGUsbS5ub2RlVHlwZX1jYXRjaChEYil7aD1udWxsO2JyZWFrIGF9dmFyIEM9MCx5PS0xLEg9LTEsej0wLHRhPTAscj1nLHg9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciBBOzspe3IhPT1ofHwwIT09bCYmMyE9PXIubm9kZVR5cGV8fCh5PUMrbCk7ciE9PW18fDAhPT1rJiYzIT09ci5ub2RlVHlwZXx8KEg9QytrKTszPT09ci5ub2RlVHlwZSYmKEMrPXIubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PShBPXIuZmlyc3RDaGlsZCkpYnJlYWs7eD1yO3I9QX1mb3IoOzspe2lmKHI9PT1nKWJyZWFrIGI7eD09PWgmJisrej09PWwmJih5PUMpO3g9PT1tJiYrK3RhPT09ayYmKEg9Qyk7aWYobnVsbCE9PShBPXIubmV4dFNpYmxpbmcpKWJyZWFrO3I9eDt4PXIucGFyZW50Tm9kZX1yPUF9aD0tMT09PXl8fC0xPT09SD9udWxsOntzdGFydDp5LGVuZDpIfX1lbHNlIGg9bnVsbH1oPWh8fHtzdGFydDowLGVuZDowfX1lbHNlIGg9bnVsbDttZT17Zm9jdXNlZEVsZW06ZyxzZWxlY3Rpb25SYW5nZTpofTtcbkxkPSExO1k9ZTtkbyB0cnl7amsoKX1jYXRjaChEYil7aWYobnVsbD09PVkpdGhyb3cgRXJyb3IodSgzMzApKTtSaShZLERiKTtZPVkubmV4dEVmZmVjdH13aGlsZShudWxsIT09WSk7WT1lO2RvIHRyeXtmb3IoZz1hLGg9YjtudWxsIT09WTspe3ZhciBwPVkuZWZmZWN0VGFnO3AmMTYmJlRiKFkuc3RhdGVOb2RlLFwiXCIpO2lmKHAmMTI4KXt2YXIgdD1ZLmFsdGVybmF0ZTtpZihudWxsIT09dCl7dmFyIHY9dC5yZWY7bnVsbCE9PXYmJihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdj92KG51bGwpOnYuY3VycmVudD1udWxsKX19c3dpdGNoKHAmMTAzOCl7Y2FzZSAyOiRpKFkpO1kuZWZmZWN0VGFnJj0tMzticmVhaztjYXNlIDY6JGkoWSk7WS5lZmZlY3RUYWcmPS0zO2FqKFkuYWx0ZXJuYXRlLFkpO2JyZWFrO2Nhc2UgMTAyNDpZLmVmZmVjdFRhZyY9LTEwMjU7YnJlYWs7Y2FzZSAxMDI4OlkuZWZmZWN0VGFnJj0tMTAyNTthaihZLmFsdGVybmF0ZSxZKTticmVhaztjYXNlIDQ6YWooWS5hbHRlcm5hdGUsXG5ZKTticmVhaztjYXNlIDg6bD1ZLFhpKGcsbCxoKSxZaShsKX1ZPVkubmV4dEVmZmVjdH19Y2F0Y2goRGIpe2lmKG51bGw9PT1ZKXRocm93IEVycm9yKHUoMzMwKSk7UmkoWSxEYik7WT1ZLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVkpO3Y9bWU7dD1mZSgpO3A9di5mb2N1c2VkRWxlbTtoPXYuc2VsZWN0aW9uUmFuZ2U7aWYodCE9PXAmJnAmJnAub3duZXJEb2N1bWVudCYmZWUocC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxwKSl7bnVsbCE9PWgmJmdlKHApJiYodD1oLnN0YXJ0LHY9aC5lbmQsdm9pZCAwPT09diYmKHY9dCksXCJzZWxlY3Rpb25TdGFydFwiaW4gcD8ocC5zZWxlY3Rpb25TdGFydD10LHAuc2VsZWN0aW9uRW5kPU1hdGgubWluKHYscC52YWx1ZS5sZW5ndGgpKToodj0odD1wLm93bmVyRG9jdW1lbnR8fGRvY3VtZW50KSYmdC5kZWZhdWx0Vmlld3x8d2luZG93LHYuZ2V0U2VsZWN0aW9uJiYodj12LmdldFNlbGVjdGlvbigpLGw9cC50ZXh0Q29udGVudC5sZW5ndGgsXG5nPU1hdGgubWluKGguc3RhcnQsbCksaD12b2lkIDA9PT1oLmVuZD9nOk1hdGgubWluKGguZW5kLGwpLCF2LmV4dGVuZCYmZz5oJiYobD1oLGg9ZyxnPWwpLGw9ZGUocCxnKSxtPWRlKHAsaCksbCYmbSYmKDEhPT12LnJhbmdlQ291bnR8fHYuYW5jaG9yTm9kZSE9PWwubm9kZXx8di5hbmNob3JPZmZzZXQhPT1sLm9mZnNldHx8di5mb2N1c05vZGUhPT1tLm5vZGV8fHYuZm9jdXNPZmZzZXQhPT1tLm9mZnNldCkmJih0PXQuY3JlYXRlUmFuZ2UoKSx0LnNldFN0YXJ0KGwubm9kZSxsLm9mZnNldCksdi5yZW1vdmVBbGxSYW5nZXMoKSxnPmg/KHYuYWRkUmFuZ2UodCksdi5leHRlbmQobS5ub2RlLG0ub2Zmc2V0KSk6KHQuc2V0RW5kKG0ubm9kZSxtLm9mZnNldCksdi5hZGRSYW5nZSh0KSkpKSkpO3Q9W107Zm9yKHY9cDt2PXYucGFyZW50Tm9kZTspMT09PXYubm9kZVR5cGUmJnQucHVzaCh7ZWxlbWVudDp2LGxlZnQ6di5zY3JvbGxMZWZ0LHRvcDp2LnNjcm9sbFRvcH0pO1wiZnVuY3Rpb25cIj09PVxudHlwZW9mIHAuZm9jdXMmJnAuZm9jdXMoKTtmb3IocD0wO3A8dC5sZW5ndGg7cCsrKXY9dFtwXSx2LmVsZW1lbnQuc2Nyb2xsTGVmdD12LmxlZnQsdi5lbGVtZW50LnNjcm9sbFRvcD12LnRvcH1tZT1udWxsO0xkPSEhbGU7bGU9bnVsbDthLmN1cnJlbnQ9YztZPWU7ZG8gdHJ5e2ZvcihwPWQ7bnVsbCE9PVk7KXt2YXIgRGg9WS5lZmZlY3RUYWc7aWYoRGgmMzYpe3ZhciBjYz1ZLmFsdGVybmF0ZTt0PVk7dj1wO3N3aXRjaCh0LnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpVaSgxNiwzMix0KTticmVhaztjYXNlIDE6dmFyIGRkPXQuc3RhdGVOb2RlO2lmKHQuZWZmZWN0VGFnJjQpaWYobnVsbD09PWNjKWRkLmNvbXBvbmVudERpZE1vdW50KCk7ZWxzZXt2YXIgaGs9dC5lbGVtZW50VHlwZT09PXQudHlwZT9jYy5tZW1vaXplZFByb3BzOm1nKHQudHlwZSxjYy5tZW1vaXplZFByb3BzKTtkZC5jb21wb25lbnREaWRVcGRhdGUoaGssY2MubWVtb2l6ZWRTdGF0ZSxkZC5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSl9dmFyIEVoPVxudC51cGRhdGVRdWV1ZTtudWxsIT09RWgmJktnKHQsRWgsZGQsdik7YnJlYWs7Y2FzZSAzOnZhciBGaD10LnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1GaCl7Zz1udWxsO2lmKG51bGwhPT10LmNoaWxkKXN3aXRjaCh0LmNoaWxkLnRhZyl7Y2FzZSA1Omc9dC5jaGlsZC5zdGF0ZU5vZGU7YnJlYWs7Y2FzZSAxOmc9dC5jaGlsZC5zdGF0ZU5vZGV9S2codCxGaCxnLHYpfWJyZWFrO2Nhc2UgNTp2YXIgeGs9dC5zdGF0ZU5vZGU7bnVsbD09PWNjJiZ0LmVmZmVjdFRhZyY0JiZuZSh0LnR5cGUsdC5tZW1vaXplZFByb3BzKSYmeGsuZm9jdXMoKTticmVhaztjYXNlIDY6YnJlYWs7Y2FzZSA0OmJyZWFrO2Nhc2UgMTI6YnJlYWs7Y2FzZSAxMzppZihudWxsPT09dC5tZW1vaXplZFN0YXRlKXt2YXIgRGk9dC5hbHRlcm5hdGU7aWYobnVsbCE9PURpKXt2YXIgRWk9RGkubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09RWkpe3ZhciBGaT1FaS5kZWh5ZHJhdGVkO251bGwhPT1GaSYmTGMoRmkpfX19YnJlYWs7XG5jYXNlIDE5OmNhc2UgMTc6Y2FzZSAyMDpjYXNlIDIxOmJyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgxNjMpKTt9fWlmKERoJjEyOCl7dD12b2lkIDA7dmFyIHdkPVkucmVmO2lmKG51bGwhPT13ZCl7dmFyIEdpPVkuc3RhdGVOb2RlO3N3aXRjaChZLnRhZyl7Y2FzZSA1OnQ9R2k7YnJlYWs7ZGVmYXVsdDp0PUdpfVwiZnVuY3Rpb25cIj09PXR5cGVvZiB3ZD93ZCh0KTp3ZC5jdXJyZW50PXR9fVk9WS5uZXh0RWZmZWN0fX1jYXRjaChEYil7aWYobnVsbD09PVkpdGhyb3cgRXJyb3IodSgzMzApKTtSaShZLERiKTtZPVkubmV4dEVmZmVjdH13aGlsZShudWxsIT09WSk7WT1udWxsO1lmKCk7VD1mfWVsc2UgYS5jdXJyZW50PWM7aWYoRGopRGo9ITEsRWo9YSxGaj1iO2Vsc2UgZm9yKFk9ZTtudWxsIT09WTspYj1ZLm5leHRFZmZlY3QsWS5uZXh0RWZmZWN0PW51bGwsWT1iO2I9YS5maXJzdFBlbmRpbmdUaW1lOzA9PT1iJiYoamo9bnVsbCk7MTA3Mzc0MTgyMz09PWI/YT09PUlqP0hqKys6KEhqPVxuMCxJaj1hKTpIaj0wO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBrayYma2soYy5zdGF0ZU5vZGUsZCk7WihhKTtpZihnail0aHJvdyBnaj0hMSxhPWhqLGhqPW51bGwsYTtpZigoVCZuaikhPT1TKXJldHVybiBudWxsO2pnKCk7cmV0dXJuIG51bGx9ZnVuY3Rpb24gamsoKXtmb3IoO251bGwhPT1ZOyl7dmFyIGE9WS5lZmZlY3RUYWc7MCE9PShhJjI1NikmJlRpKFkuYWx0ZXJuYXRlLFkpOzA9PT0oYSY1MTIpfHxEanx8KERqPSEwLGdnKDk3LGZ1bmN0aW9uKCl7U2ooKTtyZXR1cm4gbnVsbH0pKTtZPVkubmV4dEVmZmVjdH19ZnVuY3Rpb24gU2ooKXtpZig5MCE9PUZqKXt2YXIgYT05NzxGaj85NzpGajtGaj05MDtyZXR1cm4gZmcoYSxsayl9fVxuZnVuY3Rpb24gbGsoKXtpZihudWxsPT09RWopcmV0dXJuITE7dmFyIGE9RWo7RWo9bnVsbDtpZigoVCYob2p8cGopKSE9PVMpdGhyb3cgRXJyb3IodSgzMzEpKTt2YXIgYj1UO1R8PXBqO2ZvcihhPWEuY3VycmVudC5maXJzdEVmZmVjdDtudWxsIT09YTspe3RyeXt2YXIgYz1hO2lmKDAhPT0oYy5lZmZlY3RUYWcmNTEyKSlzd2l0Y2goYy50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6VWkoMTI4LDAsYyksVWkoMCw2NCxjKX19Y2F0Y2goZCl7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IodSgzMzApKTtSaShhLGQpfWM9YS5uZXh0RWZmZWN0O2EubmV4dEVmZmVjdD1udWxsO2E9Y31UPWI7amcoKTtyZXR1cm4hMH1mdW5jdGlvbiBtayhhLGIsYyl7Yj1OaShjLGIpO2I9ZmooYSxiLDEwNzM3NDE4MjMpO0RnKGEsYik7YT1LaihhLDEwNzM3NDE4MjMpO251bGwhPT1hJiZaKGEpfVxuZnVuY3Rpb24gUmkoYSxiKXtpZigzPT09YS50YWcpbWsoYSxhLGIpO2Vsc2UgZm9yKHZhciBjPWEucmV0dXJuO251bGwhPT1jOyl7aWYoMz09PWMudGFnKXttayhjLGEsYik7YnJlYWt9ZWxzZSBpZigxPT09Yy50YWcpe3ZhciBkPWMuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1qanx8IWpqLmhhcyhkKSkpe2E9TmkoYixhKTthPWlqKGMsYSwxMDczNzQxODIzKTtEZyhjLGEpO2M9S2ooYywxMDczNzQxODIzKTtudWxsIT09YyYmWihjKTticmVha319Yz1jLnJldHVybn19XG5mdW5jdGlvbiBkayhhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7bnVsbCE9PWQmJmQuZGVsZXRlKGIpO1U9PT1hJiZXPT09Yz9YPT09dWp8fFg9PT10aiYmMTA3Mzc0MTgyMz09PXhqJiZjZygpLWJqPENqP1RqKGEsVyk6Qmo9ITA6UGooYSxjKSYmKGI9YS5sYXN0UGluZ2VkVGltZSwwIT09YiYmYjxjfHwoYS5sYXN0UGluZ2VkVGltZT1jLGEuZmluaXNoZWRFeHBpcmF0aW9uVGltZT09PWMmJihhLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9MCxhLmZpbmlzaGVkV29yaz1udWxsKSxaKGEpKSl9ZnVuY3Rpb24gZGooYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtudWxsIT09YyYmYy5kZWxldGUoYik7Yj0wOzA9PT1iJiYoYj1QZygpLGI9UWcoYixhLG51bGwpKTthPUtqKGEsYik7bnVsbCE9PWEmJlooYSl9dmFyIGdrO1xuZ2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWIuZXhwaXJhdGlvblRpbWU7aWYobnVsbCE9PWEpe3ZhciBlPWIucGVuZGluZ1Byb3BzO2lmKGEubWVtb2l6ZWRQcm9wcyE9PWV8fEsuY3VycmVudCl3Zz0hMDtlbHNle2lmKGQ8Yyl7d2c9ITE7c3dpdGNoKGIudGFnKXtjYXNlIDM6d2koYik7bGkoKTticmVhaztjYXNlIDU6b2goYik7aWYoYi5tb2RlJjQmJjEhPT1jJiZlLmhpZGRlbilyZXR1cm4gYi5leHBpcmF0aW9uVGltZT1iLmNoaWxkRXhwaXJhdGlvblRpbWU9MSxudWxsO2JyZWFrO2Nhc2UgMTpMKGIudHlwZSkmJkpmKGIpO2JyZWFrO2Nhc2UgNDptaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2JyZWFrO2Nhc2UgMTA6c2coYixiLm1lbW9pemVkUHJvcHMudmFsdWUpO2JyZWFrO2Nhc2UgMTM6aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSl7ZD1iLmNoaWxkLmNoaWxkRXhwaXJhdGlvblRpbWU7aWYoMCE9PWQmJmQ+PWMpcmV0dXJuIHlpKGEsYixjKTtJKE0sTS5jdXJyZW50JlxuMSxiKTtiPW9pKGEsYixjKTtyZXR1cm4gbnVsbCE9PWI/Yi5zaWJsaW5nOm51bGx9SShNLE0uY3VycmVudCYxLGIpO2JyZWFrO2Nhc2UgMTk6ZD1iLmNoaWxkRXhwaXJhdGlvblRpbWU+PWM7aWYoMCE9PShhLmVmZmVjdFRhZyY2NCkpe2lmKGQpcmV0dXJuIEJpKGEsYixjKTtiLmVmZmVjdFRhZ3w9NjR9ZT1iLm1lbW9pemVkU3RhdGU7bnVsbCE9PWUmJihlLnJlbmRlcmluZz1udWxsLGUudGFpbD1udWxsKTtJKE0sTS5jdXJyZW50LGIpO2lmKCFkKXJldHVybiBudWxsfXJldHVybiBvaShhLGIsYyl9d2c9ITF9fWVsc2Ugd2c9ITE7Yi5leHBpcmF0aW9uVGltZT0wO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmQ9Yi50eXBlO251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKTthPWIucGVuZGluZ1Byb3BzO2U9RWYoYixKLmN1cnJlbnQpO3ZnKGIsYyk7ZT1JaChudWxsLGIsZCxhLGUsYyk7Yi5lZmZlY3RUYWd8PTE7aWYoXCJvYmplY3RcIj09PVxudHlwZW9mIGUmJm51bGwhPT1lJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5yZW5kZXImJnZvaWQgMD09PWUuJCR0eXBlb2Ype2IudGFnPTE7TWgoKTtpZihMKGQpKXt2YXIgZj0hMDtKZihiKX1lbHNlIGY9ITE7Yi5tZW1vaXplZFN0YXRlPW51bGwhPT1lLnN0YXRlJiZ2b2lkIDAhPT1lLnN0YXRlP2Uuc3RhdGU6bnVsbDt2YXIgZz1kLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYmT2coYixkLGcsYSk7ZS51cGRhdGVyPVNnO2Iuc3RhdGVOb2RlPWU7ZS5fcmVhY3RJbnRlcm5hbEZpYmVyPWI7V2coYixkLGEsYyk7Yj12aShudWxsLGIsZCwhMCxmLGMpfWVsc2UgYi50YWc9MCxSKG51bGwsYixlLGMpLGI9Yi5jaGlsZDtyZXR1cm4gYjtjYXNlIDE2OmU9Yi5lbGVtZW50VHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9Mik7YT1iLnBlbmRpbmdQcm9wcztWYShlKTtpZigxIT09ZS5fc3RhdHVzKXRocm93IGUuX3Jlc3VsdDtcbmU9ZS5fcmVzdWx0O2IudHlwZT1lO2Y9Yi50YWc9bmsoZSk7YT1tZyhlLGEpO3N3aXRjaChmKXtjYXNlIDA6Yj1zaShudWxsLGIsZSxhLGMpO2JyZWFrO2Nhc2UgMTpiPXVpKG51bGwsYixlLGEsYyk7YnJlYWs7Y2FzZSAxMTpiPW5pKG51bGwsYixlLGEsYyk7YnJlYWs7Y2FzZSAxNDpiPXBpKG51bGwsYixlLG1nKGUudHlwZSxhKSxkLGMpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgzMDYsZSxcIlwiKSk7fXJldHVybiBiO2Nhc2UgMDpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bWcoZCxlKSxzaShhLGIsZCxlLGMpO2Nhc2UgMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bWcoZCxlKSx1aShhLGIsZCxlLGMpO2Nhc2UgMzp3aShiKTtkPWIudXBkYXRlUXVldWU7aWYobnVsbD09PWQpdGhyb3cgRXJyb3IodSgyODIpKTtlPWIubWVtb2l6ZWRTdGF0ZTtlPW51bGwhPT1lP2UuZWxlbWVudDpcbm51bGw7SGcoYixkLGIucGVuZGluZ1Byb3BzLG51bGwsYyk7ZD1iLm1lbW9pemVkU3RhdGUuZWxlbWVudDtpZihkPT09ZSlsaSgpLGI9b2koYSxiLGMpO2Vsc2V7aWYoZT1iLnN0YXRlTm9kZS5oeWRyYXRlKWRpPXJlKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8uZmlyc3RDaGlsZCksY2k9YixlPWVpPSEwO2lmKGUpZm9yKGM9Z2goYixudWxsLGQsYyksYi5jaGlsZD1jO2M7KWMuZWZmZWN0VGFnPWMuZWZmZWN0VGFnJi0zfDEwMjQsYz1jLnNpYmxpbmc7ZWxzZSBSKGEsYixkLGMpLGxpKCk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gb2goYiksbnVsbD09PWEmJmlpKGIpLGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6bnVsbCxnPWUuY2hpbGRyZW4sb2UoZCxlKT9nPW51bGw6bnVsbCE9PWYmJm9lKGQsZikmJihiLmVmZmVjdFRhZ3w9MTYpLHRpKGEsYiksYi5tb2RlJjQmJjEhPT1jJiZlLmhpZGRlbj8oYi5leHBpcmF0aW9uVGltZT1cbmIuY2hpbGRFeHBpcmF0aW9uVGltZT0xLGI9bnVsbCk6KFIoYSxiLGcsYyksYj1iLmNoaWxkKSxiO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJmlpKGIpLG51bGw7Y2FzZSAxMzpyZXR1cm4geWkoYSxiLGMpO2Nhc2UgNDpyZXR1cm4gbWgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxkPWIucGVuZGluZ1Byb3BzLG51bGw9PT1hP2IuY2hpbGQ9ZmgoYixudWxsLGQsYyk6UihhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOm1nKGQsZSksbmkoYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIFIoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBSKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIFIoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMDphOntkPWIudHlwZS5fY29udGV4dDtcbmU9Yi5wZW5kaW5nUHJvcHM7Zz1iLm1lbW9pemVkUHJvcHM7Zj1lLnZhbHVlO3NnKGIsZik7aWYobnVsbCE9PWcpe3ZhciBoPWcudmFsdWU7Zj1vZihoLGYpPzA6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyhoLGYpOjEwNzM3NDE4MjMpfDA7aWYoMD09PWYpe2lmKGcuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhSy5jdXJyZW50KXtiPW9pKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihoPWIuY2hpbGQsbnVsbCE9PWgmJihoLnJldHVybj1iKTtudWxsIT09aDspe3ZhciBrPWguZGVwZW5kZW5jaWVzO2lmKG51bGwhPT1rKXtnPWguY2hpbGQ7Zm9yKHZhciBsPWsuZmlyc3RDb250ZXh0O251bGwhPT1sOyl7aWYobC5jb250ZXh0PT09ZCYmMCE9PShsLm9ic2VydmVkQml0cyZmKSl7MT09PWgudGFnJiYobD1CZyhjLG51bGwpLGwudGFnPTIsRGcoaCxsKSk7aC5leHBpcmF0aW9uVGltZTxjJiYoaC5leHBpcmF0aW9uVGltZT1cbmMpO2w9aC5hbHRlcm5hdGU7bnVsbCE9PWwmJmwuZXhwaXJhdGlvblRpbWU8YyYmKGwuZXhwaXJhdGlvblRpbWU9Yyk7dWcoaC5yZXR1cm4sYyk7ay5leHBpcmF0aW9uVGltZTxjJiYoay5leHBpcmF0aW9uVGltZT1jKTticmVha31sPWwubmV4dH19ZWxzZSBnPTEwPT09aC50YWc/aC50eXBlPT09Yi50eXBlP251bGw6aC5jaGlsZDpoLmNoaWxkO2lmKG51bGwhPT1nKWcucmV0dXJuPWg7ZWxzZSBmb3IoZz1oO251bGwhPT1nOyl7aWYoZz09PWIpe2c9bnVsbDticmVha31oPWcuc2libGluZztpZihudWxsIT09aCl7aC5yZXR1cm49Zy5yZXR1cm47Zz1oO2JyZWFrfWc9Zy5yZXR1cm59aD1nfX1SKGEsYixlLmNoaWxkcmVuLGMpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDk6cmV0dXJuIGU9Yi50eXBlLGY9Yi5wZW5kaW5nUHJvcHMsZD1mLmNoaWxkcmVuLHZnKGIsYyksZT14ZyhlLGYudW5zdGFibGVfb2JzZXJ2ZWRCaXRzKSxkPWQoZSksYi5lZmZlY3RUYWd8PTEsUihhLGIsZCxjKSxiLmNoaWxkO1xuY2FzZSAxNDpyZXR1cm4gZT1iLnR5cGUsZj1tZyhlLGIucGVuZGluZ1Byb3BzKSxmPW1nKGUudHlwZSxmKSxwaShhLGIsZSxmLGQsYyk7Y2FzZSAxNTpyZXR1cm4gcmkoYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxkLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOm1nKGQsZSksbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpLGIudGFnPTEsTChkKT8oYT0hMCxKZihiKSk6YT0hMSx2ZyhiLGMpLFVnKGIsZCxlLGMpLFdnKGIsZCxlLGMpLHZpKG51bGwsYixkLCEwLGEsYyk7Y2FzZSAxOTpyZXR1cm4gQmkoYSxiLGMpfXRocm93IEVycm9yKHUoMTU2LGIudGFnKSk7fTt2YXIga2s9bnVsbCxXaT1udWxsO1xuZnVuY3Rpb24gb2soYSl7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pcmV0dXJuITE7dmFyIGI9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKGIuaXNEaXNhYmxlZHx8IWIuc3VwcG9ydHNGaWJlcilyZXR1cm4hMDt0cnl7dmFyIGM9Yi5pbmplY3QoYSk7a2s9ZnVuY3Rpb24oYSl7dHJ5e2Iub25Db21taXRGaWJlclJvb3QoYyxhLHZvaWQgMCw2ND09PShhLmN1cnJlbnQuZWZmZWN0VGFnJjY0KSl9Y2F0Y2goZSl7fX07V2k9ZnVuY3Rpb24oYSl7dHJ5e2Iub25Db21taXRGaWJlclVubW91bnQoYyxhKX1jYXRjaChlKXt9fX1jYXRjaChkKXt9cmV0dXJuITB9XG5mdW5jdGlvbiBwayhhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpcy5yZXR1cm49dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPXRoaXMuZWxlbWVudFR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMuZGVwZW5kZW5jaWVzPXRoaXMubWVtb2l6ZWRTdGF0ZT10aGlzLnVwZGF0ZVF1ZXVlPXRoaXMubWVtb2l6ZWRQcm9wcz1udWxsO3RoaXMubW9kZT1kO3RoaXMuZWZmZWN0VGFnPTA7dGhpcy5sYXN0RWZmZWN0PXRoaXMuZmlyc3RFZmZlY3Q9dGhpcy5uZXh0RWZmZWN0PW51bGw7dGhpcy5jaGlsZEV4cGlyYXRpb25UaW1lPXRoaXMuZXhwaXJhdGlvblRpbWU9MDt0aGlzLmFsdGVybmF0ZT1udWxsfWZ1bmN0aW9uIGdpKGEsYixjLGQpe3JldHVybiBuZXcgcGsoYSxiLGMsZCl9XG5mdW5jdGlvbiBxaShhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfWZ1bmN0aW9uIG5rKGEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBxaShhKT8xOjA7aWYodm9pZCAwIT09YSYmbnVsbCE9PWEpe2E9YS4kJHR5cGVvZjtpZihhPT09T2EpcmV0dXJuIDExO2lmKGE9PT1SYSlyZXR1cm4gMTR9cmV0dXJuIDJ9XG5mdW5jdGlvbiBhaChhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGw9PT1jPyhjPWdpKGEudGFnLGIsYS5rZXksYS5tb2RlKSxjLmVsZW1lbnRUeXBlPWEuZWxlbWVudFR5cGUsYy50eXBlPWEudHlwZSxjLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxjLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWMpOihjLnBlbmRpbmdQcm9wcz1iLGMuZWZmZWN0VGFnPTAsYy5uZXh0RWZmZWN0PW51bGwsYy5maXJzdEVmZmVjdD1udWxsLGMubGFzdEVmZmVjdD1udWxsKTtjLmNoaWxkRXhwaXJhdGlvblRpbWU9YS5jaGlsZEV4cGlyYXRpb25UaW1lO2MuZXhwaXJhdGlvblRpbWU9YS5leHBpcmF0aW9uVGltZTtjLmNoaWxkPWEuY2hpbGQ7Yy5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztjLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2MudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtiPWEuZGVwZW5kZW5jaWVzO2MuZGVwZW5kZW5jaWVzPW51bGw9PT1iP251bGw6e2V4cGlyYXRpb25UaW1lOmIuZXhwaXJhdGlvblRpbWUsXG5maXJzdENvbnRleHQ6Yi5maXJzdENvbnRleHQscmVzcG9uZGVyczpiLnJlc3BvbmRlcnN9O2Muc2libGluZz1hLnNpYmxpbmc7Yy5pbmRleD1hLmluZGV4O2MucmVmPWEucmVmO3JldHVybiBjfVxuZnVuY3Rpb24gY2goYSxiLGMsZCxlLGYpe3ZhciBnPTI7ZD1hO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXFpKGEpJiYoZz0xKTtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlnPTU7ZWxzZSBhOnN3aXRjaChhKXtjYXNlIElhOnJldHVybiBlaChjLmNoaWxkcmVuLGUsZixiKTtjYXNlIE5hOmc9ODtlfD03O2JyZWFrO2Nhc2UgSmE6Zz04O2V8PTE7YnJlYWs7Y2FzZSBLYTpyZXR1cm4gYT1naSgxMixjLGIsZXw4KSxhLmVsZW1lbnRUeXBlPUthLGEudHlwZT1LYSxhLmV4cGlyYXRpb25UaW1lPWYsYTtjYXNlIFBhOnJldHVybiBhPWdpKDEzLGMsYixlKSxhLnR5cGU9UGEsYS5lbGVtZW50VHlwZT1QYSxhLmV4cGlyYXRpb25UaW1lPWYsYTtjYXNlIFFhOnJldHVybiBhPWdpKDE5LGMsYixlKSxhLmVsZW1lbnRUeXBlPVFhLGEuZXhwaXJhdGlvblRpbWU9ZixhO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBMYTpnPVxuMTA7YnJlYWsgYTtjYXNlIE1hOmc9OTticmVhayBhO2Nhc2UgT2E6Zz0xMTticmVhayBhO2Nhc2UgUmE6Zz0xNDticmVhayBhO2Nhc2UgU2E6Zz0xNjtkPW51bGw7YnJlYWsgYX10aHJvdyBFcnJvcih1KDEzMCxudWxsPT1hP2E6dHlwZW9mIGEsXCJcIikpO31iPWdpKGcsYyxiLGUpO2IuZWxlbWVudFR5cGU9YTtiLnR5cGU9ZDtiLmV4cGlyYXRpb25UaW1lPWY7cmV0dXJuIGJ9ZnVuY3Rpb24gZWgoYSxiLGMsZCl7YT1naSg3LGEsZCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gYmgoYSxiLGMpe2E9Z2koNixhLG51bGwsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfVxuZnVuY3Rpb24gZGgoYSxiLGMpe2I9Z2koNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IuZXhwaXJhdGlvblRpbWU9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9XG5mdW5jdGlvbiBxayhhLGIsYyl7dGhpcy50YWc9Yjt0aGlzLmN1cnJlbnQ9bnVsbDt0aGlzLmNvbnRhaW5lckluZm89YTt0aGlzLnBpbmdDYWNoZT10aGlzLnBlbmRpbmdDaGlsZHJlbj1udWxsO3RoaXMuZmluaXNoZWRFeHBpcmF0aW9uVGltZT0wO3RoaXMuZmluaXNoZWRXb3JrPW51bGw7dGhpcy50aW1lb3V0SGFuZGxlPS0xO3RoaXMucGVuZGluZ0NvbnRleHQ9dGhpcy5jb250ZXh0PW51bGw7dGhpcy5oeWRyYXRlPWM7dGhpcy5jYWxsYmFja05vZGU9bnVsbDt0aGlzLmNhbGxiYWNrUHJpb3JpdHk9OTA7dGhpcy5sYXN0RXhwaXJlZFRpbWU9dGhpcy5sYXN0UGluZ2VkVGltZT10aGlzLm5leHRLbm93blBlbmRpbmdMZXZlbD10aGlzLmxhc3RTdXNwZW5kZWRUaW1lPXRoaXMuZmlyc3RTdXNwZW5kZWRUaW1lPXRoaXMuZmlyc3RQZW5kaW5nVGltZT0wfVxuZnVuY3Rpb24gUGooYSxiKXt2YXIgYz1hLmZpcnN0U3VzcGVuZGVkVGltZTthPWEubGFzdFN1c3BlbmRlZFRpbWU7cmV0dXJuIDAhPT1jJiZjPj1iJiZhPD1ifWZ1bmN0aW9uIE1qKGEsYil7dmFyIGM9YS5maXJzdFN1c3BlbmRlZFRpbWUsZD1hLmxhc3RTdXNwZW5kZWRUaW1lO2M8YiYmKGEuZmlyc3RTdXNwZW5kZWRUaW1lPWIpO2lmKGQ+Ynx8MD09PWMpYS5sYXN0U3VzcGVuZGVkVGltZT1iO2I8PWEubGFzdFBpbmdlZFRpbWUmJihhLmxhc3RQaW5nZWRUaW1lPTApO2I8PWEubGFzdEV4cGlyZWRUaW1lJiYoYS5sYXN0RXhwaXJlZFRpbWU9MCl9XG5mdW5jdGlvbiBOaihhLGIpe2I+YS5maXJzdFBlbmRpbmdUaW1lJiYoYS5maXJzdFBlbmRpbmdUaW1lPWIpO3ZhciBjPWEuZmlyc3RTdXNwZW5kZWRUaW1lOzAhPT1jJiYoYj49Yz9hLmZpcnN0U3VzcGVuZGVkVGltZT1hLmxhc3RTdXNwZW5kZWRUaW1lPWEubmV4dEtub3duUGVuZGluZ0xldmVsPTA6Yj49YS5sYXN0U3VzcGVuZGVkVGltZSYmKGEubGFzdFN1c3BlbmRlZFRpbWU9YisxKSxiPmEubmV4dEtub3duUGVuZGluZ0xldmVsJiYoYS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9YikpfWZ1bmN0aW9uIFJqKGEsYil7dmFyIGM9YS5sYXN0RXhwaXJlZFRpbWU7aWYoMD09PWN8fGM+YilhLmxhc3RFeHBpcmVkVGltZT1ifVxuZnVuY3Rpb24gcmsoYSxiLGMsZCl7dmFyIGU9Yi5jdXJyZW50LGY9UGcoKSxnPU1nLnN1c3BlbnNlO2Y9UWcoZixlLGcpO2E6aWYoYyl7Yz1jLl9yZWFjdEludGVybmFsRmliZXI7Yjp7aWYoZWMoYykhPT1jfHwxIT09Yy50YWcpdGhyb3cgRXJyb3IodSgxNzApKTt2YXIgaD1jO2Rve3N3aXRjaChoLnRhZyl7Y2FzZSAzOmg9aC5zdGF0ZU5vZGUuY29udGV4dDticmVhayBiO2Nhc2UgMTppZihMKGgudHlwZSkpe2g9aC5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7YnJlYWsgYn19aD1oLnJldHVybn13aGlsZShudWxsIT09aCk7dGhyb3cgRXJyb3IodSgxNzEpKTt9aWYoMT09PWMudGFnKXt2YXIgaz1jLnR5cGU7aWYoTChrKSl7Yz1JZihjLGssaCk7YnJlYWsgYX19Yz1ofWVsc2UgYz1DZjtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPUJnKGYsZyk7Yi5wYXlsb2FkPXtlbGVtZW50OmF9O2Q9dm9pZCAwPT09XG5kP251bGw6ZDtudWxsIT09ZCYmKGIuY2FsbGJhY2s9ZCk7RGcoZSxiKTtSZyhlLGYpO3JldHVybiBmfWZ1bmN0aW9uIHNrKGEpe2E9YS5jdXJyZW50O2lmKCFhLmNoaWxkKXJldHVybiBudWxsO3N3aXRjaChhLmNoaWxkLnRhZyl7Y2FzZSA1OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZTtkZWZhdWx0OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZX19ZnVuY3Rpb24gdGsoYSxiKXthPWEubWVtb2l6ZWRTdGF0ZTtudWxsIT09YSYmbnVsbCE9PWEuZGVoeWRyYXRlZCYmYS5yZXRyeVRpbWU8YiYmKGEucmV0cnlUaW1lPWIpfWZ1bmN0aW9uIHVrKGEsYil7dGsoYSxiKTsoYT1hLmFsdGVybmF0ZSkmJnRrKGEsYil9XG5mdW5jdGlvbiB2ayhhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOkhhLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fWpjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWxnKFBnKCksMTUwLDEwMCk7UmcoYSxiKTt1ayhhLGIpfX07a2M9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7UGcoKTt2YXIgYj1rZysrO1JnKGEsYik7dWsoYSxiKX19O2xjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPVBnKCk7Yj1RZyhiLGEsbnVsbCk7UmcoYSxiKTt1ayhhLGIpfX07XG5aYT1mdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOkViKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPVwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZT1cInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT15ZShkKTtpZighZSl0aHJvdyBFcnJvcih1KDkwKSk7emIoZCk7RWIoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOk1iKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZKYihhLCEhYy5tdWx0aXBsZSxiLCExKX19O1xuZnVuY3Rpb24gd2soYSxiLGMpe2M9bnVsbCE9YyYmITA9PT1jLmh5ZHJhdGU7dmFyIGQ9bmV3IHFrKGEsYixjKSxlPWdpKDMsbnVsbCxudWxsLDI9PT1iPzc6MT09PWI/MzowKTtkLmN1cnJlbnQ9ZTtlLnN0YXRlTm9kZT1kO2Fbd2VdPWQuY3VycmVudDtjJiYwIT09YiYmd2MoOT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQpO3RoaXMuX2ludGVybmFsUm9vdD1kfXdrLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLl9pbnRlcm5hbFJvb3Q7cmsoYSxjLG51bGwsdm9pZCAwPT09Yj9udWxsOmIpfTt3ay5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbihhKXt2YXIgYj10aGlzLl9pbnRlcm5hbFJvb3Q7cmsobnVsbCxiLG51bGwsdm9pZCAwPT09YT9udWxsOmEpfTtcbmZ1bmN0aW9uIHlrKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1lYj1iaztmYj1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1UO1R8PTQ7dHJ5e3JldHVybiBmZyg5OCxhLmJpbmQobnVsbCxiLGMsZCkpfWZpbmFsbHl7VD1lLFQ9PT1TJiZqZygpfX07Z2I9ZnVuY3Rpb24oKXsoVCYoMXxvanxwaikpPT09UyYmKGFrKCksU2ooKSl9O2hiPWZ1bmN0aW9uKGEsYil7dmFyIGM9VDtUfD0yO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1Q9YyxUPT09UyYmamcoKX19O1xuZnVuY3Rpb24gemsoYSxiKXtifHwoYj1hPzk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEuZmlyc3RDaGlsZDpudWxsLGI9ISghYnx8MSE9PWIubm9kZVR5cGV8fCFiLmhhc0F0dHJpYnV0ZShcImRhdGEtcmVhY3Ryb290XCIpKSk7aWYoIWIpZm9yKHZhciBjO2M9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYyk7cmV0dXJuIG5ldyB3ayhhLDAsYj97aHlkcmF0ZTohMH06dm9pZCAwKX1cbmZ1bmN0aW9uIEFrKGEsYixjLGQsZSl7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe3ZhciBnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9c2soZyk7aC5jYWxsKGEpfX1yayhiLGcsYSxlKX1lbHNle2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPXprKGMsZCk7Zz1mLl9pbnRlcm5hbFJvb3Q7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBrPWU7ZT1mdW5jdGlvbigpe3ZhciBhPXNrKGcpO2suY2FsbChhKX19Y2soZnVuY3Rpb24oKXtyayhiLGcsYSxlKX0pfXJldHVybiBzayhnKX1mdW5jdGlvbiBCayhhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO2lmKCF5ayhiKSl0aHJvdyBFcnJvcih1KDIwMCkpO3JldHVybiB2ayhhLGIsbnVsbCxjKX1cbnZhciBDaz17Y3JlYXRlUG9ydGFsOkJrLGZpbmRET01Ob2RlOmZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO2lmKHZvaWQgMD09PWIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcil0aHJvdyBFcnJvcih1KDE4OCkpO3Rocm93IEVycm9yKHUoMjY4LE9iamVjdC5rZXlzKGEpKSk7fWE9aWMoYik7YT1udWxsPT09YT9udWxsOmEuc3RhdGVOb2RlO3JldHVybiBhfSxoeWRyYXRlOmZ1bmN0aW9uKGEsYixjKXtpZigheWsoYikpdGhyb3cgRXJyb3IodSgyMDApKTtyZXR1cm4gQWsobnVsbCxhLGIsITAsYyl9LHJlbmRlcjpmdW5jdGlvbihhLGIsYyl7aWYoIXlrKGIpKXRocm93IEVycm9yKHUoMjAwKSk7cmV0dXJuIEFrKG51bGwsYSxiLCExLGMpfSx1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcjpmdW5jdGlvbihhLGIsYyxkKXtpZigheWsoYykpdGhyb3cgRXJyb3IodSgyMDApKTtcbmlmKG51bGw9PWF8fHZvaWQgMD09PWEuX3JlYWN0SW50ZXJuYWxGaWJlcil0aHJvdyBFcnJvcih1KDM4KSk7cmV0dXJuIEFrKGEsYixjLCExLGQpfSx1bm1vdW50Q29tcG9uZW50QXROb2RlOmZ1bmN0aW9uKGEpe2lmKCF5ayhhKSl0aHJvdyBFcnJvcih1KDQwKSk7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oY2soZnVuY3Rpb24oKXtBayhudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsfSl9KSwhMCk6ITF9LHVuc3RhYmxlX2NyZWF0ZVBvcnRhbDpmdW5jdGlvbigpe3JldHVybiBCay5hcHBseSh2b2lkIDAsYXJndW1lbnRzKX0sdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM6YmssZmx1c2hTeW5jOmZ1bmN0aW9uKGEsYil7aWYoKFQmKG9qfHBqKSkhPT1TKXRocm93IEVycm9yKHUoMTg3KSk7dmFyIGM9VDtUfD0xO3RyeXtyZXR1cm4gZmcoOTksYS5iaW5kKG51bGwsYikpfWZpbmFsbHl7VD1jLGpnKCl9fSxfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDp7RXZlbnRzOltDYyxcbnhlLHllLENhLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSxmYSxTYyxmdW5jdGlvbihhKXt5YShhLFJjKX0sY2IsZGIsUGQsQmEsU2ose2N1cnJlbnQ6ITF9XX19O1xuKGZ1bmN0aW9uKGEpe3ZhciBiPWEuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U7cmV0dXJuIG9rKG4oe30sYSx7b3ZlcnJpZGVIb29rU3RhdGU6bnVsbCxvdmVycmlkZVByb3BzOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjpFYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9aWMoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBiP2IoYSk6bnVsbH0sZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoOm51bGwsc2NoZWR1bGVSZWZyZXNoOm51bGwsc2NoZWR1bGVSb290Om51bGwsc2V0UmVmcmVzaEhhbmRsZXI6bnVsbCxnZXRDdXJyZW50RmliZXI6bnVsbH0pKX0pKHtmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpGYyxidW5kbGVUeXBlOjAsdmVyc2lvbjpcIjE2LjExLjBcIixcbnJlbmRlcmVyUGFja2FnZU5hbWU6XCJyZWFjdC1kb21cIn0pO3ZhciBEaz17ZGVmYXVsdDpDa30sRWs9RGsmJkNrfHxEazttb2R1bGUuZXhwb3J0cz1Fay5kZWZhdWx0fHxFaztcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjAuMTcuMFxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBmLGcsaCxrLGw7XG5pZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgcD1udWxsLHE9bnVsbCx0PWZ1bmN0aW9uKCl7aWYobnVsbCE9PXApdHJ5e3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7cCghMCxhKTtwPW51bGx9Y2F0Y2goYil7dGhyb3cgc2V0VGltZW91dCh0LDApLGI7fX0sdT1EYXRlLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIERhdGUubm93KCktdX07Zj1mdW5jdGlvbihhKXtudWxsIT09cD9zZXRUaW1lb3V0KGYsMCxhKToocD1hLHNldFRpbWVvdXQodCwwKSl9O2c9ZnVuY3Rpb24oYSxiKXtxPXNldFRpbWVvdXQoYSxiKX07aD1mdW5jdGlvbigpe2NsZWFyVGltZW91dChxKX07az1mdW5jdGlvbigpe3JldHVybiExfTtsPWV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oKXt9fWVsc2V7dmFyIHc9d2luZG93LnBlcmZvcm1hbmNlLHg9d2luZG93LkRhdGUsXG55PXdpbmRvdy5zZXRUaW1lb3V0LHo9d2luZG93LmNsZWFyVGltZW91dCxBPXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUsQj13aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWU7XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjb25zb2xlJiYoXCJmdW5jdGlvblwiIT09dHlwZW9mIEEmJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHJlcXVlc3RBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9mYi5tZS9yZWFjdC1wb2x5ZmlsbHNcIiksXCJmdW5jdGlvblwiIT09dHlwZW9mIEImJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IGNhbmNlbEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL2ZiLm1lL3JlYWN0LXBvbHlmaWxsc1wiKSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiB3JiZcblwiZnVuY3Rpb25cIj09PXR5cGVvZiB3Lm5vdylleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiB3Lm5vdygpfTtlbHNle3ZhciBDPXgubm93KCk7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4geC5ub3coKS1DfX12YXIgRD0hMSxFPW51bGwsRj0tMSxHPTUsSD0wO2s9ZnVuY3Rpb24oKXtyZXR1cm4gZXhwb3J0cy51bnN0YWJsZV9ub3coKT49SH07bD1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbihhKXswPmF8fDEyNTxhP2NvbnNvbGUuZXJyb3IoXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZXJhdGVzIGhpZ2hlciB0aGFuIDEyNSBmcHMgaXMgbm90IHVuc3VwcG9ydGVkXCIpOkc9MDxhP01hdGguZmxvb3IoMUUzL2EpOjMzLjMzfTt2YXIgST1uZXcgTWVzc2FnZUNoYW5uZWwsSj1JLnBvcnQyO0kucG9ydDEub25tZXNzYWdlPVxuZnVuY3Rpb24oKXtpZihudWxsIT09RSl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtIPWErRzt0cnl7RSghMCxhKT9KLnBvc3RNZXNzYWdlKG51bGwpOihEPSExLEU9bnVsbCl9Y2F0Y2goYil7dGhyb3cgSi5wb3N0TWVzc2FnZShudWxsKSxiO319ZWxzZSBEPSExfTtmPWZ1bmN0aW9uKGEpe0U9YTtEfHwoRD0hMCxKLnBvc3RNZXNzYWdlKG51bGwpKX07Zz1mdW5jdGlvbihhLGIpe0Y9eShmdW5jdGlvbigpe2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LGIpfTtoPWZ1bmN0aW9uKCl7eihGKTtGPS0xfX1mdW5jdGlvbiBLKGEsYil7dmFyIGM9YS5sZW5ndGg7YS5wdXNoKGIpO2E6Zm9yKDs7KXt2YXIgZD1NYXRoLmZsb29yKChjLTEpLzIpLGU9YVtkXTtpZih2b2lkIDAhPT1lJiYwPEwoZSxiKSlhW2RdPWIsYVtjXT1lLGM9ZDtlbHNlIGJyZWFrIGF9fWZ1bmN0aW9uIE0oYSl7YT1hWzBdO3JldHVybiB2b2lkIDA9PT1hP251bGw6YX1cbmZ1bmN0aW9uIE4oYSl7dmFyIGI9YVswXTtpZih2b2lkIDAhPT1iKXt2YXIgYz1hLnBvcCgpO2lmKGMhPT1iKXthWzBdPWM7YTpmb3IodmFyIGQ9MCxlPWEubGVuZ3RoO2Q8ZTspe3ZhciBtPTIqKGQrMSktMSxuPWFbbV0sdj1tKzEscj1hW3ZdO2lmKHZvaWQgMCE9PW4mJjA+TChuLGMpKXZvaWQgMCE9PXImJjA+TChyLG4pPyhhW2RdPXIsYVt2XT1jLGQ9dik6KGFbZF09bixhW21dPWMsZD1tKTtlbHNlIGlmKHZvaWQgMCE9PXImJjA+TChyLGMpKWFbZF09cixhW3ZdPWMsZD12O2Vsc2UgYnJlYWsgYX19cmV0dXJuIGJ9cmV0dXJuIG51bGx9ZnVuY3Rpb24gTChhLGIpe3ZhciBjPWEuc29ydEluZGV4LWIuc29ydEluZGV4O3JldHVybiAwIT09Yz9jOmEuaWQtYi5pZH12YXIgTz1bXSxQPVtdLFE9MSxSPW51bGwsUz0zLFQ9ITEsVT0hMSxWPSExO1xuZnVuY3Rpb24gVyhhKXtmb3IodmFyIGI9TShQKTtudWxsIT09Yjspe2lmKG51bGw9PT1iLmNhbGxiYWNrKU4oUCk7ZWxzZSBpZihiLnN0YXJ0VGltZTw9YSlOKFApLGIuc29ydEluZGV4PWIuZXhwaXJhdGlvblRpbWUsSyhPLGIpO2Vsc2UgYnJlYWs7Yj1NKFApfX1mdW5jdGlvbiBYKGEpe1Y9ITE7VyhhKTtpZighVSlpZihudWxsIT09TShPKSlVPSEwLGYoWSk7ZWxzZXt2YXIgYj1NKFApO251bGwhPT1iJiZnKFgsYi5zdGFydFRpbWUtYSl9fVxuZnVuY3Rpb24gWShhLGIpe1U9ITE7ViYmKFY9ITEsaCgpKTtUPSEwO3ZhciBjPVM7dHJ5e1coYik7Zm9yKFI9TShPKTtudWxsIT09UiYmKCEoUi5leHBpcmF0aW9uVGltZT5iKXx8YSYmIWsoKSk7KXt2YXIgZD1SLmNhbGxiYWNrO2lmKG51bGwhPT1kKXtSLmNhbGxiYWNrPW51bGw7Uz1SLnByaW9yaXR5TGV2ZWw7dmFyIGU9ZChSLmV4cGlyYXRpb25UaW1lPD1iKTtiPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGU/Ui5jYWxsYmFjaz1lOlI9PT1NKE8pJiZOKE8pO1coYil9ZWxzZSBOKE8pO1I9TShPKX1pZihudWxsIT09Uil2YXIgbT0hMDtlbHNle3ZhciBuPU0oUCk7bnVsbCE9PW4mJmcoWCxuLnN0YXJ0VGltZS1iKTttPSExfXJldHVybiBtfWZpbmFsbHl7Uj1udWxsLFM9YyxUPSExfX1cbmZ1bmN0aW9uIFooYSl7c3dpdGNoKGEpe2Nhc2UgMTpyZXR1cm4tMTtjYXNlIDI6cmV0dXJuIDI1MDtjYXNlIDU6cmV0dXJuIDEwNzM3NDE4MjM7Y2FzZSA0OnJldHVybiAxRTQ7ZGVmYXVsdDpyZXR1cm4gNUUzfX12YXIgYWE9bDtleHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5PTE7ZXhwb3J0cy51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eT0yO2V4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk9MztleHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPVM7Uz1hO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7Uz1jfX07XG5leHBvcnRzLnVuc3RhYmxlX25leHQ9ZnVuY3Rpb24oYSl7c3dpdGNoKFMpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOnZhciBiPTM7YnJlYWs7ZGVmYXVsdDpiPVN9dmFyIGM9UztTPWI7dHJ5e3JldHVybiBhKCl9ZmluYWxseXtTPWN9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXt2YXIgZT1jLmRlbGF5O2U9XCJudW1iZXJcIj09PXR5cGVvZiBlJiYwPGU/ZCtlOmQ7Yz1cIm51bWJlclwiPT09dHlwZW9mIGMudGltZW91dD9jLnRpbWVvdXQ6WihhKX1lbHNlIGM9WihhKSxlPWQ7Yz1lK2M7YT17aWQ6USsrLGNhbGxiYWNrOmIscHJpb3JpdHlMZXZlbDphLHN0YXJ0VGltZTplLGV4cGlyYXRpb25UaW1lOmMsc29ydEluZGV4Oi0xfTtlPmQ/KGEuc29ydEluZGV4PWUsSyhQLGEpLG51bGw9PT1NKE8pJiZhPT09TShQKSYmKFY/aCgpOlY9ITAsZyhYLGUtZCkpKTooYS5zb3J0SW5kZXg9YyxLKE8sYSksVXx8VHx8KFU9ITAsZihZKSkpO3JldHVybiBhfTtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe2EuY2FsbGJhY2s9bnVsbH07XG5leHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj1TO3JldHVybiBmdW5jdGlvbigpe3ZhciBjPVM7Uz1iO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXtTPWN9fX07ZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiBTfTtleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtXKGEpO3ZhciBiPU0oTyk7cmV0dXJuIGIhPT1SJiZudWxsIT09UiYmbnVsbCE9PWImJm51bGwhPT1iLmNhbGxiYWNrJiZiLnN0YXJ0VGltZTw9YSYmYi5leHBpcmF0aW9uVGltZTxSLmV4cGlyYXRpb25UaW1lfHxrKCl9O2V4cG9ydHMudW5zdGFibGVfcmVxdWVzdFBhaW50PWFhO2V4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb249ZnVuY3Rpb24oKXtVfHxUfHwoVT0hMCxmKFkpKX07XG5leHBvcnRzLnVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIE0oTyl9O2V4cG9ydHMudW5zdGFibGVfUHJvZmlsaW5nPW51bGw7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9XG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0KCkge31cbmVtcHR5RnVuY3Rpb25XaXRoUmVzZXQucmVzZXRXYXJuaW5nQ2FjaGUgPSBlbXB0eUZ1bmN0aW9uO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBzaGltKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgaWYgKHNlY3JldCA9PT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgIC8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcihcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgdGhyb3cgZXJyO1xuICB9O1xuICBzaGltLmlzUmVxdWlyZWQgPSBzaGltO1xuICBmdW5jdGlvbiBnZXRTaGltKCkge1xuICAgIHJldHVybiBzaGltO1xuICB9O1xuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNgLlxuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgYXJyYXk6IHNoaW0sXG4gICAgYm9vbDogc2hpbSxcbiAgICBmdW5jOiBzaGltLFxuICAgIG51bWJlcjogc2hpbSxcbiAgICBvYmplY3Q6IHNoaW0sXG4gICAgc3RyaW5nOiBzaGltLFxuICAgIHN5bWJvbDogc2hpbSxcblxuICAgIGFueTogc2hpbSxcbiAgICBhcnJheU9mOiBnZXRTaGltLFxuICAgIGVsZW1lbnQ6IHNoaW0sXG4gICAgZWxlbWVudFR5cGU6IHNoaW0sXG4gICAgaW5zdGFuY2VPZjogZ2V0U2hpbSxcbiAgICBub2RlOiBzaGltLFxuICAgIG9iamVjdE9mOiBnZXRTaGltLFxuICAgIG9uZU9mOiBnZXRTaGltLFxuICAgIG9uZU9mVHlwZTogZ2V0U2hpbSxcbiAgICBzaGFwZTogZ2V0U2hpbSxcbiAgICBleGFjdDogZ2V0U2hpbSxcblxuICAgIGNoZWNrUHJvcFR5cGVzOiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LFxuICAgIHJlc2V0V2FybmluZ0NhY2hlOiBlbXB0eUZ1bmN0aW9uXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cbiAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMS4wXG4gKiByZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtcbnZhciBiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsYz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGU9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsZj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxnPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksaz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGw9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxtPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxuPWI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHA9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMscT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpOlxuNjAxMjAscj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LHQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNix2PWI/U3ltYm9sLmZvcihcInJlYWN0LmZ1bmRhbWVudGFsXCIpOjYwMTE3LHc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucmVzcG9uZGVyXCIpOjYwMTE4LHg9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc2NvcGVcIik6NjAxMTk7ZnVuY3Rpb24geShhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgaDpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB1fX1jYXNlIHQ6Y2FzZSByOmNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIHooYSl7cmV0dXJuIHkoYSk9PT1tfVxuZXhwb3J0cy50eXBlT2Y9eTtleHBvcnRzLkFzeW5jTW9kZT1sO2V4cG9ydHMuQ29uY3VycmVudE1vZGU9bTtleHBvcnRzLkNvbnRleHRDb25zdW1lcj1rO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWg7ZXhwb3J0cy5FbGVtZW50PWM7ZXhwb3J0cy5Gb3J3YXJkUmVmPW47ZXhwb3J0cy5GcmFnbWVudD1lO2V4cG9ydHMuTGF6eT10O2V4cG9ydHMuTWVtbz1yO2V4cG9ydHMuUG9ydGFsPWQ7ZXhwb3J0cy5Qcm9maWxlcj1nO2V4cG9ydHMuU3RyaWN0TW9kZT1mO2V4cG9ydHMuU3VzcGVuc2U9cDtcbmV4cG9ydHMuaXNWYWxpZEVsZW1lbnRUeXBlPWZ1bmN0aW9uKGEpe3JldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGF8fGE9PT1lfHxhPT09bXx8YT09PWd8fGE9PT1mfHxhPT09cHx8YT09PXF8fFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJihhLiQkdHlwZW9mPT09dHx8YS4kJHR5cGVvZj09PXJ8fGEuJCR0eXBlb2Y9PT1ofHxhLiQkdHlwZW9mPT09a3x8YS4kJHR5cGVvZj09PW58fGEuJCR0eXBlb2Y9PT12fHxhLiQkdHlwZW9mPT09d3x8YS4kJHR5cGVvZj09PXgpfTtleHBvcnRzLmlzQXN5bmNNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpfHx5KGEpPT09bH07ZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlPXo7ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PWt9O2V4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1ofTtcbmV4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PWV9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09dH07ZXhwb3J0cy5pc01lbW89ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1yfTtleHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09ZH07ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09Z307ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1mfTtleHBvcnRzLmlzU3VzcGVuc2U9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1wfTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufSIsImZ1bmN0aW9uIGlzQWJzb2x1dGUocGF0aG5hbWUpIHtcbiAgcmV0dXJuIHBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nO1xufVxuXG4vLyBBYm91dCAxLjV4IGZhc3RlciB0aGFuIHRoZSB0d28tYXJnIHZlcnNpb24gb2YgQXJyYXkjc3BsaWNlKClcbmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xuICBmb3IgKHZhciBpID0gaW5kZXgsIGsgPSBpICsgMSwgbiA9IGxpc3QubGVuZ3RoOyBrIDwgbjsgaSArPSAxLCBrICs9IDEpIHtcbiAgICBsaXN0W2ldID0gbGlzdFtrXTtcbiAgfVxuXG4gIGxpc3QucG9wKCk7XG59XG5cbi8vIFRoaXMgaW1wbGVtZW50YXRpb24gaXMgYmFzZWQgaGVhdmlseSBvbiBub2RlJ3MgdXJsLnBhcnNlXG5mdW5jdGlvbiByZXNvbHZlUGF0aG5hbWUodG8sIGZyb20pIHtcbiAgaWYgKGZyb20gPT09IHVuZGVmaW5lZCkgZnJvbSA9ICcnO1xuXG4gIHZhciB0b1BhcnRzID0gKHRvICYmIHRvLnNwbGl0KCcvJykpIHx8IFtdO1xuICB2YXIgZnJvbVBhcnRzID0gKGZyb20gJiYgZnJvbS5zcGxpdCgnLycpKSB8fCBbXTtcblxuICB2YXIgaXNUb0FicyA9IHRvICYmIGlzQWJzb2x1dGUodG8pO1xuICB2YXIgaXNGcm9tQWJzID0gZnJvbSAmJiBpc0Fic29sdXRlKGZyb20pO1xuICB2YXIgbXVzdEVuZEFicyA9IGlzVG9BYnMgfHwgaXNGcm9tQWJzO1xuXG4gIGlmICh0byAmJiBpc0Fic29sdXRlKHRvKSkge1xuICAgIC8vIHRvIGlzIGFic29sdXRlXG4gICAgZnJvbVBhcnRzID0gdG9QYXJ0cztcbiAgfSBlbHNlIGlmICh0b1BhcnRzLmxlbmd0aCkge1xuICAgIC8vIHRvIGlzIHJlbGF0aXZlLCBkcm9wIHRoZSBmaWxlbmFtZVxuICAgIGZyb21QYXJ0cy5wb3AoKTtcbiAgICBmcm9tUGFydHMgPSBmcm9tUGFydHMuY29uY2F0KHRvUGFydHMpO1xuICB9XG5cbiAgaWYgKCFmcm9tUGFydHMubGVuZ3RoKSByZXR1cm4gJy8nO1xuXG4gIHZhciBoYXNUcmFpbGluZ1NsYXNoO1xuICBpZiAoZnJvbVBhcnRzLmxlbmd0aCkge1xuICAgIHZhciBsYXN0ID0gZnJvbVBhcnRzW2Zyb21QYXJ0cy5sZW5ndGggLSAxXTtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gbGFzdCA9PT0gJy4nIHx8IGxhc3QgPT09ICcuLicgfHwgbGFzdCA9PT0gJyc7XG4gIH0gZWxzZSB7XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIHVwID0gMDtcbiAgZm9yICh2YXIgaSA9IGZyb21QYXJ0cy5sZW5ndGg7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHBhcnQgPSBmcm9tUGFydHNbaV07XG5cbiAgICBpZiAocGFydCA9PT0gJy4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICB9IGVsc2UgaWYgKHBhcnQgPT09ICcuLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgaWYgKCFtdXN0RW5kQWJzKSBmb3IgKDsgdXAtLTsgdXApIGZyb21QYXJ0cy51bnNoaWZ0KCcuLicpO1xuXG4gIGlmIChcbiAgICBtdXN0RW5kQWJzICYmXG4gICAgZnJvbVBhcnRzWzBdICE9PSAnJyAmJlxuICAgICghZnJvbVBhcnRzWzBdIHx8ICFpc0Fic29sdXRlKGZyb21QYXJ0c1swXSkpXG4gIClcbiAgICBmcm9tUGFydHMudW5zaGlmdCgnJyk7XG5cbiAgdmFyIHJlc3VsdCA9IGZyb21QYXJ0cy5qb2luKCcvJyk7XG5cbiAgaWYgKGhhc1RyYWlsaW5nU2xhc2ggJiYgcmVzdWx0LnN1YnN0cigtMSkgIT09ICcvJykgcmVzdWx0ICs9ICcvJztcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCByZXNvbHZlUGF0aG5hbWU7XG4iLCJmdW5jdGlvbiB2YWx1ZU9mKG9iaikge1xuICByZXR1cm4gb2JqLnZhbHVlT2YgPyBvYmoudmFsdWVPZigpIDogT2JqZWN0LnByb3RvdHlwZS52YWx1ZU9mLmNhbGwob2JqKTtcbn1cblxuZnVuY3Rpb24gdmFsdWVFcXVhbChhLCBiKSB7XG4gIC8vIFRlc3QgZm9yIHN0cmljdCBlcXVhbGl0eSBmaXJzdC5cbiAgaWYgKGEgPT09IGIpIHJldHVybiB0cnVlO1xuXG4gIC8vIE90aGVyd2lzZSwgaWYgZWl0aGVyIG9mIHRoZW0gPT0gbnVsbCB0aGV5IGFyZSBub3QgZXF1YWwuXG4gIGlmIChhID09IG51bGwgfHwgYiA9PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoYSkpIHtcbiAgICByZXR1cm4gKFxuICAgICAgQXJyYXkuaXNBcnJheShiKSAmJlxuICAgICAgYS5sZW5ndGggPT09IGIubGVuZ3RoICYmXG4gICAgICBhLmV2ZXJ5KGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XG4gICAgICAgIHJldHVybiB2YWx1ZUVxdWFsKGl0ZW0sIGJbaW5kZXhdKTtcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIGIgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIGFWYWx1ZSA9IHZhbHVlT2YoYSk7XG4gICAgdmFyIGJWYWx1ZSA9IHZhbHVlT2YoYik7XG5cbiAgICBpZiAoYVZhbHVlICE9PSBhIHx8IGJWYWx1ZSAhPT0gYikgcmV0dXJuIHZhbHVlRXF1YWwoYVZhbHVlLCBiVmFsdWUpO1xuXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIGEsIGIpKS5ldmVyeShmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiB2YWx1ZUVxdWFsKGFba2V5XSwgYltrZXldKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdmFsdWVFcXVhbDtcbiIsInZhciBpc1Byb2R1Y3Rpb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nO1xudmFyIHByZWZpeCA9ICdJbnZhcmlhbnQgZmFpbGVkJztcbmZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgaWYgKGNvbmRpdGlvbikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChpc1Byb2R1Y3Rpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJlZml4KTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJlZml4ICsgXCI6IFwiICsgKG1lc3NhZ2UgfHwgJycpKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBpbnZhcmlhbnQ7XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgcmVzb2x2ZVBhdGhuYW1lIGZyb20gJ3Jlc29sdmUtcGF0aG5hbWUnO1xuaW1wb3J0IHZhbHVlRXF1YWwgZnJvbSAndmFsdWUtZXF1YWwnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuXG5mdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGggOiAnLycgKyBwYXRoO1xufVxuZnVuY3Rpb24gc3RyaXBMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gcGF0aC50b0xvd2VyQ2FzZSgpLmluZGV4T2YocHJlZml4LnRvTG93ZXJDYXNlKCkpID09PSAwICYmICcvPyMnLmluZGV4T2YocGF0aC5jaGFyQXQocHJlZml4Lmxlbmd0aCkpICE9PSAtMTtcbn1cbmZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpID8gcGF0aC5zdWJzdHIocHJlZml4Lmxlbmd0aCkgOiBwYXRoO1xufVxuZnVuY3Rpb24gc3RyaXBUcmFpbGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KHBhdGgubGVuZ3RoIC0gMSkgPT09ICcvJyA/IHBhdGguc2xpY2UoMCwgLTEpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7XG4gIHZhciBwYXRobmFtZSA9IHBhdGggfHwgJy8nO1xuICB2YXIgc2VhcmNoID0gJyc7XG4gIHZhciBoYXNoID0gJyc7XG4gIHZhciBoYXNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCcjJyk7XG5cbiAgaWYgKGhhc2hJbmRleCAhPT0gLTEpIHtcbiAgICBoYXNoID0gcGF0aG5hbWUuc3Vic3RyKGhhc2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgaGFzaEluZGV4KTtcbiAgfVxuXG4gIHZhciBzZWFyY2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJz8nKTtcblxuICBpZiAoc2VhcmNoSW5kZXggIT09IC0xKSB7XG4gICAgc2VhcmNoID0gcGF0aG5hbWUuc3Vic3RyKHNlYXJjaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBzZWFyY2hJbmRleCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICBzZWFyY2g6IHNlYXJjaCA9PT0gJz8nID8gJycgOiBzZWFyY2gsXG4gICAgaGFzaDogaGFzaCA9PT0gJyMnID8gJycgOiBoYXNoXG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVQYXRoKGxvY2F0aW9uKSB7XG4gIHZhciBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoLFxuICAgICAgaGFzaCA9IGxvY2F0aW9uLmhhc2g7XG4gIHZhciBwYXRoID0gcGF0aG5hbWUgfHwgJy8nO1xuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gJz8nKSBwYXRoICs9IHNlYXJjaC5jaGFyQXQoMCkgPT09ICc/JyA/IHNlYXJjaCA6IFwiP1wiICsgc2VhcmNoO1xuICBpZiAoaGFzaCAmJiBoYXNoICE9PSAnIycpIHBhdGggKz0gaGFzaC5jaGFyQXQoMCkgPT09ICcjJyA/IGhhc2ggOiBcIiNcIiArIGhhc2g7XG4gIHJldHVybiBwYXRoO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5LCBjdXJyZW50TG9jYXRpb24pIHtcbiAgdmFyIGxvY2F0aW9uO1xuXG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBUd28tYXJnIGZvcm06IHB1c2gocGF0aCwgc3RhdGUpXG4gICAgbG9jYXRpb24gPSBwYXJzZVBhdGgocGF0aCk7XG4gICAgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBPbmUtYXJnIGZvcm06IHB1c2gobG9jYXRpb24pXG4gICAgbG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgcGF0aCk7XG4gICAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnBhdGhuYW1lID0gJyc7XG5cbiAgICBpZiAobG9jYXRpb24uc2VhcmNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uc2VhcmNoLmNoYXJBdCgwKSAhPT0gJz8nKSBsb2NhdGlvbi5zZWFyY2ggPSAnPycgKyBsb2NhdGlvbi5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uaGFzaC5jaGFyQXQoMCkgIT09ICcjJykgbG9jYXRpb24uaGFzaCA9ICcjJyArIGxvY2F0aW9uLmhhc2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBsb2NhdGlvbi5zdGF0ZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGRlY29kZVVSSShsb2NhdGlvbi5wYXRobmFtZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIFVSSUVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgVVJJRXJyb3IoJ1BhdGhuYW1lIFwiJyArIGxvY2F0aW9uLnBhdGhuYW1lICsgJ1wiIGNvdWxkIG5vdCBiZSBkZWNvZGVkLiAnICsgJ1RoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBhbiBpbnZhbGlkIHBlcmNlbnQtZW5jb2RpbmcuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgaWYgKGtleSkgbG9jYXRpb24ua2V5ID0ga2V5O1xuXG4gIGlmIChjdXJyZW50TG9jYXRpb24pIHtcbiAgICAvLyBSZXNvbHZlIGluY29tcGxldGUvcmVsYXRpdmUgcGF0aG5hbWUgcmVsYXRpdmUgdG8gY3VycmVudCBsb2NhdGlvbi5cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZTtcbiAgICB9IGVsc2UgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IHJlc29sdmVQYXRobmFtZShsb2NhdGlvbi5wYXRobmFtZSwgY3VycmVudExvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gV2hlbiB0aGVyZSBpcyBubyBwcmlvciBsb2NhdGlvbiBhbmQgcGF0aG5hbWUgaXMgZW1wdHksIHNldCBpdCB0byAvXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSAnLyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxvY2F0aW9uO1xufVxuZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwoYSwgYikge1xuICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2ggJiYgYS5rZXkgPT09IGIua2V5ICYmIHZhbHVlRXF1YWwoYS5zdGF0ZSwgYi5zdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCkge1xuICB2YXIgcHJvbXB0ID0gbnVsbDtcblxuICBmdW5jdGlvbiBzZXRQcm9tcHQobmV4dFByb21wdCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocHJvbXB0ID09IG51bGwsICdBIGhpc3Rvcnkgc3VwcG9ydHMgb25seSBvbmUgcHJvbXB0IGF0IGEgdGltZScpIDogdm9pZCAwO1xuICAgIHByb21wdCA9IG5leHRQcm9tcHQ7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChwcm9tcHQgPT09IG5leHRQcm9tcHQpIHByb21wdCA9IG51bGw7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgY2FsbGJhY2spIHtcbiAgICAvLyBUT0RPOiBJZiBhbm90aGVyIHRyYW5zaXRpb24gc3RhcnRzIHdoaWxlIHdlJ3JlIHN0aWxsIGNvbmZpcm1pbmdcbiAgICAvLyB0aGUgcHJldmlvdXMgb25lLCB3ZSBtYXkgZW5kIHVwIGluIGEgd2VpcmQgc3RhdGUuIEZpZ3VyZSBvdXQgdGhlXG4gICAgLy8gYmVzdCB3YXkgdG8gaGFuZGxlIHRoaXMuXG4gICAgaWYgKHByb21wdCAhPSBudWxsKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdHlwZW9mIHByb21wdCA9PT0gJ2Z1bmN0aW9uJyA/IHByb21wdChsb2NhdGlvbiwgYWN0aW9uKSA6IHByb21wdDtcblxuICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZ2V0VXNlckNvbmZpcm1hdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGdldFVzZXJDb25maXJtYXRpb24ocmVzdWx0LCBjYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0EgaGlzdG9yeSBuZWVkcyBhIGdldFVzZXJDb25maXJtYXRpb24gZnVuY3Rpb24gaW4gb3JkZXIgdG8gdXNlIGEgcHJvbXB0IG1lc3NhZ2UnKSA6IHZvaWQgMDtcbiAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmV0dXJuIGZhbHNlIGZyb20gYSB0cmFuc2l0aW9uIGhvb2sgdG8gY2FuY2VsIHRoZSB0cmFuc2l0aW9uLlxuICAgICAgICBjYWxsYmFjayhyZXN1bHQgIT09IGZhbHNlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGxpc3RlbmVycyA9IFtdO1xuXG4gIGZ1bmN0aW9uIGFwcGVuZExpc3RlbmVyKGZuKSB7XG4gICAgdmFyIGlzQWN0aXZlID0gdHJ1ZTtcblxuICAgIGZ1bmN0aW9uIGxpc3RlbmVyKCkge1xuICAgICAgaWYgKGlzQWN0aXZlKSBmbi5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbSAhPT0gbGlzdGVuZXI7XG4gICAgICB9KTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbm90aWZ5TGlzdGVuZXJzKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBsaXN0ZW5lci5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzZXRQcm9tcHQ6IHNldFByb21wdCxcbiAgICBjb25maXJtVHJhbnNpdGlvblRvOiBjb25maXJtVHJhbnNpdGlvblRvLFxuICAgIGFwcGVuZExpc3RlbmVyOiBhcHBlbmRMaXN0ZW5lcixcbiAgICBub3RpZnlMaXN0ZW5lcnM6IG5vdGlmeUxpc3RlbmVyc1xuICB9O1xufVxuXG52YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbmZ1bmN0aW9uIGdldENvbmZpcm1hdGlvbihtZXNzYWdlLCBjYWxsYmFjaykge1xuICBjYWxsYmFjayh3aW5kb3cuY29uZmlybShtZXNzYWdlKSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tYWxlcnRcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpcyBzdXBwb3J0ZWQuIFRha2VuIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9oaXN0b3J5LmpzXG4gKiBjaGFuZ2VkIHRvIGF2b2lkIGZhbHNlIG5lZ2F0aXZlcyBmb3IgV2luZG93cyBQaG9uZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXJvdXRlci9pc3N1ZXMvNTg2XG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNIaXN0b3J5KCkge1xuICB2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgaWYgKCh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8IHVhLmluZGV4T2YoJ0FuZHJvaWQgNC4wJykgIT09IC0xKSAmJiB1YS5pbmRleE9mKCdNb2JpbGUgU2FmYXJpJykgIT09IC0xICYmIHVhLmluZGV4T2YoJ0Nocm9tZScpID09PSAtMSAmJiB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiB3aW5kb3cuaGlzdG9yeSAmJiAncHVzaFN0YXRlJyBpbiB3aW5kb3cuaGlzdG9yeTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGJyb3dzZXIgZmlyZXMgcG9wc3RhdGUgb24gaGFzaCBjaGFuZ2UuXG4gKiBJRTEwIGFuZCBJRTExIGRvIG5vdC5cbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudCcpID09PSAtMTtcbn1cbi8qKlxuICogUmV0dXJucyBmYWxzZSBpZiB1c2luZyBnbyhuKSB3aXRoIGhhc2ggaGlzdG9yeSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkLlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpID09PSAtMTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGEgZ2l2ZW4gcG9wc3RhdGUgZXZlbnQgaXMgYW4gZXh0cmFuZW91cyBXZWJLaXQgZXZlbnQuXG4gKiBBY2NvdW50cyBmb3IgdGhlIGZhY3QgdGhhdCBDaHJvbWUgb24gaU9TIGZpcmVzIHJlYWwgcG9wc3RhdGUgZXZlbnRzXG4gKiBjb250YWluaW5nIHVuZGVmaW5lZCBzdGF0ZSB3aGVuIHByZXNzaW5nIHRoZSBiYWNrIGJ1dHRvbi5cbiAqL1xuXG5mdW5jdGlvbiBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiBldmVudC5zdGF0ZSA9PT0gdW5kZWZpbmVkICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQ3JpT1MnKSA9PT0gLTE7XG59XG5cbnZhciBQb3BTdGF0ZUV2ZW50ID0gJ3BvcHN0YXRlJztcbnZhciBIYXNoQ2hhbmdlRXZlbnQgPSAnaGFzaGNoYW5nZSc7XG5cbmZ1bmN0aW9uIGdldEhpc3RvcnlTdGF0ZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93Lmhpc3Rvcnkuc3RhdGUgfHwge307XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJRSAxMSBzb21ldGltZXMgdGhyb3dzIHdoZW4gYWNjZXNzaW5nIHdpbmRvdy5oaXN0b3J5LnN0YXRlXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9SZWFjdFRyYWluaW5nL2hpc3RvcnkvcHVsbC8yODlcbiAgICByZXR1cm4ge307XG4gIH1cbn1cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgdXNlcyB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaW5jbHVkaW5nXG4gKiBwdXNoU3RhdGUsIHJlcGxhY2VTdGF0ZSwgYW5kIHRoZSBwb3BzdGF0ZSBldmVudC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gICFjYW5Vc2VET00gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdCcm93c2VyIGhpc3RvcnkgbmVlZHMgYSBET00nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Vc2VIaXN0b3J5ID0gc3VwcG9ydHNIaXN0b3J5KCk7XG4gIHZhciBuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciA9ICFzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCk7XG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIF9wcm9wcyRmb3JjZVJlZnJlc2ggPSBfcHJvcHMuZm9yY2VSZWZyZXNoLFxuICAgICAgZm9yY2VSZWZyZXNoID0gX3Byb3BzJGZvcmNlUmVmcmVzaCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZm9yY2VSZWZyZXNoLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB2b2lkIDAgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gX3Byb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHZvaWQgMCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuXG4gIGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKGhpc3RvcnlTdGF0ZSkge1xuICAgIHZhciBfcmVmID0gaGlzdG9yeVN0YXRlIHx8IHt9LFxuICAgICAgICBrZXkgPSBfcmVmLmtleSxcbiAgICAgICAgc3RhdGUgPSBfcmVmLnN0YXRlO1xuXG4gICAgdmFyIF93aW5kb3ckbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24sXG4gICAgICAgIHBhdGhuYW1lID0gX3dpbmRvdyRsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgc2VhcmNoID0gX3dpbmRvdyRsb2NhdGlvbi5zZWFyY2gsXG4gICAgICAgIGhhc2ggPSBfd2luZG93JGxvY2F0aW9uLmhhc2g7XG4gICAgdmFyIHBhdGggPSBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKSA6IHZvaWQgMDtcbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wU3RhdGUoZXZlbnQpIHtcbiAgICAvLyBJZ25vcmUgZXh0cmFuZW91cyBwb3BzdGF0ZSBldmVudHMgaW4gV2ViS2l0LlxuICAgIGlmIChpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSkgcmV0dXJuO1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihldmVudC5zdGF0ZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpKTtcbiAgfVxuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjsgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBrZXlzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIGtleXMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsS2V5cy5pbmRleE9mKHRvTG9jYXRpb24ua2V5KTtcbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuICAgIHZhciBmcm9tSW5kZXggPSBhbGxLZXlzLmluZGV4T2YoZnJvbUxvY2F0aW9uLmtleSk7XG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpO1xuICB2YXIgYWxsS2V5cyA9IFtpbml0aWFsTG9jYXRpb24ua2V5XTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnB1c2hTdGF0ZSh7XG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgc3RhdGU6IHN0YXRlXG4gICAgICAgIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgdmFyIG5leHRLZXlzID0gYWxsS2V5cy5zbGljZSgwLCBwcmV2SW5kZXggKyAxKTtcbiAgICAgICAgICBuZXh0S2V5cy5wdXNoKGxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgYWxsS2V5cyA9IG5leHRLZXlzO1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKSA6IHZvaWQgMDtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICAgICAgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxLZXlzW3ByZXZJbmRleF0gPSBsb2NhdGlvbi5rZXk7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpIDogdm9pZCAwO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIGdvKC0xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICBnbygxKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSAmJiBkZWx0YSA9PT0gMSkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBibG9jayhwcm9tcHQpIHtcbiAgICBpZiAocHJvbXB0ID09PSB2b2lkIDApIHtcbiAgICAgIHByb21wdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxudmFyIEhhc2hDaGFuZ2VFdmVudCQxID0gJ2hhc2hjaGFuZ2UnO1xudmFyIEhhc2hQYXRoQ29kZXJzID0ge1xuICBoYXNoYmFuZzoge1xuICAgIGVuY29kZVBhdGg6IGZ1bmN0aW9uIGVuY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoIDogJyEvJyArIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpO1xuICAgIH0sXG4gICAgZGVjb2RlUGF0aDogZnVuY3Rpb24gZGVjb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbiAgICB9XG4gIH0sXG4gIG5vc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBzdHJpcExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfSxcbiAgc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH1cbn07XG5cbmZ1bmN0aW9uIHN0cmlwSGFzaCh1cmwpIHtcbiAgdmFyIGhhc2hJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBoYXNoSW5kZXggPT09IC0xID8gdXJsIDogdXJsLnNsaWNlKDAsIGhhc2hJbmRleCk7XG59XG5cbmZ1bmN0aW9uIGdldEhhc2hQYXRoKCkge1xuICAvLyBXZSBjYW4ndCB1c2Ugd2luZG93LmxvY2F0aW9uLmhhc2ggaGVyZSBiZWNhdXNlIGl0J3Mgbm90XG4gIC8vIGNvbnNpc3RlbnQgYWNyb3NzIGJyb3dzZXJzIC0gRmlyZWZveCB3aWxsIHByZS1kZWNvZGUgaXQhXG4gIHZhciBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIHZhciBoYXNoSW5kZXggPSBocmVmLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGhhc2hJbmRleCA9PT0gLTEgPyAnJyA6IGhyZWYuc3Vic3RyaW5nKGhhc2hJbmRleCArIDEpO1xufVxuXG5mdW5jdGlvbiBwdXNoSGFzaFBhdGgocGF0aCkge1xuICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHBhdGg7XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VIYXNoUGF0aChwYXRoKSB7XG4gIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHN0cmlwSGFzaCh3aW5kb3cubG9jYXRpb24uaHJlZikgKyAnIycgKyBwYXRoKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlSGFzaEhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgIWNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0hhc2ggaGlzdG9yeSBuZWVkcyBhIERPTScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhbkdvV2l0aG91dFJlbG9hZCA9IHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCk7XG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IF9wcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdm9pZCAwID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGhhc2hUeXBlID0gX3Byb3BzLmhhc2hUeXBlLFxuICAgICAgaGFzaFR5cGUgPSBfcHJvcHMkaGFzaFR5cGUgPT09IHZvaWQgMCA/ICdzbGFzaCcgOiBfcHJvcHMkaGFzaFR5cGU7XG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG4gIHZhciBfSGFzaFBhdGhDb2RlcnMkaGFzaFQgPSBIYXNoUGF0aENvZGVyc1toYXNoVHlwZV0sXG4gICAgICBlbmNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmVuY29kZVBhdGgsXG4gICAgICBkZWNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmRlY29kZVBhdGg7XG5cbiAgZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oKSB7XG4gICAgdmFyIHBhdGggPSBkZWNvZGVQYXRoKGdldEhhc2hQYXRoKCkpO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJykgOiB2b2lkIDA7XG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgpO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICB2YXIgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwkJDEoYSwgYikge1xuICAgIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggPT09IGIuaGFzaDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG5cbiAgICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHtcbiAgICAgIC8vIEVuc3VyZSB3ZSBhbHdheXMgaGF2ZSBhIHByb3Blcmx5LWVuY29kZWQgaGFzaC5cbiAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gICAgICB2YXIgcHJldkxvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcbiAgICAgIGlmICghZm9yY2VOZXh0UG9wICYmIGxvY2F0aW9uc0FyZUVxdWFsJCQxKHByZXZMb2NhdGlvbiwgbG9jYXRpb24pKSByZXR1cm47IC8vIEEgaGFzaGNoYW5nZSBkb2Vzbid0IGFsd2F5cyA9PSBsb2NhdGlvbiBjaGFuZ2UuXG5cbiAgICAgIGlmIChpZ25vcmVQYXRoID09PSBjcmVhdGVQYXRoKGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBJZ25vcmUgdGhpcyBjaGFuZ2U7IHdlIGFscmVhZHkgc2V0U3RhdGUgaW4gcHVzaC9yZXBsYWNlLlxuXG4gICAgICBpZ25vcmVQYXRoID0gbnVsbDtcbiAgICAgIGhhbmRsZVBvcChsb2NhdGlvbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247IC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2YgcGF0aHMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3IgcGF0aHMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aCh0b0xvY2F0aW9uKSk7XG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChmcm9tTG9jYXRpb24pKTtcbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfSAvLyBFbnN1cmUgdGhlIGhhc2ggaXMgZW5jb2RlZCBwcm9wZXJseSBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZS5cblxuXG4gIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcbiAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgdmFyIGFsbFBhdGhzID0gW2NyZWF0ZVBhdGgoaW5pdGlhbExvY2F0aW9uKV07IC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgdmFyIGJhc2VUYWcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdiYXNlJyk7XG4gICAgdmFyIGhyZWYgPSAnJztcblxuICAgIGlmIChiYXNlVGFnICYmIGJhc2VUYWcuZ2V0QXR0cmlidXRlKCdocmVmJykpIHtcbiAgICAgIGhyZWYgPSBzdHJpcEhhc2god2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgIH1cblxuICAgIHJldHVybiBocmVmICsgJyMnICsgZW5jb2RlUGF0aChiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBQVVNILCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICBwdXNoSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICAgIHZhciBuZXh0UGF0aHMgPSBhbGxQYXRocy5zbGljZSgwLCBwcmV2SW5kZXggKyAxKTtcbiAgICAgICAgbmV4dFBhdGhzLnB1c2gocGF0aCk7XG4gICAgICAgIGFsbFBhdGhzID0gbmV4dFBhdGhzO1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgUFVTSCB0aGUgc2FtZSBwYXRoOyBhIG5ldyBlbnRyeSB3aWxsIG5vdCBiZSBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaycpIDogdm9pZCAwO1xuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFJFUExBQ0UsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5pbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbFBhdGhzW3ByZXZJbmRleF0gPSBwYXRoO1xuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGNhbkdvV2l0aG91dFJlbG9hZCwgJ0hhc2ggaGlzdG9yeSBnbyhuKSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkIGluIHRoaXMgYnJvd3NlcicpIDogdm9pZCAwO1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxICYmIGRlbHRhID09PSAxKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG5mdW5jdGlvbiBjbGFtcChuLCBsb3dlckJvdW5kLCB1cHBlckJvdW5kKSB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCBsb3dlckJvdW5kKSwgdXBwZXJCb3VuZCk7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHN0b3JlcyBsb2NhdGlvbnMgaW4gbWVtb3J5LlxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPSBfcHJvcHMuaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsRW50cmllcyA9IF9wcm9wcyRpbml0aWFsRW50cmllcyA9PT0gdm9pZCAwID8gWycvJ10gOiBfcHJvcHMkaW5pdGlhbEVudHJpZXMsXG4gICAgICBfcHJvcHMkaW5pdGlhbEluZGV4ID0gX3Byb3BzLmluaXRpYWxJbmRleCxcbiAgICAgIGluaXRpYWxJbmRleCA9IF9wcm9wcyRpbml0aWFsSW5kZXggPT09IHZvaWQgMCA/IDAgOiBfcHJvcHMkaW5pdGlhbEluZGV4LFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IF9wcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB2b2lkIDAgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9XG5cbiAgdmFyIGluZGV4ID0gY2xhbXAoaW5pdGlhbEluZGV4LCAwLCBpbml0aWFsRW50cmllcy5sZW5ndGggLSAxKTtcbiAgdmFyIGVudHJpZXMgPSBpbml0aWFsRW50cmllcy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBlbnRyeSA9PT0gJ3N0cmluZycgPyBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBjcmVhdGVLZXkoKSkgOiBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBlbnRyeS5rZXkgfHwgY3JlYXRlS2V5KCkpO1xuICB9KTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gY3JlYXRlUGF0aDtcblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHByZXZJbmRleCA9IGhpc3RvcnkuaW5kZXg7XG4gICAgICB2YXIgbmV4dEluZGV4ID0gcHJldkluZGV4ICsgMTtcbiAgICAgIHZhciBuZXh0RW50cmllcyA9IGhpc3RvcnkuZW50cmllcy5zbGljZSgwKTtcblxuICAgICAgaWYgKG5leHRFbnRyaWVzLmxlbmd0aCA+IG5leHRJbmRleCkge1xuICAgICAgICBuZXh0RW50cmllcy5zcGxpY2UobmV4dEluZGV4LCBuZXh0RW50cmllcy5sZW5ndGggLSBuZXh0SW5kZXgsIGxvY2F0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnB1c2gobG9jYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGluZGV4OiBuZXh0SW5kZXgsXG4gICAgICAgIGVudHJpZXM6IG5leHRFbnRyaWVzXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICBoaXN0b3J5LmVudHJpZXNbaGlzdG9yeS5pbmRleF0gPSBsb2NhdGlvbjtcbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGNsYW1wKGhpc3RvcnkuaW5kZXggKyBuLCAwLCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoIC0gMSk7XG4gICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgIHZhciBsb2NhdGlvbiA9IGhpc3RvcnkuZW50cmllc1tuZXh0SW5kZXhdO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAob2spIHtcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgICBpbmRleDogbmV4dEluZGV4XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTWltaWMgdGhlIGJlaGF2aW9yIG9mIERPTSBoaXN0b3JpZXMgYnlcbiAgICAgICAgLy8gY2F1c2luZyBhIHJlbmRlciBhZnRlciBhIGNhbmNlbGxlZCBQT1AuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuR28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBoaXN0b3J5LmluZGV4ICsgbjtcbiAgICByZXR1cm4gbmV4dEluZGV4ID49IDAgJiYgbmV4dEluZGV4IDwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZW50cmllcy5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogZW50cmllc1tpbmRleF0sXG4gICAgaW5kZXg6IGluZGV4LFxuICAgIGVudHJpZXM6IGVudHJpZXMsXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGNhbkdvOiBjYW5HbyxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUJyb3dzZXJIaXN0b3J5LCBjcmVhdGVIYXNoSGlzdG9yeSwgY3JlYXRlTWVtb3J5SGlzdG9yeSwgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsLCBwYXJzZVBhdGgsIGNyZWF0ZVBhdGggfTtcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgZ3VkIGZyb20gJ2d1ZCc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuXG52YXIgTUFYX1NJR05FRF8zMV9CSVRfSU5UID0gMTA3Mzc0MTgyMztcblxuZnVuY3Rpb24gb2JqZWN0SXMoeCwgeSkge1xuICBpZiAoeCA9PT0geSkge1xuICAgIHJldHVybiB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUV2ZW50RW1pdHRlcih2YWx1ZSkge1xuICB2YXIgaGFuZGxlcnMgPSBbXTtcbiAgcmV0dXJuIHtcbiAgICBvbjogZnVuY3Rpb24gb24oaGFuZGxlcikge1xuICAgICAgaGFuZGxlcnMucHVzaChoYW5kbGVyKTtcbiAgICB9LFxuICAgIG9mZjogZnVuY3Rpb24gb2ZmKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXJzID0gaGFuZGxlcnMuZmlsdGVyKGZ1bmN0aW9uIChoKSB7XG4gICAgICAgIHJldHVybiBoICE9PSBoYW5kbGVyO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KG5ld1ZhbHVlLCBjaGFuZ2VkQml0cykge1xuICAgICAgdmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgIGhhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZXIodmFsdWUsIGNoYW5nZWRCaXRzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gb25seUNoaWxkKGNoaWxkcmVuKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGNoaWxkcmVuKSA/IGNoaWxkcmVuWzBdIDogY2hpbGRyZW47XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVJlYWN0Q29udGV4dChkZWZhdWx0VmFsdWUsIGNhbGN1bGF0ZUNoYW5nZWRCaXRzKSB7XG4gIHZhciBfUHJvdmlkZXIkY2hpbGRDb250ZXgsIF9Db25zdW1lciRjb250ZXh0VHlwZTtcblxuICB2YXIgY29udGV4dFByb3AgPSAnX19jcmVhdGUtcmVhY3QtY29udGV4dC0nICsgZ3VkKCkgKyAnX18nO1xuXG4gIHZhciBQcm92aWRlciA9XG4gIC8qI19fUFVSRV9fKi9cbiAgZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHNMb29zZShQcm92aWRlciwgX0NvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBQcm92aWRlcigpIHtcbiAgICAgIHZhciBfdGhpcztcblxuICAgICAgX3RoaXMgPSBfQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgIF90aGlzLmVtaXR0ZXIgPSBjcmVhdGVFdmVudEVtaXR0ZXIoX3RoaXMucHJvcHMudmFsdWUpO1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8gPSBQcm92aWRlci5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8uZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHJldHVybiBfcmVmID0ge30sIF9yZWZbY29udGV4dFByb3BdID0gdGhpcy5lbWl0dGVyLCBfcmVmO1xuICAgIH07XG5cbiAgICBfcHJvdG8uY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy52YWx1ZSAhPT0gbmV4dFByb3BzLnZhbHVlKSB7XG4gICAgICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMucHJvcHMudmFsdWU7XG4gICAgICAgIHZhciBuZXdWYWx1ZSA9IG5leHRQcm9wcy52YWx1ZTtcbiAgICAgICAgdmFyIGNoYW5nZWRCaXRzO1xuXG4gICAgICAgIGlmIChvYmplY3RJcyhvbGRWYWx1ZSwgbmV3VmFsdWUpKSB7XG4gICAgICAgICAgY2hhbmdlZEJpdHMgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNoYW5nZWRCaXRzID0gdHlwZW9mIGNhbGN1bGF0ZUNoYW5nZWRCaXRzID09PSAnZnVuY3Rpb24nID8gY2FsY3VsYXRlQ2hhbmdlZEJpdHMob2xkVmFsdWUsIG5ld1ZhbHVlKSA6IE1BWF9TSUdORURfMzFfQklUX0lOVDtcblxuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICB3YXJuaW5nKChjaGFuZ2VkQml0cyAmIE1BWF9TSUdORURfMzFfQklUX0lOVCkgPT09IGNoYW5nZWRCaXRzLCAnY2FsY3VsYXRlQ2hhbmdlZEJpdHM6IEV4cGVjdGVkIHRoZSByZXR1cm4gdmFsdWUgdG8gYmUgYSAnICsgJzMxLWJpdCBpbnRlZ2VyLiBJbnN0ZWFkIHJlY2VpdmVkOiAnICsgY2hhbmdlZEJpdHMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNoYW5nZWRCaXRzIHw9IDA7XG5cbiAgICAgICAgICBpZiAoY2hhbmdlZEJpdHMgIT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdHRlci5zZXQobmV4dFByb3BzLnZhbHVlLCBjaGFuZ2VkQml0cyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFByb3ZpZGVyO1xuICB9KENvbXBvbmVudCk7XG5cbiAgUHJvdmlkZXIuY2hpbGRDb250ZXh0VHlwZXMgPSAoX1Byb3ZpZGVyJGNoaWxkQ29udGV4ID0ge30sIF9Qcm92aWRlciRjaGlsZENvbnRleFtjb250ZXh0UHJvcF0gPSBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsIF9Qcm92aWRlciRjaGlsZENvbnRleCk7XG5cbiAgdmFyIENvbnN1bWVyID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoX0NvbXBvbmVudDIpIHtcbiAgICBfaW5oZXJpdHNMb29zZShDb25zdW1lciwgX0NvbXBvbmVudDIpO1xuXG4gICAgZnVuY3Rpb24gQ29uc3VtZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyO1xuXG4gICAgICBfdGhpczIgPSBfQ29tcG9uZW50Mi5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICBfdGhpczIuc3RhdGUgPSB7XG4gICAgICAgIHZhbHVlOiBfdGhpczIuZ2V0VmFsdWUoKVxuICAgICAgfTtcblxuICAgICAgX3RoaXMyLm9uVXBkYXRlID0gZnVuY3Rpb24gKG5ld1ZhbHVlLCBjaGFuZ2VkQml0cykge1xuICAgICAgICB2YXIgb2JzZXJ2ZWRCaXRzID0gX3RoaXMyLm9ic2VydmVkQml0cyB8IDA7XG5cbiAgICAgICAgaWYgKChvYnNlcnZlZEJpdHMgJiBjaGFuZ2VkQml0cykgIT09IDApIHtcbiAgICAgICAgICBfdGhpczIuc2V0U3RhdGUoe1xuICAgICAgICAgICAgdmFsdWU6IF90aGlzMi5nZXRWYWx1ZSgpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBfdGhpczI7XG4gICAgfVxuXG4gICAgdmFyIF9wcm90bzIgPSBDb25zdW1lci5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8yLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgdmFyIG9ic2VydmVkQml0cyA9IG5leHRQcm9wcy5vYnNlcnZlZEJpdHM7XG4gICAgICB0aGlzLm9ic2VydmVkQml0cyA9IG9ic2VydmVkQml0cyA9PT0gdW5kZWZpbmVkIHx8IG9ic2VydmVkQml0cyA9PT0gbnVsbCA/IE1BWF9TSUdORURfMzFfQklUX0lOVCA6IG9ic2VydmVkQml0cztcbiAgICB9O1xuXG4gICAgX3Byb3RvMi5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5vbih0aGlzLm9uVXBkYXRlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIG9ic2VydmVkQml0cyA9IHRoaXMucHJvcHMub2JzZXJ2ZWRCaXRzO1xuICAgICAgdGhpcy5vYnNlcnZlZEJpdHMgPSBvYnNlcnZlZEJpdHMgPT09IHVuZGVmaW5lZCB8fCBvYnNlcnZlZEJpdHMgPT09IG51bGwgPyBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgOiBvYnNlcnZlZEJpdHM7XG4gICAgfTtcblxuICAgIF9wcm90bzIuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0ub2ZmKHRoaXMub25VcGRhdGUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8yLmdldFZhbHVlID0gZnVuY3Rpb24gZ2V0VmFsdWUoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5nZXQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90bzIucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIG9ubHlDaGlsZCh0aGlzLnByb3BzLmNoaWxkcmVuKSh0aGlzLnN0YXRlLnZhbHVlKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIENvbnN1bWVyO1xuICB9KENvbXBvbmVudCk7XG5cbiAgQ29uc3VtZXIuY29udGV4dFR5cGVzID0gKF9Db25zdW1lciRjb250ZXh0VHlwZSA9IHt9LCBfQ29uc3VtZXIkY29udGV4dFR5cGVbY29udGV4dFByb3BdID0gUHJvcFR5cGVzLm9iamVjdCwgX0NvbnN1bWVyJGNvbnRleHRUeXBlKTtcbiAgcmV0dXJuIHtcbiAgICBQcm92aWRlcjogUHJvdmlkZXIsXG4gICAgQ29uc3VtZXI6IENvbnN1bWVyXG4gIH07XG59XG5cbnZhciBpbmRleCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQgfHwgY3JlYXRlUmVhY3RDb250ZXh0O1xuXG5leHBvcnQgZGVmYXVsdCBpbmRleDtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufSIsImltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgY3JlYXRlTWVtb3J5SGlzdG9yeSwgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsLCBjcmVhdGVQYXRoIH0gZnJvbSAnaGlzdG9yeSc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IGNyZWF0ZUNvbnRleHQgZnJvbSAnbWluaS1jcmVhdGUtcmVhY3QtY29udGV4dCc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ3RpbnktaW52YXJpYW50JztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCBwYXRoVG9SZWdleHAgZnJvbSAncGF0aC10by1yZWdleHAnO1xuaW1wb3J0IHsgaXNWYWxpZEVsZW1lbnRUeXBlIH0gZnJvbSAncmVhY3QtaXMnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UnO1xuaW1wb3J0IGhvaXN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5cbi8vIFRPRE86IFJlcGxhY2Ugd2l0aCBSZWFjdC5jcmVhdGVDb250ZXh0IG9uY2Ugd2UgY2FuIGFzc3VtZSBSZWFjdCAxNitcblxudmFyIGNyZWF0ZU5hbWVkQ29udGV4dCA9IGZ1bmN0aW9uIGNyZWF0ZU5hbWVkQ29udGV4dChuYW1lKSB7XG4gIHZhciBjb250ZXh0ID0gY3JlYXRlQ29udGV4dCgpO1xuICBjb250ZXh0LmRpc3BsYXlOYW1lID0gbmFtZTtcbiAgcmV0dXJuIGNvbnRleHQ7XG59O1xuXG52YXIgY29udGV4dCA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVOYW1lZENvbnRleHQoXCJSb3V0ZXJcIik7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHB1dHRpbmcgaGlzdG9yeSBvbiBjb250ZXh0LlxuICovXG5cbnZhciBSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBSb3V0ZXIuY29tcHV0ZVJvb3RNYXRjaCA9IGZ1bmN0aW9uIGNvbXB1dGVSb290TWF0Y2gocGF0aG5hbWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aDogXCIvXCIsXG4gICAgICB1cmw6IFwiL1wiLFxuICAgICAgcGFyYW1zOiB7fSxcbiAgICAgIGlzRXhhY3Q6IHBhdGhuYW1lID09PSBcIi9cIlxuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gUm91dGVyKHByb3BzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBsb2NhdGlvbjogcHJvcHMuaGlzdG9yeS5sb2NhdGlvblxuICAgIH07IC8vIFRoaXMgaXMgYSBiaXQgb2YgYSBoYWNrLiBXZSBoYXZlIHRvIHN0YXJ0IGxpc3RlbmluZyBmb3IgbG9jYXRpb25cbiAgICAvLyBjaGFuZ2VzIGhlcmUgaW4gdGhlIGNvbnN0cnVjdG9yIGluIGNhc2UgdGhlcmUgYXJlIGFueSA8UmVkaXJlY3Q+c1xuICAgIC8vIG9uIHRoZSBpbml0aWFsIHJlbmRlci4gSWYgdGhlcmUgYXJlLCB0aGV5IHdpbGwgcmVwbGFjZS9wdXNoIHdoZW5cbiAgICAvLyB0aGV5IG1vdW50IGFuZCBzaW5jZSBjRE0gZmlyZXMgaW4gY2hpbGRyZW4gYmVmb3JlIHBhcmVudHMsIHdlIG1heVxuICAgIC8vIGdldCBhIG5ldyBsb2NhdGlvbiBiZWZvcmUgdGhlIDxSb3V0ZXI+IGlzIG1vdW50ZWQuXG5cbiAgICBfdGhpcy5faXNNb3VudGVkID0gZmFsc2U7XG4gICAgX3RoaXMuX3BlbmRpbmdMb2NhdGlvbiA9IG51bGw7XG5cbiAgICBpZiAoIXByb3BzLnN0YXRpY0NvbnRleHQpIHtcbiAgICAgIF90aGlzLnVubGlzdGVuID0gcHJvcHMuaGlzdG9yeS5saXN0ZW4oZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICAgIGlmIChfdGhpcy5faXNNb3VudGVkKSB7XG4gICAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXMuX3BlbmRpbmdMb2NhdGlvbiA9IGxvY2F0aW9uO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUm91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLl9pc01vdW50ZWQgPSB0cnVlO1xuXG4gICAgaWYgKHRoaXMuX3BlbmRpbmdMb2NhdGlvbikge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGxvY2F0aW9uOiB0aGlzLl9wZW5kaW5nTG9jYXRpb25cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy51bmxpc3RlbikgdGhpcy51bmxpc3RlbigpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Qcm92aWRlciwge1xuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW4gfHwgbnVsbCxcbiAgICAgIHZhbHVlOiB7XG4gICAgICAgIGhpc3Rvcnk6IHRoaXMucHJvcHMuaGlzdG9yeSxcbiAgICAgICAgbG9jYXRpb246IHRoaXMuc3RhdGUubG9jYXRpb24sXG4gICAgICAgIG1hdGNoOiBSb3V0ZXIuY29tcHV0ZVJvb3RNYXRjaCh0aGlzLnN0YXRlLmxvY2F0aW9uLnBhdGhuYW1lKSxcbiAgICAgICAgc3RhdGljQ29udGV4dDogdGhpcy5wcm9wcy5zdGF0aWNDb250ZXh0XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgc3RhdGljQ29udGV4dDogUHJvcFR5cGVzLm9iamVjdFxuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocHJldlByb3BzLmhpc3RvcnkgPT09IHRoaXMucHJvcHMuaGlzdG9yeSwgXCJZb3UgY2Fubm90IGNoYW5nZSA8Um91dGVyIGhpc3Rvcnk+XCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgc3RvcmVzIGxvY2F0aW9uIGluIG1lbW9yeS5cbiAqL1xuXG52YXIgTWVtb3J5Um91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKE1lbW9yeVJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTWVtb3J5Um91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVNZW1vcnlIaXN0b3J5KF90aGlzLnByb3BzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTWVtb3J5Um91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgICAgaGlzdG9yeTogdGhpcy5oaXN0b3J5LFxuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gTWVtb3J5Um91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE1lbW9yeVJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgaW5pdGlhbEVudHJpZXM6IFByb3BUeXBlcy5hcnJheSxcbiAgICBpbml0aWFsSW5kZXg6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAga2V5TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxuICB9O1xuXG4gIE1lbW9yeVJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxNZW1vcnlSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBNZW1vcnlSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxudmFyIExpZmVjeWNsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShMaWZlY3ljbGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIExpZmVjeWNsZSgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTGlmZWN5Y2xlLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vbk1vdW50KSB0aGlzLnByb3BzLm9uTW91bnQuY2FsbCh0aGlzLCB0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIGlmICh0aGlzLnByb3BzLm9uVXBkYXRlKSB0aGlzLnByb3BzLm9uVXBkYXRlLmNhbGwodGhpcywgdGhpcywgcHJldlByb3BzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblVubW91bnQpIHRoaXMucHJvcHMub25Vbm1vdW50LmNhbGwodGhpcywgdGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gTGlmZWN5Y2xlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBwcm9tcHRpbmcgdGhlIHVzZXIgYmVmb3JlIG5hdmlnYXRpbmcgYXdheSBmcm9tIGEgc2NyZWVuLlxuICovXG5cbmZ1bmN0aW9uIFByb21wdChfcmVmKSB7XG4gIHZhciBtZXNzYWdlID0gX3JlZi5tZXNzYWdlLFxuICAgICAgX3JlZiR3aGVuID0gX3JlZi53aGVuLFxuICAgICAgd2hlbiA9IF9yZWYkd2hlbiA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYkd2hlbjtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFByb21wdD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBpZiAoIXdoZW4gfHwgY29udGV4dC5zdGF0aWNDb250ZXh0KSByZXR1cm4gbnVsbDtcbiAgICB2YXIgbWV0aG9kID0gY29udGV4dC5oaXN0b3J5LmJsb2NrO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpZmVjeWNsZSwge1xuICAgICAgb25Nb3VudDogZnVuY3Rpb24gb25Nb3VudChzZWxmKSB7XG4gICAgICAgIHNlbGYucmVsZWFzZSA9IG1ldGhvZChtZXNzYWdlKTtcbiAgICAgIH0sXG4gICAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoc2VsZiwgcHJldlByb3BzKSB7XG4gICAgICAgIGlmIChwcmV2UHJvcHMubWVzc2FnZSAhPT0gbWVzc2FnZSkge1xuICAgICAgICAgIHNlbGYucmVsZWFzZSgpO1xuICAgICAgICAgIHNlbGYucmVsZWFzZSA9IG1ldGhvZChtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9uVW5tb3VudDogZnVuY3Rpb24gb25Vbm1vdW50KHNlbGYpIHtcbiAgICAgICAgc2VsZi5yZWxlYXNlKCk7XG4gICAgICB9LFxuICAgICAgbWVzc2FnZTogbWVzc2FnZVxuICAgIH0pO1xuICB9KTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICB2YXIgbWVzc2FnZVR5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnN0cmluZ10pO1xuICBQcm9tcHQucHJvcFR5cGVzID0ge1xuICAgIHdoZW46IFByb3BUeXBlcy5ib29sLFxuICAgIG1lc3NhZ2U6IG1lc3NhZ2VUeXBlLmlzUmVxdWlyZWRcbiAgfTtcbn1cblxudmFyIGNhY2hlID0ge307XG52YXIgY2FjaGVMaW1pdCA9IDEwMDAwO1xudmFyIGNhY2hlQ291bnQgPSAwO1xuXG5mdW5jdGlvbiBjb21waWxlUGF0aChwYXRoKSB7XG4gIGlmIChjYWNoZVtwYXRoXSkgcmV0dXJuIGNhY2hlW3BhdGhdO1xuICB2YXIgZ2VuZXJhdG9yID0gcGF0aFRvUmVnZXhwLmNvbXBpbGUocGF0aCk7XG5cbiAgaWYgKGNhY2hlQ291bnQgPCBjYWNoZUxpbWl0KSB7XG4gICAgY2FjaGVbcGF0aF0gPSBnZW5lcmF0b3I7XG4gICAgY2FjaGVDb3VudCsrO1xuICB9XG5cbiAgcmV0dXJuIGdlbmVyYXRvcjtcbn1cbi8qKlxuICogUHVibGljIEFQSSBmb3IgZ2VuZXJhdGluZyBhIFVSTCBwYXRobmFtZSBmcm9tIGEgcGF0aCBhbmQgcGFyYW1ldGVycy5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdlbmVyYXRlUGF0aChwYXRoLCBwYXJhbXMpIHtcbiAgaWYgKHBhdGggPT09IHZvaWQgMCkge1xuICAgIHBhdGggPSBcIi9cIjtcbiAgfVxuXG4gIGlmIChwYXJhbXMgPT09IHZvaWQgMCkge1xuICAgIHBhcmFtcyA9IHt9O1xuICB9XG5cbiAgcmV0dXJuIHBhdGggPT09IFwiL1wiID8gcGF0aCA6IGNvbXBpbGVQYXRoKHBhdGgpKHBhcmFtcywge1xuICAgIHByZXR0eTogdHJ1ZVxuICB9KTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgbmF2aWdhdGluZyBwcm9ncmFtbWF0aWNhbGx5IHdpdGggYSBjb21wb25lbnQuXG4gKi9cblxuZnVuY3Rpb24gUmVkaXJlY3QoX3JlZikge1xuICB2YXIgY29tcHV0ZWRNYXRjaCA9IF9yZWYuY29tcHV0ZWRNYXRjaCxcbiAgICAgIHRvID0gX3JlZi50byxcbiAgICAgIF9yZWYkcHVzaCA9IF9yZWYucHVzaCxcbiAgICAgIHB1c2ggPSBfcmVmJHB1c2ggPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRwdXNoO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8UmVkaXJlY3Q+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGhpc3RvcnkgPSBjb250ZXh0Lmhpc3RvcnksXG4gICAgICAgIHN0YXRpY0NvbnRleHQgPSBjb250ZXh0LnN0YXRpY0NvbnRleHQ7XG4gICAgdmFyIG1ldGhvZCA9IHB1c2ggPyBoaXN0b3J5LnB1c2ggOiBoaXN0b3J5LnJlcGxhY2U7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oY29tcHV0ZWRNYXRjaCA/IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IGdlbmVyYXRlUGF0aCh0bywgY29tcHV0ZWRNYXRjaC5wYXJhbXMpIDogX2V4dGVuZHMoe30sIHRvLCB7XG4gICAgICBwYXRobmFtZTogZ2VuZXJhdGVQYXRoKHRvLnBhdGhuYW1lLCBjb21wdXRlZE1hdGNoLnBhcmFtcylcbiAgICB9KSA6IHRvKTsgLy8gV2hlbiByZW5kZXJpbmcgaW4gYSBzdGF0aWMgY29udGV4dCxcbiAgICAvLyBzZXQgdGhlIG5ldyBsb2NhdGlvbiBpbW1lZGlhdGVseS5cblxuICAgIGlmIChzdGF0aWNDb250ZXh0KSB7XG4gICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGlmZWN5Y2xlLCB7XG4gICAgICBvbk1vdW50OiBmdW5jdGlvbiBvbk1vdW50KCkge1xuICAgICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgfSxcbiAgICAgIG9uVXBkYXRlOiBmdW5jdGlvbiBvblVwZGF0ZShzZWxmLCBwcmV2UHJvcHMpIHtcbiAgICAgICAgdmFyIHByZXZMb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHByZXZQcm9wcy50byk7XG5cbiAgICAgICAgaWYgKCFsb2NhdGlvbnNBcmVFcXVhbChwcmV2TG9jYXRpb24sIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgICAgICAgIGtleTogcHJldkxvY2F0aW9uLmtleVxuICAgICAgICB9KSkpIHtcbiAgICAgICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdG86IHRvXG4gICAgfSk7XG4gIH0pO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFJlZGlyZWN0LnByb3BUeXBlcyA9IHtcbiAgICBwdXNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBmcm9tOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRvOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSkuaXNSZXF1aXJlZFxuICB9O1xufVxuXG52YXIgY2FjaGUkMSA9IHt9O1xudmFyIGNhY2hlTGltaXQkMSA9IDEwMDAwO1xudmFyIGNhY2hlQ291bnQkMSA9IDA7XG5cbmZ1bmN0aW9uIGNvbXBpbGVQYXRoJDEocGF0aCwgb3B0aW9ucykge1xuICB2YXIgY2FjaGVLZXkgPSBcIlwiICsgb3B0aW9ucy5lbmQgKyBvcHRpb25zLnN0cmljdCArIG9wdGlvbnMuc2Vuc2l0aXZlO1xuICB2YXIgcGF0aENhY2hlID0gY2FjaGUkMVtjYWNoZUtleV0gfHwgKGNhY2hlJDFbY2FjaGVLZXldID0ge30pO1xuICBpZiAocGF0aENhY2hlW3BhdGhdKSByZXR1cm4gcGF0aENhY2hlW3BhdGhdO1xuICB2YXIga2V5cyA9IFtdO1xuICB2YXIgcmVnZXhwID0gcGF0aFRvUmVnZXhwKHBhdGgsIGtleXMsIG9wdGlvbnMpO1xuICB2YXIgcmVzdWx0ID0ge1xuICAgIHJlZ2V4cDogcmVnZXhwLFxuICAgIGtleXM6IGtleXNcbiAgfTtcblxuICBpZiAoY2FjaGVDb3VudCQxIDwgY2FjaGVMaW1pdCQxKSB7XG4gICAgcGF0aENhY2hlW3BhdGhdID0gcmVzdWx0O1xuICAgIGNhY2hlQ291bnQkMSsrO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogUHVibGljIEFQSSBmb3IgbWF0Y2hpbmcgYSBVUkwgcGF0aG5hbWUgdG8gYSBwYXRoLlxuICovXG5cblxuZnVuY3Rpb24gbWF0Y2hQYXRoKHBhdGhuYW1lLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheShvcHRpb25zKSkge1xuICAgIG9wdGlvbnMgPSB7XG4gICAgICBwYXRoOiBvcHRpb25zXG4gICAgfTtcbiAgfVxuXG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBwYXRoID0gX29wdGlvbnMucGF0aCxcbiAgICAgIF9vcHRpb25zJGV4YWN0ID0gX29wdGlvbnMuZXhhY3QsXG4gICAgICBleGFjdCA9IF9vcHRpb25zJGV4YWN0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJGV4YWN0LFxuICAgICAgX29wdGlvbnMkc3RyaWN0ID0gX29wdGlvbnMuc3RyaWN0LFxuICAgICAgc3RyaWN0ID0gX29wdGlvbnMkc3RyaWN0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJHN0cmljdCxcbiAgICAgIF9vcHRpb25zJHNlbnNpdGl2ZSA9IF9vcHRpb25zLnNlbnNpdGl2ZSxcbiAgICAgIHNlbnNpdGl2ZSA9IF9vcHRpb25zJHNlbnNpdGl2ZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRzZW5zaXRpdmU7XG4gIHZhciBwYXRocyA9IFtdLmNvbmNhdChwYXRoKTtcbiAgcmV0dXJuIHBhdGhzLnJlZHVjZShmdW5jdGlvbiAobWF0Y2hlZCwgcGF0aCkge1xuICAgIGlmICghcGF0aCAmJiBwYXRoICE9PSBcIlwiKSByZXR1cm4gbnVsbDtcbiAgICBpZiAobWF0Y2hlZCkgcmV0dXJuIG1hdGNoZWQ7XG5cbiAgICB2YXIgX2NvbXBpbGVQYXRoID0gY29tcGlsZVBhdGgkMShwYXRoLCB7XG4gICAgICBlbmQ6IGV4YWN0LFxuICAgICAgc3RyaWN0OiBzdHJpY3QsXG4gICAgICBzZW5zaXRpdmU6IHNlbnNpdGl2ZVxuICAgIH0pLFxuICAgICAgICByZWdleHAgPSBfY29tcGlsZVBhdGgucmVnZXhwLFxuICAgICAgICBrZXlzID0gX2NvbXBpbGVQYXRoLmtleXM7XG5cbiAgICB2YXIgbWF0Y2ggPSByZWdleHAuZXhlYyhwYXRobmFtZSk7XG4gICAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIHVybCA9IG1hdGNoWzBdLFxuICAgICAgICB2YWx1ZXMgPSBtYXRjaC5zbGljZSgxKTtcbiAgICB2YXIgaXNFeGFjdCA9IHBhdGhuYW1lID09PSB1cmw7XG4gICAgaWYgKGV4YWN0ICYmICFpc0V4YWN0KSByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aDogcGF0aCxcbiAgICAgIC8vIHRoZSBwYXRoIHVzZWQgdG8gbWF0Y2hcbiAgICAgIHVybDogcGF0aCA9PT0gXCIvXCIgJiYgdXJsID09PSBcIlwiID8gXCIvXCIgOiB1cmwsXG4gICAgICAvLyB0aGUgbWF0Y2hlZCBwb3J0aW9uIG9mIHRoZSBVUkxcbiAgICAgIGlzRXhhY3Q6IGlzRXhhY3QsXG4gICAgICAvLyB3aGV0aGVyIG9yIG5vdCB3ZSBtYXRjaGVkIGV4YWN0bHlcbiAgICAgIHBhcmFtczoga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIGtleSwgaW5kZXgpIHtcbiAgICAgICAgbWVtb1trZXkubmFtZV0gPSB2YWx1ZXNbaW5kZXhdO1xuICAgICAgICByZXR1cm4gbWVtbztcbiAgICAgIH0sIHt9KVxuICAgIH07XG4gIH0sIG51bGwpO1xufVxuXG5mdW5jdGlvbiBpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgcmV0dXJuIFJlYWN0LkNoaWxkcmVuLmNvdW50KGNoaWxkcmVuKSA9PT0gMDtcbn1cblxuZnVuY3Rpb24gZXZhbENoaWxkcmVuRGV2KGNoaWxkcmVuLCBwcm9wcywgcGF0aCkge1xuICB2YXIgdmFsdWUgPSBjaGlsZHJlbihwcm9wcyk7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcodmFsdWUgIT09IHVuZGVmaW5lZCwgXCJZb3UgcmV0dXJuZWQgYHVuZGVmaW5lZGAgZnJvbSB0aGUgYGNoaWxkcmVuYCBmdW5jdGlvbiBvZiBcIiArIChcIjxSb3V0ZVwiICsgKHBhdGggPyBcIiBwYXRoPVxcXCJcIiArIHBhdGggKyBcIlxcXCJcIiA6IFwiXCIpICsgXCI+LCBidXQgeW91IFwiKSArIFwic2hvdWxkIGhhdmUgcmV0dXJuZWQgYSBSZWFjdCBlbGVtZW50IG9yIGBudWxsYFwiKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHZhbHVlIHx8IG51bGw7XG59XG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIHNpbmdsZSBwYXRoIGFuZCByZW5kZXJpbmcuXG4gKi9cblxuXG52YXIgUm91dGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoUm91dGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJvdXRlKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSb3V0ZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQkMSkge1xuICAgICAgIWNvbnRleHQkMSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIGxvY2F0aW9uID0gX3RoaXMucHJvcHMubG9jYXRpb24gfHwgY29udGV4dCQxLmxvY2F0aW9uO1xuICAgICAgdmFyIG1hdGNoID0gX3RoaXMucHJvcHMuY29tcHV0ZWRNYXRjaCA/IF90aGlzLnByb3BzLmNvbXB1dGVkTWF0Y2ggLy8gPFN3aXRjaD4gYWxyZWFkeSBjb21wdXRlZCB0aGUgbWF0Y2ggZm9yIHVzXG4gICAgICA6IF90aGlzLnByb3BzLnBhdGggPyBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIF90aGlzLnByb3BzKSA6IGNvbnRleHQkMS5tYXRjaDtcblxuICAgICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIGNvbnRleHQkMSwge1xuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIG1hdGNoOiBtYXRjaFxuICAgICAgfSk7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgY29tcG9uZW50ID0gX3RoaXMkcHJvcHMuY29tcG9uZW50LFxuICAgICAgICAgIHJlbmRlciA9IF90aGlzJHByb3BzLnJlbmRlcjsgLy8gUHJlYWN0IHVzZXMgYW4gZW1wdHkgYXJyYXkgYXMgY2hpbGRyZW4gYnlcbiAgICAgIC8vIGRlZmF1bHQsIHNvIHVzZSBudWxsIGlmIHRoYXQncyB0aGUgY2FzZS5cblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pICYmIGNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBjaGlsZHJlbiA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgdmFsdWU6IHByb3BzXG4gICAgICB9LCBwcm9wcy5tYXRjaCA/IGNoaWxkcmVuID8gdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBldmFsQ2hpbGRyZW5EZXYoY2hpbGRyZW4sIHByb3BzLCBfdGhpcy5wcm9wcy5wYXRoKSA6IGNoaWxkcmVuKHByb3BzKSA6IGNoaWxkcmVuIDogY29tcG9uZW50ID8gUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHByb3BzKSA6IHJlbmRlciA/IHJlbmRlcihwcm9wcykgOiBudWxsIDogdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBldmFsQ2hpbGRyZW5EZXYoY2hpbGRyZW4sIHByb3BzLCBfdGhpcy5wcm9wcy5wYXRoKSA6IGNoaWxkcmVuKHByb3BzKSA6IG51bGwpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZS5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMubm9kZV0pLFxuICAgIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KHByb3BzLCBwcm9wTmFtZSkge1xuICAgICAgaWYgKHByb3BzW3Byb3BOYW1lXSAmJiAhaXNWYWxpZEVsZW1lbnRUeXBlKHByb3BzW3Byb3BOYW1lXSkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihcIkludmFsaWQgcHJvcCAnY29tcG9uZW50JyBzdXBwbGllZCB0byAnUm91dGUnOiB0aGUgcHJvcCBpcyBub3QgYSB2YWxpZCBSZWFjdCBjb21wb25lbnRcIik7XG4gICAgICB9XG4gICAgfSxcbiAgICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3QsXG4gICAgcGF0aDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyldKSxcbiAgICByZW5kZXI6IFByb3BUeXBlcy5mdW5jLFxuICAgIHNlbnNpdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3RyaWN0OiBQcm9wVHlwZXMuYm9vbFxuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pICYmIHRoaXMucHJvcHMuY29tcG9uZW50KSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSBjb21wb25lbnQ+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pICYmIHRoaXMucHJvcHMucmVuZGVyKSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIHJlbmRlcj4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jb21wb25lbnQgJiYgdGhpcy5wcm9wcy5yZW5kZXIpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIHJlbmRlcj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmxvY2F0aW9uICYmICFwcmV2UHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISghdGhpcy5wcm9wcy5sb2NhdGlvbiAmJiBwcmV2UHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJykgOiB2b2lkIDA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gXCIvXCIgPyBwYXRoIDogXCIvXCIgKyBwYXRoO1xufVxuXG5mdW5jdGlvbiBhZGRCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgcGF0aG5hbWU6IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSkgKyBsb2NhdGlvbi5wYXRobmFtZVxuICB9KTtcbn1cblxuZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuICB2YXIgYmFzZSA9IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSk7XG4gIGlmIChsb2NhdGlvbi5wYXRobmFtZS5pbmRleE9mKGJhc2UpICE9PSAwKSByZXR1cm4gbG9jYXRpb247XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUuc3Vic3RyKGJhc2UubGVuZ3RoKVxuICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVVJMKGxvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgbG9jYXRpb24gPT09IFwic3RyaW5nXCIgPyBsb2NhdGlvbiA6IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xufVxuXG5mdW5jdGlvbiBzdGF0aWNIYW5kbGVyKG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBjYW5ub3QgJXMgd2l0aCA8U3RhdGljUm91dGVyPlwiLCBtZXRob2ROYW1lKSA6IGludmFyaWFudChmYWxzZSkgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBub29wKCkge31cbi8qKlxuICogVGhlIHB1YmxpYyB0b3AtbGV2ZWwgQVBJIGZvciBhIFwic3RhdGljXCIgPFJvdXRlcj4sIHNvLWNhbGxlZCBiZWNhdXNlIGl0XG4gKiBjYW4ndCBhY3R1YWxseSBjaGFuZ2UgdGhlIGN1cnJlbnQgbG9jYXRpb24uIEluc3RlYWQsIGl0IGp1c3QgcmVjb3Jkc1xuICogbG9jYXRpb24gY2hhbmdlcyBpbiBhIGNvbnRleHQgb2JqZWN0LiBVc2VmdWwgbWFpbmx5IGluIHRlc3RpbmcgYW5kXG4gKiBzZXJ2ZXItcmVuZGVyaW5nIHNjZW5hcmlvcy5cbiAqL1xuXG5cbnZhciBTdGF0aWNSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3RhdGljUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTdGF0aWNSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5oYW5kbGVQdXNoID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gX3RoaXMubmF2aWdhdGVUbyhsb2NhdGlvbiwgXCJQVVNIXCIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVSZXBsYWNlID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gX3RoaXMubmF2aWdhdGVUbyhsb2NhdGlvbiwgXCJSRVBMQUNFXCIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVMaXN0ZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlQmxvY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN0YXRpY1JvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLm5hdmlnYXRlVG8gPSBmdW5jdGlvbiBuYXZpZ2F0ZVRvKGxvY2F0aW9uLCBhY3Rpb24pIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBfdGhpcyRwcm9wcyRiYXNlbmFtZSA9IF90aGlzJHByb3BzLmJhc2VuYW1lLFxuICAgICAgICBiYXNlbmFtZSA9IF90aGlzJHByb3BzJGJhc2VuYW1lID09PSB2b2lkIDAgPyBcIlwiIDogX3RoaXMkcHJvcHMkYmFzZW5hbWUsXG4gICAgICAgIF90aGlzJHByb3BzJGNvbnRleHQgPSBfdGhpcyRwcm9wcy5jb250ZXh0LFxuICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMkY29udGV4dCA9PT0gdm9pZCAwID8ge30gOiBfdGhpcyRwcm9wcyRjb250ZXh0O1xuICAgIGNvbnRleHQuYWN0aW9uID0gYWN0aW9uO1xuICAgIGNvbnRleHQubG9jYXRpb24gPSBhZGRCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKTtcbiAgICBjb250ZXh0LnVybCA9IGNyZWF0ZVVSTChjb250ZXh0LmxvY2F0aW9uKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICBfdGhpcyRwcm9wczIkYmFzZW5hbWUgPSBfdGhpcyRwcm9wczIuYmFzZW5hbWUsXG4gICAgICAgIGJhc2VuYW1lID0gX3RoaXMkcHJvcHMyJGJhc2VuYW1lID09PSB2b2lkIDAgPyBcIlwiIDogX3RoaXMkcHJvcHMyJGJhc2VuYW1lLFxuICAgICAgICBfdGhpcyRwcm9wczIkY29udGV4dCA9IF90aGlzJHByb3BzMi5jb250ZXh0LFxuICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMyJGNvbnRleHQgPT09IHZvaWQgMCA/IHt9IDogX3RoaXMkcHJvcHMyJGNvbnRleHQsXG4gICAgICAgIF90aGlzJHByb3BzMiRsb2NhdGlvbiA9IF90aGlzJHByb3BzMi5sb2NhdGlvbixcbiAgICAgICAgbG9jYXRpb24gPSBfdGhpcyRwcm9wczIkbG9jYXRpb24gPT09IHZvaWQgMCA/IFwiL1wiIDogX3RoaXMkcHJvcHMyJGxvY2F0aW9uLFxuICAgICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMyLCBbXCJiYXNlbmFtZVwiLCBcImNvbnRleHRcIiwgXCJsb2NhdGlvblwiXSk7XG5cbiAgICB2YXIgaGlzdG9yeSA9IHtcbiAgICAgIGNyZWF0ZUhyZWY6IGZ1bmN0aW9uIGNyZWF0ZUhyZWYocGF0aCkge1xuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lICsgY3JlYXRlVVJMKHBhdGgpKTtcbiAgICAgIH0sXG4gICAgICBhY3Rpb246IFwiUE9QXCIsXG4gICAgICBsb2NhdGlvbjogc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKSxcbiAgICAgIHB1c2g6IHRoaXMuaGFuZGxlUHVzaCxcbiAgICAgIHJlcGxhY2U6IHRoaXMuaGFuZGxlUmVwbGFjZSxcbiAgICAgIGdvOiBzdGF0aWNIYW5kbGVyKFwiZ29cIiksXG4gICAgICBnb0JhY2s6IHN0YXRpY0hhbmRsZXIoXCJnb0JhY2tcIiksXG4gICAgICBnb0ZvcndhcmQ6IHN0YXRpY0hhbmRsZXIoXCJnb0ZvcndhcmRcIiksXG4gICAgICBsaXN0ZW46IHRoaXMuaGFuZGxlTGlzdGVuLFxuICAgICAgYmxvY2s6IHRoaXMuaGFuZGxlQmxvY2tcbiAgICB9O1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgIGhpc3Rvcnk6IGhpc3RvcnksXG4gICAgICBzdGF0aWNDb250ZXh0OiBjb250ZXh0XG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBTdGF0aWNSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgU3RhdGljUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSlcbiAgfTtcblxuICBTdGF0aWNSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8U3RhdGljUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgU3RhdGljUm91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyB0aGUgZmlyc3QgPFJvdXRlPiB0aGF0IG1hdGNoZXMuXG4gKi9cblxudmFyIFN3aXRjaCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShTd2l0Y2gsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFN3aXRjaCgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU3dpdGNoLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxTd2l0Y2g+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB2YXIgbG9jYXRpb24gPSBfdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCBjb250ZXh0LmxvY2F0aW9uO1xuICAgICAgdmFyIGVsZW1lbnQsIG1hdGNoOyAvLyBXZSB1c2UgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaCBpbnN0ZWFkIG9mIFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkoKS5maW5kKClcbiAgICAgIC8vIGhlcmUgYmVjYXVzZSB0b0FycmF5IGFkZHMga2V5cyB0byBhbGwgY2hpbGQgZWxlbWVudHMgYW5kIHdlIGRvIG5vdCB3YW50XG4gICAgICAvLyB0byB0cmlnZ2VyIGFuIHVubW91bnQvcmVtb3VudCBmb3IgdHdvIDxSb3V0ZT5zIHRoYXQgcmVuZGVyIHRoZSBzYW1lXG4gICAgICAvLyBjb21wb25lbnQgYXQgZGlmZmVyZW50IFVSTHMuXG5cbiAgICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goX3RoaXMucHJvcHMuY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICBpZiAobWF0Y2ggPT0gbnVsbCAmJiBSZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgICAgICBlbGVtZW50ID0gY2hpbGQ7XG4gICAgICAgICAgdmFyIHBhdGggPSBjaGlsZC5wcm9wcy5wYXRoIHx8IGNoaWxkLnByb3BzLmZyb207XG4gICAgICAgICAgbWF0Y2ggPSBwYXRoID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCBfZXh0ZW5kcyh7fSwgY2hpbGQucHJvcHMsIHtcbiAgICAgICAgICAgIHBhdGg6IHBhdGhcbiAgICAgICAgICB9KSkgOiBjb250ZXh0Lm1hdGNoO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBtYXRjaCA/IFJlYWN0LmNsb25lRWxlbWVudChlbGVtZW50LCB7XG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgY29tcHV0ZWRNYXRjaDogbWF0Y2hcbiAgICAgIH0pIDogbnVsbDtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gU3dpdGNoO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFN3aXRjaC5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0XG4gIH07XG5cbiAgU3dpdGNoLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAocHJldlByb3BzKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMubG9jYXRpb24gJiYgIXByZXZQcm9wcy5sb2NhdGlvbiksICc8U3dpdGNoPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISghdGhpcy5wcm9wcy5sb2NhdGlvbiAmJiBwcmV2UHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBwcm92aWRlZCBhIFwibG9jYXRpb25cIiBwcm9wIGluaXRpYWxseSBidXQgb21pdHRlZCBpdCBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIEEgcHVibGljIGhpZ2hlci1vcmRlciBjb21wb25lbnQgdG8gYWNjZXNzIHRoZSBpbXBlcmF0aXZlIEFQSVxuICovXG5cbmZ1bmN0aW9uIHdpdGhSb3V0ZXIoQ29tcG9uZW50KSB7XG4gIHZhciBkaXNwbGF5TmFtZSA9IFwid2l0aFJvdXRlcihcIiArIChDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUpICsgXCIpXCI7XG5cbiAgdmFyIEMgPSBmdW5jdGlvbiBDKHByb3BzKSB7XG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnRSZWYgPSBwcm9wcy53cmFwcGVkQ29tcG9uZW50UmVmLFxuICAgICAgICByZW1haW5pbmdQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBbXCJ3cmFwcGVkQ29tcG9uZW50UmVmXCJdKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFwiICsgZGlzcGxheU5hbWUgKyBcIiAvPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcmVtYWluaW5nUHJvcHMsIGNvbnRleHQsIHtcbiAgICAgICAgcmVmOiB3cmFwcGVkQ29tcG9uZW50UmVmXG4gICAgICB9KSk7XG4gICAgfSk7XG4gIH07XG5cbiAgQy5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICBDLldyYXBwZWRDb21wb25lbnQgPSBDb21wb25lbnQ7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIEMucHJvcFR5cGVzID0ge1xuICAgICAgd3JhcHBlZENvbXBvbmVudFJlZjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxuICAgIH07XG4gIH1cblxuICByZXR1cm4gaG9pc3RTdGF0aWNzKEMsIENvbXBvbmVudCk7XG59XG5cbnZhciB1c2VDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dDtcbmZ1bmN0aW9uIHVzZUhpc3RvcnkoKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VIaXN0b3J5KClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgcmV0dXJuIHVzZUNvbnRleHQoY29udGV4dCkuaGlzdG9yeTtcbn1cbmZ1bmN0aW9uIHVzZUxvY2F0aW9uKCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgISh0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlTG9jYXRpb24oKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cblxuICByZXR1cm4gdXNlQ29udGV4dChjb250ZXh0KS5sb2NhdGlvbjtcbn1cbmZ1bmN0aW9uIHVzZVBhcmFtcygpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICEodHlwZW9mIHVzZUNvbnRleHQgPT09IFwiZnVuY3Rpb25cIikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IG11c3QgdXNlIFJlYWN0ID49IDE2LjggaW4gb3JkZXIgdG8gdXNlIHVzZVBhcmFtcygpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHZhciBtYXRjaCA9IHVzZUNvbnRleHQoY29udGV4dCkubWF0Y2g7XG4gIHJldHVybiBtYXRjaCA/IG1hdGNoLnBhcmFtcyA6IHt9O1xufVxuZnVuY3Rpb24gdXNlUm91dGVNYXRjaChwYXRoKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VSb3V0ZU1hdGNoKClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgcmV0dXJuIHBhdGggPyBtYXRjaFBhdGgodXNlTG9jYXRpb24oKS5wYXRobmFtZSwgcGF0aCkgOiB1c2VDb250ZXh0KGNvbnRleHQpLm1hdGNoO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIGdsb2JhbCA9IHdpbmRvdztcbiAgICB2YXIga2V5ID0gXCJfX3JlYWN0X3JvdXRlcl9idWlsZF9fXCI7XG4gICAgdmFyIGJ1aWxkTmFtZXMgPSB7XG4gICAgICBjanM6IFwiQ29tbW9uSlNcIixcbiAgICAgIGVzbTogXCJFUyBtb2R1bGVzXCIsXG4gICAgICB1bWQ6IFwiVU1EXCJcbiAgICB9O1xuXG4gICAgaWYgKGdsb2JhbFtrZXldICYmIGdsb2JhbFtrZXldICE9PSBcImVzbVwiKSB7XG4gICAgICB2YXIgaW5pdGlhbEJ1aWxkTmFtZSA9IGJ1aWxkTmFtZXNbZ2xvYmFsW2tleV1dO1xuICAgICAgdmFyIHNlY29uZGFyeUJ1aWxkTmFtZSA9IGJ1aWxkTmFtZXNbXCJlc21cIl07IC8vIFRPRE86IEFkZCBsaW5rIHRvIGFydGljbGUgdGhhdCBleHBsYWlucyBpbiBkZXRhaWwgaG93IHRvIGF2b2lkXG4gICAgICAvLyBsb2FkaW5nIDIgZGlmZmVyZW50IGJ1aWxkcy5cblxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IGFyZSBsb2FkaW5nIHRoZSBcIiArIHNlY29uZGFyeUJ1aWxkTmFtZSArIFwiIGJ1aWxkIG9mIFJlYWN0IFJvdXRlciBcIiArIChcIm9uIGEgcGFnZSB0aGF0IGlzIGFscmVhZHkgcnVubmluZyB0aGUgXCIgKyBpbml0aWFsQnVpbGROYW1lICsgXCIgXCIpICsgXCJidWlsZCwgc28gdGhpbmdzIHdvbid0IHdvcmsgcmlnaHQuXCIpO1xuICAgIH1cblxuICAgIGdsb2JhbFtrZXldID0gXCJlc21cIjtcbiAgfVxufVxuXG5leHBvcnQgeyBNZW1vcnlSb3V0ZXIsIFByb21wdCwgUmVkaXJlY3QsIFJvdXRlLCBSb3V0ZXIsIFN0YXRpY1JvdXRlciwgU3dpdGNoLCBjb250ZXh0IGFzIF9fUm91dGVyQ29udGV4dCwgZ2VuZXJhdGVQYXRoLCBtYXRjaFBhdGgsIHVzZUhpc3RvcnksIHVzZUxvY2F0aW9uLCB1c2VQYXJhbXMsIHVzZVJvdXRlTWF0Y2gsIHdpdGhSb3V0ZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWN0LXJvdXRlci5qcy5tYXBcbiIsImltcG9ydCB7IFJvdXRlciwgX19Sb3V0ZXJDb250ZXh0LCBtYXRjaFBhdGggfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuZXhwb3J0ICogZnJvbSAncmVhY3Qtcm91dGVyJztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIGNyZWF0ZUxvY2F0aW9uIH0gZnJvbSAnaGlzdG9yeSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyBIVE1MNSBoaXN0b3J5LlxuICovXG5cbnZhciBCcm93c2VyUm91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEJyb3dzZXJSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEJyb3dzZXJSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUJyb3dzZXJIaXN0b3J5KF90aGlzLnByb3BzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQnJvd3NlclJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIEJyb3dzZXJSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgQnJvd3NlclJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGZvcmNlUmVmcmVzaDogUHJvcFR5cGVzLmJvb2wsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAga2V5TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyXG4gIH07XG5cbiAgQnJvd3NlclJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxCcm93c2VyUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgQnJvd3NlclJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyB3aW5kb3cubG9jYXRpb24uaGFzaC5cbiAqL1xuXG52YXIgSGFzaFJvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShIYXNoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBIYXNoUm91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVIYXNoSGlzdG9yeShfdGhpcy5wcm9wcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEhhc2hSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgICBoaXN0b3J5OiB0aGlzLmhpc3RvcnksXG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBIYXNoUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEhhc2hSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBoYXNoVHlwZTogUHJvcFR5cGVzLm9uZU9mKFtcImhhc2hiYW5nXCIsIFwibm9zbGFzaFwiLCBcInNsYXNoXCJdKVxuICB9O1xuXG4gIEhhc2hSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8SGFzaFJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEhhc2hSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxudmFyIHJlc29sdmVUb0xvY2F0aW9uID0gZnVuY3Rpb24gcmVzb2x2ZVRvTG9jYXRpb24odG8sIGN1cnJlbnRMb2NhdGlvbikge1xuICByZXR1cm4gdHlwZW9mIHRvID09PSBcImZ1bmN0aW9uXCIgPyB0byhjdXJyZW50TG9jYXRpb24pIDogdG87XG59O1xudmFyIG5vcm1hbGl6ZVRvTG9jYXRpb24gPSBmdW5jdGlvbiBub3JtYWxpemVUb0xvY2F0aW9uKHRvLCBjdXJyZW50TG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IGNyZWF0ZUxvY2F0aW9uKHRvLCBudWxsLCBudWxsLCBjdXJyZW50TG9jYXRpb24pIDogdG87XG59O1xuXG52YXIgZm9yd2FyZFJlZlNoaW0gPSBmdW5jdGlvbiBmb3J3YXJkUmVmU2hpbShDKSB7XG4gIHJldHVybiBDO1xufTtcblxudmFyIGZvcndhcmRSZWYgPSBSZWFjdC5mb3J3YXJkUmVmO1xuXG5pZiAodHlwZW9mIGZvcndhcmRSZWYgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgZm9yd2FyZFJlZiA9IGZvcndhcmRSZWZTaGltO1xufVxuXG5mdW5jdGlvbiBpc01vZGlmaWVkRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuICEhKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQuc2hpZnRLZXkpO1xufVxuXG52YXIgTGlua0FuY2hvciA9IGZvcndhcmRSZWYoZnVuY3Rpb24gKF9yZWYsIGZvcndhcmRlZFJlZikge1xuICB2YXIgaW5uZXJSZWYgPSBfcmVmLmlubmVyUmVmLFxuICAgICAgbmF2aWdhdGUgPSBfcmVmLm5hdmlnYXRlLFxuICAgICAgX29uQ2xpY2sgPSBfcmVmLm9uQ2xpY2ssXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wiaW5uZXJSZWZcIiwgXCJuYXZpZ2F0ZVwiLCBcIm9uQ2xpY2tcIl0pO1xuXG4gIHZhciB0YXJnZXQgPSByZXN0LnRhcmdldDtcblxuICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZXZlbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChfb25DbGljaykgX29uQ2xpY2soZXZlbnQpO1xuICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhyb3cgZXg7XG4gICAgICB9XG5cbiAgICAgIGlmICghZXZlbnQuZGVmYXVsdFByZXZlbnRlZCAmJiAvLyBvbkNsaWNrIHByZXZlbnRlZCBkZWZhdWx0XG4gICAgICBldmVudC5idXR0b24gPT09IDAgJiYgKCAvLyBpZ25vcmUgZXZlcnl0aGluZyBidXQgbGVmdCBjbGlja3NcbiAgICAgICF0YXJnZXQgfHwgdGFyZ2V0ID09PSBcIl9zZWxmXCIpICYmIC8vIGxldCBicm93c2VyIGhhbmRsZSBcInRhcmdldD1fYmxhbmtcIiBldGMuXG4gICAgICAhaXNNb2RpZmllZEV2ZW50KGV2ZW50KSAvLyBpZ25vcmUgY2xpY2tzIHdpdGggbW9kaWZpZXIga2V5c1xuICAgICAgKSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBuYXZpZ2F0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuICB9KTsgLy8gUmVhY3QgMTUgY29tcGF0XG5cblxuICBpZiAoZm9yd2FyZFJlZlNoaW0gIT09IGZvcndhcmRSZWYpIHtcbiAgICBwcm9wcy5yZWYgPSBmb3J3YXJkZWRSZWYgfHwgaW5uZXJSZWY7XG4gIH0gZWxzZSB7XG4gICAgcHJvcHMucmVmID0gaW5uZXJSZWY7XG4gIH1cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwgcHJvcHMpO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTGlua0FuY2hvci5kaXNwbGF5TmFtZSA9IFwiTGlua0FuY2hvclwiO1xufVxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcmVuZGVyaW5nIGEgaGlzdG9yeS1hd2FyZSA8YT4uXG4gKi9cblxuXG52YXIgTGluayA9IGZvcndhcmRSZWYoZnVuY3Rpb24gKF9yZWYyLCBmb3J3YXJkZWRSZWYpIHtcbiAgdmFyIF9yZWYyJGNvbXBvbmVudCA9IF9yZWYyLmNvbXBvbmVudCxcbiAgICAgIGNvbXBvbmVudCA9IF9yZWYyJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gTGlua0FuY2hvciA6IF9yZWYyJGNvbXBvbmVudCxcbiAgICAgIHJlcGxhY2UgPSBfcmVmMi5yZXBsYWNlLFxuICAgICAgdG8gPSBfcmVmMi50byxcbiAgICAgIGlubmVyUmVmID0gX3JlZjIuaW5uZXJSZWYsXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjIsIFtcImNvbXBvbmVudFwiLCBcInJlcGxhY2VcIiwgXCJ0b1wiLCBcImlubmVyUmVmXCJdKTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChfX1JvdXRlckNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxMaW5rPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBoaXN0b3J5ID0gY29udGV4dC5oaXN0b3J5O1xuICAgIHZhciBsb2NhdGlvbiA9IG5vcm1hbGl6ZVRvTG9jYXRpb24ocmVzb2x2ZVRvTG9jYXRpb24odG8sIGNvbnRleHQubG9jYXRpb24pLCBjb250ZXh0LmxvY2F0aW9uKTtcbiAgICB2YXIgaHJlZiA9IGxvY2F0aW9uID8gaGlzdG9yeS5jcmVhdGVIcmVmKGxvY2F0aW9uKSA6IFwiXCI7XG5cbiAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgaHJlZjogaHJlZixcbiAgICAgIG5hdmlnYXRlOiBmdW5jdGlvbiBuYXZpZ2F0ZSgpIHtcbiAgICAgICAgdmFyIGxvY2F0aW9uID0gcmVzb2x2ZVRvTG9jYXRpb24odG8sIGNvbnRleHQubG9jYXRpb24pO1xuICAgICAgICB2YXIgbWV0aG9kID0gcmVwbGFjZSA/IGhpc3RvcnkucmVwbGFjZSA6IGhpc3RvcnkucHVzaDtcbiAgICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgIH1cbiAgICB9KTsgLy8gUmVhY3QgMTUgY29tcGF0XG5cblxuICAgIGlmIChmb3J3YXJkUmVmU2hpbSAhPT0gZm9yd2FyZFJlZikge1xuICAgICAgcHJvcHMucmVmID0gZm9yd2FyZGVkUmVmIHx8IGlubmVyUmVmO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9wcy5pbm5lclJlZiA9IGlubmVyUmVmO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgcHJvcHMpO1xuICB9KTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIHZhciB0b1R5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuZnVuY10pO1xuICB2YXIgcmVmVHlwZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGN1cnJlbnQ6IFByb3BUeXBlcy5hbnlcbiAgfSldKTtcbiAgTGluay5kaXNwbGF5TmFtZSA9IFwiTGlua1wiO1xuICBMaW5rLnByb3BUeXBlcyA9IHtcbiAgICBpbm5lclJlZjogcmVmVHlwZSxcbiAgICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgICByZXBsYWNlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB0YXJnZXQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdG86IHRvVHlwZS5pc1JlcXVpcmVkXG4gIH07XG59XG5cbnZhciBmb3J3YXJkUmVmU2hpbSQxID0gZnVuY3Rpb24gZm9yd2FyZFJlZlNoaW0oQykge1xuICByZXR1cm4gQztcbn07XG5cbnZhciBmb3J3YXJkUmVmJDEgPSBSZWFjdC5mb3J3YXJkUmVmO1xuXG5pZiAodHlwZW9mIGZvcndhcmRSZWYkMSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICBmb3J3YXJkUmVmJDEgPSBmb3J3YXJkUmVmU2hpbSQxO1xufVxuXG5mdW5jdGlvbiBqb2luQ2xhc3NuYW1lcygpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGNsYXNzbmFtZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgY2xhc3NuYW1lc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBjbGFzc25hbWVzLmZpbHRlcihmdW5jdGlvbiAoaSkge1xuICAgIHJldHVybiBpO1xuICB9KS5qb2luKFwiIFwiKTtcbn1cbi8qKlxuICogQSA8TGluaz4gd3JhcHBlciB0aGF0IGtub3dzIGlmIGl0J3MgXCJhY3RpdmVcIiBvciBub3QuXG4gKi9cblxuXG52YXIgTmF2TGluayA9IGZvcndhcmRSZWYkMShmdW5jdGlvbiAoX3JlZiwgZm9yd2FyZGVkUmVmKSB7XG4gIHZhciBfcmVmJGFyaWFDdXJyZW50ID0gX3JlZltcImFyaWEtY3VycmVudFwiXSxcbiAgICAgIGFyaWFDdXJyZW50ID0gX3JlZiRhcmlhQ3VycmVudCA9PT0gdm9pZCAwID8gXCJwYWdlXCIgOiBfcmVmJGFyaWFDdXJyZW50LFxuICAgICAgX3JlZiRhY3RpdmVDbGFzc05hbWUgPSBfcmVmLmFjdGl2ZUNsYXNzTmFtZSxcbiAgICAgIGFjdGl2ZUNsYXNzTmFtZSA9IF9yZWYkYWN0aXZlQ2xhc3NOYW1lID09PSB2b2lkIDAgPyBcImFjdGl2ZVwiIDogX3JlZiRhY3RpdmVDbGFzc05hbWUsXG4gICAgICBhY3RpdmVTdHlsZSA9IF9yZWYuYWN0aXZlU3R5bGUsXG4gICAgICBjbGFzc05hbWVQcm9wID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBleGFjdCA9IF9yZWYuZXhhY3QsXG4gICAgICBpc0FjdGl2ZVByb3AgPSBfcmVmLmlzQWN0aXZlLFxuICAgICAgbG9jYXRpb25Qcm9wID0gX3JlZi5sb2NhdGlvbixcbiAgICAgIHN0cmljdCA9IF9yZWYuc3RyaWN0LFxuICAgICAgc3R5bGVQcm9wID0gX3JlZi5zdHlsZSxcbiAgICAgIHRvID0gX3JlZi50byxcbiAgICAgIGlubmVyUmVmID0gX3JlZi5pbm5lclJlZixcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJhcmlhLWN1cnJlbnRcIiwgXCJhY3RpdmVDbGFzc05hbWVcIiwgXCJhY3RpdmVTdHlsZVwiLCBcImNsYXNzTmFtZVwiLCBcImV4YWN0XCIsIFwiaXNBY3RpdmVcIiwgXCJsb2NhdGlvblwiLCBcInN0cmljdFwiLCBcInN0eWxlXCIsIFwidG9cIiwgXCJpbm5lclJlZlwiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoX19Sb3V0ZXJDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8TmF2TGluaz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgY3VycmVudExvY2F0aW9uID0gbG9jYXRpb25Qcm9wIHx8IGNvbnRleHQubG9jYXRpb247XG4gICAgdmFyIHRvTG9jYXRpb24gPSBub3JtYWxpemVUb0xvY2F0aW9uKHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjdXJyZW50TG9jYXRpb24pLCBjdXJyZW50TG9jYXRpb24pO1xuICAgIHZhciBwYXRoID0gdG9Mb2NhdGlvbi5wYXRobmFtZTsgLy8gUmVnZXggdGFrZW4gZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL3BpbGxhcmpzL3BhdGgtdG8tcmVnZXhwL2Jsb2IvbWFzdGVyL2luZGV4LmpzI0wyMDJcblxuICAgIHZhciBlc2NhcGVkUGF0aCA9IHBhdGggJiYgcGF0aC5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfC9cXFxcXSkvZywgXCJcXFxcJDFcIik7XG4gICAgdmFyIG1hdGNoID0gZXNjYXBlZFBhdGggPyBtYXRjaFBhdGgoY3VycmVudExvY2F0aW9uLnBhdGhuYW1lLCB7XG4gICAgICBwYXRoOiBlc2NhcGVkUGF0aCxcbiAgICAgIGV4YWN0OiBleGFjdCxcbiAgICAgIHN0cmljdDogc3RyaWN0XG4gICAgfSkgOiBudWxsO1xuICAgIHZhciBpc0FjdGl2ZSA9ICEhKGlzQWN0aXZlUHJvcCA/IGlzQWN0aXZlUHJvcChtYXRjaCwgY3VycmVudExvY2F0aW9uKSA6IG1hdGNoKTtcbiAgICB2YXIgY2xhc3NOYW1lID0gaXNBY3RpdmUgPyBqb2luQ2xhc3NuYW1lcyhjbGFzc05hbWVQcm9wLCBhY3RpdmVDbGFzc05hbWUpIDogY2xhc3NOYW1lUHJvcDtcbiAgICB2YXIgc3R5bGUgPSBpc0FjdGl2ZSA/IF9leHRlbmRzKHt9LCBzdHlsZVByb3AsIHt9LCBhY3RpdmVTdHlsZSkgOiBzdHlsZVByb3A7XG5cbiAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7XG4gICAgICBcImFyaWEtY3VycmVudFwiOiBpc0FjdGl2ZSAmJiBhcmlhQ3VycmVudCB8fCBudWxsLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICBzdHlsZTogc3R5bGUsXG4gICAgICB0bzogdG9Mb2NhdGlvblxuICAgIH0sIHJlc3QpOyAvLyBSZWFjdCAxNSBjb21wYXRcblxuXG4gICAgaWYgKGZvcndhcmRSZWZTaGltJDEgIT09IGZvcndhcmRSZWYkMSkge1xuICAgICAgcHJvcHMucmVmID0gZm9yd2FyZGVkUmVmIHx8IGlubmVyUmVmO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9wcy5pbm5lclJlZiA9IGlubmVyUmVmO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpbmssIHByb3BzKTtcbiAgfSk7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBOYXZMaW5rLmRpc3BsYXlOYW1lID0gXCJOYXZMaW5rXCI7XG4gIHZhciBhcmlhQ3VycmVudFR5cGUgPSBQcm9wVHlwZXMub25lT2YoW1wicGFnZVwiLCBcInN0ZXBcIiwgXCJsb2NhdGlvblwiLCBcImRhdGVcIiwgXCJ0aW1lXCIsIFwidHJ1ZVwiXSk7XG4gIE5hdkxpbmsucHJvcFR5cGVzID0gX2V4dGVuZHMoe30sIExpbmsucHJvcFR5cGVzLCB7XG4gICAgXCJhcmlhLWN1cnJlbnRcIjogYXJpYUN1cnJlbnRUeXBlLFxuICAgIGFjdGl2ZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBhY3RpdmVTdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzQWN0aXZlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBzdHJpY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pO1xufVxuXG5leHBvcnQgeyBCcm93c2VyUm91dGVyLCBIYXNoUm91dGVyLCBMaW5rLCBOYXZMaW5rIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdC1yb3V0ZXItZG9tLmpzLm1hcFxuIiwiXHJcbmV4cG9ydCBjb25zdCBVcmxzID0ge1xyXG4gICAgQVBJX0FVVEhfVkFMSURBVEU6IFwiaHR0cDovL2tleWNvbW1hbmRlci5henVyZXdlYnNpdGVzLm5ldC9hcGkvYXV0aC92YWxpZGF0ZVwiLFxyXG4gICAgQVBJX0FVVEhfTE9HSU46IFwiaHR0cDovL2tleWNvbW1hbmRlci5henVyZXdlYnNpdGVzLm5ldC9hcGkvYXV0aC9sb2dpblwiLFxyXG4gICAgQVBJX0FVVEhfVVNFUk5BTUVfQVZBSUxBQkxFOiBcImh0dHA6Ly9rZXljb21tYW5kZXIuYXp1cmV3ZWJzaXRlcy5uZXQvYXBpL2F1dGgvSXNVc2VybmFtZUluVXNlXCIsXHJcbiAgICBBUElfQVVUSF9SRUdJU1RFUjogXCJodHRwOi8va2V5Y29tbWFuZGVyLmF6dXJld2Vic2l0ZXMubmV0L2FwaS9hdXRoL3JlZ2lzdGVyXCIsXHJcblxyXG4gICAgQVBJX0hJU1RPUlk6IFwiL2FwaS9Vc2VyL0hpc3RvcnlcIixcclxuICAgIEFQSV9ISVNUT1JZX0RFVEFJTFM6IFwiL2FwaS9Vc2VyL0hpc3RvcnlEZXRhaWxzXCIsXHJcbiAgICBBUElfSElTVE9SWV9WSVNVQUw6IFwiL2FwaS9Vc2VyL0hpc3RvcnlBbmFseXRpY3NcIixcclxuXHJcbiAgICBBUElfTkVXX1NFU1NJT046IFwiL2FwaS9TZXNzaW9uL0dldE5ld1Nlc3Npb25cIixcclxuICAgIEFQSV9ORVdfU0VRVUVOQ0U6IFwiL2FwaS9TZXF1ZW5jZS9HZXROZXdTZXF1ZW5jZVwiLFxyXG4gICAgQVBJX0VORF9TRVFVRU5DRTogXCIvYXBpL1NlcXVlbmNlL0VuZFNlcXVlbmNlXCIsXHJcbiAgICBBUElfUlVOX0FOQUxZU0lTX0ZPUl9TRVE6IFwiL2FwaS9FcnJvckFuYWx5c2lzL1J1bkZvclNlcXVlbmNlXCIsXHJcblxyXG4gICAgRXh0ZXJuYWw6IHtcclxuICAgICAgICBKUzoge1xyXG4gICAgICAgICAgICBKUVVFUlk6IFwiaHR0cHM6Ly9jb2RlLmpxdWVyeS5jb20vanF1ZXJ5LTMuNC4xLm1pbi5qc1wiLFxyXG4gICAgICAgICAgICBEQVRBVEFCTEVTX0NPUkU6IFwiaHR0cHM6Ly9jZG4uZGF0YXRhYmxlcy5uZXQvMS4xMC4yMC9qcy9qcXVlcnkuZGF0YVRhYmxlcy5taW4uanNcIixcclxuICAgICAgICAgICAgREFUQVRBQkxFU19ST1dHUk9VUDogXCJodHRwczovL2Nkbi5kYXRhdGFibGVzLm5ldC9yb3dncm91cC8xLjEuMS9qcy9kYXRhVGFibGVzLnJvd0dyb3VwLm1pbi5qc1wiXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgQ1NTOiB7XHJcbiAgICAgICAgICAgIERBVEFUQUJMRVNfQ09SRTogXCJodHRwczovL2Nkbi5kYXRhdGFibGVzLm5ldC8xLjEwLjIwL2Nzcy9qcXVlcnkuZGF0YVRhYmxlcy5taW4uY3NzXCIsXHJcbiAgICAgICAgICAgIERBVEFUQUJMRVNfQUxUOiBcImh0dHBzOi8vY2RuLmRhdGF0YWJsZXMubmV0L3Jvd2dyb3VwLzEuMS4xL2Nzcy9yb3dHcm91cC5kYXRhVGFibGVzLm1pbi5jc3NcIlxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFJvdXRlcyA9IHtcclxuICAgIERFRkFVTFQ6IFwiL1wiLFxyXG4gICAgSU5ERVg6IFwiL1wiLFxyXG5cclxuICAgIExPR0lOOiBcIi9Mb2dpblwiLFxyXG4gICAgTE9HT1VUOiBcIi9Mb2dvdXRcIixcclxuICAgIFJFR0lTVEVSOiBcIi9SZWdpc3RlclwiLFxyXG4gICAgTkVXX1NFUVVFTkNFOiBcIi9zZWN1cmUvTmV3U2VxdWVuY2VcIixcclxuXHJcbiAgICBNWV9BQ0NUOiBcIi9zZWN1cmUvTXlBY2NvdW50XCIsXHJcbiAgICBISVNUT1JZOiBcIi9zZWN1cmUvSGlzdG9yeVwiLFxyXG4gICAgSElTVE9SWV9ERVRBSUxTOiBcIi9zZWN1cmUvSGlzdG9yeURldGFpbHNcIixcclxuICAgIEhJU1RPUllfREVUQUlMU19XSVRISUQ6IFwiL3NlY3VyZS9IaXN0b3J5RGV0YWlscy86c2VxdWVuY2VJZFwiLFxyXG4gICAgSElTVE9SWV9WSVNVQUw6IFwiL3NlY3VyZS9IaXN0b3J5L1Zpc3VhbFwiXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBMb2NhbFN0b3JhZ2UgPSB7XHJcbiAgICBKV1RfS0VZX05BTUU6IFwia2V5LWNkci1qd3RcIixcclxuICAgIFNFU1NJT05fS0VZX05BTUU6IFwia2V5LWNkci1zZXNzaW9uXCJcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFJ1bnRpbWUgPSB7XHJcbiAgICBJU19ERUJVRzogdHJ1ZSxcclxuICAgIERFRkFVTFRfTkVXX1NFUVVFTkNFX0lOUFVUX0ZJRUxEX0hFSUdIVDogNzVcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFVzZXJNc2dzID0ge1xyXG4gICAgQVVUSF9GQUlMVVJFOiBcInVuYWJsZSB0byBsb2dpbiB3aXRoIHRoZSB1c2VybmFtZSBhbmQgcGFzc3dvcmQgcHJvdmlkZWRcIixcclxuICAgIE5FV19TRVFVRU5DRV9JTlNUUlVDVElPTlM6IFwiUFJFU1MgU0hJRlQrRU5URVIgT1IgUFJFU1MgU1RBUlQgVE8gQkVHSU5cIixcclxuXHJcbiAgICBSZWdpc3RyYXRpb246IHtcclxuICAgICAgICBQQVNTV09SRF9NQVRDSDogXCJib3RoIHlvdXIgcGFzc3dvcmRzIG11c3QgbWF0Y2hcIixcclxuICAgICAgICBVU0VSTkFNRV9JTl9VU0U6IFwidGhlIHVzZXJuYW1lIHswfSBpcyBhbHJlYWR5IGluIHVzZVwiLFxyXG4gICAgICAgIE1VU1RfQkVfTk9OX0VNUFRZOiBcIm11c3QgYmUgbm9uIGVtcHR5XCJcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IEhpZ2hsaWdodFR5cGUgPSB7XHJcbiAgICAwOiBcIkluY29ycmVjdENoYXJcIixcclxuICAgIDE6IFwiRXh0cmFDaGFyc1wiLCBcclxuICAgIDI6IFwiU2hvcnRDaGFyc1wiLCBcclxuICAgIDM6IFwiTm9ybWFsXCIsXHJcbiAgICA0OiBcIlVuZXZhbHVhdGVkXCJcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IEh0dHBFcnJvckhhbmRsZXIgPSBmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgIGlmICghcmVzcG9uc2Uub2spIHtcclxuICAgICAgICB0aHJvdyBFcnJvcihyZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXNwb25zZTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFJlYWxUaW1lQW5hbHlzaXNTZXR0aW5ncyA9IHtcclxuICAgIExFTkdUSF9CVUZGRVI6IDUsXHJcbiAgICBUSUNLX0lOVEVSVkFMX0lOX01TOiA1MDAwLFxyXG4gICAgVU5DSEFOR0VEX1RFWFRfVElDS19USFJFU0hPTEQ6IDVcclxufVxyXG4iLCJcclxuaW1wb3J0IHsgTG9jYWxTdG9yYWdlLCBVcmxzLCBSdW50aW1lIH0gZnJvbSAnLi9jb25zdGFudHMuanN4JztcclxuXHJcbmNsYXNzIEF1dGgge1xyXG4gICAgY29uc3RydWN0b3IocGFyYW1zKSB7XHJcbiAgICAgICAgdGhpcy5sb2dnZWRJbiA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEN1cnJlbnRUb2tlbigpIHtcclxuICAgICAgICB2YXIgdG9rZW4gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShMb2NhbFN0b3JhZ2UuSldUX0tFWV9OQU1FKTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAodG9rZW4pXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh0b2tlbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ2F1dGg6IHRva2VuIHBhcnNlIGVycm9yOiAnLCBlcnIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXJUb2tlbigpIHtcclxuICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShMb2NhbFN0b3JhZ2UuSldUX0tFWV9OQU1FKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRUb2tlbih0b2tlbikge1xyXG4gICAgICAgIHZhciB0b2tlbnN0cmluZyA9IEpTT04uc3RyaW5naWZ5KHRva2VuKTtcclxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShMb2NhbFN0b3JhZ2UuSldUX0tFWV9OQU1FLCB0b2tlbnN0cmluZyk7XHJcbiAgICB9XHJcblxyXG4gICAgLypzeW5jaHJvbm91cyBhdXRoKi9cclxuICAgIC8qXHJcbiAgICBpc0F1dGhlbnRpY2F0ZWQoKSB7XHJcbiAgICAgICAgdmFyIHRva2VuID0gdGhpcy5nZXRDdXJyZW50VG9rZW4oKTtcclxuICAgICAgICBpZiAoIXRva2VuIHx8ICF0b2tlbi5qd3QpXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgcmV0dXJuICh0b2tlbiAmJiAhdGhpcy5pc1Rva2VuRXhwaXJlZCh0b2tlbikpO1xyXG4gICAgfSovXHJcblxyXG4gICAgLyphc3luY2hyb25vdXMgYXV0aCovXHJcbiAgICBpc0F1dGhlbnRpY2F0ZWQoKSB7XHJcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xyXG4gICAgICAgICAgICB2YXIgdG9rZW4gPSB0aGF0LmdldEN1cnJlbnRUb2tlbigpO1xyXG4gICAgICAgICAgICBpZiAoIXRva2VuKSB7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKGZhbHNlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHRoYXQuaXNWYWxpZFRva2VuKHRva2VuKVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKHJldCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChSdW50aW1lLklTX0RFQlVHKSBjb25zb2xlLmxvZyhcImF1dGg6IGlzYXV0aGVudGljYXRlZDogc2VydmVyIGNoZWNrIHdhcyBcIiwgcmV0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiYXV0aDogaXNhdXRoZW50aWNhdGVkOiB2YWxpZGl0eSBlcnJvciBcIiwgZXJyKTtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoZmFsc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgbG9nb3V0KCkge1xyXG4gICAgICAgIGlmIChSdW50aW1lLklTX0RFQlVHKSBjb25zb2xlLmxvZyhcImF1dGg6IGxvZ2dpbmcgb3V0XCIpO1xyXG4gICAgICAgIHRoaXMuY2xlYXJUb2tlbigpO1xyXG4gICAgfVxyXG5cclxuICAgIGxvZ2luKHVzZXIpIHtcclxuICAgICAgICByZXR1cm4gZmV0Y2goVXJscy5BUElfQVVUSF9MT0dJTiwge1xyXG4gICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nfSxcclxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkodXNlcilcclxuICAgICAgICB9KVxyXG4gICAgICAgIC50aGVuKHJlc3AgPT4gcmVzcC5qc29uKCkpXHJcbiAgICAgICAgLnRoZW4oZGF0YSA9PiB7XHJcbiAgICAgICAgICAgIGlmKFJ1bnRpbWUuSVNfREVCVUcpIGNvbnNvbGUubG9nKFwibG9naW4gcmV0dXJuOiBcIiwgZGF0YSk7XHJcbiAgICAgICAgICAgIGlmIChkYXRhLklzVmFsaWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0VG9rZW4oZGF0YSk7XHJcbiAgICAgICAgICAgIH0gXHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZGF0YSk7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBpc1Rva2VuRXhwaXJlZCh0b2tlbikge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRlY29kZWQgPSBkZWNvZGUodG9rZW4pO1xyXG4gICAgICAgICAgICBpZiAoZGVjb2RlZC5leHAgPCBEYXRlLm5vdygpIC8gMTAwMCkgeyBcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG1ha2VSZXF1ZXN0V2l0aFRva2VuKHVybCwgZGF0YSkge1xyXG4gICAgICAgIHZhciB0b2tlbiA9IHRoaXMuZ2V0Q3VycmVudFRva2VuKCk7XHJcbiAgICAgICAgaWYgKCF0b2tlbiB8fCAhdG9rZW4uSldUVmFsdWUpIHJldHVybiBQcm9taXNlLnJlamVjdCgpO1xyXG5cclxuICAgICAgICByZXR1cm4gZmV0Y2godXJsLCB7XHJcbiAgICAgICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxyXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgICAgICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6IGBCZWFyZXIgJHt0b2tlbn1gXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAsIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKHJlc3AgPT4gcmVzcC5qc29uKCkpXHJcbiAgICAgICAgICAgIC50aGVuKGRhdGEgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShkYXRhKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgaXNWYWxpZFRva2VuKCkge1xyXG4gICAgICAgIHZhciB0b2tlbiA9IHRoaXMuZ2V0Q3VycmVudFRva2VuKCk7XHJcbiAgICAgICAgaWYgKCF0b2tlbiB8fCAhdG9rZW4uSldUVmFsdWUpIHJldHVybiBQcm9taXNlLnJlc29sdmUoZmFsc2UpO1xyXG5cclxuICAgICAgICByZXR1cm4gZmV0Y2goVXJscy5BUElfQVVUSF9WQUxJREFURSwge1xyXG4gICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nIH1cclxuICAgICAgICAgICAgLCBib2R5OiBKU09OLnN0cmluZ2lmeSh0b2tlbilcclxuICAgICAgICB9KVxyXG4gICAgICAgIC50aGVuKHJlc3AgPT4gcmVzcC5qc29uKCkpXHJcbiAgICAgICAgLnRoZW4oZGF0YSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghZGF0YS5Jc1ZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsZWFyVG9rZW4oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGRhdGEuSXNWYWxpZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgaXNVc2VybmFtZUluVXNlKGxvZ2luTmFtZSkge1xyXG5cclxuICAgICAgICBpZiAobG9naW5OYW1lID09IFwiXCIpIHJldHVybiBQcm9taXNlLnJlc29sdmUoZmFsc2UpO1xyXG5cclxuICAgICAgICB2YXIgcmVxID0geyB1c2VybmFtZTogbG9naW5OYW1lIH07XHJcbiAgICAgICAgcmV0dXJuIGZldGNoKFVybHMuQVBJX0FVVEhfVVNFUk5BTUVfQVZBSUxBQkxFLCB7XHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJywgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicgfVxyXG4gICAgICAgICAgICAsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHJlcSlcclxuICAgICAgICB9KVxyXG4gICAgICAgIC50aGVuKHJlc3AgPT4gcmVzcC5qc29uKCkpXHJcbiAgICAgICAgLnRoZW4oZGF0YSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZGF0YS5Jc0luVXNlKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZWdpc3Rlcihsb2dpbk5hbWUsIHBhc3N3b3JkKSB7XHJcbiAgICAgICAgdmFyIHVzZXIgPSB7IHVzZXJuYW1lOiBsb2dpbk5hbWUsIHBhc3N3b3JkOiBwYXNzd29yZH07XHJcbiAgICAgICAgcmV0dXJuIGZldGNoKFVybHMuQVBJX0FVVEhfUkVHSVNURVIsIHtcclxuICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcclxuICAgICAgICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLCBBY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uJyB9XHJcbiAgICAgICAgICAgICwgYm9keTogSlNPTi5zdHJpbmdpZnkodXNlcilcclxuICAgICAgICB9KVxyXG4gICAgICAgIC50aGVuKHJlc3AgPT4gcmVzcC5qc29uKCkpXHJcbiAgICAgICAgICAgIC50aGVuKGRhdGEgPT4ge1xyXG4gICAgICAgICAgICBpZihkYXRhLklzVmFsaWQgPT0gdHJ1ZSlcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0VG9rZW4oZGF0YSk7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZGF0YSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBBdXRoO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcclxuaW1wb3J0IHsgTGluaywgd2l0aFJvdXRlciB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcblxyXG5pbXBvcnQgQXV0aCBmcm9tICcuLi9hdXRoLmpzeCdcclxuaW1wb3J0IHsgUm91dGVzIH0gZnJvbSAnLi4vY29uc3RhbnRzLmpzeCc7XHJcblxyXG5jbGFzcyBIZWFkZXJOYXZCYXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcblxyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgICAgICAgIGN1cnJlbnRSb3V0ZTogdGhpcy5wcm9wcy5sb2NhdGlvbi5wYXRobmFtZSxcclxuICAgICAgICAgICAgcm91dGVzOiBbXHJcbiAgICAgICAgICAgICAgICB7IHJvdXRlOiBSb3V0ZXMuSU5ERVgsIGRpc3BsYXk6IFwiSG9tZVwiLCBhY3RpdmU6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICB7IHJvdXRlOiBSb3V0ZXMuTVlfQUNDVCwgZGlzcGxheTogXCJNeSBBY2NvdW50XCIsIGFjdGl2ZTogZmFsc2UgfVxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcblxyXG4gICAgY2xpY2tIYW5kbGVyKHJvdXRlKSB7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZShwcmV2U3RhdGUgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBsaXN0ID0gcHJldlN0YXRlLnJvdXRlcy5tYXAoKGl0ZW0sIGopID0+IHtcclxuICAgICAgICAgICAgICAgIGl0ZW0uYWN0aXZlID0gKGl0ZW0ucm91dGUgPT09IHJvdXRlKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBpdGVtO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB7IGxpc3QgfTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG5cclxuICAgICAgICBsZXQgbGluaztcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5Jc0F1dGhlZCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICBsaW5rID0gPExpbmsgdG89e1JvdXRlcy5MT0dPVVR9IG9uQ2xpY2s9e3RoaXMucHJvcHMuYXBwTG9nb3V0fT5Mb2dvdXQ8L0xpbms+O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGxpbmsgPSA8TGluayB0bz17Um91dGVzLkxPR0lOfSBvbkNsaWNrPXsoKSA9PiB0aGlzLmNsaWNrSGFuZGxlcihSb3V0ZXMuTE9HSU4pfT5Mb2dpbjwvTGluaz47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgdmFsaWRSb3V0ZXMgPSBbUm91dGVzLk1ZX0FDQ1QsIFJvdXRlcy5ISVNUT1JZLCBSb3V0ZXMuSElTVE9SWV9WSVNVQUwsIFJvdXRlcy5ORVdfU0VRVUVOQ0VdO1xyXG4gICAgICAgIGxldCBzaG93U3ViTWVudSA9IChcclxuICAgICAgICAgICAgICAgICh2YWxpZFJvdXRlcy5pbmRleE9mKHRoaXMucHJvcHMubG9jYXRpb24ucGF0aG5hbWUpID49IDApXHJcbiAgICAgICAgICAgICAgICB8fCB0aGlzLnByb3BzLmxvY2F0aW9uLnBhdGhuYW1lLmluZGV4T2YoUm91dGVzLkhJU1RPUllfREVUQUlMUykgPj0gMFxyXG4gICAgICAgICAgICApICYmICh0aGlzLnByb3BzLklzQXV0aGVkID09PSB0cnVlKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPFJlYWN0LkZyYWdtZW50PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBpZD1cIm5hdl9jb250YWluZXJcIiBjbGFzc05hbWU9XCJuYXZfY29udGFpbmVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5yb3V0ZXMubWFwKChyb3V0ZSwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjc3MgPSAocm91dGUuYWN0aXZlKSA/ICdjdXJyZW50JyA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkga2V5PXtpbmRleH0gY2xhc3NOYW1lPXtjc3N9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TGluayB0bz17cm91dGUucm91dGV9IG9uQ2xpY2s9eygpID0+IHRoaXMuY2xpY2tIYW5kbGVyKHJvdXRlLnJvdXRlKX0+e3JvdXRlLmRpc3BsYXl9PC9MaW5rPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGk+e2xpbmt9PC9saT5cclxuICAgICAgICAgICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgLyogc3VibWVudSB2aXNpYmxlIG9ubHkgZm9yIG15IGFjY291bnQgKi9cclxuICAgICAgICAgICAgICAgICAgICAoc2hvd1N1Yk1lbnUgPT09IHRydWUpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD1cInN1Yl9uYXZfY29udGFpbmVyXCIgY2xhc3NOYW1lPVwibmF2X2NvbnRhaW5lcl9zbVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPExpbmsgdG89e1JvdXRlcy5ORVdfU0VRVUVOQ0V9IG9uQ2xpY2s9eygpID0+IHRoaXMuY2xpY2tIYW5kbGVyKFJvdXRlcy5ORVdfU0VRVUVOQ0UpfT5OZXcgU2VxdWVuY2U8L0xpbms+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TGluayB0bz17Um91dGVzLkhJU1RPUll9IG9uQ2xpY2s9eygpID0+IHRoaXMuY2xpY2tIYW5kbGVyKFJvdXRlcy5ISVNUT1JZKX0+SGlzdG9yeTwvTGluaz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxMaW5rIHRvPXtSb3V0ZXMuSElTVE9SWV9WSVNVQUx9IG9uQ2xpY2s9eygpID0+IHRoaXMuY2xpY2tIYW5kbGVyKFJvdXRlcy5ISVNUT1JZX1ZJU1VBTCl9PlZpc3VhbCBIaXN0b3J5PC9MaW5rPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICA8L1JlYWN0LkZyYWdtZW50PlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHdpdGhSb3V0ZXIoSGVhZGVyTmF2QmFyKTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcclxuaW1wb3J0IHsgTGluayB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcblxyXG5pbXBvcnQgSGVhZGVyTmF2QmFyIGZyb20gJy4vY29tcG9uZW50cy9oZWFkZXItbmF2LWJhci5qc3gnO1xyXG5cclxuY2xhc3MgSGVhZGVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG4gICAgfTtcclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8UmVhY3QuRnJhZ21lbnQ+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGlkPVwiaGVhZGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0b3BfYmFyXCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD1cImhlYWRlcl9jb250ZW50c1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPVwidGl0bGVfYmxvY2tcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxMaW5rIHRvPVwiL1wiIGNsYXNzTmFtZT1cInRpdGxlXCI+S2V5IENvbW1hbmRlcjwvTGluaz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGl0bGVfc3ViXCI+bWVhc3VyZSwgaW1wcm92ZSBhbmQgYW5hbHl6ZSB0eXBpbmcgc3BlZWQgYW5kIGFjY3VyYWN5IHt0aGlzLnByb3BzLmxvY308L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxIZWFkZXJOYXZCYXIgSXNBdXRoZWQ9e3RoaXMucHJvcHMuSXNBdXRoZWR9IGFwcExvZ2luPXt0aGlzLnByb3BzLmFwcExvZ2lufSBhcHBMb2dvdXQ9e3RoaXMucHJvcHMuYXBwTG9nb3V0fS8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2xlYXJfYm90aFwiPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNsZWFyX2JvdGhcIj48L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L1JlYWN0LkZyYWdtZW50PlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEhlYWRlcjtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XHJcblxyXG5jbGFzcyBCYXNlQ29tcG9uZW50IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG4gICAgfVxyXG5cclxuICAgIGxvYWRTY3JpcHQoc3JjKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xyXG4gICAgICAgICAgICB2YXIgdGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XHJcbiAgICAgICAgICAgIHRhZy5hc3luYyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0YWcuc3JjID0gc3JjO1xyXG4gICAgICAgICAgICB0YWcub25sb2FkID0gKCkgPT4geyByZXNvbHZlKCk7IH07XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGFnKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBsb2FkQ3NzKHNyYykge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcclxuICAgICAgICAgICAgdmFyIHRhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpbmsnKTtcclxuICAgICAgICAgICAgdGFnLmhyZWYgPSBzcmM7XHJcbiAgICAgICAgICAgIHRhZy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xyXG4gICAgICAgICAgICB0YWcucmVsID0gXCJzdHlsZXNoZWV0XCI7XHJcbiAgICAgICAgICAgIHRhZy5vbmxvYWQgPSAoKSA9PiB7IHJlc29sdmUoKTsgfTtcclxuICAgICAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCh0YWcpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBCYXNlQ29tcG9uZW50O1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcclxuXHJcbmltcG9ydCBIZWFkZXIgZnJvbSAnLi9oZWFkZXIuanN4JztcclxuXHJcbmZ1bmN0aW9uIENvbnRlbnRDb250YWluZXIocHJvcHMpIHtcclxuICAgIHJldHVybihcclxuICAgICAgICA8UmVhY3QuRnJhZ21lbnQ+XHJcbiAgICAgICAgICAgIDxkaXYgaWQ9XCJjb250ZW50X3dyYXBwZXJcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJjb250ZW50XCIgY2xhc3NOYW1lPVwiY2VudGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAge3Byb3BzLmNoaWxkcmVufVxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2xlYXJfYm90aFwiPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNsZWFyX2JvdGhcIj48L2Rpdj5cclxuICAgICAgICA8L1JlYWN0LkZyYWdtZW50PlxyXG4gICAgKTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ29udGVudENvbnRhaW5lcjsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcclxuXHJcbmltcG9ydCBCYXNlQ29tcG9uZW50IGZyb20gJy4vYmFzZV9jb21wb25lbnQuanN4JztcclxuaW1wb3J0IENvbnRlbnRDb250YWluZXIgZnJvbSAnLi4vY29udGVudC5qc3gnO1xyXG5pbXBvcnQgeyBSb3V0ZXMgfSBmcm9tICcuLi9jb25zdGFudHMuanN4JztcclxuXHJcbmNsYXNzIEluZGV4IGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XHJcblxyXG4gICAgbmF2VG8ocGF0aCkge1xyXG4gICAgICAgIHRoaXMucHJvcHMuaGlzdG9yeS5wdXNoKHBhdGgpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8Q29udGVudENvbnRhaW5lcj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGVudF9yb3dcIj5cclxuICAgICAgICAgICAgICAgICAgICA8aDI+V2hhdCBpcyBpdD88L2gyPlxyXG4gICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiL2Fzc2V0cy9pbWcvbWFpbl9iYW5uZXIucG5nXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3NOYW1lPVwicHJvbWluZW50X2xpc3RcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlByYWN0aWNlIHlvdXIgdHlwaW5nIGFnYWluc3Qgc2FtcGxlcyBvZiB0ZXh0PC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFuYWx5emUgeW91ciBzcGVlZCwgYWNjdXJhY3kgYW5kIHByb2JsZW0ga2V5IGNvbWJpbmF0aW9uczwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NZWFzdXJlIHBlcmZvcm1hbmNlIG92ZXIgdGltZSA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdWw+XHJcbiBcclxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3NOYW1lPVwiYnV0dG9uLXNpemUtbWVkaXVtXCIgdHlwZT1cImJ1dHRvblwiIHZhbHVlPVwiVHJ5IEl0IVwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjbGVhcl9ib3RoXCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRlbnRfcm93X3NtXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGgyPkFscmVhZHkgSGF2ZSBhbiBBY2NvdW50PzwvaDI+XHJcbiAgICAgICAgICAgICAgICAgICAgTG9naW4gYW5kIGNvbnRpbnVlIHdoZXJlIHlvdSBsZWZ0IG9mZlxyXG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzc05hbWU9XCJidXR0b24tc2l6ZS1tZWRpdW1cIiB0eXBlPVwiYnV0dG9uXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9XCJMb2dpbiB0byBZb3VyIEFjY291bnRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB0aGlzLm5hdlRvKFJvdXRlcy5MT0dJTil9XHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGVudF9yb3dfc21cIj5cclxuICAgICAgICAgICAgICAgICAgICA8aDI+UmV2aWV3IFJlcG9ydGluZyBGZWF0dXJlczwvaDI+XHJcbiAgICAgICAgICAgICAgICAgICAgUmV2aWV3IGEgcHVibGljIGFjY291bnQgdG8gc2VlIHRoZSBhbmFseXRpY3Mgb24gc3BlZWQgYW5kIGFjY3VyYWN5XHJcbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzTmFtZT1cImJ1dHRvbi1zaXplLW1lZGl1bVwiIHR5cGU9XCJidXR0b25cIiB2YWx1ZT1cIlJldmlldyBSZXBvcnRpbmdcIiAvPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvQ29udGVudENvbnRhaW5lcj5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBJbmRleDsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcclxuXHJcbmNsYXNzIExvYWRpbmcgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLnNob3dMb2FkaW5nKSB7XHJcbiAgICAgICAgICAgIHZhciBjc3MgPSAodGhpcy5wcm9wcy5wb3NpdGlvbiA9PT0gJ3RvcCcpID8gXCJzcGlubmVyLWJvcmRlci1wb3NpdGlvbi10b3BcIiA6IFwic3Bpbm5lci1ib3JkZXJcIjtcclxuICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgIDxSZWFjdC5GcmFnbWVudD5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxvYWRpbmdfbWFza1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y3NzfT48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XHJcbiAgICAgICAgICAgIClcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoPFJlYWN0LkZyYWdtZW50PjwvUmVhY3QuRnJhZ21lbnQ+KVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgTG9hZGluZzsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcclxuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXHJcblxyXG5pbXBvcnQgQmFzZUNvbXBvbmVudCBmcm9tICAgICAgICAgICAnLi9iYXNlX2NvbXBvbmVudC5qc3gnO1xyXG5pbXBvcnQgQ29udGVudENvbnRhaW5lciBmcm9tICAgICAgICAnLi4vY29udGVudC5qc3gnO1xyXG5pbXBvcnQgQXV0aCBmcm9tICAgICAgICAgICAgICAgICAgICAnLi4vYXV0aC5qc3gnO1xyXG5pbXBvcnQgTG9hZGluZyBmcm9tICAgICAgICAgICAgICAgICAnLi4vY29tcG9uZW50cy9sb2FkaW5nLmpzeCc7XHJcbmltcG9ydCB7IFJvdXRlcywgVXNlck1zZ3MgfSBmcm9tICAgICcuLi9jb25zdGFudHMuanN4JztcclxuXHJcbmNsYXNzIExvZ2luIGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuXHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgICAgICAgdXNlcm5hbWU6ICcnLFxyXG4gICAgICAgICAgICBwYXNzd29yZDogJycsXHJcbiAgICAgICAgICAgIHNob3dMb2FkaW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgZXJyb3JNc2c6ICcnLFxyXG4gICAgICAgICAgICByZWRpcmVjdFRvT25Mb2dpbjogdGhpcy5nZXRQYXRoVG9SZWRpcmVjdEFmdGVyTG9naW4oKVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMuQXV0aFNlcnZpY2UgPSBuZXcgQXV0aCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFBhdGhUb1JlZGlyZWN0QWZ0ZXJMb2dpbigpIHtcclxuICAgICAgICB2YXIgcGF0aCA9IFJvdXRlcy5NWV9BQ0NUO1xyXG4gICAgICAgIGlmICh0aGlzLnByb3BzICYmXHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMubG9jYXRpb24gJiZcclxuICAgICAgICAgICAgdGhpcy5wcm9wcy5sb2NhdGlvbi5zdGF0ZSAmJlxyXG4gICAgICAgICAgICB0aGlzLnByb3BzLmxvY2F0aW9uLnN0YXRlLmZyb20pIHtcclxuICAgICAgICAgICAgICAgIHBhdGggPSB0aGlzLnByb3BzLmxvY2F0aW9uLnN0YXRlLmZyb207XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBwYXRoO1xyXG4gICAgfVxyXG5cclxuICAgIGhhbmRsZVN1Ym1pdCA9IChlKSA9PiB7XHJcbiAgICAgICAgdmFyIGxvZ2luZGF0YSA9IHsgdXNlcm5hbWU6IHRoaXMuc3RhdGUudXNlcm5hbWUsIHBhc3N3b3JkOiB0aGlzLnN0YXRlLnBhc3N3b3JkIH07IFxyXG5cclxuICAgICAgICB0aGlzLnNldFN0YXRlKHsgZXJyb3JNc2c6ICcnIH0pO1xyXG4gICAgICAgIHRoaXMuc2hvd0xvYWRpbmcodHJ1ZSk7XHJcblxyXG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcclxuICAgICAgICB0aGlzLkF1dGhTZXJ2aWNlLmxvZ2luKGxvZ2luZGF0YSlcclxuICAgICAgICAgICAgLnRoZW4oZGF0YSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGF0LnNob3dMb2FkaW5nKGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5Jc1ZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5wcm9wcy5hcHBMb2dpbigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQucHJvcHMuaGlzdG9yeS5wdXNoKHRoYXQuc3RhdGUucmVkaXJlY3RUb09uTG9naW4pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuc2V0U3RhdGUoeyBlcnJvck1zZzogVXNlck1zZ3MuQVVUSF9GQUlMVVJFIH0pO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goZXJyID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2hvd0xvYWRpbmcgPSAoc2hvd0l0KSA9PiB7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHNob3dMb2FkaW5nOiBzaG93SXQgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgaGFuZGxlQ2hhbmdlID0gKGUpID0+IHtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKFxyXG4gICAgICAgICAgICB7IFtlLnRhcmdldC5uYW1lXTogZS50YXJnZXQudmFsdWUgfVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG5cclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8Q29udGVudENvbnRhaW5lcj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2VudGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGgyPkxvZ2luPC9oMj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRlbnRfcm93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxMb2FkaW5nIHNob3dMb2FkaW5nPXt0aGlzLnN0YXRlLnNob3dMb2FkaW5nfS8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JtIG9uU3VibWl0PXt0aGlzLmhhbmRsZVN1Ym1pdH0gY2xhc3NOYW1lPVwibWVkX3dpZHRoXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cInVzZXJuYW1lXCI+VXNlciBOYW1lOiA8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInVzZXJuYW1lXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlfSAvPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPVwicGFzc3dvcmRcIj5QYXNzd29yZDogPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJwYXNzd29yZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInBhc3N3b3JkXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5oYW5kbGVDaGFuZ2V9IC8+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyh0aGlzLnN0YXRlLmVycm9yTXNnICE9ICcnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImZvcm1fZXJyb3JcIj57dGhpcy5zdGF0ZS5lcnJvck1zZ308L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPExpbmsgdG89e1JvdXRlcy5SRUdJU1RFUn0+Tm90IGEgdXNlcj8gIFJlZ2lzdGVyIGhlcmU8L0xpbms+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IG9uQ2xpY2s9e3RoaXMuaGFuZGxlU3VibWl0fSBjbGFzc05hbWU9XCJidXR0b24tc2l6ZS1tZWRpdW1cIiB0eXBlPVwic3VibWl0XCIgdmFsdWU9XCJMb2dpblwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNsZWFyX2JvdGhcIj48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9mb3JtPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvQ29udGVudENvbnRhaW5lcj5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBMb2dpbjsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcclxuXHJcbmltcG9ydCBCYXNlQ29tcG9uZW50IGZyb20gICAgICAgICAgICcuL2Jhc2VfY29tcG9uZW50LmpzeCc7XHJcbmltcG9ydCBDb250ZW50Q29udGFpbmVyIGZyb20gICAgICAgICcuLi9jb250ZW50LmpzeCc7XHJcbmltcG9ydCBBdXRoIGZyb20gICAgICAgICAgICAgICAgICAgICcuLi9hdXRoLmpzeCc7XHJcbmltcG9ydCBMb2FkaW5nIGZyb20gICAgICAgICAgICAgICAgICcuLi9jb21wb25lbnRzL2xvYWRpbmcuanN4JztcclxuaW1wb3J0IHsgUm91dGVzLCBVc2VyTXNncyB9IGZyb20gICAgJy4uL2NvbnN0YW50cy5qc3gnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVnaXN0ZXIgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG5cclxuICAgICAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICAgICAgICB1c2VybmFtZTogJycsXHJcbiAgICAgICAgICAgIHBhc3N3b3JkOiAnJyxcclxuICAgICAgICAgICAgcGFzc3dvcmRfdmVyaWZ5OiAnJyxcclxuICAgICAgICAgICAgc2hvd0xvYWRpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICBlcnJvcnM6IFtcclxuICAgICAgICAgICAgICAgIC8vZXJyb3Igb2JqZWN0IGZvcm1hdDpcclxuICAgICAgICAgICAgICAgIC8ve21zZzogJycsIGZpZWxkaWQ6ICcnIH1cclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMuQXV0aFNlcnZpY2UgPSBuZXcgQXV0aCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGhhbmRsZVN1Ym1pdCA9IChlKSA9PiB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICB0aGlzLnNldFN0YXRlKHsgc2hvd0xvYWRpbmc6IHRydWUsIGVycm9yczogW10gfSk7XHJcblxyXG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcclxuICAgICAgICB2YXIgZXJyb3JzID0gdGhpcy52YWxpZGF0ZSgpXHJcbiAgICAgICAgICAgIC50aGVuKGVycm9ycyA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3JzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgc2hvd0xvYWRpbmc6IGZhbHNlLCBlcnJvcnM6IGVycm9ycyB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQXV0aFNlcnZpY2UucmVnaXN0ZXIodGhpcy5zdGF0ZS51c2VybmFtZSwgdGhpcy5zdGF0ZS5wYXNzd29yZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZGF0YSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5Jc1ZhbGlkID09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0LnByb3BzLmhpc3RvcnkucHVzaChSb3V0ZXMuTVlfQUNDVCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMucHVzaCh7IGZpZWxkaWQ6ICcnLCBtc2c6ICdhdXRoZW50aWNhdGlvbiBmYWlsdXJlJyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0LnNldFN0YXRlKHsgc2hvd0xvYWRpbmc6IGZhbHNlLCBlcnJvcnM6IGVycm9ycyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBzaG93TG9hZGluZyA9IChzaG93SXQpID0+IHtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHsgc2hvd0xvYWRpbmc6IHNob3dJdCB9KTtcclxuICAgIH1cclxuXHJcbiAgICBoYW5kbGVDaGFuZ2UgPSAoZSkgPT4ge1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoXHJcbiAgICAgICAgICAgIHsgW2UudGFyZ2V0Lm5hbWVdOiBlLnRhcmdldC52YWx1ZSB9XHJcbiAgICAgICAgKTtcclxuICAgICAgICBlLnRhcmdldC5jbGFzc05hbWUgPSBcIlwiO1xyXG4gICAgfVxyXG5cclxuICAgIHZhbGlkYXRlID0gKCkgPT4ge1xyXG4gICAgICAgIHZhciBlcnJvcnMgPSBbXTtcclxuICAgICAgICBpZiAodGhpcy5zdGF0ZS51c2VybmFtZSA9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgIGVycm9ycy5wdXNoKHsgZmllbGRpZDogJ3VzZXJuYW1lJywgbXNnOiBcIkxvZ2luIG5hbWUgXCIgKyBVc2VyTXNncy5SZWdpc3RyYXRpb24uTVVTVF9CRV9OT05fRU1QVFkgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5wYXNzd29yZCA9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgIGVycm9ycy5wdXNoKHsgZmllbGRpZDogJ3Bhc3N3b3JkMScsIG1zZzogXCJQYXNzd29yZCBcIiArIFVzZXJNc2dzLlJlZ2lzdHJhdGlvbi5NVVNUX0JFX05PTl9FTVBUWSB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLnBhc3N3b3JkX3ZlcmlmeSA9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgIGVycm9ycy5wdXNoKHsgZmllbGRpZDogJ3Bhc3N3b3JkMicsIG1zZzogXCJQYXNzd29yZCB2ZXJpZmljYXRpb24gXCIgKyBVc2VyTXNncy5SZWdpc3RyYXRpb24uTVVTVF9CRV9OT05fRU1QVFkgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLnBhc3N3b3JkICE9IHRoaXMuc3RhdGUucGFzc3dvcmRfdmVyaWZ5KVxyXG4gICAgICAgICAgICBlcnJvcnMucHVzaCh7IGZpZWxkaWQ6ICdwYXNzd29yZDInLCBtc2c6IFVzZXJNc2dzLlJlZ2lzdHJhdGlvbi5QQVNTV09SRF9NQVRDSCB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuQXV0aFNlcnZpY2UuaXNVc2VybmFtZUluVXNlKHRoaXMuc3RhdGUudXNlcm5hbWUpXHJcbiAgICAgICAgICAgIC50aGVuKHJlc3VsdCA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0ID09IHRydWUpXHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JzLnB1c2goeyBmaWVsZGlkOiAndXNlcm5hbWUnLCBtc2c6IFVzZXJNc2dzLlJlZ2lzdHJhdGlvbi5VU0VSTkFNRV9JTl9VU0UucmVwbGFjZShcInswfVwiLCB0aGlzLnN0YXRlLnVzZXJuYW1lKSB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGVycm9ycyk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHZhciBlcnJvck1lc3NhZ2VzID0gdGhpcy5zdGF0ZS5lcnJvcnMubWFwKChlcnJvciwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgIDxsaSBrZXk9e2luZGV4fSBjbGFzc05hbWU9J2Vycm9yJz57ZXJyb3IubXNnfTwvbGk+XHJcbiAgICAgICAgICAgIClcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdmFyIGVycm9yRmllbGRzID0gW107XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuZXJyb3JzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgZXJyb3JGaWVsZHMgPSB0aGlzLnN0YXRlLmVycm9ycy5yZWR1Y2UoZnVuY3Rpb24gKHJlc3VsdCwgaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goaXRlbS5maWVsZGlkKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgIH0sIFtdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxDb250ZW50Q29udGFpbmVyPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjZW50ZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICA8aDI+UmVnaXN0ZXI8L2gyPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGVudF9yb3dcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPExvYWRpbmcgc2hvd0xvYWRpbmc9e3RoaXMuc3RhdGUuc2hvd0xvYWRpbmd9Lz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGZvcm0gb25TdWJtaXQ9e3RoaXMuaGFuZGxlU3VibWl0fSBjbGFzc05hbWU9XCJtZWRfd2lkdGhcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPVwidXNlcm5hbWVcIj5Mb2dpbiBOYW1lOiA8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9XCJ1c2VybmFtZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInVzZXJuYW1lXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtlcnJvckZpZWxkcy5pbmRleE9mKFwidXNlcm5hbWVcIikgPj0gMCA/IFwiZXJyb3JfaGlnaGxpZ2h0XCI6XCJcIn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5oYW5kbGVDaGFuZ2V9IC8+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJwYXNzd29yZFwiPlBhc3N3b3JkOiA8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9XCJwYXNzd29yZDFcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJwYXNzd29yZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInBhc3N3b3JkXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2Vycm9yRmllbGRzLmluZGV4T2YoXCJwYXNzd29yZDFcIikgPj0gMCA/IFwiZXJyb3JfaGlnaGxpZ2h0XCI6XCJcIn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5oYW5kbGVDaGFuZ2V9IC8+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJwYXNzd29yZF92ZXJpZnlcIj5SZS1lbnRlciBQYXNzd29yZDogPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPVwicGFzc3dvcmQyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwicGFzc3dvcmRfdmVyaWZ5XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwicGFzc3dvcmRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17ZXJyb3JGaWVsZHMuaW5kZXhPZihcInBhc3N3b3JkMlwiKSA+PSAwID8gXCJlcnJvcl9oaWdobGlnaHRcIjpcIlwifVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZX0gLz5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KHRoaXMuc3RhdGUuZXJyb3JzLmxlbmd0aCA+IDApICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT1cImVycm9yX2xpc3RcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2Vycm9yTWVzc2FnZXN9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgb25DbGljaz17dGhpcy5oYW5kbGVTdWJtaXR9IGNsYXNzTmFtZT1cImJ1dHRvbi1zaXplLW1lZGl1bVwiIHR5cGU9XCJzdWJtaXRcIiB2YWx1ZT1cIlJlZ2lzdGVyXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2xlYXJfYm90aFwiPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9Db250ZW50Q29udGFpbmVyPlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XHJcbmltcG9ydCB7IFJlZGlyZWN0LCB3aXRoUm91dGVyIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcclxuXHJcbmltcG9ydCBCYXNlQ29tcG9uZW50IGZyb20gICAgICAgJy4vYmFzZV9jb21wb25lbnQuanN4JztcclxuaW1wb3J0IExvYWRpbmcgZnJvbSAgICAgICAgICAgICAnLi4vY29tcG9uZW50cy9sb2FkaW5nLmpzeCc7XHJcbmltcG9ydCBDb250ZW50Q29udGFpbmVyIGZyb20gICAgJy4uL2NvbnRlbnQuanN4JztcclxuaW1wb3J0IEF1dGggZnJvbSAgICAgICAgICAgICAgICAnLi4vYXV0aC5qc3gnO1xyXG5cclxuY2xhc3MgU2VjdXJlQ29tcG9uZW50IGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuXHJcbiAgICAgICAgdGhpcy5hdXRoID0gbmV3IEF1dGgoKTtcclxuICAgICAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICAgICAgICBpc0F1dGhlbnRpY2F0ZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICBhdXRoRmFpbGVkOiBudWxsXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5hdXRoLmlzQXV0aGVudGljYXRlZCgpXHJcbiAgICAgICAgICAgIC50aGVuKHJldCA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmV0ID09IHRydWUpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5wcm9wcy5hcHBMb2dpbigpO1xyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQucHJvcHMuYXBwTG9nb3V0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhhdC5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgaXNBdXRoZW50aWNhdGVkOiByZXQsXHJcbiAgICAgICAgICAgICAgICAgICAgYXV0aEZhaWxlZDogIXJldFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGF1dGhlbnRpY2F0aW9uQ29tcGxldGUoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuaXNBdXRoZW50aWNhdGVkID09PSB0cnVlXHJcbiAgICAgICAgICAgICYmIHRoaXMuc3RhdGUuYXV0aEZhaWxlZCA9PT0gZmFsc2UpXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5zdGF0ZS5pc0F1dGhlbnRpY2F0ZWQpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGUuYXV0aEZhaWxlZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgICAgICA8UmVkaXJlY3QgdG89e3sgcGF0aG5hbWU6ICcvbG9naW4nLCBzdGF0ZTogeyBmcm9tOiB0aGlzLnByb3BzLmxvY2F0aW9uLnBhdGhuYW1lIH0gfX0gLz5cclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgPENvbnRlbnRDb250YWluZXI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxoMj5BdXRoZW50aWNhdGluZy4uLjwvaDI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGVudF9yb3dcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxMb2FkaW5nIHNob3dMb2FkaW5nPXt0cnVlfS8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvQ29udGVudENvbnRhaW5lcj5cclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgU2VjdXJlQ29tcG9uZW50OyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xyXG5pbXBvcnQgeyBSZWRpcmVjdH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSdcclxuXHJcbmltcG9ydCBDb250ZW50Q29udGFpbmVyIGZyb20gICAgJy4uL2NvbnRlbnQuanN4JztcclxuaW1wb3J0IExvYWRpbmcgZnJvbSAgICAgICAgICAgICAnLi4vY29tcG9uZW50cy9sb2FkaW5nLmpzeCc7XHJcbmltcG9ydCBTZWN1cmVDb21wb25lbnQgZnJvbSAgICAgJy4vc2VjdXJlX2NvbXBvbmVudC5qc3gnO1xyXG5pbXBvcnQgeyBSb3V0ZXMgfSBmcm9tICAgICAgICAgICcuLi9jb25zdGFudHMuanN4JztcclxuXHJcbmNsYXNzIE15QWNjb3VudCBleHRlbmRzIFNlY3VyZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuICAgIH1cclxuXHJcbiAgICBuYXZUbyhwYXRoKSB7XHJcbiAgICAgICAgdGhpcy5wcm9wcy5oaXN0b3J5LnB1c2gocGF0aCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dGhlbnRpY2F0aW9uQ29tcGxldGUoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgPENvbnRlbnRDb250YWluZXIgYXV0aGVkPXt0cnVlfT5cclxuICAgICAgICAgICAgICAgICAgICA8aDI+TXkgQWNjb3VudDwvaDI+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGVudF9yb3dfc20gYmxvY2tfaG92ZXJfaGlnaGxpZ2h0XCIgb25DbGljaz17KCk9PnRoaXMubmF2VG8oUm91dGVzLk5FV19TRVFVRU5DRSl9ID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGgzPlN0YXJ0IGEgbmV3IFNlc3Npb248L2gzPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzTmFtZT1cInRodW1iXCIgc3JjPVwiL2Fzc2V0cy9pbWcvbmV3X3Nlc3Npb25fdGh1bWIucG5nXCIgLz5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9XCJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TdGFydCBhIG5ldyB0eXBpbmcgc2Vzc2lvbjwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q29uZmlndXJlIHlvdXIgc2FtcGxlIHNvdXJjZSA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3VsPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IG9uQ2xpY2s9eygpID0+IHRoaXMubmF2VG8oUm91dGVzLk5FV19TRVFVRU5DRSl9IGNsYXNzTmFtZT1cImJ1dHRvbi1zaXplLW1lZGl1bSBwb3NpdGlvbl9ib3R0b21fcmlnaHRcIiB0eXBlPVwiYnV0dG9uXCIgdmFsdWU9XCJTdGFydCBOZXcgU2Vzc2lvblwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2xlYXJfYm90aFwiPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRlbnRfcm93X3NtIGJsb2NrX2hvdmVyX2hpZ2hsaWdodFwiIG9uQ2xpY2s9eygpID0+IHRoaXMubmF2VG8oUm91dGVzLkhJU1RPUlkpfSA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxoMz5Zb3VyIFNlc3Npb24gSGlzdG9yeTwvaDM+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3NOYW1lPVwidGh1bWJcIiBzcmM9XCIvYXNzZXRzL2ltZy9hbmFseXNpc190YWJsZV90aHVtYm5haWwucG5nXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT1cIlwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJldmlldyByZWNlbnQga2V5IHNlcXVlbmNlcyBhbmQgc2Vzc2lvbnM8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkNvbXBhcmUgYW4gaW5zdGFuY2UgdG8geW91ciBhbGwtdGltZSBwZXJmb3JtYW5jZTwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgb25DbGljaz17KCkgPT4gdGhpcy5uYXZUbyhSb3V0ZXMuSElTVE9SWSl9IGNsYXNzTmFtZT1cImJ1dHRvbi1zaXplLW1lZGl1bSBwb3NpdGlvbl9ib3R0b21fcmlnaHRcIiB0eXBlPVwiYnV0dG9uXCIgdmFsdWU9XCJWaWV3IFNlc3Npb24gSGlzdG9yeVwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2xlYXJfYm90aFwiPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRlbnRfcm93X3NtIGJsb2NrX2hvdmVyX2hpZ2hsaWdodFwiIG9uQ2xpY2s9eygpID0+IHRoaXMubmF2VG8oUm91dGVzLkhJU1RPUlkpfSA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxoMz5Zb3VyIFNlc3Npb24gSGlzdG9yeSwgR3JhcGhpY2FsbHk8L2gzPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzTmFtZT1cInRodW1iXCIgc3JjPVwiL2Fzc2V0cy9pbWcvZ3JhcGhfdGh1bWJuYWlsLnBuZ1wiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9XCJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SZXZpZXcgc2Vzc2lvbiBhbmQgYWxsLXRpbWUgcGVyZm9ybWFuY2UuLi52aXN1YWxseSE8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3VsPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IG9uQ2xpY2s9eygpID0+IHRoaXMubmF2VG8oUm91dGVzLkhJU1RPUlkpfSBjbGFzc05hbWU9XCJidXR0b24tc2l6ZS1tZWRpdW0gcG9zaXRpb25fYm90dG9tX3JpZ2h0XCIgdHlwZT1cImJ1dHRvblwiIHZhbHVlPVwiVmlldyBWaXN1YWwgSGlzdG9yeVwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2xlYXJfYm90aFwiPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgIDwvQ29udGVudENvbnRhaW5lcj5cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICBzdXBlci5yZW5kZXIoKVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBNeUFjY291bnQ7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XHJcbmltcG9ydCB7IFJlZGlyZWN0fSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJ1xyXG5cclxuaW1wb3J0IENvbnRlbnRDb250YWluZXIgZnJvbSAgICAnLi4vY29udGVudC5qc3gnO1xyXG5pbXBvcnQgTG9hZGluZyBmcm9tICAgICAgICAgICAgICcuLi9jb21wb25lbnRzL2xvYWRpbmcuanN4JztcclxuaW1wb3J0IFNlY3VyZUNvbXBvbmVudCBmcm9tICAgICAnLi9zZWN1cmVfY29tcG9uZW50LmpzeCc7XHJcbmltcG9ydCB7IFVybHMgfSBmcm9tICAgICAgICAgICAgJy4uL2NvbnN0YW50cy5qc3gnO1xyXG5cclxuY2xhc3MgSGlzdG9yeSBleHRlbmRzIFNlY3VyZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuXHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgICAgICAgaXNMb2FkaW5nOiB0cnVlLFxyXG4gICAgICAgICAgICBkYXRhOiBudWxsXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmxvYWREZXBlbmRlbmNpZXMoKTtcclxuICAgIH1cclxuXHJcbiAgICBsb2FkRGVwZW5kZW5jaWVzKCkge1xyXG4gICAgICAgIC8qIHRoZXJlIGhhcyB0byBiZSBhIGJldHRlciB3YXkgdG8gZG8gdGhpcywgYnV0IEkgZG9uJ3RcclxuICAgICAgICB3YW50IHRvIGxvYWQgdGhlc2UgZmlsZXMgZm9yIGV2ZXJ5IHBhZ2UsIGp1c3QgdGhlIGhhbmRmdWxcclxuICAgICAgICB0aGF0IG5lZWQgYSBncmlkICovXHJcbiAgICAgICAgdGhpcy5sb2FkQ3NzKFVybHMuRXh0ZXJuYWwuQ1NTLkRBVEFUQUJMRVNfQ09SRSlcclxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkQ3NzKFVybHMuRXh0ZXJuYWwuQ1NTLkRBVEFUQUJMRVNfQUxUKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMubG9hZFNjcmlwdChVcmxzLkV4dGVybmFsLkpTLkpRVUVSWSlcclxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkU2NyaXB0KFVybHMuRXh0ZXJuYWwuSlMuREFUQVRBQkxFU19DT1JFKVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2FkU2NyaXB0KFVybHMuRXh0ZXJuYWwuSlMuREFUQVRBQkxFU19ST1dHUk9VUClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdldFVzZXJIaXN0b3J5KClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgaXNMb2FkaW5nOiBmYWxzZSwgZGF0YTogcmVzcCB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgaW5pdEdyaWQoKSB7XHJcblxyXG4gICAgICAgICQoJyNncmlkJykuRGF0YVRhYmxlKHtcclxuICAgICAgICAgICAgZGF0YTogdGhpcy5zdGF0ZS5kYXRhLFxyXG5cclxuICAgICAgICAgICAgLyogdG8gZW5hYmxlIGdyb3VwaW5nLi4uKi9cclxuICAgICAgICAgICAgLyogcm93R3JvdXA6IHsgZGF0YVNyYzogJ1Nlc3Npb25JZCcgfSwqL1xyXG5cclxuICAgICAgICAgICAgc2Nyb2xsWTogMjUwLFxyXG4gICAgICAgICAgICBvcmRlcjogW1swLCBcImRlc2NcIl1dLFxyXG4gICAgICAgICAgICBjb2x1bW5zOiBbXHJcbiAgICAgICAgICAgICAgICB7IGRhdGE6IFwiQ3JlYXRlRGF0ZVwiLCB3aWR0aDpcIjEyMFwiIH0sXHJcbiAgICAgICAgICAgICAgICB7IGRhdGE6IFwiU291cmNlVHlwZVwiLCB3aWR0aDpcIjYwXCIgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImRhdGFcIjogXCJTb3VyY2VLZXlcIixcclxuICAgICAgICAgICAgICAgICAgICBcInJlbmRlclwiOiBmdW5jdGlvbiAoZGF0YSwgdHlwZSwgcm93LCBtZXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSAnZGlzcGxheScpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSAnPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cIicgKyBkYXRhICsgJ1wiPicgKyBkYXRhICsgJzwvYT4nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwiZGF0YVwiOiBcIktleVNlcXVlbmNlSWRcIixcclxuICAgICAgICAgICAgICAgICAgICBcIndpZHRoXCI6IFwiMzVcIixcclxuICAgICAgICAgICAgICAgICAgICBcInJlbmRlclwiOiBmdW5jdGlvbiAoZGF0YSwgdHlwZSwgcm93LCBtZXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSAnZGlzcGxheScpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSAnPGEgY2xhc3M9XCJoaXN0b3J5RGV0YWlsc0xpbmtcIiBocmVmPVwiL3NlY3VyZS9IaXN0b3J5RGV0YWlscy8nICsgZGF0YSArICdcIj5kZXRhaWxzPC9hPic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBcclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvKiBiaW5kIHRvIHRoZSBjbGljayBldmVudHMgb2YgdGhlIGRldGFpbHMgY29sdW1uIG9uIHRoZSBncmlkXHJcbiAgICAgICAgdGhpcyBhbGxvd3MgeW91IHRvIHB1c2ggaGlzdG9yeSBhbmQga2VlcCB0aGUgcmVhY3Qgcm91dGVyIHR5cGUgb2ZcclxuICAgICAgICBuYXZpZ2F0aW9uIGFuZCBhdm9pZHMgYSBmdWxsIHBhZ2UgcmVmcmVzaCAqL1xyXG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcclxuICAgICAgICAkKFwiYS5oaXN0b3J5RGV0YWlsc0xpbmtcIikuY2xpY2soZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICB0aGF0LnByb3BzLmhpc3RvcnkucHVzaCgkKHRoaXMpLmF0dHIoJ2hyZWYnKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0VXNlckhpc3RvcnkoKSB7XHJcbiAgICAgICAgdmFyIHRva2VuID0gdGhpcy5hdXRoLmdldEN1cnJlbnRUb2tlbigpO1xyXG4gICAgICAgIHJldHVybiBmZXRjaChVcmxzLkFQSV9ISVNUT1JZLCB7XHJcbiAgICAgICAgICAgICAgICBtZXRob2Q6IFwiUG9zdFwiLFxyXG4gICAgICAgICAgICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLCBBY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uJyB9XHJcbiAgICAgICAgICAgICAgICAsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHRva2VuKVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbihyZXNwID0+IHJlc3AuanNvbigpKVxyXG4gICAgICAgICAgICAudGhlbihkYXRhID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZGF0YSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcclxuICAgICAgICBpZiAodGhpcy5zdGF0ZSAmJiB0aGlzLnN0YXRlLmRhdGEgJiYgdGhpcy5zdGF0ZS5kYXRhLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgdGhpcy5pbml0R3JpZCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0aGVudGljYXRpb25Db21wbGV0ZSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICA8Q29udGVudENvbnRhaW5lciBhdXRoZWQ9e3RydWV9PlxyXG4gICAgICAgICAgICAgICAgICAgIDxoMj5TZXNzaW9uIEhpc3Rvcnk8L2gyPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRlbnRfcm93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxMb2FkaW5nIHNob3dMb2FkaW5nPXt0aGlzLnN0YXRlLmlzTG9hZGluZ30gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBpZD1cImdyaWRcIiBjbGFzc05hbWU9XCJkaXNwbGF5IGNlbGwtYm9yZGVyIHN0cmlwZSBob3ZlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkNyZWF0ZURhdGU8L3RoPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+U291cmNlVHlwZTwvdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Tb3VyY2VLZXk8L3RoPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+RGV0YWlsczwvdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9Db250ZW50Q29udGFpbmVyPlxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgIHN1cGVyLnJlbmRlcigpXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEhpc3Rvcnk7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XHJcblxyXG5jbGFzcyBEZWx0YUluZGljYXRvciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcblxyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgICAgICAgIFZhbHVlOiBwcm9wcy5WYWwxLFxyXG4gICAgICAgICAgICBWYWx1ZVRvRGlzcGxheTogKHByb3BzLlZhbFRvRGlzcGxheSkgPyBwcm9wcy5WYWxUb0Rpc3BsYXkgOiBudWxsLFxyXG4gICAgICAgICAgICBEZWx0YTogTWF0aC5yb3VuZCgocHJvcHMuVmFsMSAtIHByb3BzLlZhbDIpICogMTAwKSAvIDEwMCxcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGxldCBhcnJvdztcclxuICAgICAgICBcclxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5EZWx0YSA+IDApXHJcbiAgICAgICAgICAgIGFycm93ID0gPGltZyBzcmM9XCIvYXNzZXRzL2ltZy90cmlhbmdsZV91cC5wbmdcIiBhbHQ9XCJpbmNyZWFzZVwiIC8+XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5zdGF0ZS5EZWx0YSA8IDApXHJcbiAgICAgICAgICAgIGFycm93ID0gPGltZyBzcmM9XCIvYXNzZXRzL2ltZy90cmlhbmdsZV9kb3duLnBuZ1wiIGFsdD1cImRlY3JlYXNlXCIgLz5cclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJkZWx0YVwiPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZGVsdGFfbGFiZWxcIj5cclxuICAgICAgICAgICAgICAgICAgICB7KHRoaXMuc3RhdGUuVmFsdWVUb0Rpc3BsYXkgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLnN0YXRlLlZhbHVlVG9EaXNwbGF5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5zdGF0ZS5WYWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuXHJcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJkZWx0YV9jaGFuZ2VfaW5kaWNhdG9yXCI+XHJcbiAgICAgICAgICAgICAgICB7KHRoaXMuc3RhdGUuRGVsdGEgIT0gMCkgJiZcclxuICAgICAgICAgICAgICAgICAgICAgYXJyb3cgXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAge3RoaXMuc3RhdGUuRGVsdGF9XHJcbiAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBEZWx0YUluZGljYXRvcjsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcclxuaW1wb3J0IERlbHRhSW5kaWNhdG9yIGZyb20gJy4vZGVsdGFfaW5kaWNhdG9yLmpzeCc7XHJcblxyXG5jbGFzcyBTcGVlZEFuYWx5c2lzIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG5cclxuICAgICAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICAgICAgICBTcGVlZFRoaXNTZXE6IHRoaXMucHJvcHMuQW5hbHlzaXNTcGVlZCxcclxuICAgICAgICAgICAgU3BlZWRBbGxUaW1lOiB0aGlzLnByb3BzLkFuYWx5c2lzU3BlZWRBbGxUaW1lXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPHRhYmxlIGNsYXNzTmFtZT1cInN0YXRpY19ncmlkXCI+XHJcbiAgICAgICAgICAgICAgICA8dGhlYWQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3NOYW1lPVwiZ3JpZF9oZWFkZXJfc21cIj5NZXRyaWM8L3RoPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGg+VGhpcyBTZXNzaW9uPC90aD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkFsbCBUaW1lICh7dGhpcy5zdGF0ZS5TcGVlZEFsbFRpbWUuTnVtRW50aXRpZXNSZXByZXNlbnRlZH0gc2Vzc2lvbnMpPC90aD5cclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgPC90aGVhZD5cclxuICAgICAgICAgICAgICAgIDx0Ym9keT5cclxuICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Ub3RhbCBUaW1lPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPERlbHRhSW5kaWNhdG9yXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmFsMT17dGhpcy5zdGF0ZS5TcGVlZFRoaXNTZXEuVG90YWxUaW1lSW5NaWxsaVNlY31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWYWxUb0Rpc3BsYXk9e3RoaXMuc3RhdGUuU3BlZWRUaGlzU2VxLlRvdGFsVGltZURpc3BsYXlGcmllbmRseX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWYWwyPXt0aGlzLnN0YXRlLlNwZWVkQWxsVGltZS5Ub3RhbFRpbWVJbk1pbGxpU2VjfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnt0aGlzLnN0YXRlLlNwZWVkQWxsVGltZS5Ub3RhbFRpbWVEaXNwbGF5RnJpZW5kbHl9PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkNoYXJzL3NlYzwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxEZWx0YUluZGljYXRvclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZhbDE9e3RoaXMuc3RhdGUuU3BlZWRUaGlzU2VxLkNoYXJzUGVyU2VjfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZhbDI9e3RoaXMuc3RhdGUuU3BlZWRBbGxUaW1lLkNoYXJzUGVyU2VjfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnt0aGlzLnN0YXRlLlNwZWVkQWxsVGltZS5DaGFyc1BlclNlY308L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQ+V29yZHMvbWluPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPERlbHRhSW5kaWNhdG9yXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmFsMT17dGhpcy5zdGF0ZS5TcGVlZFRoaXNTZXEuV29yZFBlck1pbn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWYWwyPXt0aGlzLnN0YXRlLlNwZWVkQWxsVGltZS5Xb3JkUGVyTWlufVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnt0aGlzLnN0YXRlLlNwZWVkQWxsVGltZS5Xb3JkUGVyTWlufTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgIDwvdGJvZHk+XHJcbiAgICAgICAgICAgIDwvdGFibGU+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgU3BlZWRBbmFseXNpcztcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XHJcbmltcG9ydCBEZWx0YUluZGljYXRvciBmcm9tICcuL2RlbHRhX2luZGljYXRvci5qc3gnO1xyXG5cclxuY2xhc3MgQWNjdXJhY3lBbmFseXNpcyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuXHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgICAgICAgQWNjdXJhY3lUaGlzU2VxOiB0aGlzLnByb3BzLkFuYWx5c2lzQWNjdXJhY3ksXHJcbiAgICAgICAgICAgIEFjY3VyYWN5QWxsVGltZTogdGhpcy5wcm9wcy5BbmFseXNpc0FjY3VyYWN5QWxsVGltZVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDx0YWJsZSBjbGFzc05hbWU9XCJzdGF0aWNfZ3JpZFwiPlxyXG4gICAgICAgICAgICAgICAgPHRoZWFkPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRoPk1ldHJpYzwvdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5UaGlzIFNlc3Npb248L3RoPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGg+QWxsIFRpbWUgKHt0aGlzLnN0YXRlLkFjY3VyYWN5QWxsVGltZS5OdW1FbnRpdGllc1JlcHJlc2VudGVkfSBzZXNzaW9ucyk8L3RoPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICA8L3RoZWFkPlxyXG4gICAgICAgICAgICAgICAgPHRib2R5PlxyXG4gICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkFjY3VyYWN5PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPERlbHRhSW5kaWNhdG9yXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmFsMT17dGhpcy5zdGF0ZS5BY2N1cmFjeVRoaXNTZXEuQWNjdXJhY3l9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmFsMj17dGhpcy5zdGF0ZS5BY2N1cmFjeUFsbFRpbWUuQWNjdXJhY3l9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQ+e3RoaXMuc3RhdGUuQWNjdXJhY3lBbGxUaW1lLkFjY3VyYWN5fTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5OdW0gQ2hhcnM8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8RGVsdGFJbmRpY2F0b3JcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWYWwxPXt0aGlzLnN0YXRlLkFjY3VyYWN5VGhpc1NlcS5OdW1DaGFyc31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWYWwyPXt0aGlzLnN0YXRlLkFjY3VyYWN5QWxsVGltZS5OdW1DaGFyc31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57dGhpcy5zdGF0ZS5BY2N1cmFjeUFsbFRpbWUuTnVtQ2hhcnN9PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkPk51bSBXb3JkczwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxEZWx0YUluZGljYXRvclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZhbDE9e3RoaXMuc3RhdGUuQWNjdXJhY3lUaGlzU2VxLk51bVdvcmRzfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZhbDI9e3RoaXMuc3RhdGUuQWNjdXJhY3lBbGxUaW1lLk51bVdvcmRzfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnt0aGlzLnN0YXRlLkFjY3VyYWN5QWxsVGltZS5OdW1Xb3Jkc308L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQ+TnVtIENvcnJlY3QgQ2hhcnM8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8RGVsdGFJbmRpY2F0b3JcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWYWwxPXt0aGlzLnN0YXRlLkFjY3VyYWN5VGhpc1NlcS5OdW1Db3JyZWN0Q2hhcnN9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmFsMj17dGhpcy5zdGF0ZS5BY2N1cmFjeUFsbFRpbWUuTnVtQ29ycmVjdENoYXJzfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnt0aGlzLnN0YXRlLkFjY3VyYWN5QWxsVGltZS5OdW1Db3JyZWN0Q2hhcnN9PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkPk51bSBJbmNvcnJlY3QgQ2hhcnM8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8RGVsdGFJbmRpY2F0b3JcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWYWwxPXt0aGlzLnN0YXRlLkFjY3VyYWN5VGhpc1NlcS5OdW1JbmNvcnJlY3RDaGFyc31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWYWwyPXt0aGlzLnN0YXRlLkFjY3VyYWN5QWxsVGltZS5OdW1JbmNvcnJlY3RDaGFyc31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57dGhpcy5zdGF0ZS5BY2N1cmFjeUFsbFRpbWUuTnVtSW5jb3JyZWN0Q2hhcnN9PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkPk51bSBFeHRyYSBDaGFyczwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxEZWx0YUluZGljYXRvclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZhbDE9e3RoaXMuc3RhdGUuQWNjdXJhY3lUaGlzU2VxLk51bUV4dHJhQ2hhcnN9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmFsMj17dGhpcy5zdGF0ZS5BY2N1cmFjeUFsbFRpbWUuTnVtRXh0cmFDaGFyc31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57dGhpcy5zdGF0ZS5BY2N1cmFjeUFsbFRpbWUuTnVtRXh0cmFDaGFyc308L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQ+TnVtIFNob3J0IENoYXJzPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPERlbHRhSW5kaWNhdG9yXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmFsMT17dGhpcy5zdGF0ZS5BY2N1cmFjeVRoaXNTZXEuTnVtU2hvcnRDaGFyc31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWYWwyPXt0aGlzLnN0YXRlLkFjY3VyYWN5QWxsVGltZS5OdW1TaG9ydENoYXJzfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnt0aGlzLnN0YXRlLkFjY3VyYWN5QWxsVGltZS5OdW1TaG9ydENoYXJzfTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgIDwvdGJvZHk+XHJcbiAgICAgICAgICAgIDwvdGFibGU+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQWNjdXJhY3lBbmFseXNpcztcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuXHJcbmltcG9ydCB7IFJ1bnRpbWUsIFJlYWxUaW1lQW5hbHlzaXNTZXR0aW5ncyB9IGZyb20gJy4uL2NvbnN0YW50cy5qc3gnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVhbFRpbWVBbmFseXNpcyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG5cclxuICAgICAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICAgICAgICAvL3VzZWQgd2hlbiBtZWFzdXJpbmcgY2hhbmdlcyBpbiB3aGF0IHRoZSB1c2VyIHR5cGVkXHJcbiAgICAgICAgICAgIExhc3RUZXh0VXNlZDogdGhpcy5wcm9wcy5UZXh0RW50ZXJlZCxcclxuXHJcbiAgICAgICAgICAgIC8vdXNlZCB3aGVuIG1lYXN1cmluZyBcImhhcyB0aGUgdGV4dCBub3QgY2hhbmdlZCBpbiB4IHRpY2tzXCJcclxuICAgICAgICAgICAgTGFzdFRleHRFdmFsdWF0ZWQ6IHRoaXMucHJvcHMuVGV4dEVudGVyZWQsXHJcblxyXG4gICAgICAgICAgICBUaWNrc1dpdGhTYW1lVGV4dDogMCxcclxuICAgICAgICAgICAgSW50ZXJ2YWxJZDogLTFcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29tcG9uZW50RGlkVXBkYXRlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLklzUnVubmluZyA9PSB0cnVlKVxyXG4gICAgICAgICAgICB0aGlzLnN0YXJ0KCk7XHJcblxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMucHJvcHMuSXNSdW5uaW5nID09IGZhbHNlICYmIHRoaXMuc3RhdGUuSW50ZXJ2YWxJZCAhPSAtMSlcclxuICAgICAgICAgICAgdGhpcy5zdG9wKCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7IHRoaXMuc3RvcCgpO31cclxuXHJcbiAgICBzdGFydCA9ICgpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5JbnRlcnZhbElkID09IC0xKSB7XHJcbiAgICAgICAgICAgIGlmKFJ1bnRpbWUuSVNfREVCVUcpIGNvbnNvbGUubG9nKFwicmVhbCB0aW1lIGFuYWx5c2lzOiBzdGFydGluZ1wiKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuSW50ZXJ2YWxJZCA9IHNldEludGVydmFsKHRoaXMudGljaywgUmVhbFRpbWVBbmFseXNpc1NldHRpbmdzLlRJQ0tfSU5URVJWQUxfSU5fTVMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzdG9wID0gKCkgPT4ge1xyXG4gICAgICAgIGlmKFJ1bnRpbWUuSVNfREVCVUcpIGNvbnNvbGUubG9nKFwicmVhbCB0aW1lIGFuYWx5c2lzOiBzdG9wcGluZ1wiKTtcclxuXHJcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLnN0YXRlLkludGVydmFsSWQpO1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBJbnRlcnZhbElkOiAtMSB9KTtcclxuICAgIH1cclxuXHJcbiAgICB0aWNrID0gKCkgPT4ge1xyXG4gICAgICAgIGlmIChSdW50aW1lLklTX0RFQlVHKSBjb25zb2xlLmxvZyhcInJlYWwgdGltZSBhbmFseXNpczogdGljayBmaXJlZFwiLCB0aGlzLnN0YXRlLCB0aGlzLnByb3BzKTtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHsgTGFzdFRleHRFdmFsdWF0ZWQ6IHRoaXMucHJvcHMuVGV4dEVudGVyZWQgfSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLlRleHRFbnRlcmVkID09PSB0aGlzLnN0YXRlLkxhc3RUZXh0RXZhbHVhdGVkKVxyXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgVGlja3NXaXRoU2FtZVRleHQ6IHRoaXMuc3RhdGUuVGlja3NXaXRoU2FtZVRleHQgKyAxIH0pO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IFRpY2tldHNXaXRoU2FtZVRleHQ6IDAgfSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmhhc0NoYW5nZWRTaWduaWZpY2FudGx5KCkpIHtcclxuICAgICAgICAgICAgaWYgKFJ1bnRpbWUuSVNfREVCVUcpIGNvbnNvbGUubG9nKFwicmVhbCB0aW1lIGFuYWx5c2lzOiBjaGFuZ2VkIHNpZ25pZmljYW50bHlcIiwgdGhpcy5zdGF0ZSwgdGhpcy5wcm9wcyk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgTGFzdFRleHRVc2VkOiB0aGlzLnByb3BzLlRleHRFbnRlcmVkIH0pO1xyXG4gICAgICAgICAgICB0aGlzLnByb3BzLnJ1bkFuYWx5emUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaGFzQ2hhbmdlZFNpZ25pZmljYW50bHkgPSAoKSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuVGV4dEVudGVyZWQpIHtcclxuXHJcbiAgICAgICAgICAgIC8vaWYgdGhlIGxlbmd0aCBvZiB0ZXh0IGVudGVyZWQgaGFzIGNoYW5nZWQgYnkgbW9yZSB0aGFuICstIDUsIGZpcmVcclxuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMuVGV4dEVudGVyZWQubGVuZ3RoID4gdGhpcy5zdGF0ZS5MYXN0VGV4dFVzZWQubGVuZ3RoICsgUmVhbFRpbWVBbmFseXNpc1NldHRpbmdzLkxFTkdUSF9CVUZGRVJcclxuICAgICAgICAgICAgICAgIHx8IHRoaXMucHJvcHMuVGV4dEVudGVyZWQubGVuZ3RoIDwgdGhpcy5zdGF0ZS5MYXN0VGV4dFVzZWQgLSBSZWFsVGltZUFuYWx5c2lzU2V0dGluZ3MuTEVOR1RIX0JVRkZFUikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vaWYgdGhlIHRleHQgaGFzIG5vdCBjaGFuZ2VkIGluIHRoZSBsYXN0IDUgdGlja3MsIGZpcmVcclxuICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGUuVGlja3NXaXRoU2FtZVRleHQgPiBSZWFsVGltZUFuYWx5c2lzU2V0dGluZ3MuVU5DSEFOR0VEX1RFWFRfVElDS19USFJFU0hPTEQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBUaWNrc1dpdGhTYW1lVGV4dDogMCB9KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvL3RoaXMgY29tcG9uZW50IGlzIG5vdCBpbmRlbmRlZCB0byByZW5kZXIgYW55dGhpbmcsIHNvIHRoaXMgc2VlbXMgdW5lY2Nlc3NhcnlcclxuICAgIC8vYmVjYXVzZSBpdCBpcyBhIGNvbXBvbmVudCB0aG91Z2ggcmVuZGVyIGlzIHJlcXVpcmVkLlxyXG4gICAgLy9pcyB0aGVyZSBhIGJldHRlciB3YXkgdG8gc3RydWN0dXJlIHRoaXMgY2xhc3M/XHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuICg8UmVhY3QuRnJhZ21lbnQ+PC9SZWFjdC5GcmFnbWVudD4pXHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcclxuXHJcbmltcG9ydCBMb2FkaW5nIGZyb20gICAgICAgICAgICAgJy4vbG9hZGluZy5qc3gnO1xyXG5pbXBvcnQgQXV0aCBmcm9tICAgICAgICAgICAgICAgICcuLi9hdXRoLmpzeCc7XHJcbmltcG9ydCBSZWFsVGltZUFuYWx5c2lzIGZyb20gICAgJy4vcmVhbF90aW1lX2FuYWx5c2lzX3VwZGF0ZXIuanN4JztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBVcmxzLCBIaWdobGlnaHRUeXBlLCBIdHRwRXJyb3JIYW5kbGVyLCBSdW50aW1lXHJcbn0gZnJvbSAnLi4vY29uc3RhbnRzLmpzeCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBLZXlTZXF1ZW5jZUVycm9yRGlzcGxheSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuXHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgICAgICAgaXNMb2FkaW5nOiB0cnVlLFxyXG4gICAgICAgICAgICBpc0Vycm9yOiBmYWxzZSxcclxuICAgICAgICAgICAgZGF0YTogbnVsbFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5wZWVrSW5SZWFsVGltZSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtpc0xvYWRpbmc6IGZhbHNlfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5zZXF1ZW5jZUlkICE9IG51bGwgJiYgdGhpcy5wcm9wcy5zZXF1ZW5jZUlkICE9IC0xKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5nZXRFcnJvckFuYWx5c2lzRm9yRXhpc3RpbmdTZXF1ZW5jZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZWFuYWx5emUgPSAoKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ3JlYW5hbHl6ZSBmaXJlZCcpO1xyXG4gICAgICAgIHRoaXMuZ2V0RXJyb3JBbmFseXNpc0ZvckV4aXN0aW5nU2VxdWVuY2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRFcnJvckFuYWx5c2lzRm9yRXhpc3RpbmdTZXF1ZW5jZSA9ICgpID0+IHtcclxuICAgICAgICB2YXIgZGF0YSA9IHtcclxuICAgICAgICAgICAgU2VxdWVuY2VJZDogdGhpcy5wcm9wcy5zZXF1ZW5jZUlkLFxyXG4gICAgICAgICAgICBUZXh0RW50ZXJlZDogKHRoaXMucHJvcHMuVGV4dEVudGVyZWQpID8gdGhpcy5wcm9wcy5UZXh0RW50ZXJlZCA6IFwiXCJcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4gZmV0Y2goVXJscy5BUElfUlVOX0FOQUxZU0lTX0ZPUl9TRVEsIHtcclxuICAgICAgICAgICAgbWV0aG9kOiBcIlBvc3RcIixcclxuICAgICAgICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLCBBY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uJyB9XHJcbiAgICAgICAgICAgICwgYm9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSlcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbihyZXNwID0+IEh0dHBFcnJvckhhbmRsZXIocmVzcCkpXHJcbiAgICAgICAgICAgIC50aGVuKHJlc3AgPT4gcmVzcC5qc29uKCkpXHJcbiAgICAgICAgICAgIC50aGVuKGRhdGEgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlzTG9hZGluZzogZmFsc2UsIGRhdGE6IGRhdGEgfSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGRhdGEpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlzTG9hZGluZzogZmFsc2UsIGlzRXJyb3I6IHRydWUgfSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG5cclxuICAgICAgICB2YXIgdGV4dE9yQW5hbHlzaXNUb1Nob3c7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmlzTG9hZGluZyA9PT0gZmFsc2VcclxuICAgICAgICAgICAgJiYgdGhpcy5zdGF0ZS5pc0Vycm9yID09PSBmYWxzZVxyXG4gICAgICAgICAgICAmJiB0aGlzLnN0YXRlLmRhdGEpIHtcclxuICAgICAgICAgICAgdGV4dE9yQW5hbHlzaXNUb1Nob3cgPSB0aGlzLnN0YXRlLmRhdGEubWFwKChoaWdobGlnaHQsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY3NzID0gXCJoaWdobGlnaHQtXCIgKyBIaWdobGlnaHRUeXBlW2hpZ2hsaWdodC5IaWdobGlnaHRUeXBlXTtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4ga2V5PXtpbmRleH0gY2xhc3NOYW1lPXtjc3N9PntoaWdobGlnaHQuVGV4dH08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLnByb3BzLnBlZWtJblJlYWxUaW1lID09IHRydWUpIHtcclxuICAgICAgICAgICAgdGV4dE9yQW5hbHlzaXNUb1Nob3cgPSAoXHJcbiAgICAgICAgICAgICAgICA8c3Bhbj57dGhpcy5wcm9wcy5UZXh0U2hvd259PC9zcGFuPlxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8UmVhY3QuRnJhZ21lbnQ+XHJcbiAgICAgICAgICAgICAgICA8TG9hZGluZyBzaG93TG9hZGluZz17dGhpcy5zdGF0ZS5pc0xvYWRpbmd9IC8+XHJcblxyXG4gICAgICAgICAgICAgICAgPFJlYWxUaW1lQW5hbHlzaXNcclxuICAgICAgICAgICAgICAgICAgICBydW5BbmFseXplPXt0aGlzLnJlYW5hbHl6ZX1cclxuICAgICAgICAgICAgICAgICAgICBUZXh0RW50ZXJlZD17dGhpcy5wcm9wcy5UZXh0RW50ZXJlZH1cclxuICAgICAgICAgICAgICAgICAgICBJc1J1bm5pbmc9e3RoaXMucHJvcHMuSXNSdW5uaW5nfVxyXG4gICAgICAgICAgICAgICAgLz5cclxuXHJcbiAgICAgICAgICAgICAgICA8Zm9ybT5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImVycm9yX2FuYWx5c2lzIGV4dHJhX2xpbmVfc3BhY2luZ1wiPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAge3RleHRPckFuYWx5c2lzVG9TaG93fVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAge3RoaXMuc3RhdGUuaXNFcnJvciA9PT0gdHJ1ZSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwicG9zaXRpb25fY2VudGVyIGVycm9yXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBIHByb2JsZW0gd2FzIGVuY291bnRlcmVkIHByb2Nlc3NpbmcgeW91ciBpbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlcnJvcl9hbmFseXNpc19sZWdlbmRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaGlnaGxpZ2h0LUluY29ycmVjdENoYXJcIj48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEluY29ycmVjdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhpZ2hsaWdodC1FeHRyYUNoYXJzXCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+RXh0cmEgQ2hhcnM8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaGlnaGxpZ2h0LVNob3J0Q2hhcnNcIj48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5TaG9ydCBDaGFyczwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJoaWdobGlnaHQtTm9ybWFsXCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+Tm9ybWFsPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhpZ2hsaWdodC1VbmV2YWx1YXRlZFwiPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlVuZXZhbHVhdGVkPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZm9ybT5cclxuICAgICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcclxuaW1wb3J0IHsgUmVkaXJlY3R9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXHJcblxyXG5pbXBvcnQgQ29udGVudENvbnRhaW5lciBmcm9tICAgICcuLi9jb250ZW50LmpzeCc7XHJcbmltcG9ydCBMb2FkaW5nIGZyb20gICAgICAgICAgICAgJy4uL2NvbXBvbmVudHMvbG9hZGluZy5qc3gnO1xyXG5pbXBvcnQgU2VjdXJlQ29tcG9uZW50IGZyb20gICAgICcuL3NlY3VyZV9jb21wb25lbnQuanN4JztcclxuaW1wb3J0IFNwZWVkQW5hbHlzaXMgZnJvbSAgICAgICAnLi4vY29tcG9uZW50cy9zcGVlZF9hbmFseXNpcy5qc3gnO1xyXG5pbXBvcnQgQWNjdXJhY3lBbmFseXNpcyBmcm9tICAgICcuLi9jb21wb25lbnRzL2FjY3VyYWN5X2FuYWx5c2lzLmpzeCc7XHJcbmltcG9ydCB7IFVybHMgfSBmcm9tICAgICAgICAgICAgJy4uL2NvbnN0YW50cy5qc3gnO1xyXG5pbXBvcnQgS2V5U2VxdWVuY2VFcnJvckRpc3BsYXkgZnJvbSAgJy4uL2NvbXBvbmVudHMva2V5X3NlcXVlbmNlX2Vycm9yX2Rpc3BsYXkuanN4JztcclxuXHJcbmNsYXNzIEhpc3RvcnlEZXRhaWxzIGV4dGVuZHMgU2VjdXJlQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG5cclxuICAgICAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICAgICAgICBpc0xvYWRpbmc6IHRydWUsXHJcbiAgICAgICAgICAgIGRhdGE6IG51bGxcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgICAgICAgdGhpcy5nZXRIaXN0b3J5RGV0YWlscygpXHJcbiAgICAgICAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlzTG9hZGluZzogZmFsc2UsIGRhdGE6IHJlc3AgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcclxuICAgICAgICBpZiAodGhpcy5zdGF0ZSAmJiB0aGlzLnN0YXRlLmRhdGEgJiYgdGhpcy5zdGF0ZS5kYXRhLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgdGhpcy5pbml0R3JpZCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXRIaXN0b3J5RGV0YWlscygpIHtcclxuICAgICAgICB2YXIgdG9rZW4gPSB0aGlzLmF1dGguZ2V0Q3VycmVudFRva2VuKCk7XHJcbiAgICAgICAgdmFyIGRhdGEgPSB7IHRva2VuOiB0b2tlbiwgc2VxdWVuY2VJZDogdGhpcy5wcm9wcy5tYXRjaC5wYXJhbXMuc2VxdWVuY2VJZCB9O1xyXG4gICAgICAgIHJldHVybiBmZXRjaChVcmxzLkFQSV9ISVNUT1JZX0RFVEFJTFMsIHtcclxuICAgICAgICAgICAgICAgIG1ldGhvZDogXCJQb3N0XCIsXHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nIH1cclxuICAgICAgICAgICAgICAgICwgYm9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSlcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnRoZW4ocmVzcCA9PiByZXNwLmpzb24oKSlcclxuICAgICAgICAgICAgLnRoZW4oZGF0YSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGRhdGEpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0aGVudGljYXRpb25Db21wbGV0ZSgpKSB7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgPENvbnRlbnRDb250YWluZXIgYXV0aGVkPXt0cnVlfT5cclxuICAgICAgICAgICAgICAgICAgICA8aDI+SGlzdG9yeSBEZXRhaWxzPC9oMj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250ZW50X3Jvd19zbVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8TG9hZGluZyBzaG93TG9hZGluZz17dGhpcy5zdGF0ZS5pc0xvYWRpbmd9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxoMz5UZXh0IFByZXNlbnRlZCB0byBZb3U8L2gzPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgeyh0aGlzLnN0YXRlLmRhdGEpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8S2V5U2VxdWVuY2VFcnJvckRpc3BsYXlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUZXh0RW50ZXJlZD17dGhpcy5zdGF0ZS5kYXRhLlRleHRFbnRlcmVkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcXVlbmNlSWQ9e3RoaXMucHJvcHMubWF0Y2gucGFyYW1zLnNlcXVlbmNlSWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRlbnRfcm93X3NtXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxoMz5UZXh0IFlvdSBFbnRlcmVkPC9oMz5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JtPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHRhcmVhIG5hbWU9XCJ0ZXh0RW50ZXJlZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZXh0cmFfbGluZV9zcGFjaW5nXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLnN0YXRlLmRhdGEgIT0gbnVsbCkgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5kYXRhLlRleHRFbnRlcmVkIDogXCJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkT25seVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9mb3JtPiBcclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250ZW50X3Jvd19zbVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aDM+VGV4dCBTb3VyY2UgKEFLQTogXCJXaGVyZSBkaWQgdGhpcyB0ZXh0IGNvbWUgZnJvbVwiKTwvaDM+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3RoaXMuc3RhdGUuaXNMb2FkaW5nID09IGZhbHNlICYmIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuZGF0YSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzc05hbWU9XCJzdGF0aWNfZ3JpZFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzTmFtZT1cImdyaWRfaGVhZGVyX3NtXCI+U291cmNlVHlwZTwvdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlNvdXJjZSBLZXk8L3RoPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57dGhpcy5zdGF0ZS5kYXRhLlNvdXJjZVR5cGV9PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9e3RoaXMuc3RhdGUuZGF0YS5Tb3VyY2VLZXl9PiB7dGhpcy5zdGF0ZS5kYXRhLlNvdXJjZUtleX08L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250ZW50X3Jvd19zbVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8TG9hZGluZyBzaG93TG9hZGluZz17dGhpcy5zdGF0ZS5pc0xvYWRpbmd9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxoMz5TcGVlZCBBbmFseXNpczwvaDM+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5pc0xvYWRpbmcgPT0gZmFsc2UgJiYgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmRhdGEgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuZGF0YS5BbmFseXNpc1NwZWVkICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmRhdGEuQW5hbHlzaXNTcGVlZEFsbFRpbWUgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTcGVlZEFuYWx5c2lzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQW5hbHlzaXNTcGVlZD17dGhpcy5zdGF0ZS5kYXRhLkFuYWx5c2lzU3BlZWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQW5hbHlzaXNTcGVlZEFsbFRpbWU9e3RoaXMuc3RhdGUuZGF0YS5BbmFseXNpc1NwZWVkQWxsVGltZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250ZW50X3Jvd19zbVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8TG9hZGluZyBzaG93TG9hZGluZz17dGhpcy5zdGF0ZS5pc0xvYWRpbmd9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxoMz5BY2N1cmFjeSBBbmFseXNpczwvaDM+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5pc0xvYWRpbmcgPT0gZmFsc2UgJiYgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmRhdGEgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuZGF0YS5BbmFseXNpc0FjY3VyYWN5ICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmRhdGEuQW5hbHlzaXNBY2N1cmFjeUFsbFRpbWUgJiZcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QWNjdXJhY3lBbmFseXNpc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFuYWx5c2lzQWNjdXJhY3k9e3RoaXMuc3RhdGUuZGF0YS5BbmFseXNpc0FjY3VyYWN5fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFuYWx5c2lzQWNjdXJhY3lBbGxUaW1lPXt0aGlzLnN0YXRlLmRhdGEuQW5hbHlzaXNBY2N1cmFjeUFsbFRpbWV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L0NvbnRlbnRDb250YWluZXI+XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgc3VwZXIucmVuZGVyKClcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgSGlzdG9yeURldGFpbHM7IiwiaW1wb3J0IG9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIi4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSBvYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpO1xuICB2YXIga2V5LCBpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTtcbiAgICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufSIsImltcG9ydCBhcnJheVdpdGhvdXRIb2xlcyBmcm9tIFwiLi9hcnJheVdpdGhvdXRIb2xlc1wiO1xuaW1wb3J0IGl0ZXJhYmxlVG9BcnJheSBmcm9tIFwiLi9pdGVyYWJsZVRvQXJyYXlcIjtcbmltcG9ydCBub25JdGVyYWJsZVNwcmVhZCBmcm9tIFwiLi9ub25JdGVyYWJsZVNwcmVhZFwiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge1xuICByZXR1cm4gYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBub25JdGVyYWJsZVNwcmVhZCgpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcnIyW2ldID0gYXJyW2ldO1xuICAgIH1cblxuICAgIHJldHVybiBhcnIyO1xuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gXCJbb2JqZWN0IEFyZ3VtZW50c11cIikgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2VcIik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59IiwiaW1wb3J0IGRlZmluZVByb3BlcnR5IGZyb20gXCIuL2RlZmluZVByb3BlcnR5XCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuICAgIHZhciBvd25LZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcblxuICAgIGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgb3duS2V5cyA9IG93bktleXMuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKS5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIHN5bSkuZW51bWVyYWJsZTtcbiAgICAgIH0pKTtcbiAgICB9XG5cbiAgICBvd25LZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn0iLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICByZXR1cm4gQ29uc3RydWN0b3I7XG59IiwiZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZjIgPSBmdW5jdGlvbiBfdHlwZW9mMihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2YyKG9iaik7IH1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBfdHlwZW9mMihTeW1ib2wuaXRlcmF0b3IpID09PSBcInN5bWJvbFwiKSB7XG4gICAgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICByZXR1cm4gX3R5cGVvZjIob2JqKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IF90eXBlb2YyKG9iaik7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfdHlwZW9mKG9iaik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn0iLCJpbXBvcnQgX3R5cGVvZiBmcm9tIFwiLi4vLi4vaGVscGVycy9lc20vdHlwZW9mXCI7XG5pbXBvcnQgYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gXCIuL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkge1xuICAgIHJldHVybiBjYWxsO1xuICB9XG5cbiAgcmV0dXJuIGFzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICAgIHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7XG4gIH07XG4gIHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuXG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59IiwiaW1wb3J0IHNldFByb3RvdHlwZU9mIGZyb20gXCIuL3NldFByb3RvdHlwZU9mXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgfVxuXG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gIGlmIChzdXBlckNsYXNzKSBzZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59IiwiZnVuY3Rpb24gYXJlSW5wdXRzRXF1YWwobmV3SW5wdXRzLCBsYXN0SW5wdXRzKSB7XG4gICAgaWYgKG5ld0lucHV0cy5sZW5ndGggIT09IGxhc3RJbnB1dHMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuZXdJbnB1dHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKG5ld0lucHV0c1tpXSAhPT0gbGFzdElucHV0c1tpXSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBtZW1vaXplT25lKHJlc3VsdEZuLCBpc0VxdWFsKSB7XG4gICAgaWYgKGlzRXF1YWwgPT09IHZvaWQgMCkgeyBpc0VxdWFsID0gYXJlSW5wdXRzRXF1YWw7IH1cbiAgICB2YXIgbGFzdFRoaXM7XG4gICAgdmFyIGxhc3RBcmdzID0gW107XG4gICAgdmFyIGxhc3RSZXN1bHQ7XG4gICAgdmFyIGNhbGxlZE9uY2UgPSBmYWxzZTtcbiAgICBmdW5jdGlvbiBtZW1vaXplZCgpIHtcbiAgICAgICAgdmFyIG5ld0FyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIG5ld0FyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2FsbGVkT25jZSAmJiBsYXN0VGhpcyA9PT0gdGhpcyAmJiBpc0VxdWFsKG5ld0FyZ3MsIGxhc3RBcmdzKSkge1xuICAgICAgICAgICAgcmV0dXJuIGxhc3RSZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdFJlc3VsdCA9IHJlc3VsdEZuLmFwcGx5KHRoaXMsIG5ld0FyZ3MpO1xuICAgICAgICBjYWxsZWRPbmNlID0gdHJ1ZTtcbiAgICAgICAgbGFzdFRoaXMgPSB0aGlzO1xuICAgICAgICBsYXN0QXJncyA9IG5ld0FyZ3M7XG4gICAgICAgIHJldHVybiBsYXN0UmVzdWx0O1xuICAgIH1cbiAgICByZXR1cm4gbWVtb2l6ZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1lbW9pemVPbmU7XG4iLCIvKlxuXG5CYXNlZCBvZmYgZ2xhbW9yJ3MgU3R5bGVTaGVldCwgdGhhbmtzIFN1bmlsIOKdpO+4j1xuXG5oaWdoIHBlcmZvcm1hbmNlIFN0eWxlU2hlZXQgZm9yIGNzcy1pbi1qcyBzeXN0ZW1zXG5cbi0gdXNlcyBtdWx0aXBsZSBzdHlsZSB0YWdzIGJlaGluZCB0aGUgc2NlbmVzIGZvciBtaWxsaW9ucyBvZiBydWxlc1xuLSB1c2VzIGBpbnNlcnRSdWxlYCBmb3IgYXBwZW5kaW5nIGluIHByb2R1Y3Rpb24gZm9yICptdWNoKiBmYXN0ZXIgcGVyZm9ybWFuY2VcblxuLy8gdXNhZ2VcblxuaW1wb3J0IHsgU3R5bGVTaGVldCB9IGZyb20gJ0BlbW90aW9uL3NoZWV0J1xuXG5sZXQgc3R5bGVTaGVldCA9IG5ldyBTdHlsZVNoZWV0KHsga2V5OiAnJywgY29udGFpbmVyOiBkb2N1bWVudC5oZWFkIH0pXG5cbnN0eWxlU2hlZXQuaW5zZXJ0KCcjYm94IHsgYm9yZGVyOiAxcHggc29saWQgcmVkOyB9Jylcbi0gYXBwZW5kcyBhIGNzcyBydWxlIGludG8gdGhlIHN0eWxlc2hlZXRcblxuc3R5bGVTaGVldC5mbHVzaCgpXG4tIGVtcHRpZXMgdGhlIHN0eWxlc2hlZXQgb2YgYWxsIGl0cyBjb250ZW50c1xuXG4qL1xuLy8gJEZsb3dGaXhNZVxuZnVuY3Rpb24gc2hlZXRGb3JUYWcodGFnKSB7XG4gIGlmICh0YWcuc2hlZXQpIHtcbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgcmV0dXJuIHRhZy5zaGVldDtcbiAgfSAvLyB0aGlzIHdlaXJkbmVzcyBicm91Z2h0IHRvIHlvdSBieSBmaXJlZm94XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZG9jdW1lbnQuc3R5bGVTaGVldHMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoZG9jdW1lbnQuc3R5bGVTaGVldHNbaV0ub3duZXJOb2RlID09PSB0YWcpIHtcbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgIHJldHVybiBkb2N1bWVudC5zdHlsZVNoZWV0c1tpXTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIHRhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHRhZy5zZXRBdHRyaWJ1dGUoJ2RhdGEtZW1vdGlvbicsIG9wdGlvbnMua2V5KTtcblxuICBpZiAob3B0aW9ucy5ub25jZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdGFnLnNldEF0dHJpYnV0ZSgnbm9uY2UnLCBvcHRpb25zLm5vbmNlKTtcbiAgfVxuXG4gIHRhZy5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJykpO1xuICByZXR1cm4gdGFnO1xufVxuXG52YXIgU3R5bGVTaGVldCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFN0eWxlU2hlZXQob3B0aW9ucykge1xuICAgIHRoaXMuaXNTcGVlZHkgPSBvcHRpb25zLnNwZWVkeSA9PT0gdW5kZWZpbmVkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyA6IG9wdGlvbnMuc3BlZWR5O1xuICAgIHRoaXMudGFncyA9IFtdO1xuICAgIHRoaXMuY3RyID0gMDtcbiAgICB0aGlzLm5vbmNlID0gb3B0aW9ucy5ub25jZTsgLy8ga2V5IGlzIHRoZSB2YWx1ZSBvZiB0aGUgZGF0YS1lbW90aW9uIGF0dHJpYnV0ZSwgaXQncyB1c2VkIHRvIGlkZW50aWZ5IGRpZmZlcmVudCBzaGVldHNcblxuICAgIHRoaXMua2V5ID0gb3B0aW9ucy5rZXk7XG4gICAgdGhpcy5jb250YWluZXIgPSBvcHRpb25zLmNvbnRhaW5lcjtcbiAgICB0aGlzLmJlZm9yZSA9IG51bGw7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU3R5bGVTaGVldC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmluc2VydCA9IGZ1bmN0aW9uIGluc2VydChydWxlKSB7XG4gICAgLy8gdGhlIG1heCBsZW5ndGggaXMgaG93IG1hbnkgcnVsZXMgd2UgaGF2ZSBwZXIgc3R5bGUgdGFnLCBpdCdzIDY1MDAwIGluIHNwZWVkeSBtb2RlXG4gICAgLy8gaXQncyAxIGluIGRldiBiZWNhdXNlIHdlIGluc2VydCBzb3VyY2UgbWFwcyB0aGF0IG1hcCBhIHNpbmdsZSBydWxlIHRvIGEgbG9jYXRpb25cbiAgICAvLyBhbmQgeW91IGNhbiBvbmx5IGhhdmUgb25lIHNvdXJjZSBtYXAgcGVyIHN0eWxlIHRhZ1xuICAgIGlmICh0aGlzLmN0ciAlICh0aGlzLmlzU3BlZWR5ID8gNjUwMDAgOiAxKSA9PT0gMCkge1xuICAgICAgdmFyIF90YWcgPSBjcmVhdGVTdHlsZUVsZW1lbnQodGhpcyk7XG5cbiAgICAgIHZhciBiZWZvcmU7XG5cbiAgICAgIGlmICh0aGlzLnRhZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGJlZm9yZSA9IHRoaXMuYmVmb3JlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmVmb3JlID0gdGhpcy50YWdzW3RoaXMudGFncy5sZW5ndGggLSAxXS5uZXh0U2libGluZztcbiAgICAgIH1cblxuICAgICAgdGhpcy5jb250YWluZXIuaW5zZXJ0QmVmb3JlKF90YWcsIGJlZm9yZSk7XG4gICAgICB0aGlzLnRhZ3MucHVzaChfdGFnKTtcbiAgICB9XG5cbiAgICB2YXIgdGFnID0gdGhpcy50YWdzW3RoaXMudGFncy5sZW5ndGggLSAxXTtcblxuICAgIGlmICh0aGlzLmlzU3BlZWR5KSB7XG4gICAgICB2YXIgc2hlZXQgPSBzaGVldEZvclRhZyh0YWcpO1xuXG4gICAgICB0cnkge1xuICAgICAgICAvLyB0aGlzIGlzIGEgcmVhbGx5IGhvdCBwYXRoXG4gICAgICAgIC8vIHdlIGNoZWNrIHRoZSBzZWNvbmQgY2hhcmFjdGVyIGZpcnN0IGJlY2F1c2UgaGF2aW5nIFwiaVwiXG4gICAgICAgIC8vIGFzIHRoZSBzZWNvbmQgY2hhcmFjdGVyIHdpbGwgaGFwcGVuIGxlc3Mgb2Z0ZW4gdGhhblxuICAgICAgICAvLyBoYXZpbmcgXCJAXCIgYXMgdGhlIGZpcnN0IGNoYXJhY3RlclxuICAgICAgICB2YXIgaXNJbXBvcnRSdWxlID0gcnVsZS5jaGFyQ29kZUF0KDEpID09PSAxMDUgJiYgcnVsZS5jaGFyQ29kZUF0KDApID09PSA2NDsgLy8gdGhpcyBpcyB0aGUgdWx0cmFmYXN0IHZlcnNpb24sIHdvcmtzIGFjcm9zcyBicm93c2Vyc1xuICAgICAgICAvLyB0aGUgYmlnIGRyYXdiYWNrIGlzIHRoYXQgdGhlIGNzcyB3b24ndCBiZSBlZGl0YWJsZSBpbiBkZXZ0b29sc1xuXG4gICAgICAgIHNoZWV0Lmluc2VydFJ1bGUocnVsZSwgLy8gd2UgbmVlZCB0byBpbnNlcnQgQGltcG9ydCBydWxlcyBiZWZvcmUgYW55dGhpbmcgZWxzZVxuICAgICAgICAvLyBvdGhlcndpc2UgdGhlcmUgd2lsbCBiZSBhbiBlcnJvclxuICAgICAgICAvLyB0ZWNobmljYWxseSB0aGlzIG1lYW5zIHRoYXQgdGhlIEBpbXBvcnQgcnVsZXMgd2lsbFxuICAgICAgICAvLyBfdXN1YWxseV8obm90IGFsd2F5cyBzaW5jZSB0aGVyZSBjb3VsZCBiZSBtdWx0aXBsZSBzdHlsZSB0YWdzKVxuICAgICAgICAvLyBiZSB0aGUgZmlyc3Qgb25lcyBpbiBwcm9kIGFuZCBnZW5lcmFsbHkgbGF0ZXIgaW4gZGV2XG4gICAgICAgIC8vIHRoaXMgc2hvdWxkbid0IHJlYWxseSBtYXR0ZXIgaW4gdGhlIHJlYWwgd29ybGQgdGhvdWdoXG4gICAgICAgIC8vIEBpbXBvcnQgaXMgZ2VuZXJhbGx5IG9ubHkgdXNlZCBmb3IgZm9udCBmYWNlcyBmcm9tIGdvb2dsZSBmb250cyBhbmQgZXRjLlxuICAgICAgICAvLyBzbyB3aGlsZSB0aGlzIGNvdWxkIGJlIHRlY2huaWNhbGx5IGNvcnJlY3QgdGhlbiBpdCB3b3VsZCBiZSBzbG93ZXIgYW5kIGxhcmdlclxuICAgICAgICAvLyBmb3IgYSB0aW55IGJpdCBvZiBjb3JyZWN0bmVzcyB0aGF0IHdvbid0IG1hdHRlciBpbiB0aGUgcmVhbCB3b3JsZFxuICAgICAgICBpc0ltcG9ydFJ1bGUgPyAwIDogc2hlZXQuY3NzUnVsZXMubGVuZ3RoKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oXCJUaGVyZSB3YXMgYSBwcm9ibGVtIGluc2VydGluZyB0aGUgZm9sbG93aW5nIHJ1bGU6IFxcXCJcIiArIHJ1bGUgKyBcIlxcXCJcIiwgZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGFnLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHJ1bGUpKTtcbiAgICB9XG5cbiAgICB0aGlzLmN0cisrO1xuICB9O1xuXG4gIF9wcm90by5mbHVzaCA9IGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICB0aGlzLnRhZ3MuZm9yRWFjaChmdW5jdGlvbiAodGFnKSB7XG4gICAgICByZXR1cm4gdGFnLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGFnKTtcbiAgICB9KTtcbiAgICB0aGlzLnRhZ3MgPSBbXTtcbiAgICB0aGlzLmN0ciA9IDA7XG4gIH07XG5cbiAgcmV0dXJuIFN0eWxlU2hlZXQ7XG59KCk7XG5cbmV4cG9ydCB7IFN0eWxlU2hlZXQgfTtcbiIsImZ1bmN0aW9uIHN0eWxpc19taW4gKFcpIHtcbiAgZnVuY3Rpb24gTShkLCBjLCBlLCBoLCBhKSB7XG4gICAgZm9yICh2YXIgbSA9IDAsIGIgPSAwLCB2ID0gMCwgbiA9IDAsIHEsIGcsIHggPSAwLCBLID0gMCwgaywgdSA9IGsgPSBxID0gMCwgbCA9IDAsIHIgPSAwLCBJID0gMCwgdCA9IDAsIEIgPSBlLmxlbmd0aCwgSiA9IEIgLSAxLCB5LCBmID0gJycsIHAgPSAnJywgRiA9ICcnLCBHID0gJycsIEM7IGwgPCBCOykge1xuICAgICAgZyA9IGUuY2hhckNvZGVBdChsKTtcbiAgICAgIGwgPT09IEogJiYgMCAhPT0gYiArIG4gKyB2ICsgbSAmJiAoMCAhPT0gYiAmJiAoZyA9IDQ3ID09PSBiID8gMTAgOiA0NyksIG4gPSB2ID0gbSA9IDAsIEIrKywgSisrKTtcblxuICAgICAgaWYgKDAgPT09IGIgKyBuICsgdiArIG0pIHtcbiAgICAgICAgaWYgKGwgPT09IEogJiYgKDAgPCByICYmIChmID0gZi5yZXBsYWNlKE4sICcnKSksIDAgPCBmLnRyaW0oKS5sZW5ndGgpKSB7XG4gICAgICAgICAgc3dpdGNoIChnKSB7XG4gICAgICAgICAgICBjYXNlIDMyOlxuICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgY2FzZSA1OTpcbiAgICAgICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgZiArPSBlLmNoYXJBdChsKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBnID0gNTk7XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKGcpIHtcbiAgICAgICAgICBjYXNlIDEyMzpcbiAgICAgICAgICAgIGYgPSBmLnRyaW0oKTtcbiAgICAgICAgICAgIHEgPSBmLmNoYXJDb2RlQXQoMCk7XG4gICAgICAgICAgICBrID0gMTtcblxuICAgICAgICAgICAgZm9yICh0ID0gKytsOyBsIDwgQjspIHtcbiAgICAgICAgICAgICAgc3dpdGNoIChnID0gZS5jaGFyQ29kZUF0KGwpKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxMjM6XG4gICAgICAgICAgICAgICAgICBrKys7XG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgMTI1OlxuICAgICAgICAgICAgICAgICAgay0tO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDQ3OlxuICAgICAgICAgICAgICAgICAgc3dpdGNoIChnID0gZS5jaGFyQ29kZUF0KGwgKyAxKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQyOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ3OlxuICAgICAgICAgICAgICAgICAgICAgIGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodSA9IGwgKyAxOyB1IDwgSjsgKyt1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZS5jaGFyQ29kZUF0KHUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0NzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICg0MiA9PT0gZyAmJiA0MiA9PT0gZS5jaGFyQ29kZUF0KHUgLSAxKSAmJiBsICsgMiAhPT0gdSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsID0gdSArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICg0NyA9PT0gZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsID0gdSArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBsID0gdTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDkxOlxuICAgICAgICAgICAgICAgICAgZysrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA0MDpcbiAgICAgICAgICAgICAgICAgIGcrKztcblxuICAgICAgICAgICAgICAgIGNhc2UgMzQ6XG4gICAgICAgICAgICAgICAgY2FzZSAzOTpcbiAgICAgICAgICAgICAgICAgIGZvciAoOyBsKysgPCBKICYmIGUuY2hhckNvZGVBdChsKSAhPT0gZzspIHtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKDAgPT09IGspIGJyZWFrO1xuICAgICAgICAgICAgICBsKys7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGsgPSBlLnN1YnN0cmluZyh0LCBsKTtcbiAgICAgICAgICAgIDAgPT09IHEgJiYgKHEgPSAoZiA9IGYucmVwbGFjZShjYSwgJycpLnRyaW0oKSkuY2hhckNvZGVBdCgwKSk7XG5cbiAgICAgICAgICAgIHN3aXRjaCAocSkge1xuICAgICAgICAgICAgICBjYXNlIDY0OlxuICAgICAgICAgICAgICAgIDAgPCByICYmIChmID0gZi5yZXBsYWNlKE4sICcnKSk7XG4gICAgICAgICAgICAgICAgZyA9IGYuY2hhckNvZGVBdCgxKTtcblxuICAgICAgICAgICAgICAgIHN3aXRjaCAoZykge1xuICAgICAgICAgICAgICAgICAgY2FzZSAxMDA6XG4gICAgICAgICAgICAgICAgICBjYXNlIDEwOTpcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTE1OlxuICAgICAgICAgICAgICAgICAgY2FzZSA0NTpcbiAgICAgICAgICAgICAgICAgICAgciA9IGM7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByID0gTztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBrID0gTShjLCByLCBrLCBnLCBhICsgMSk7XG4gICAgICAgICAgICAgICAgdCA9IGsubGVuZ3RoO1xuICAgICAgICAgICAgICAgIDAgPCBBICYmIChyID0gWChPLCBmLCBJKSwgQyA9IEgoMywgaywgciwgYywgRCwgeiwgdCwgZywgYSwgaCksIGYgPSByLmpvaW4oJycpLCB2b2lkIDAgIT09IEMgJiYgMCA9PT0gKHQgPSAoayA9IEMudHJpbSgpKS5sZW5ndGgpICYmIChnID0gMCwgayA9ICcnKSk7XG4gICAgICAgICAgICAgICAgaWYgKDAgPCB0KSBzd2l0Y2ggKGcpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTE1OlxuICAgICAgICAgICAgICAgICAgICBmID0gZi5yZXBsYWNlKGRhLCBlYSk7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMTAwOlxuICAgICAgICAgICAgICAgICAgY2FzZSAxMDk6XG4gICAgICAgICAgICAgICAgICBjYXNlIDQ1OlxuICAgICAgICAgICAgICAgICAgICBrID0gZiArICd7JyArIGsgKyAnfSc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDEwNzpcbiAgICAgICAgICAgICAgICAgICAgZiA9IGYucmVwbGFjZShmYSwgJyQxICQyJyk7XG4gICAgICAgICAgICAgICAgICAgIGsgPSBmICsgJ3snICsgayArICd9JztcbiAgICAgICAgICAgICAgICAgICAgayA9IDEgPT09IHcgfHwgMiA9PT0gdyAmJiBMKCdAJyArIGssIDMpID8gJ0Atd2Via2l0LScgKyBrICsgJ0AnICsgayA6ICdAJyArIGs7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBrID0gZiArIGssIDExMiA9PT0gaCAmJiAoayA9IChwICs9IGssICcnKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGsgPSAnJztcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGsgPSBNKGMsIFgoYywgZiwgSSksIGssIGgsIGEgKyAxKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgRiArPSBrO1xuICAgICAgICAgICAgayA9IEkgPSByID0gdSA9IHEgPSAwO1xuICAgICAgICAgICAgZiA9ICcnO1xuICAgICAgICAgICAgZyA9IGUuY2hhckNvZGVBdCgrK2wpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDEyNTpcbiAgICAgICAgICBjYXNlIDU5OlxuICAgICAgICAgICAgZiA9ICgwIDwgciA/IGYucmVwbGFjZShOLCAnJykgOiBmKS50cmltKCk7XG4gICAgICAgICAgICBpZiAoMSA8ICh0ID0gZi5sZW5ndGgpKSBzd2l0Y2ggKDAgPT09IHUgJiYgKHEgPSBmLmNoYXJDb2RlQXQoMCksIDQ1ID09PSBxIHx8IDk2IDwgcSAmJiAxMjMgPiBxKSAmJiAodCA9IChmID0gZi5yZXBsYWNlKCcgJywgJzonKSkubGVuZ3RoKSwgMCA8IEEgJiYgdm9pZCAwICE9PSAoQyA9IEgoMSwgZiwgYywgZCwgRCwgeiwgcC5sZW5ndGgsIGgsIGEsIGgpKSAmJiAwID09PSAodCA9IChmID0gQy50cmltKCkpLmxlbmd0aCkgJiYgKGYgPSAnXFx4MDBcXHgwMCcpLCBxID0gZi5jaGFyQ29kZUF0KDApLCBnID0gZi5jaGFyQ29kZUF0KDEpLCBxKSB7XG4gICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDY0OlxuICAgICAgICAgICAgICAgIGlmICgxMDUgPT09IGcgfHwgOTkgPT09IGcpIHtcbiAgICAgICAgICAgICAgICAgIEcgKz0gZiArIGUuY2hhckF0KGwpO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgNTggIT09IGYuY2hhckNvZGVBdCh0IC0gMSkgJiYgKHAgKz0gUChmLCBxLCBnLCBmLmNoYXJDb2RlQXQoMikpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEkgPSByID0gdSA9IHEgPSAwO1xuICAgICAgICAgICAgZiA9ICcnO1xuICAgICAgICAgICAgZyA9IGUuY2hhckNvZGVBdCgrK2wpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHN3aXRjaCAoZykge1xuICAgICAgICBjYXNlIDEzOlxuICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgIDQ3ID09PSBiID8gYiA9IDAgOiAwID09PSAxICsgcSAmJiAxMDcgIT09IGggJiYgMCA8IGYubGVuZ3RoICYmIChyID0gMSwgZiArPSAnXFx4MDAnKTtcbiAgICAgICAgICAwIDwgQSAqIFkgJiYgSCgwLCBmLCBjLCBkLCBELCB6LCBwLmxlbmd0aCwgaCwgYSwgaCk7XG4gICAgICAgICAgeiA9IDE7XG4gICAgICAgICAgRCsrO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgNTk6XG4gICAgICAgIGNhc2UgMTI1OlxuICAgICAgICAgIGlmICgwID09PSBiICsgbiArIHYgKyBtKSB7XG4gICAgICAgICAgICB6Kys7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB6Kys7XG4gICAgICAgICAgeSA9IGUuY2hhckF0KGwpO1xuXG4gICAgICAgICAgc3dpdGNoIChnKSB7XG4gICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICBjYXNlIDMyOlxuICAgICAgICAgICAgICBpZiAoMCA9PT0gbiArIG0gKyBiKSBzd2l0Y2ggKHgpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDQ0OlxuICAgICAgICAgICAgICAgIGNhc2UgNTg6XG4gICAgICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgIGNhc2UgMzI6XG4gICAgICAgICAgICAgICAgICB5ID0gJyc7XG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAzMiAhPT0gZyAmJiAoeSA9ICcgJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgeSA9ICdcXFxcMCc7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDEyOlxuICAgICAgICAgICAgICB5ID0gJ1xcXFxmJztcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgICAgIHkgPSAnXFxcXHYnO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAzODpcbiAgICAgICAgICAgICAgMCA9PT0gbiArIGIgKyBtICYmIChyID0gSSA9IDEsIHkgPSAnXFxmJyArIHkpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAxMDg6XG4gICAgICAgICAgICAgIGlmICgwID09PSBuICsgYiArIG0gKyBFICYmIDAgPCB1KSBzd2l0Y2ggKGwgLSB1KSB7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgMTEyID09PSB4ICYmIDU4ID09PSBlLmNoYXJDb2RlQXQobCAtIDMpICYmIChFID0geCk7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgICAxMTEgPT09IEsgJiYgKEUgPSBLKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA1ODpcbiAgICAgICAgICAgICAgMCA9PT0gbiArIGIgKyBtICYmICh1ID0gbCk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDQ0OlxuICAgICAgICAgICAgICAwID09PSBiICsgdiArIG4gKyBtICYmIChyID0gMSwgeSArPSAnXFxyJyk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDM0OlxuICAgICAgICAgICAgY2FzZSAzOTpcbiAgICAgICAgICAgICAgMCA9PT0gYiAmJiAobiA9IG4gPT09IGcgPyAwIDogMCA9PT0gbiA/IGcgOiBuKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgOTE6XG4gICAgICAgICAgICAgIDAgPT09IG4gKyBiICsgdiAmJiBtKys7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDkzOlxuICAgICAgICAgICAgICAwID09PSBuICsgYiArIHYgJiYgbS0tO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA0MTpcbiAgICAgICAgICAgICAgMCA9PT0gbiArIGIgKyBtICYmIHYtLTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNDA6XG4gICAgICAgICAgICAgIGlmICgwID09PSBuICsgYiArIG0pIHtcbiAgICAgICAgICAgICAgICBpZiAoMCA9PT0gcSkgc3dpdGNoICgyICogeCArIDMgKiBLKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDUzMzpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHEgPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2Kys7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA2NDpcbiAgICAgICAgICAgICAgMCA9PT0gYiArIHYgKyBuICsgbSArIHUgKyBrICYmIChrID0gMSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDQyOlxuICAgICAgICAgICAgY2FzZSA0NzpcbiAgICAgICAgICAgICAgaWYgKCEoMCA8IG4gKyBtICsgdikpIHN3aXRjaCAoYikge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgIHN3aXRjaCAoMiAqIGcgKyAzICogZS5jaGFyQ29kZUF0KGwgKyAxKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDIzNTpcbiAgICAgICAgICAgICAgICAgICAgICBiID0gNDc7XG4gICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyMjA6XG4gICAgICAgICAgICAgICAgICAgICAgdCA9IGwsIGIgPSA0MjtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDQyOlxuICAgICAgICAgICAgICAgICAgNDcgPT09IGcgJiYgNDIgPT09IHggJiYgdCArIDIgIT09IGwgJiYgKDMzID09PSBlLmNoYXJDb2RlQXQodCArIDIpICYmIChwICs9IGUuc3Vic3RyaW5nKHQsIGwgKyAxKSksIHkgPSAnJywgYiA9IDApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgMCA9PT0gYiAmJiAoZiArPSB5KTtcbiAgICAgIH1cblxuICAgICAgSyA9IHg7XG4gICAgICB4ID0gZztcbiAgICAgIGwrKztcbiAgICB9XG5cbiAgICB0ID0gcC5sZW5ndGg7XG5cbiAgICBpZiAoMCA8IHQpIHtcbiAgICAgIHIgPSBjO1xuICAgICAgaWYgKDAgPCBBICYmIChDID0gSCgyLCBwLCByLCBkLCBELCB6LCB0LCBoLCBhLCBoKSwgdm9pZCAwICE9PSBDICYmIDAgPT09IChwID0gQykubGVuZ3RoKSkgcmV0dXJuIEcgKyBwICsgRjtcbiAgICAgIHAgPSByLmpvaW4oJywnKSArICd7JyArIHAgKyAnfSc7XG5cbiAgICAgIGlmICgwICE9PSB3ICogRSkge1xuICAgICAgICAyICE9PSB3IHx8IEwocCwgMikgfHwgKEUgPSAwKTtcblxuICAgICAgICBzd2l0Y2ggKEUpIHtcbiAgICAgICAgICBjYXNlIDExMTpcbiAgICAgICAgICAgIHAgPSBwLnJlcGxhY2UoaGEsICc6LW1vei0kMScpICsgcDtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAxMTI6XG4gICAgICAgICAgICBwID0gcC5yZXBsYWNlKFEsICc6Oi13ZWJraXQtaW5wdXQtJDEnKSArIHAucmVwbGFjZShRLCAnOjotbW96LSQxJykgKyBwLnJlcGxhY2UoUSwgJzotbXMtaW5wdXQtJDEnKSArIHA7XG4gICAgICAgIH1cblxuICAgICAgICBFID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gRyArIHAgKyBGO1xuICB9XG5cbiAgZnVuY3Rpb24gWChkLCBjLCBlKSB7XG4gICAgdmFyIGggPSBjLnRyaW0oKS5zcGxpdChpYSk7XG4gICAgYyA9IGg7XG4gICAgdmFyIGEgPSBoLmxlbmd0aCxcbiAgICAgICAgbSA9IGQubGVuZ3RoO1xuXG4gICAgc3dpdGNoIChtKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHZhciBiID0gMDtcblxuICAgICAgICBmb3IgKGQgPSAwID09PSBtID8gJycgOiBkWzBdICsgJyAnOyBiIDwgYTsgKytiKSB7XG4gICAgICAgICAgY1tiXSA9IFooZCwgY1tiXSwgZSkudHJpbSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHZhciB2ID0gYiA9IDA7XG5cbiAgICAgICAgZm9yIChjID0gW107IGIgPCBhOyArK2IpIHtcbiAgICAgICAgICBmb3IgKHZhciBuID0gMDsgbiA8IG07ICsrbikge1xuICAgICAgICAgICAgY1t2KytdID0gWihkW25dICsgJyAnLCBoW2JdLCBlKS50cmltKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICByZXR1cm4gYztcbiAgfVxuXG4gIGZ1bmN0aW9uIFooZCwgYywgZSkge1xuICAgIHZhciBoID0gYy5jaGFyQ29kZUF0KDApO1xuICAgIDMzID4gaCAmJiAoaCA9IChjID0gYy50cmltKCkpLmNoYXJDb2RlQXQoMCkpO1xuXG4gICAgc3dpdGNoIChoKSB7XG4gICAgICBjYXNlIDM4OlxuICAgICAgICByZXR1cm4gYy5yZXBsYWNlKEYsICckMScgKyBkLnRyaW0oKSk7XG5cbiAgICAgIGNhc2UgNTg6XG4gICAgICAgIHJldHVybiBkLnRyaW0oKSArIGMucmVwbGFjZShGLCAnJDEnICsgZC50cmltKCkpO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAoMCA8IDEgKiBlICYmIDAgPCBjLmluZGV4T2YoJ1xcZicpKSByZXR1cm4gYy5yZXBsYWNlKEYsICg1OCA9PT0gZC5jaGFyQ29kZUF0KDApID8gJycgOiAnJDEnKSArIGQudHJpbSgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZCArIGM7XG4gIH1cblxuICBmdW5jdGlvbiBQKGQsIGMsIGUsIGgpIHtcbiAgICB2YXIgYSA9IGQgKyAnOycsXG4gICAgICAgIG0gPSAyICogYyArIDMgKiBlICsgNCAqIGg7XG5cbiAgICBpZiAoOTQ0ID09PSBtKSB7XG4gICAgICBkID0gYS5pbmRleE9mKCc6JywgOSkgKyAxO1xuICAgICAgdmFyIGIgPSBhLnN1YnN0cmluZyhkLCBhLmxlbmd0aCAtIDEpLnRyaW0oKTtcbiAgICAgIGIgPSBhLnN1YnN0cmluZygwLCBkKS50cmltKCkgKyBiICsgJzsnO1xuICAgICAgcmV0dXJuIDEgPT09IHcgfHwgMiA9PT0gdyAmJiBMKGIsIDEpID8gJy13ZWJraXQtJyArIGIgKyBiIDogYjtcbiAgICB9XG5cbiAgICBpZiAoMCA9PT0gdyB8fCAyID09PSB3ICYmICFMKGEsIDEpKSByZXR1cm4gYTtcblxuICAgIHN3aXRjaCAobSkge1xuICAgICAgY2FzZSAxMDE1OlxuICAgICAgICByZXR1cm4gOTcgPT09IGEuY2hhckNvZGVBdCgxMCkgPyAnLXdlYmtpdC0nICsgYSArIGEgOiBhO1xuXG4gICAgICBjYXNlIDk1MTpcbiAgICAgICAgcmV0dXJuIDExNiA9PT0gYS5jaGFyQ29kZUF0KDMpID8gJy13ZWJraXQtJyArIGEgKyBhIDogYTtcblxuICAgICAgY2FzZSA5NjM6XG4gICAgICAgIHJldHVybiAxMTAgPT09IGEuY2hhckNvZGVBdCg1KSA/ICctd2Via2l0LScgKyBhICsgYSA6IGE7XG5cbiAgICAgIGNhc2UgMTAwOTpcbiAgICAgICAgaWYgKDEwMCAhPT0gYS5jaGFyQ29kZUF0KDQpKSBicmVhaztcblxuICAgICAgY2FzZSA5Njk6XG4gICAgICBjYXNlIDk0MjpcbiAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgYTtcblxuICAgICAgY2FzZSA5Nzg6XG4gICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbW96LScgKyBhICsgYTtcblxuICAgICAgY2FzZSAxMDE5OlxuICAgICAgY2FzZSA5ODM6XG4gICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbW96LScgKyBhICsgJy1tcy0nICsgYSArIGE7XG5cbiAgICAgIGNhc2UgODgzOlxuICAgICAgICBpZiAoNDUgPT09IGEuY2hhckNvZGVBdCg4KSkgcmV0dXJuICctd2Via2l0LScgKyBhICsgYTtcbiAgICAgICAgaWYgKDAgPCBhLmluZGV4T2YoJ2ltYWdlLXNldCgnLCAxMSkpIHJldHVybiBhLnJlcGxhY2UoamEsICckMS13ZWJraXQtJDInKSArIGE7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIDkzMjpcbiAgICAgICAgaWYgKDQ1ID09PSBhLmNoYXJDb2RlQXQoNCkpIHN3aXRjaCAoYS5jaGFyQ29kZUF0KDUpKSB7XG4gICAgICAgICAgY2FzZSAxMDM6XG4gICAgICAgICAgICByZXR1cm4gJy13ZWJraXQtYm94LScgKyBhLnJlcGxhY2UoJy1ncm93JywgJycpICsgJy13ZWJraXQtJyArIGEgKyAnLW1zLScgKyBhLnJlcGxhY2UoJ2dyb3cnLCAncG9zaXRpdmUnKSArIGE7XG5cbiAgICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtJyArIGEucmVwbGFjZSgnc2hyaW5rJywgJ25lZ2F0aXZlJykgKyBhO1xuXG4gICAgICAgICAgY2FzZSA5ODpcbiAgICAgICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtJyArIGEucmVwbGFjZSgnYmFzaXMnLCAncHJlZmVycmVkLXNpemUnKSArIGE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tcy0nICsgYSArIGE7XG5cbiAgICAgIGNhc2UgOTY0OlxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLWZsZXgtJyArIGEgKyBhO1xuXG4gICAgICBjYXNlIDEwMjM6XG4gICAgICAgIGlmICg5OSAhPT0gYS5jaGFyQ29kZUF0KDgpKSBicmVhaztcbiAgICAgICAgYiA9IGEuc3Vic3RyaW5nKGEuaW5kZXhPZignOicsIDE1KSkucmVwbGFjZSgnZmxleC0nLCAnJykucmVwbGFjZSgnc3BhY2UtYmV0d2VlbicsICdqdXN0aWZ5Jyk7XG4gICAgICAgIHJldHVybiAnLXdlYmtpdC1ib3gtcGFjaycgKyBiICsgJy13ZWJraXQtJyArIGEgKyAnLW1zLWZsZXgtcGFjaycgKyBiICsgYTtcblxuICAgICAgY2FzZSAxMDA1OlxuICAgICAgICByZXR1cm4ga2EudGVzdChhKSA/IGEucmVwbGFjZShhYSwgJzotd2Via2l0LScpICsgYS5yZXBsYWNlKGFhLCAnOi1tb3otJykgKyBhIDogYTtcblxuICAgICAgY2FzZSAxZTM6XG4gICAgICAgIGIgPSBhLnN1YnN0cmluZygxMykudHJpbSgpO1xuICAgICAgICBjID0gYi5pbmRleE9mKCctJykgKyAxO1xuXG4gICAgICAgIHN3aXRjaCAoYi5jaGFyQ29kZUF0KDApICsgYi5jaGFyQ29kZUF0KGMpKSB7XG4gICAgICAgICAgY2FzZSAyMjY6XG4gICAgICAgICAgICBiID0gYS5yZXBsYWNlKEcsICd0YicpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDIzMjpcbiAgICAgICAgICAgIGIgPSBhLnJlcGxhY2UoRywgJ3RiLXJsJyk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMjIwOlxuICAgICAgICAgICAgYiA9IGEucmVwbGFjZShHLCAnbHInKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tcy0nICsgYiArIGE7XG5cbiAgICAgIGNhc2UgMTAxNzpcbiAgICAgICAgaWYgKC0xID09PSBhLmluZGV4T2YoJ3N0aWNreScsIDkpKSBicmVhaztcblxuICAgICAgY2FzZSA5NzU6XG4gICAgICAgIGMgPSAoYSA9IGQpLmxlbmd0aCAtIDEwO1xuICAgICAgICBiID0gKDMzID09PSBhLmNoYXJDb2RlQXQoYykgPyBhLnN1YnN0cmluZygwLCBjKSA6IGEpLnN1YnN0cmluZyhkLmluZGV4T2YoJzonLCA3KSArIDEpLnRyaW0oKTtcblxuICAgICAgICBzd2l0Y2ggKG0gPSBiLmNoYXJDb2RlQXQoMCkgKyAoYi5jaGFyQ29kZUF0KDcpIHwgMCkpIHtcbiAgICAgICAgICBjYXNlIDIwMzpcbiAgICAgICAgICAgIGlmICgxMTEgPiBiLmNoYXJDb2RlQXQoOCkpIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgICBhID0gYS5yZXBsYWNlKGIsICctd2Via2l0LScgKyBiKSArICc7JyArIGE7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMjA3OlxuICAgICAgICAgIGNhc2UgMTAyOlxuICAgICAgICAgICAgYSA9IGEucmVwbGFjZShiLCAnLXdlYmtpdC0nICsgKDEwMiA8IG0gPyAnaW5saW5lLScgOiAnJykgKyAnYm94JykgKyAnOycgKyBhLnJlcGxhY2UoYiwgJy13ZWJraXQtJyArIGIpICsgJzsnICsgYS5yZXBsYWNlKGIsICctbXMtJyArIGIgKyAnYm94JykgKyAnOycgKyBhO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGEgKyAnOyc7XG5cbiAgICAgIGNhc2UgOTM4OlxuICAgICAgICBpZiAoNDUgPT09IGEuY2hhckNvZGVBdCg1KSkgc3dpdGNoIChhLmNoYXJDb2RlQXQoNikpIHtcbiAgICAgICAgICBjYXNlIDEwNTpcbiAgICAgICAgICAgIHJldHVybiBiID0gYS5yZXBsYWNlKCctaXRlbXMnLCAnJyksICctd2Via2l0LScgKyBhICsgJy13ZWJraXQtYm94LScgKyBiICsgJy1tcy1mbGV4LScgKyBiICsgYTtcblxuICAgICAgICAgIGNhc2UgMTE1OlxuICAgICAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tcy1mbGV4LWl0ZW0tJyArIGEucmVwbGFjZShiYSwgJycpICsgYTtcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLWZsZXgtbGluZS1wYWNrJyArIGEucmVwbGFjZSgnYWxpZ24tY29udGVudCcsICcnKS5yZXBsYWNlKGJhLCAnJykgKyBhO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIDk3MzpcbiAgICAgIGNhc2UgOTg5OlxuICAgICAgICBpZiAoNDUgIT09IGEuY2hhckNvZGVBdCgzKSB8fCAxMjIgPT09IGEuY2hhckNvZGVBdCg0KSkgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTMxOlxuICAgICAgY2FzZSA5NTM6XG4gICAgICAgIGlmICghMCA9PT0gbGEudGVzdChkKSkgcmV0dXJuIDExNSA9PT0gKGIgPSBkLnN1YnN0cmluZyhkLmluZGV4T2YoJzonKSArIDEpKS5jaGFyQ29kZUF0KDApID8gUChkLnJlcGxhY2UoJ3N0cmV0Y2gnLCAnZmlsbC1hdmFpbGFibGUnKSwgYywgZSwgaCkucmVwbGFjZSgnOmZpbGwtYXZhaWxhYmxlJywgJzpzdHJldGNoJykgOiBhLnJlcGxhY2UoYiwgJy13ZWJraXQtJyArIGIpICsgYS5yZXBsYWNlKGIsICctbW96LScgKyBiLnJlcGxhY2UoJ2ZpbGwtJywgJycpKSArIGE7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIDk2MjpcbiAgICAgICAgaWYgKGEgPSAnLXdlYmtpdC0nICsgYSArICgxMDIgPT09IGEuY2hhckNvZGVBdCg1KSA/ICctbXMtJyArIGEgOiAnJykgKyBhLCAyMTEgPT09IGUgKyBoICYmIDEwNSA9PT0gYS5jaGFyQ29kZUF0KDEzKSAmJiAwIDwgYS5pbmRleE9mKCd0cmFuc2Zvcm0nLCAxMCkpIHJldHVybiBhLnN1YnN0cmluZygwLCBhLmluZGV4T2YoJzsnLCAyNykgKyAxKS5yZXBsYWNlKG1hLCAnJDEtd2Via2l0LSQyJykgKyBhO1xuICAgIH1cblxuICAgIHJldHVybiBhO1xuICB9XG5cbiAgZnVuY3Rpb24gTChkLCBjKSB7XG4gICAgdmFyIGUgPSBkLmluZGV4T2YoMSA9PT0gYyA/ICc6JyA6ICd7JyksXG4gICAgICAgIGggPSBkLnN1YnN0cmluZygwLCAzICE9PSBjID8gZSA6IDEwKTtcbiAgICBlID0gZC5zdWJzdHJpbmcoZSArIDEsIGQubGVuZ3RoIC0gMSk7XG4gICAgcmV0dXJuIFIoMiAhPT0gYyA/IGggOiBoLnJlcGxhY2UobmEsICckMScpLCBlLCBjKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVhKGQsIGMpIHtcbiAgICB2YXIgZSA9IFAoYywgYy5jaGFyQ29kZUF0KDApLCBjLmNoYXJDb2RlQXQoMSksIGMuY2hhckNvZGVBdCgyKSk7XG4gICAgcmV0dXJuIGUgIT09IGMgKyAnOycgPyBlLnJlcGxhY2Uob2EsICcgb3IgKCQxKScpLnN1YnN0cmluZyg0KSA6ICcoJyArIGMgKyAnKSc7XG4gIH1cblxuICBmdW5jdGlvbiBIKGQsIGMsIGUsIGgsIGEsIG0sIGIsIHYsIG4sIHEpIHtcbiAgICBmb3IgKHZhciBnID0gMCwgeCA9IGMsIHc7IGcgPCBBOyArK2cpIHtcbiAgICAgIHN3aXRjaCAodyA9IFNbZ10uY2FsbChCLCBkLCB4LCBlLCBoLCBhLCBtLCBiLCB2LCBuLCBxKSkge1xuICAgICAgICBjYXNlIHZvaWQgMDpcbiAgICAgICAgY2FzZSAhMTpcbiAgICAgICAgY2FzZSAhMDpcbiAgICAgICAgY2FzZSBudWxsOlxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgeCA9IHc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHggIT09IGMpIHJldHVybiB4O1xuICB9XG5cbiAgZnVuY3Rpb24gVChkKSB7XG4gICAgc3dpdGNoIChkKSB7XG4gICAgICBjYXNlIHZvaWQgMDpcbiAgICAgIGNhc2UgbnVsbDpcbiAgICAgICAgQSA9IFMubGVuZ3RoID0gMDtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgZCkgU1tBKytdID0gZDtlbHNlIGlmICgnb2JqZWN0JyA9PT0gdHlwZW9mIGQpIGZvciAodmFyIGMgPSAwLCBlID0gZC5sZW5ndGg7IGMgPCBlOyArK2MpIHtcbiAgICAgICAgICBUKGRbY10pO1xuICAgICAgICB9IGVsc2UgWSA9ICEhZCB8IDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIFQ7XG4gIH1cblxuICBmdW5jdGlvbiBVKGQpIHtcbiAgICBkID0gZC5wcmVmaXg7XG4gICAgdm9pZCAwICE9PSBkICYmIChSID0gbnVsbCwgZCA/ICdmdW5jdGlvbicgIT09IHR5cGVvZiBkID8gdyA9IDEgOiAodyA9IDIsIFIgPSBkKSA6IHcgPSAwKTtcbiAgICByZXR1cm4gVTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEIoZCwgYykge1xuICAgIHZhciBlID0gZDtcbiAgICAzMyA+IGUuY2hhckNvZGVBdCgwKSAmJiAoZSA9IGUudHJpbSgpKTtcbiAgICBWID0gZTtcbiAgICBlID0gW1ZdO1xuXG4gICAgaWYgKDAgPCBBKSB7XG4gICAgICB2YXIgaCA9IEgoLTEsIGMsIGUsIGUsIEQsIHosIDAsIDAsIDAsIDApO1xuICAgICAgdm9pZCAwICE9PSBoICYmICdzdHJpbmcnID09PSB0eXBlb2YgaCAmJiAoYyA9IGgpO1xuICAgIH1cblxuICAgIHZhciBhID0gTShPLCBlLCBjLCAwLCAwKTtcbiAgICAwIDwgQSAmJiAoaCA9IEgoLTIsIGEsIGUsIGUsIEQsIHosIGEubGVuZ3RoLCAwLCAwLCAwKSwgdm9pZCAwICE9PSBoICYmIChhID0gaCkpO1xuICAgIFYgPSAnJztcbiAgICBFID0gMDtcbiAgICB6ID0gRCA9IDE7XG4gICAgcmV0dXJuIGE7XG4gIH1cblxuICB2YXIgY2EgPSAvXlxcMCsvZyxcbiAgICAgIE4gPSAvW1xcMFxcclxcZl0vZyxcbiAgICAgIGFhID0gLzogKi9nLFxuICAgICAga2EgPSAvem9vfGdyYS8sXG4gICAgICBtYSA9IC8oWyw6IF0pKHRyYW5zZm9ybSkvZyxcbiAgICAgIGlhID0gLyxcXHIrPy9nLFxuICAgICAgRiA9IC8oW1xcdFxcclxcbiBdKSpcXGY/Ji9nLFxuICAgICAgZmEgPSAvQChrXFx3KylcXHMqKFxcUyopXFxzKi8sXG4gICAgICBRID0gLzo6KHBsYWNlKS9nLFxuICAgICAgaGEgPSAvOihyZWFkLW9ubHkpL2csXG4gICAgICBHID0gL1tzdmhdXFx3Ky1bdGJscl17Mn0vLFxuICAgICAgZGEgPSAvXFwoXFxzKiguKilcXHMqXFwpL2csXG4gICAgICBvYSA9IC8oW1xcc1xcU10qPyk7L2csXG4gICAgICBiYSA9IC8tc2VsZnxmbGV4LS9nLFxuICAgICAgbmEgPSAvW15dKj8oOltycF1bZWxdYVtcXHctXSspW15dKi8sXG4gICAgICBsYSA9IC9zdHJldGNofDpcXHMqXFx3K1xcLSg/OmNvbnRlfGF2YWlsKS8sXG4gICAgICBqYSA9IC8oW14tXSkoaW1hZ2Utc2V0XFwoKS8sXG4gICAgICB6ID0gMSxcbiAgICAgIEQgPSAxLFxuICAgICAgRSA9IDAsXG4gICAgICB3ID0gMSxcbiAgICAgIE8gPSBbXSxcbiAgICAgIFMgPSBbXSxcbiAgICAgIEEgPSAwLFxuICAgICAgUiA9IG51bGwsXG4gICAgICBZID0gMCxcbiAgICAgIFYgPSAnJztcbiAgQi51c2UgPSBUO1xuICBCLnNldCA9IFU7XG4gIHZvaWQgMCAhPT0gVyAmJiBVKFcpO1xuICByZXR1cm4gQjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3R5bGlzX21pbjtcbiIsImltcG9ydCB7IFN0eWxlU2hlZXQgfSBmcm9tICdAZW1vdGlvbi9zaGVldCc7XG5pbXBvcnQgU3R5bGlzIGZyb20gJ0BlbW90aW9uL3N0eWxpcyc7XG5pbXBvcnQgJ0BlbW90aW9uL3dlYWstbWVtb2l6ZSc7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90aHlzdWx0YW4vc3R5bGlzLmpzL3RyZWUvbWFzdGVyL3BsdWdpbnMvcnVsZS1zaGVldFxuLy8gaW5saW5lZCB0byBhdm9pZCB1bWQgd3JhcHBlciBhbmQgcGVlckRlcCB3YXJuaW5ncy9pbnN0YWxsaW5nIHN0eWxpc1xuLy8gc2luY2Ugd2UgdXNlIHN0eWxpcyBhZnRlciBjbG9zdXJlIGNvbXBpbGVyXG52YXIgZGVsaW1pdGVyID0gJy8qfCovJztcbnZhciBuZWVkbGUgPSBkZWxpbWl0ZXIgKyAnfSc7XG5cbmZ1bmN0aW9uIHRvU2hlZXQoYmxvY2spIHtcbiAgaWYgKGJsb2NrKSB7XG4gICAgU2hlZXQuY3VycmVudC5pbnNlcnQoYmxvY2sgKyAnfScpO1xuICB9XG59XG5cbnZhciBTaGVldCA9IHtcbiAgY3VycmVudDogbnVsbFxufTtcbnZhciBydWxlU2hlZXQgPSBmdW5jdGlvbiBydWxlU2hlZXQoY29udGV4dCwgY29udGVudCwgc2VsZWN0b3JzLCBwYXJlbnRzLCBsaW5lLCBjb2x1bW4sIGxlbmd0aCwgbnMsIGRlcHRoLCBhdCkge1xuICBzd2l0Y2ggKGNvbnRleHQpIHtcbiAgICAvLyBwcm9wZXJ0eVxuICAgIGNhc2UgMTpcbiAgICAgIHtcbiAgICAgICAgc3dpdGNoIChjb250ZW50LmNoYXJDb2RlQXQoMCkpIHtcbiAgICAgICAgICBjYXNlIDY0OlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAvLyBAaW1wb3J0XG4gICAgICAgICAgICAgIFNoZWV0LmN1cnJlbnQuaW5zZXJ0KGNvbnRlbnQgKyAnOycpO1xuICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgLy8gY2hhcmNvZGUgZm9yIGxcblxuICAgICAgICAgIGNhc2UgMTA4OlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAvLyBjaGFyY29kZSBmb3IgYlxuICAgICAgICAgICAgICAvLyB0aGlzIGlnbm9yZXMgbGFiZWxcbiAgICAgICAgICAgICAgaWYgKGNvbnRlbnQuY2hhckNvZGVBdCgyKSA9PT0gOTgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIC8vIHNlbGVjdG9yXG5cbiAgICBjYXNlIDI6XG4gICAgICB7XG4gICAgICAgIGlmIChucyA9PT0gMCkgcmV0dXJuIGNvbnRlbnQgKyBkZWxpbWl0ZXI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIC8vIGF0LXJ1bGVcblxuICAgIGNhc2UgMzpcbiAgICAgIHtcbiAgICAgICAgc3dpdGNoIChucykge1xuICAgICAgICAgIC8vIEBmb250LWZhY2UsIEBwYWdlXG4gICAgICAgICAgY2FzZSAxMDI6XG4gICAgICAgICAgY2FzZSAxMTI6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIFNoZWV0LmN1cnJlbnQuaW5zZXJ0KHNlbGVjdG9yc1swXSArIGNvbnRlbnQpO1xuICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICByZXR1cm4gY29udGVudCArIChhdCA9PT0gMCA/IGRlbGltaXRlciA6ICcnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgY2FzZSAtMjpcbiAgICAgIHtcbiAgICAgICAgY29udGVudC5zcGxpdChuZWVkbGUpLmZvckVhY2godG9TaGVldCk7XG4gICAgICB9XG4gIH1cbn07XG5cbnZhciBjcmVhdGVDYWNoZSA9IGZ1bmN0aW9uIGNyZWF0ZUNhY2hlKG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHVuZGVmaW5lZCkgb3B0aW9ucyA9IHt9O1xuICB2YXIga2V5ID0gb3B0aW9ucy5rZXkgfHwgJ2Nzcyc7XG4gIHZhciBzdHlsaXNPcHRpb25zO1xuXG4gIGlmIChvcHRpb25zLnByZWZpeCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgc3R5bGlzT3B0aW9ucyA9IHtcbiAgICAgIHByZWZpeDogb3B0aW9ucy5wcmVmaXhcbiAgICB9O1xuICB9XG5cbiAgdmFyIHN0eWxpcyA9IG5ldyBTdHlsaXMoc3R5bGlzT3B0aW9ucyk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgaWYgKC9bXmEtei1dLy50ZXN0KGtleSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkVtb3Rpb24ga2V5IG11c3Qgb25seSBjb250YWluIGxvd2VyIGNhc2UgYWxwaGFiZXRpY2FsIGNoYXJhY3RlcnMgYW5kIC0gYnV0IFxcXCJcIiArIGtleSArIFwiXFxcIiB3YXMgcGFzc2VkXCIpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpbnNlcnRlZCA9IHt9OyAvLyAkRmxvd0ZpeE1lXG5cbiAgdmFyIGNvbnRhaW5lcjtcblxuICB7XG4gICAgY29udGFpbmVyID0gb3B0aW9ucy5jb250YWluZXIgfHwgZG9jdW1lbnQuaGVhZDtcbiAgICB2YXIgbm9kZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwic3R5bGVbZGF0YS1lbW90aW9uLVwiICsga2V5ICsgXCJdXCIpO1xuICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwobm9kZXMsIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICB2YXIgYXR0cmliID0gbm9kZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLWVtb3Rpb24tXCIgKyBrZXkpOyAvLyAkRmxvd0ZpeE1lXG5cbiAgICAgIGF0dHJpYi5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIGluc2VydGVkW2lkXSA9IHRydWU7XG4gICAgICB9KTtcblxuICAgICAgaWYgKG5vZGUucGFyZW50Tm9kZSAhPT0gY29udGFpbmVyKSB7XG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChub2RlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHZhciBfaW5zZXJ0O1xuXG4gIHtcbiAgICBzdHlsaXMudXNlKG9wdGlvbnMuc3R5bGlzUGx1Z2lucykocnVsZVNoZWV0KTtcblxuICAgIF9pbnNlcnQgPSBmdW5jdGlvbiBpbnNlcnQoc2VsZWN0b3IsIHNlcmlhbGl6ZWQsIHNoZWV0LCBzaG91bGRDYWNoZSkge1xuICAgICAgdmFyIG5hbWUgPSBzZXJpYWxpemVkLm5hbWU7XG4gICAgICBTaGVldC5jdXJyZW50ID0gc2hlZXQ7XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHNlcmlhbGl6ZWQubWFwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdmFyIG1hcCA9IHNlcmlhbGl6ZWQubWFwO1xuICAgICAgICBTaGVldC5jdXJyZW50ID0ge1xuICAgICAgICAgIGluc2VydDogZnVuY3Rpb24gaW5zZXJ0KHJ1bGUpIHtcbiAgICAgICAgICAgIHNoZWV0Lmluc2VydChydWxlICsgbWFwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHN0eWxpcyhzZWxlY3Rvciwgc2VyaWFsaXplZC5zdHlsZXMpO1xuXG4gICAgICBpZiAoc2hvdWxkQ2FjaGUpIHtcbiAgICAgICAgY2FjaGUuaW5zZXJ0ZWRbbmFtZV0gPSB0cnVlO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGh0dHBzOi8vZXNiZW5jaC5jb20vYmVuY2gvNWJmNzM3MWE0Y2Q3ZTYwMDllZjYxZDBhXG4gICAgdmFyIGNvbW1lbnRTdGFydCA9IC9cXC9cXCovZztcbiAgICB2YXIgY29tbWVudEVuZCA9IC9cXCpcXC8vZztcbiAgICBzdHlsaXMudXNlKGZ1bmN0aW9uIChjb250ZXh0LCBjb250ZW50KSB7XG4gICAgICBzd2l0Y2ggKGNvbnRleHQpIHtcbiAgICAgICAgY2FzZSAtMTpcbiAgICAgICAgICB7XG4gICAgICAgICAgICB3aGlsZSAoY29tbWVudFN0YXJ0LnRlc3QoY29udGVudCkpIHtcbiAgICAgICAgICAgICAgY29tbWVudEVuZC5sYXN0SW5kZXggPSBjb21tZW50U3RhcnQubGFzdEluZGV4O1xuXG4gICAgICAgICAgICAgIGlmIChjb21tZW50RW5kLnRlc3QoY29udGVudCkpIHtcbiAgICAgICAgICAgICAgICBjb21tZW50U3RhcnQubGFzdEluZGV4ID0gY29tbWVudEVuZC5sYXN0SW5kZXg7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdXIgc3R5bGVzIGhhdmUgYW4gdW50ZXJtaW5hdGVkIGNvbW1lbnQgKFwiLypcIiB3aXRob3V0IGNvcnJlc3BvbmRpbmcgXCIqL1wiKS4nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29tbWVudFN0YXJ0Lmxhc3RJbmRleCA9IDA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgc3R5bGlzLnVzZShmdW5jdGlvbiAoY29udGV4dCwgY29udGVudCwgc2VsZWN0b3JzKSB7XG4gICAgICBzd2l0Y2ggKGNvbnRleHQpIHtcbiAgICAgICAgY2FzZSAtMTpcbiAgICAgICAgICB7XG4gICAgICAgICAgICB2YXIgZmxhZyA9ICdlbW90aW9uLWRpc2FibGUtc2VydmVyLXJlbmRlcmluZy11bnNhZmUtc2VsZWN0b3Itd2FybmluZy1wbGVhc2UtZG8tbm90LXVzZS10aGlzLXRoZS13YXJuaW5nLWV4aXN0cy1mb3ItYS1yZWFzb24nO1xuICAgICAgICAgICAgdmFyIHVuc2FmZVBzZXVkb0NsYXNzZXMgPSBjb250ZW50Lm1hdGNoKC8oOmZpcnN0fDpudGh8Om50aC1sYXN0KS1jaGlsZC9nKTtcblxuICAgICAgICAgICAgaWYgKHVuc2FmZVBzZXVkb0NsYXNzZXMgJiYgY2FjaGUuY29tcGF0ICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgIHVuc2FmZVBzZXVkb0NsYXNzZXMuZm9yRWFjaChmdW5jdGlvbiAodW5zYWZlUHNldWRvQ2xhc3MpIHtcbiAgICAgICAgICAgICAgICB2YXIgaWdub3JlUmVnRXhwID0gbmV3IFJlZ0V4cCh1bnNhZmVQc2V1ZG9DbGFzcyArIFwiLipcXFxcL1xcXFwqIFwiICsgZmxhZyArIFwiIFxcXFwqXFxcXC9cIik7XG4gICAgICAgICAgICAgICAgdmFyIGlnbm9yZSA9IGlnbm9yZVJlZ0V4cC50ZXN0KGNvbnRlbnQpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHVuc2FmZVBzZXVkb0NsYXNzICYmICFpZ25vcmUpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJUaGUgcHNldWRvIGNsYXNzIFxcXCJcIiArIHVuc2FmZVBzZXVkb0NsYXNzICsgXCJcXFwiIGlzIHBvdGVudGlhbGx5IHVuc2FmZSB3aGVuIGRvaW5nIHNlcnZlci1zaWRlIHJlbmRlcmluZy4gVHJ5IGNoYW5naW5nIGl0IHRvIFxcXCJcIiArIHVuc2FmZVBzZXVkb0NsYXNzLnNwbGl0KCctY2hpbGQnKVswXSArIFwiLW9mLXR5cGVcXFwiLlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICB2YXIgY2FjaGUgPSB7XG4gICAga2V5OiBrZXksXG4gICAgc2hlZXQ6IG5ldyBTdHlsZVNoZWV0KHtcbiAgICAgIGtleToga2V5LFxuICAgICAgY29udGFpbmVyOiBjb250YWluZXIsXG4gICAgICBub25jZTogb3B0aW9ucy5ub25jZSxcbiAgICAgIHNwZWVkeTogb3B0aW9ucy5zcGVlZHlcbiAgICB9KSxcbiAgICBub25jZTogb3B0aW9ucy5ub25jZSxcbiAgICBpbnNlcnRlZDogaW5zZXJ0ZWQsXG4gICAgcmVnaXN0ZXJlZDoge30sXG4gICAgaW5zZXJ0OiBfaW5zZXJ0XG4gIH07XG4gIHJldHVybiBjYWNoZTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUNhY2hlO1xuIiwidmFyIGlzQnJvd3NlciA9IFwib2JqZWN0XCIgIT09ICd1bmRlZmluZWQnO1xuZnVuY3Rpb24gZ2V0UmVnaXN0ZXJlZFN0eWxlcyhyZWdpc3RlcmVkLCByZWdpc3RlcmVkU3R5bGVzLCBjbGFzc05hbWVzKSB7XG4gIHZhciByYXdDbGFzc05hbWUgPSAnJztcbiAgY2xhc3NOYW1lcy5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xuICAgIGlmIChyZWdpc3RlcmVkW2NsYXNzTmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVnaXN0ZXJlZFN0eWxlcy5wdXNoKHJlZ2lzdGVyZWRbY2xhc3NOYW1lXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJhd0NsYXNzTmFtZSArPSBjbGFzc05hbWUgKyBcIiBcIjtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmF3Q2xhc3NOYW1lO1xufVxudmFyIGluc2VydFN0eWxlcyA9IGZ1bmN0aW9uIGluc2VydFN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZCwgaXNTdHJpbmdUYWcpIHtcbiAgdmFyIGNsYXNzTmFtZSA9IGNhY2hlLmtleSArIFwiLVwiICsgc2VyaWFsaXplZC5uYW1lO1xuXG4gIGlmICggLy8gd2Ugb25seSBuZWVkIHRvIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSByZWdpc3RlcmVkIGNhY2hlIGlmIHRoZVxuICAvLyBjbGFzcyBuYW1lIGNvdWxkIGJlIHVzZWQgZnVydGhlciBkb3duXG4gIC8vIHRoZSB0cmVlIGJ1dCBpZiBpdCdzIGEgc3RyaW5nIHRhZywgd2Uga25vdyBpdCB3b24ndFxuICAvLyBzbyB3ZSBkb24ndCBoYXZlIHRvIGFkZCBpdCB0byByZWdpc3RlcmVkIGNhY2hlLlxuICAvLyB0aGlzIGltcHJvdmVzIG1lbW9yeSB1c2FnZSBzaW5jZSB3ZSBjYW4gYXZvaWQgc3RvcmluZyB0aGUgd2hvbGUgc3R5bGUgc3RyaW5nXG4gIChpc1N0cmluZ1RhZyA9PT0gZmFsc2UgfHwgLy8gd2UgbmVlZCB0byBhbHdheXMgc3RvcmUgaXQgaWYgd2UncmUgaW4gY29tcGF0IG1vZGUgYW5kXG4gIC8vIGluIG5vZGUgc2luY2UgZW1vdGlvbi1zZXJ2ZXIgcmVsaWVzIG9uIHdoZXRoZXIgYSBzdHlsZSBpcyBpblxuICAvLyB0aGUgcmVnaXN0ZXJlZCBjYWNoZSB0byBrbm93IHdoZXRoZXIgYSBzdHlsZSBpcyBnbG9iYWwgb3Igbm90XG4gIC8vIGFsc28sIG5vdGUgdGhhdCB0aGlzIGNoZWNrIHdpbGwgYmUgZGVhZCBjb2RlIGVsaW1pbmF0ZWQgaW4gdGhlIGJyb3dzZXJcbiAgaXNCcm93c2VyID09PSBmYWxzZSAmJiBjYWNoZS5jb21wYXQgIT09IHVuZGVmaW5lZCkgJiYgY2FjaGUucmVnaXN0ZXJlZFtjbGFzc05hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICBjYWNoZS5yZWdpc3RlcmVkW2NsYXNzTmFtZV0gPSBzZXJpYWxpemVkLnN0eWxlcztcbiAgfVxuXG4gIGlmIChjYWNoZS5pbnNlcnRlZFtzZXJpYWxpemVkLm5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgY3VycmVudCA9IHNlcmlhbGl6ZWQ7XG5cbiAgICBkbyB7XG4gICAgICB2YXIgbWF5YmVTdHlsZXMgPSBjYWNoZS5pbnNlcnQoXCIuXCIgKyBjbGFzc05hbWUsIGN1cnJlbnQsIGNhY2hlLnNoZWV0LCB0cnVlKTtcblxuICAgICAgY3VycmVudCA9IGN1cnJlbnQubmV4dDtcbiAgICB9IHdoaWxlIChjdXJyZW50ICE9PSB1bmRlZmluZWQpO1xuICB9XG59O1xuXG5leHBvcnQgeyBnZXRSZWdpc3RlcmVkU3R5bGVzLCBpbnNlcnRTdHlsZXMgfTtcbiIsIi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBtdXJtdXJoYXNoMiB2aWEgaHR0cHM6Ly9naXRodWIuY29tL2dhcnljb3VydC9tdXJtdXJoYXNoLWpzL2Jsb2IvbWFzdGVyL211cm11cmhhc2gyX2djLmpzXG5mdW5jdGlvbiBtdXJtdXJoYXNoMl8zMl9nYyhzdHIpIHtcbiAgdmFyIGwgPSBzdHIubGVuZ3RoLFxuICAgICAgaCA9IGwgXiBsLFxuICAgICAgaSA9IDAsXG4gICAgICBrO1xuXG4gIHdoaWxlIChsID49IDQpIHtcbiAgICBrID0gc3RyLmNoYXJDb2RlQXQoaSkgJiAweGZmIHwgKHN0ci5jaGFyQ29kZUF0KCsraSkgJiAweGZmKSA8PCA4IHwgKHN0ci5jaGFyQ29kZUF0KCsraSkgJiAweGZmKSA8PCAxNiB8IChzdHIuY2hhckNvZGVBdCgrK2kpICYgMHhmZikgPDwgMjQ7XG4gICAgayA9IChrICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKChrID4+PiAxNikgKiAweDViZDFlOTk1ICYgMHhmZmZmKSA8PCAxNik7XG4gICAgayBePSBrID4+PiAyNDtcbiAgICBrID0gKGsgJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoKGsgPj4+IDE2KSAqIDB4NWJkMWU5OTUgJiAweGZmZmYpIDw8IDE2KTtcbiAgICBoID0gKGggJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoKGggPj4+IDE2KSAqIDB4NWJkMWU5OTUgJiAweGZmZmYpIDw8IDE2KSBeIGs7XG4gICAgbCAtPSA0O1xuICAgICsraTtcbiAgfVxuXG4gIHN3aXRjaCAobCkge1xuICAgIGNhc2UgMzpcbiAgICAgIGggXj0gKHN0ci5jaGFyQ29kZUF0KGkgKyAyKSAmIDB4ZmYpIDw8IDE2O1xuXG4gICAgY2FzZSAyOlxuICAgICAgaCBePSAoc3RyLmNoYXJDb2RlQXQoaSArIDEpICYgMHhmZikgPDwgODtcblxuICAgIGNhc2UgMTpcbiAgICAgIGggXj0gc3RyLmNoYXJDb2RlQXQoaSkgJiAweGZmO1xuICAgICAgaCA9IChoICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKChoID4+PiAxNikgKiAweDViZDFlOTk1ICYgMHhmZmZmKSA8PCAxNik7XG4gIH1cblxuICBoIF49IGggPj4+IDEzO1xuICBoID0gKGggJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoKGggPj4+IDE2KSAqIDB4NWJkMWU5OTUgJiAweGZmZmYpIDw8IDE2KTtcbiAgaCBePSBoID4+PiAxNTtcbiAgcmV0dXJuIChoID4+PiAwKS50b1N0cmluZygzNik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG11cm11cmhhc2gyXzMyX2djO1xuIiwidmFyIHVuaXRsZXNzS2V5cyA9IHtcbiAgYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6IDEsXG4gIGJvcmRlckltYWdlT3V0c2V0OiAxLFxuICBib3JkZXJJbWFnZVNsaWNlOiAxLFxuICBib3JkZXJJbWFnZVdpZHRoOiAxLFxuICBib3hGbGV4OiAxLFxuICBib3hGbGV4R3JvdXA6IDEsXG4gIGJveE9yZGluYWxHcm91cDogMSxcbiAgY29sdW1uQ291bnQ6IDEsXG4gIGNvbHVtbnM6IDEsXG4gIGZsZXg6IDEsXG4gIGZsZXhHcm93OiAxLFxuICBmbGV4UG9zaXRpdmU6IDEsXG4gIGZsZXhTaHJpbms6IDEsXG4gIGZsZXhOZWdhdGl2ZTogMSxcbiAgZmxleE9yZGVyOiAxLFxuICBncmlkUm93OiAxLFxuICBncmlkUm93RW5kOiAxLFxuICBncmlkUm93U3BhbjogMSxcbiAgZ3JpZFJvd1N0YXJ0OiAxLFxuICBncmlkQ29sdW1uOiAxLFxuICBncmlkQ29sdW1uRW5kOiAxLFxuICBncmlkQ29sdW1uU3BhbjogMSxcbiAgZ3JpZENvbHVtblN0YXJ0OiAxLFxuICBtc0dyaWRSb3c6IDEsXG4gIG1zR3JpZFJvd1NwYW46IDEsXG4gIG1zR3JpZENvbHVtbjogMSxcbiAgbXNHcmlkQ29sdW1uU3BhbjogMSxcbiAgZm9udFdlaWdodDogMSxcbiAgbGluZUhlaWdodDogMSxcbiAgb3BhY2l0eTogMSxcbiAgb3JkZXI6IDEsXG4gIG9ycGhhbnM6IDEsXG4gIHRhYlNpemU6IDEsXG4gIHdpZG93czogMSxcbiAgekluZGV4OiAxLFxuICB6b29tOiAxLFxuICBXZWJraXRMaW5lQ2xhbXA6IDEsXG4gIC8vIFNWRy1yZWxhdGVkIHByb3BlcnRpZXNcbiAgZmlsbE9wYWNpdHk6IDEsXG4gIGZsb29kT3BhY2l0eTogMSxcbiAgc3RvcE9wYWNpdHk6IDEsXG4gIHN0cm9rZURhc2hhcnJheTogMSxcbiAgc3Ryb2tlRGFzaG9mZnNldDogMSxcbiAgc3Ryb2tlTWl0ZXJsaW1pdDogMSxcbiAgc3Ryb2tlT3BhY2l0eTogMSxcbiAgc3Ryb2tlV2lkdGg6IDFcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHVuaXRsZXNzS2V5cztcbiIsImZ1bmN0aW9uIG1lbW9pemUoZm4pIHtcbiAgdmFyIGNhY2hlID0ge307XG4gIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgaWYgKGNhY2hlW2FyZ10gPT09IHVuZGVmaW5lZCkgY2FjaGVbYXJnXSA9IGZuKGFyZyk7XG4gICAgcmV0dXJuIGNhY2hlW2FyZ107XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1lbW9pemU7XG4iLCJpbXBvcnQgaGFzaFN0cmluZyBmcm9tICdAZW1vdGlvbi9oYXNoJztcbmltcG9ydCB1bml0bGVzcyBmcm9tICdAZW1vdGlvbi91bml0bGVzcyc7XG5pbXBvcnQgbWVtb2l6ZSBmcm9tICdAZW1vdGlvbi9tZW1vaXplJztcblxudmFyIElMTEVHQUxfRVNDQVBFX1NFUVVFTkNFX0VSUk9SID0gXCJZb3UgaGF2ZSBpbGxlZ2FsIGVzY2FwZSBzZXF1ZW5jZSBpbiB5b3VyIHRlbXBsYXRlIGxpdGVyYWwsIG1vc3QgbGlrZWx5IGluc2lkZSBjb250ZW50J3MgcHJvcGVydHkgdmFsdWUuXFxuQmVjYXVzZSB5b3Ugd3JpdGUgeW91ciBDU1MgaW5zaWRlIGEgSmF2YVNjcmlwdCBzdHJpbmcgeW91IGFjdHVhbGx5IGhhdmUgdG8gZG8gZG91YmxlIGVzY2FwaW5nLCBzbyBmb3IgZXhhbXBsZSBcXFwiY29udGVudDogJ1xcXFwwMGQ3JztcXFwiIHNob3VsZCBiZWNvbWUgXFxcImNvbnRlbnQ6ICdcXFxcXFxcXDAwZDcnO1xcXCIuXFxuWW91IGNhbiByZWFkIG1vcmUgYWJvdXQgdGhpcyBoZXJlOlxcbmh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL1RlbXBsYXRlX2xpdGVyYWxzI0VTMjAxOF9yZXZpc2lvbl9vZl9pbGxlZ2FsX2VzY2FwZV9zZXF1ZW5jZXNcIjtcbnZhciBVTkRFRklORURfQVNfT0JKRUNUX0tFWV9FUlJPUiA9IFwiWW91IGhhdmUgcGFzc2VkIGluIGZhbHN5IHZhbHVlIGFzIHN0eWxlIG9iamVjdCdzIGtleSAoY2FuIGhhcHBlbiB3aGVuIGluIGV4YW1wbGUgeW91IHBhc3MgdW5leHBvcnRlZCBjb21wb25lbnQgYXMgY29tcHV0ZWQga2V5KS5cIjtcbnZhciBoeXBoZW5hdGVSZWdleCA9IC9bQS1aXXxebXMvZztcbnZhciBhbmltYXRpb25SZWdleCA9IC9fRU1PXyhbXl9dKz8pXyhbXl0qPylfRU1PXy9nO1xuXG52YXIgaXNDdXN0b21Qcm9wZXJ0eSA9IGZ1bmN0aW9uIGlzQ3VzdG9tUHJvcGVydHkocHJvcGVydHkpIHtcbiAgcmV0dXJuIHByb3BlcnR5LmNoYXJDb2RlQXQoMSkgPT09IDQ1O1xufTtcblxudmFyIGlzUHJvY2Vzc2FibGVWYWx1ZSA9IGZ1bmN0aW9uIGlzUHJvY2Vzc2FibGVWYWx1ZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgIT09ICdib29sZWFuJztcbn07XG5cbnZhciBwcm9jZXNzU3R5bGVOYW1lID0gbWVtb2l6ZShmdW5jdGlvbiAoc3R5bGVOYW1lKSB7XG4gIHJldHVybiBpc0N1c3RvbVByb3BlcnR5KHN0eWxlTmFtZSkgPyBzdHlsZU5hbWUgOiBzdHlsZU5hbWUucmVwbGFjZShoeXBoZW5hdGVSZWdleCwgJy0kJicpLnRvTG93ZXJDYXNlKCk7XG59KTtcblxudmFyIHByb2Nlc3NTdHlsZVZhbHVlID0gZnVuY3Rpb24gcHJvY2Vzc1N0eWxlVmFsdWUoa2V5LCB2YWx1ZSkge1xuICBzd2l0Y2ggKGtleSkge1xuICAgIGNhc2UgJ2FuaW1hdGlvbic6XG4gICAgY2FzZSAnYW5pbWF0aW9uTmFtZSc6XG4gICAgICB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoYW5pbWF0aW9uUmVnZXgsIGZ1bmN0aW9uIChtYXRjaCwgcDEsIHAyKSB7XG4gICAgICAgICAgICBjdXJzb3IgPSB7XG4gICAgICAgICAgICAgIG5hbWU6IHAxLFxuICAgICAgICAgICAgICBzdHlsZXM6IHAyLFxuICAgICAgICAgICAgICBuZXh0OiBjdXJzb3JcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gcDE7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgfVxuXG4gIGlmICh1bml0bGVzc1trZXldICE9PSAxICYmICFpc0N1c3RvbVByb3BlcnR5KGtleSkgJiYgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiB2YWx1ZSAhPT0gMCkge1xuICAgIHJldHVybiB2YWx1ZSArICdweCc7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgY29udGVudFZhbHVlUGF0dGVybiA9IC8oYXR0cnxjYWxjfGNvdW50ZXJzP3x1cmwpXFwoLztcbiAgdmFyIGNvbnRlbnRWYWx1ZXMgPSBbJ25vcm1hbCcsICdub25lJywgJ2NvdW50ZXInLCAnb3Blbi1xdW90ZScsICdjbG9zZS1xdW90ZScsICduby1vcGVuLXF1b3RlJywgJ25vLWNsb3NlLXF1b3RlJywgJ2luaXRpYWwnLCAnaW5oZXJpdCcsICd1bnNldCddO1xuICB2YXIgb2xkUHJvY2Vzc1N0eWxlVmFsdWUgPSBwcm9jZXNzU3R5bGVWYWx1ZTtcbiAgdmFyIG1zUGF0dGVybiA9IC9eLW1zLS87XG4gIHZhciBoeXBoZW5QYXR0ZXJuID0gLy0oLikvZztcbiAgdmFyIGh5cGhlbmF0ZWRDYWNoZSA9IHt9O1xuXG4gIHByb2Nlc3NTdHlsZVZhbHVlID0gZnVuY3Rpb24gcHJvY2Vzc1N0eWxlVmFsdWUoa2V5LCB2YWx1ZSkge1xuICAgIGlmIChrZXkgPT09ICdjb250ZW50Jykge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgfHwgY29udGVudFZhbHVlcy5pbmRleE9mKHZhbHVlKSA9PT0gLTEgJiYgIWNvbnRlbnRWYWx1ZVBhdHRlcm4udGVzdCh2YWx1ZSkgJiYgKHZhbHVlLmNoYXJBdCgwKSAhPT0gdmFsdWUuY2hhckF0KHZhbHVlLmxlbmd0aCAtIDEpIHx8IHZhbHVlLmNoYXJBdCgwKSAhPT0gJ1wiJyAmJiB2YWx1ZS5jaGFyQXQoMCkgIT09IFwiJ1wiKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiWW91IHNlZW0gdG8gYmUgdXNpbmcgYSB2YWx1ZSBmb3IgJ2NvbnRlbnQnIHdpdGhvdXQgcXVvdGVzLCB0cnkgcmVwbGFjaW5nIGl0IHdpdGggYGNvbnRlbnQ6ICdcXFwiXCIgKyB2YWx1ZSArIFwiXFxcIidgXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcm9jZXNzZWQgPSBvbGRQcm9jZXNzU3R5bGVWYWx1ZShrZXksIHZhbHVlKTtcblxuICAgIGlmIChwcm9jZXNzZWQgIT09ICcnICYmICFpc0N1c3RvbVByb3BlcnR5KGtleSkgJiYga2V5LmluZGV4T2YoJy0nKSAhPT0gLTEgJiYgaHlwaGVuYXRlZENhY2hlW2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgaHlwaGVuYXRlZENhY2hlW2tleV0gPSB0cnVlO1xuICAgICAgY29uc29sZS5lcnJvcihcIlVzaW5nIGtlYmFiLWNhc2UgZm9yIGNzcyBwcm9wZXJ0aWVzIGluIG9iamVjdHMgaXMgbm90IHN1cHBvcnRlZC4gRGlkIHlvdSBtZWFuIFwiICsga2V5LnJlcGxhY2UobXNQYXR0ZXJuLCAnbXMtJykucmVwbGFjZShoeXBoZW5QYXR0ZXJuLCBmdW5jdGlvbiAoc3RyLCBfY2hhcikge1xuICAgICAgICByZXR1cm4gX2NoYXIudG9VcHBlckNhc2UoKTtcbiAgICAgIH0pICsgXCI/XCIpO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9jZXNzZWQ7XG4gIH07XG59XG5cbnZhciBzaG91bGRXYXJuQWJvdXRJbnRlcnBvbGF0aW5nQ2xhc3NOYW1lRnJvbUNzcyA9IHRydWU7XG5cbmZ1bmN0aW9uIGhhbmRsZUludGVycG9sYXRpb24obWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIGludGVycG9sYXRpb24sIGNvdWxkQmVTZWxlY3RvckludGVycG9sYXRpb24pIHtcbiAgaWYgKGludGVycG9sYXRpb24gPT0gbnVsbCkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIGlmIChpbnRlcnBvbGF0aW9uLl9fZW1vdGlvbl9zdHlsZXMgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGludGVycG9sYXRpb24udG9TdHJpbmcoKSA9PT0gJ05PX0NPTVBPTkVOVF9TRUxFQ1RPUicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ29tcG9uZW50IHNlbGVjdG9ycyBjYW4gb25seSBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYmFiZWwtcGx1Z2luLWVtb3Rpb24uJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGludGVycG9sYXRpb247XG4gIH1cblxuICBzd2l0Y2ggKHR5cGVvZiBpbnRlcnBvbGF0aW9uKSB7XG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cblxuICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICB7XG4gICAgICAgIGlmIChpbnRlcnBvbGF0aW9uLmFuaW0gPT09IDEpIHtcbiAgICAgICAgICBjdXJzb3IgPSB7XG4gICAgICAgICAgICBuYW1lOiBpbnRlcnBvbGF0aW9uLm5hbWUsXG4gICAgICAgICAgICBzdHlsZXM6IGludGVycG9sYXRpb24uc3R5bGVzLFxuICAgICAgICAgICAgbmV4dDogY3Vyc29yXG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXR1cm4gaW50ZXJwb2xhdGlvbi5uYW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGludGVycG9sYXRpb24uc3R5bGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB2YXIgbmV4dCA9IGludGVycG9sYXRpb24ubmV4dDtcblxuICAgICAgICAgIGlmIChuZXh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIG5vdCB0aGUgbW9zdCBlZmZpY2llbnQgdGhpbmcgZXZlciBidXQgdGhpcyBpcyBhIHByZXR0eSByYXJlIGNhc2VcbiAgICAgICAgICAgIC8vIGFuZCB0aGVyZSB3aWxsIGJlIHZlcnkgZmV3IGl0ZXJhdGlvbnMgb2YgdGhpcyBnZW5lcmFsbHlcbiAgICAgICAgICAgIHdoaWxlIChuZXh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgY3Vyc29yID0ge1xuICAgICAgICAgICAgICAgIG5hbWU6IG5leHQubmFtZSxcbiAgICAgICAgICAgICAgICBzdHlsZXM6IG5leHQuc3R5bGVzLFxuICAgICAgICAgICAgICAgIG5leHQ6IGN1cnNvclxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICBuZXh0ID0gbmV4dC5uZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBzdHlsZXMgPSBpbnRlcnBvbGF0aW9uLnN0eWxlcyArIFwiO1wiO1xuXG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaW50ZXJwb2xhdGlvbi5tYXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgc3R5bGVzICs9IGludGVycG9sYXRpb24ubWFwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBzdHlsZXM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY3JlYXRlU3RyaW5nRnJvbU9iamVjdChtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgaW50ZXJwb2xhdGlvbik7XG4gICAgICB9XG5cbiAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICB7XG4gICAgICAgIGlmIChtZXJnZWRQcm9wcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdmFyIHByZXZpb3VzQ3Vyc29yID0gY3Vyc29yO1xuICAgICAgICAgIHZhciByZXN1bHQgPSBpbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzKTtcbiAgICAgICAgICBjdXJzb3IgPSBwcmV2aW91c0N1cnNvcjtcbiAgICAgICAgICByZXR1cm4gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgcmVzdWx0LCBjb3VsZEJlU2VsZWN0b3JJbnRlcnBvbGF0aW9uKTtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignRnVuY3Rpb25zIHRoYXQgYXJlIGludGVycG9sYXRlZCBpbiBjc3MgY2FsbHMgd2lsbCBiZSBzdHJpbmdpZmllZC5cXG4nICsgJ0lmIHlvdSB3YW50IHRvIGhhdmUgYSBjc3MgY2FsbCBiYXNlZCBvbiBwcm9wcywgY3JlYXRlIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgY3NzIGNhbGwgbGlrZSB0aGlzXFxuJyArICdsZXQgZHluYW1pY1N0eWxlID0gKHByb3BzKSA9PiBjc3NgY29sb3I6ICR7cHJvcHMuY29sb3J9YFxcbicgKyAnSXQgY2FuIGJlIGNhbGxlZCBkaXJlY3RseSB3aXRoIHByb3BzIG9yIGludGVycG9sYXRlZCBpbiBhIHN0eWxlZCBjYWxsIGxpa2UgdGhpc1xcbicgKyBcImxldCBTb21lQ29tcG9uZW50ID0gc3R5bGVkKCdkaXYnKWAke2R5bmFtaWNTdHlsZX1gXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdmFyIG1hdGNoZWQgPSBbXTtcbiAgICAgICAgdmFyIHJlcGxhY2VkID0gaW50ZXJwb2xhdGlvbi5yZXBsYWNlKGFuaW1hdGlvblJlZ2V4LCBmdW5jdGlvbiAobWF0Y2gsIHAxLCBwMikge1xuICAgICAgICAgIHZhciBmYWtlVmFyTmFtZSA9IFwiYW5pbWF0aW9uXCIgKyBtYXRjaGVkLmxlbmd0aDtcbiAgICAgICAgICBtYXRjaGVkLnB1c2goXCJjb25zdCBcIiArIGZha2VWYXJOYW1lICsgXCIgPSBrZXlmcmFtZXNgXCIgKyBwMi5yZXBsYWNlKC9eQGtleWZyYW1lcyBhbmltYXRpb24tXFx3Ky8sICcnKSArIFwiYFwiKTtcbiAgICAgICAgICByZXR1cm4gXCIke1wiICsgZmFrZVZhck5hbWUgKyBcIn1cIjtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKG1hdGNoZWQubGVuZ3RoKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignYGtleWZyYW1lc2Agb3V0cHV0IGdvdCBpbnRlcnBvbGF0ZWQgaW50byBwbGFpbiBzdHJpbmcsIHBsZWFzZSB3cmFwIGl0IHdpdGggYGNzc2AuXFxuXFxuJyArICdJbnN0ZWFkIG9mIGRvaW5nIHRoaXM6XFxuXFxuJyArIFtdLmNvbmNhdChtYXRjaGVkLCBbXCJgXCIgKyByZXBsYWNlZCArIFwiYFwiXSkuam9pbignXFxuJykgKyAnXFxuXFxuWW91IHNob3VsZCB3cmFwIGl0IHdpdGggYGNzc2AgbGlrZSB0aGlzOlxcblxcbicgKyAoXCJjc3NgXCIgKyByZXBsYWNlZCArIFwiYFwiKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG4gIH0gLy8gZmluYWxpemUgc3RyaW5nIHZhbHVlcyAocmVndWxhciBzdHJpbmdzIGFuZCBmdW5jdGlvbnMgaW50ZXJwb2xhdGVkIGludG8gY3NzIGNhbGxzKVxuXG5cbiAgaWYgKHJlZ2lzdGVyZWQgPT0gbnVsbCkge1xuICAgIHJldHVybiBpbnRlcnBvbGF0aW9uO1xuICB9XG5cbiAgdmFyIGNhY2hlZCA9IHJlZ2lzdGVyZWRbaW50ZXJwb2xhdGlvbl07XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY291bGRCZVNlbGVjdG9ySW50ZXJwb2xhdGlvbiAmJiBzaG91bGRXYXJuQWJvdXRJbnRlcnBvbGF0aW5nQ2xhc3NOYW1lRnJvbUNzcyAmJiBjYWNoZWQgIT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0ludGVycG9sYXRpbmcgYSBjbGFzc05hbWUgZnJvbSBjc3NgYCBpcyBub3QgcmVjb21tZW5kZWQgYW5kIHdpbGwgY2F1c2UgcHJvYmxlbXMgd2l0aCBjb21wb3NpdGlvbi5cXG4nICsgJ0ludGVycG9sYXRpbmcgYSBjbGFzc05hbWUgZnJvbSBjc3NgYCB3aWxsIGJlIGNvbXBsZXRlbHkgdW5zdXBwb3J0ZWQgaW4gYSBmdXR1cmUgbWFqb3IgdmVyc2lvbiBvZiBFbW90aW9uJyk7XG4gICAgc2hvdWxkV2FybkFib3V0SW50ZXJwb2xhdGluZ0NsYXNzTmFtZUZyb21Dc3MgPSBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBjYWNoZWQgIT09IHVuZGVmaW5lZCAmJiAhY291bGRCZVNlbGVjdG9ySW50ZXJwb2xhdGlvbiA/IGNhY2hlZCA6IGludGVycG9sYXRpb247XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0cmluZ0Zyb21PYmplY3QobWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIG9iaikge1xuICB2YXIgc3RyaW5nID0gJyc7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqLmxlbmd0aDsgaSsrKSB7XG4gICAgICBzdHJpbmcgKz0gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgb2JqW2ldLCBmYWxzZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAodmFyIF9rZXkgaW4gb2JqKSB7XG4gICAgICB2YXIgdmFsdWUgPSBvYmpbX2tleV07XG5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIGlmIChyZWdpc3RlcmVkICE9IG51bGwgJiYgcmVnaXN0ZXJlZFt2YWx1ZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHN0cmluZyArPSBfa2V5ICsgXCJ7XCIgKyByZWdpc3RlcmVkW3ZhbHVlXSArIFwifVwiO1xuICAgICAgICB9IGVsc2UgaWYgKGlzUHJvY2Vzc2FibGVWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgICAgICBzdHJpbmcgKz0gcHJvY2Vzc1N0eWxlTmFtZShfa2V5KSArIFwiOlwiICsgcHJvY2Vzc1N0eWxlVmFsdWUoX2tleSwgdmFsdWUpICsgXCI7XCI7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChfa2V5ID09PSAnTk9fQ09NUE9ORU5UX1NFTEVDVE9SJyAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb21wb25lbnQgc2VsZWN0b3JzIGNhbiBvbmx5IGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBiYWJlbC1wbHVnaW4tZW1vdGlvbi4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB0eXBlb2YgdmFsdWVbMF0gPT09ICdzdHJpbmcnICYmIChyZWdpc3RlcmVkID09IG51bGwgfHwgcmVnaXN0ZXJlZFt2YWx1ZVswXV0gPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgdmFsdWUubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBpZiAoaXNQcm9jZXNzYWJsZVZhbHVlKHZhbHVlW19pXSkpIHtcbiAgICAgICAgICAgICAgc3RyaW5nICs9IHByb2Nlc3NTdHlsZU5hbWUoX2tleSkgKyBcIjpcIiArIHByb2Nlc3NTdHlsZVZhbHVlKF9rZXksIHZhbHVlW19pXSkgKyBcIjtcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIGludGVycG9sYXRlZCA9IGhhbmRsZUludGVycG9sYXRpb24obWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIHZhbHVlLCBmYWxzZSk7XG5cbiAgICAgICAgICBzd2l0Y2ggKF9rZXkpIHtcbiAgICAgICAgICAgIGNhc2UgJ2FuaW1hdGlvbic6XG4gICAgICAgICAgICBjYXNlICdhbmltYXRpb25OYW1lJzpcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0cmluZyArPSBwcm9jZXNzU3R5bGVOYW1lKF9rZXkpICsgXCI6XCIgKyBpbnRlcnBvbGF0ZWQgKyBcIjtcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgX2tleSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoVU5ERUZJTkVEX0FTX09CSkVDVF9LRVlfRVJST1IpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHN0cmluZyArPSBfa2V5ICsgXCJ7XCIgKyBpbnRlcnBvbGF0ZWQgKyBcIn1cIjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdHJpbmc7XG59XG5cbnZhciBsYWJlbFBhdHRlcm4gPSAvbGFiZWw6XFxzKihbXlxccztcXG57XSspXFxzKjsvZztcbnZhciBzb3VyY2VNYXBQYXR0ZXJuO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBzb3VyY2VNYXBQYXR0ZXJuID0gL1xcL1xcKiNcXHNzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb25cXC9qc29uO1xcUytcXHMrXFwqXFwvLztcbn0gLy8gdGhpcyBpcyB0aGUgY3Vyc29yIGZvciBrZXlmcmFtZXNcbi8vIGtleWZyYW1lcyBhcmUgc3RvcmVkIG9uIHRoZSBTZXJpYWxpemVkU3R5bGVzIG9iamVjdCBhcyBhIGxpbmtlZCBsaXN0XG5cblxudmFyIGN1cnNvcjtcbnZhciBzZXJpYWxpemVTdHlsZXMgPSBmdW5jdGlvbiBzZXJpYWxpemVTdHlsZXMoYXJncywgcmVnaXN0ZXJlZCwgbWVyZ2VkUHJvcHMpIHtcbiAgaWYgKGFyZ3MubGVuZ3RoID09PSAxICYmIHR5cGVvZiBhcmdzWzBdID09PSAnb2JqZWN0JyAmJiBhcmdzWzBdICE9PSBudWxsICYmIGFyZ3NbMF0uc3R5bGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gYXJnc1swXTtcbiAgfVxuXG4gIHZhciBzdHJpbmdNb2RlID0gdHJ1ZTtcbiAgdmFyIHN0eWxlcyA9ICcnO1xuICBjdXJzb3IgPSB1bmRlZmluZWQ7XG4gIHZhciBzdHJpbmdzID0gYXJnc1swXTtcblxuICBpZiAoc3RyaW5ncyA9PSBudWxsIHx8IHN0cmluZ3MucmF3ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdHJpbmdNb2RlID0gZmFsc2U7XG4gICAgc3R5bGVzICs9IGhhbmRsZUludGVycG9sYXRpb24obWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIHN0cmluZ3MsIGZhbHNlKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBzdHJpbmdzWzBdID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoSUxMRUdBTF9FU0NBUEVfU0VRVUVOQ0VfRVJST1IpO1xuICAgIH1cblxuICAgIHN0eWxlcyArPSBzdHJpbmdzWzBdO1xuICB9IC8vIHdlIHN0YXJ0IGF0IDEgc2luY2Ugd2UndmUgYWxyZWFkeSBoYW5kbGVkIHRoZSBmaXJzdCBhcmdcblxuXG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgIHN0eWxlcyArPSBoYW5kbGVJbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCBhcmdzW2ldLCBzdHlsZXMuY2hhckNvZGVBdChzdHlsZXMubGVuZ3RoIC0gMSkgPT09IDQ2KTtcblxuICAgIGlmIChzdHJpbmdNb2RlKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBzdHJpbmdzW2ldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihJTExFR0FMX0VTQ0FQRV9TRVFVRU5DRV9FUlJPUik7XG4gICAgICB9XG5cbiAgICAgIHN0eWxlcyArPSBzdHJpbmdzW2ldO1xuICAgIH1cbiAgfVxuXG4gIHZhciBzb3VyY2VNYXA7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBzdHlsZXMgPSBzdHlsZXMucmVwbGFjZShzb3VyY2VNYXBQYXR0ZXJuLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgIHNvdXJjZU1hcCA9IG1hdGNoO1xuICAgICAgcmV0dXJuICcnO1xuICAgIH0pO1xuICB9IC8vIHVzaW5nIGEgZ2xvYmFsIHJlZ2V4IHdpdGggLmV4ZWMgaXMgc3RhdGVmdWwgc28gbGFzdEluZGV4IGhhcyB0byBiZSByZXNldCBlYWNoIHRpbWVcblxuXG4gIGxhYmVsUGF0dGVybi5sYXN0SW5kZXggPSAwO1xuICB2YXIgaWRlbnRpZmllck5hbWUgPSAnJztcbiAgdmFyIG1hdGNoOyAvLyBodHRwczovL2VzYmVuY2guY29tL2JlbmNoLzViODA5YzJjZjI5NDk4MDBhMGY2MWZiNVxuXG4gIHdoaWxlICgobWF0Y2ggPSBsYWJlbFBhdHRlcm4uZXhlYyhzdHlsZXMpKSAhPT0gbnVsbCkge1xuICAgIGlkZW50aWZpZXJOYW1lICs9ICctJyArIC8vICRGbG93Rml4TWUgd2Uga25vdyBpdCdzIG5vdCBudWxsXG4gICAgbWF0Y2hbMV07XG4gIH1cblxuICB2YXIgbmFtZSA9IGhhc2hTdHJpbmcoc3R5bGVzKSArIGlkZW50aWZpZXJOYW1lO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gJEZsb3dGaXhNZSBTZXJpYWxpemVkU3R5bGVzIHR5cGUgZG9lc24ndCBoYXZlIHRvU3RyaW5nIHByb3BlcnR5IChhbmQgd2UgZG9uJ3Qgd2FudCB0byBhZGQgaXQpXG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBzdHlsZXM6IHN0eWxlcyxcbiAgICAgIG1hcDogc291cmNlTWFwLFxuICAgICAgbmV4dDogY3Vyc29yLFxuICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gXCJZb3UgaGF2ZSB0cmllZCB0byBzdHJpbmdpZnkgb2JqZWN0IHJldHVybmVkIGZyb20gYGNzc2AgZnVuY3Rpb24uIEl0IGlzbid0IHN1cHBvc2VkIHRvIGJlIHVzZWQgZGlyZWN0bHkgKGUuZy4gYXMgdmFsdWUgb2YgdGhlIGBjbGFzc05hbWVgIHByb3ApLCBidXQgcmF0aGVyIGhhbmRlZCB0byBlbW90aW9uIHNvIGl0IGNhbiBoYW5kbGUgaXQgKGUuZy4gYXMgdmFsdWUgb2YgYGNzc2AgcHJvcCkuXCI7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbmFtZTogbmFtZSxcbiAgICBzdHlsZXM6IHN0eWxlcyxcbiAgICBuZXh0OiBjdXJzb3JcbiAgfTtcbn07XG5cbmV4cG9ydCB7IHNlcmlhbGl6ZVN0eWxlcyB9O1xuIiwiaW1wb3J0IHsgc2VyaWFsaXplU3R5bGVzIH0gZnJvbSAnQGVtb3Rpb24vc2VyaWFsaXplJztcblxuZnVuY3Rpb24gY3NzKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIHNlcmlhbGl6ZVN0eWxlcyhhcmdzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3NzO1xuIiwiaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNMb29zZSc7XG5pbXBvcnQgeyBjcmVhdGVDb250ZXh0LCBmb3J3YXJkUmVmLCBjcmVhdGVFbGVtZW50LCBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3JlYXRlQ2FjaGUgZnJvbSAnQGVtb3Rpb24vY2FjaGUnO1xuaW1wb3J0IHsgZ2V0UmVnaXN0ZXJlZFN0eWxlcywgaW5zZXJ0U3R5bGVzIH0gZnJvbSAnQGVtb3Rpb24vdXRpbHMnO1xuaW1wb3J0IHsgc2VyaWFsaXplU3R5bGVzIH0gZnJvbSAnQGVtb3Rpb24vc2VyaWFsaXplJztcbmltcG9ydCB7IFN0eWxlU2hlZXQgfSBmcm9tICdAZW1vdGlvbi9zaGVldCc7XG5pbXBvcnQgY3NzIGZyb20gJ0BlbW90aW9uL2Nzcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGNzcyB9IGZyb20gJ0BlbW90aW9uL2Nzcyc7XG5cbnZhciBFbW90aW9uQ2FjaGVDb250ZXh0ID0gY3JlYXRlQ29udGV4dCggLy8gd2UncmUgZG9pbmcgdGhpcyB0byBhdm9pZCBwcmVjb25zdHJ1Y3QncyBkZWFkIGNvZGUgZWxpbWluYXRpb24gaW4gdGhpcyBvbmUgY2FzZVxuLy8gYmVjYXVzZSB0aGlzIG1vZHVsZSBpcyBwcmltYXJpbHkgaW50ZW5kZWQgZm9yIHRoZSBicm93c2VyIGFuZCBub2RlXG4vLyBidXQgaXQncyBhbHNvIHJlcXVpcmVkIGluIHJlYWN0IG5hdGl2ZSBhbmQgc2ltaWxhciBlbnZpcm9ubWVudHMgc29tZXRpbWVzXG4vLyBhbmQgd2UgY291bGQgaGF2ZSBhIHNwZWNpYWwgYnVpbGQganVzdCBmb3IgdGhhdFxuLy8gYnV0IHRoaXMgaXMgbXVjaCBlYXNpZXIgYW5kIHRoZSBuYXRpdmUgcGFja2FnZXNcbi8vIG1pZ2h0IHVzZSBhIGRpZmZlcmVudCB0aGVtZSBjb250ZXh0IGluIHRoZSBmdXR1cmUgYW55d2F5XG50eXBlb2YgSFRNTEVsZW1lbnQgIT09ICd1bmRlZmluZWQnID8gY3JlYXRlQ2FjaGUoKSA6IG51bGwpO1xudmFyIFRoZW1lQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQoe30pO1xudmFyIENhY2hlUHJvdmlkZXIgPSBFbW90aW9uQ2FjaGVDb250ZXh0LlByb3ZpZGVyO1xuXG52YXIgd2l0aEVtb3Rpb25DYWNoZSA9IGZ1bmN0aW9uIHdpdGhFbW90aW9uQ2FjaGUoZnVuYykge1xuICB2YXIgcmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKHByb3BzLCByZWYpIHtcbiAgICByZXR1cm4gY3JlYXRlRWxlbWVudChFbW90aW9uQ2FjaGVDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY2FjaGUpIHtcbiAgICAgIHJldHVybiBmdW5jKHByb3BzLCBjYWNoZSwgcmVmKTtcbiAgICB9KTtcbiAgfTsgLy8gJEZsb3dGaXhNZVxuXG5cbiAgcmV0dXJuIGZvcndhcmRSZWYocmVuZGVyKTtcbn07XG5cbi8vIHRodXMgd2Ugb25seSBuZWVkIHRvIHJlcGxhY2Ugd2hhdCBpcyBhIHZhbGlkIGNoYXJhY3RlciBmb3IgSlMsIGJ1dCBub3QgZm9yIENTU1xuXG52YXIgc2FuaXRpemVJZGVudGlmaWVyID0gZnVuY3Rpb24gc2FuaXRpemVJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgcmV0dXJuIGlkZW50aWZpZXIucmVwbGFjZSgvXFwkL2csICctJyk7XG59O1xuXG52YXIgdHlwZVByb3BOYW1lID0gJ19fRU1PVElPTl9UWVBFX1BMRUFTRV9ET19OT1RfVVNFX18nO1xudmFyIGxhYmVsUHJvcE5hbWUgPSAnX19FTU9USU9OX0xBQkVMX1BMRUFTRV9ET19OT1RfVVNFX18nO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIHJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcihjYWNoZSwgcHJvcHMsIHRoZW1lLCByZWYpIHtcbiAgdmFyIGNzc1Byb3AgPSB0aGVtZSA9PT0gbnVsbCA/IHByb3BzLmNzcyA6IHByb3BzLmNzcyh0aGVtZSk7IC8vIHNvIHRoYXQgdXNpbmcgYGNzc2AgZnJvbSBgZW1vdGlvbmAgYW5kIHBhc3NpbmcgdGhlIHJlc3VsdCB0byB0aGUgY3NzIHByb3Agd29ya3NcbiAgLy8gbm90IHBhc3NpbmcgdGhlIHJlZ2lzdGVyZWQgY2FjaGUgdG8gc2VyaWFsaXplU3R5bGVzIGJlY2F1c2UgaXQgd291bGRcbiAgLy8gbWFrZSBjZXJ0YWluIGJhYmVsIG9wdGltaXNhdGlvbnMgbm90IHBvc3NpYmxlXG5cbiAgaWYgKHR5cGVvZiBjc3NQcm9wID09PSAnc3RyaW5nJyAmJiBjYWNoZS5yZWdpc3RlcmVkW2Nzc1Byb3BdICE9PSB1bmRlZmluZWQpIHtcbiAgICBjc3NQcm9wID0gY2FjaGUucmVnaXN0ZXJlZFtjc3NQcm9wXTtcbiAgfVxuXG4gIHZhciB0eXBlID0gcHJvcHNbdHlwZVByb3BOYW1lXTtcbiAgdmFyIHJlZ2lzdGVyZWRTdHlsZXMgPSBbY3NzUHJvcF07XG4gIHZhciBjbGFzc05hbWUgPSAnJztcblxuICBpZiAodHlwZW9mIHByb3BzLmNsYXNzTmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICBjbGFzc05hbWUgPSBnZXRSZWdpc3RlcmVkU3R5bGVzKGNhY2hlLnJlZ2lzdGVyZWQsIHJlZ2lzdGVyZWRTdHlsZXMsIHByb3BzLmNsYXNzTmFtZSk7XG4gIH0gZWxzZSBpZiAocHJvcHMuY2xhc3NOYW1lICE9IG51bGwpIHtcbiAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUgKyBcIiBcIjtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkID0gc2VyaWFsaXplU3R5bGVzKHJlZ2lzdGVyZWRTdHlsZXMpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHNlcmlhbGl6ZWQubmFtZS5pbmRleE9mKCctJykgPT09IC0xKSB7XG4gICAgdmFyIGxhYmVsRnJvbVN0YWNrID0gcHJvcHNbbGFiZWxQcm9wTmFtZV07XG5cbiAgICBpZiAobGFiZWxGcm9tU3RhY2spIHtcbiAgICAgIHNlcmlhbGl6ZWQgPSBzZXJpYWxpemVTdHlsZXMoW3NlcmlhbGl6ZWQsICdsYWJlbDonICsgbGFiZWxGcm9tU3RhY2sgKyAnOyddKTtcbiAgICB9XG4gIH1cblxuICB2YXIgcnVsZXMgPSBpbnNlcnRTdHlsZXMoY2FjaGUsIHNlcmlhbGl6ZWQsIHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJyk7XG4gIGNsYXNzTmFtZSArPSBjYWNoZS5rZXkgKyBcIi1cIiArIHNlcmlhbGl6ZWQubmFtZTtcbiAgdmFyIG5ld1Byb3BzID0ge307XG5cbiAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocHJvcHMsIGtleSkgJiYga2V5ICE9PSAnY3NzJyAmJiBrZXkgIT09IHR5cGVQcm9wTmFtZSAmJiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyB8fCBrZXkgIT09IGxhYmVsUHJvcE5hbWUpKSB7XG4gICAgICBuZXdQcm9wc1trZXldID0gcHJvcHNba2V5XTtcbiAgICB9XG4gIH1cblxuICBuZXdQcm9wcy5yZWYgPSByZWY7XG4gIG5ld1Byb3BzLmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcbiAgdmFyIGVsZSA9IGNyZWF0ZUVsZW1lbnQodHlwZSwgbmV3UHJvcHMpO1xuXG4gIHJldHVybiBlbGU7XG59O1xuXG52YXIgRW1vdGlvbiA9XG4vKiAjX19QVVJFX18gKi9cbndpdGhFbW90aW9uQ2FjaGUoZnVuY3Rpb24gKHByb3BzLCBjYWNoZSwgcmVmKSB7XG4gIC8vIHVzZSBDb250ZXh0LnJlYWQgZm9yIHRoZSB0aGVtZSB3aGVuIGl0J3Mgc3RhYmxlXG4gIGlmICh0eXBlb2YgcHJvcHMuY3NzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoVGhlbWVDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAodGhlbWUpIHtcbiAgICAgIHJldHVybiByZW5kZXIoY2FjaGUsIHByb3BzLCB0aGVtZSwgcmVmKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiByZW5kZXIoY2FjaGUsIHByb3BzLCBudWxsLCByZWYpO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIEVtb3Rpb24uZGlzcGxheU5hbWUgPSAnRW1vdGlvbkNzc1Byb3BJbnRlcm5hbCc7XG59IC8vICRGbG93Rml4TWVcblxuXG52YXIganN4ID0gZnVuY3Rpb24ganN4KHR5cGUsIHByb3BzKSB7XG4gIHZhciBhcmdzID0gYXJndW1lbnRzO1xuXG4gIGlmIChwcm9wcyA9PSBudWxsIHx8ICFoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3BzLCAnY3NzJykpIHtcbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiBwcm9wcy5jc3MgPT09ICdzdHJpbmcnICYmIC8vIGNoZWNrIGlmIHRoZXJlIGlzIGEgY3NzIGRlY2xhcmF0aW9uXG4gIHByb3BzLmNzcy5pbmRleE9mKCc6JykgIT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiU3RyaW5ncyBhcmUgbm90IGFsbG93ZWQgYXMgY3NzIHByb3AgdmFsdWVzLCBwbGVhc2Ugd3JhcCBpdCBpbiBhIGNzcyB0ZW1wbGF0ZSBsaXRlcmFsIGZyb20gJ0BlbW90aW9uL2NzcycgbGlrZSB0aGlzOiBjc3NgXCIgKyBwcm9wcy5jc3MgKyBcImBcIik7XG4gIH1cblxuICB2YXIgYXJnc0xlbmd0aCA9IGFyZ3MubGVuZ3RoO1xuICB2YXIgY3JlYXRlRWxlbWVudEFyZ0FycmF5ID0gbmV3IEFycmF5KGFyZ3NMZW5ndGgpO1xuICBjcmVhdGVFbGVtZW50QXJnQXJyYXlbMF0gPSBFbW90aW9uO1xuICB2YXIgbmV3UHJvcHMgPSB7fTtcblxuICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChwcm9wcywga2V5KSkge1xuICAgICAgbmV3UHJvcHNba2V5XSA9IHByb3BzW2tleV07XG4gICAgfVxuICB9XG5cbiAgbmV3UHJvcHNbdHlwZVByb3BOYW1lXSA9IHR5cGU7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IoKTtcblxuICAgIGlmIChlcnJvci5zdGFjaykge1xuICAgICAgLy8gY2hyb21lXG4gICAgICB2YXIgbWF0Y2ggPSBlcnJvci5zdGFjay5tYXRjaCgvYXQgKD86T2JqZWN0XFwufClqc3guKlxcblxccythdCAoW0EtWl1bQS1aYS16JF0rKSAvKTtcblxuICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICAvLyBzYWZhcmkgYW5kIGZpcmVmb3hcbiAgICAgICAgbWF0Y2ggPSBlcnJvci5zdGFjay5tYXRjaCgvXi4qXFxuKFtBLVpdW0EtWmEteiRdKylALyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICBuZXdQcm9wc1tsYWJlbFByb3BOYW1lXSA9IHNhbml0aXplSWRlbnRpZmllcihtYXRjaFsxXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY3JlYXRlRWxlbWVudEFyZ0FycmF5WzFdID0gbmV3UHJvcHM7XG5cbiAgZm9yICh2YXIgaSA9IDI7IGkgPCBhcmdzTGVuZ3RoOyBpKyspIHtcbiAgICBjcmVhdGVFbGVtZW50QXJnQXJyYXlbaV0gPSBhcmdzW2ldO1xuICB9IC8vICRGbG93Rml4TWVcblxuXG4gIHJldHVybiBjcmVhdGVFbGVtZW50LmFwcGx5KG51bGwsIGNyZWF0ZUVsZW1lbnRBcmdBcnJheSk7XG59O1xuXG52YXIgd2FybmVkQWJvdXRDc3NQcm9wRm9yR2xvYmFsID0gZmFsc2U7XG52YXIgR2xvYmFsID1cbi8qICNfX1BVUkVfXyAqL1xud2l0aEVtb3Rpb25DYWNoZShmdW5jdGlvbiAocHJvcHMsIGNhY2hlKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICF3YXJuZWRBYm91dENzc1Byb3BGb3JHbG9iYWwgJiYgKCAvLyBjaGVjayBmb3IgY2xhc3NOYW1lIGFzIHdlbGwgc2luY2UgdGhlIHVzZXIgaXNcbiAgLy8gcHJvYmFibHkgdXNpbmcgdGhlIGN1c3RvbSBjcmVhdGVFbGVtZW50IHdoaWNoXG4gIC8vIG1lYW5zIGl0IHdpbGwgYmUgdHVybmVkIGludG8gYSBjbGFzc05hbWUgcHJvcFxuICAvLyAkRmxvd0ZpeE1lIEkgZG9uJ3QgcmVhbGx5IHdhbnQgdG8gYWRkIGl0IHRvIHRoZSB0eXBlIHNpbmNlIGl0IHNob3VsZG4ndCBiZSB1c2VkXG4gIHByb3BzLmNsYXNzTmFtZSB8fCBwcm9wcy5jc3MpKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkl0IGxvb2tzIGxpa2UgeW91J3JlIHVzaW5nIHRoZSBjc3MgcHJvcCBvbiBHbG9iYWwsIGRpZCB5b3UgbWVhbiB0byB1c2UgdGhlIHN0eWxlcyBwcm9wIGluc3RlYWQ/XCIpO1xuICAgIHdhcm5lZEFib3V0Q3NzUHJvcEZvckdsb2JhbCA9IHRydWU7XG4gIH1cblxuICB2YXIgc3R5bGVzID0gcHJvcHMuc3R5bGVzO1xuXG4gIGlmICh0eXBlb2Ygc3R5bGVzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoVGhlbWVDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAodGhlbWUpIHtcbiAgICAgIHZhciBzZXJpYWxpemVkID0gc2VyaWFsaXplU3R5bGVzKFtzdHlsZXModGhlbWUpXSk7XG4gICAgICByZXR1cm4gY3JlYXRlRWxlbWVudChJbm5lckdsb2JhbCwge1xuICAgICAgICBzZXJpYWxpemVkOiBzZXJpYWxpemVkLFxuICAgICAgICBjYWNoZTogY2FjaGVcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWQgPSBzZXJpYWxpemVTdHlsZXMoW3N0eWxlc10pO1xuICByZXR1cm4gY3JlYXRlRWxlbWVudChJbm5lckdsb2JhbCwge1xuICAgIHNlcmlhbGl6ZWQ6IHNlcmlhbGl6ZWQsXG4gICAgY2FjaGU6IGNhY2hlXG4gIH0pO1xufSk7XG5cbi8vIG1haW50YWluIHBsYWNlIG92ZXIgcmVyZW5kZXJzLlxuLy8gaW5pdGlhbCByZW5kZXIgZnJvbSBicm93c2VyLCBpbnNlcnRCZWZvcmUgY29udGV4dC5zaGVldC50YWdzWzBdIG9yIGlmIGEgc3R5bGUgaGFzbid0IGJlZW4gaW5zZXJ0ZWQgdGhlcmUgeWV0LCBhcHBlbmRDaGlsZFxuLy8gaW5pdGlhbCBjbGllbnQtc2lkZSByZW5kZXIgZnJvbSBTU1IsIHVzZSBwbGFjZSBvZiBoeWRyYXRpbmcgdGFnXG52YXIgSW5uZXJHbG9iYWwgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoSW5uZXJHbG9iYWwsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIElubmVyR2xvYmFsKHByb3BzLCBjb250ZXh0LCB1cGRhdGVyKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCwgdXBkYXRlcikgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBJbm5lckdsb2JhbC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5zaGVldCA9IG5ldyBTdHlsZVNoZWV0KHtcbiAgICAgIGtleTogdGhpcy5wcm9wcy5jYWNoZS5rZXkgKyBcIi1nbG9iYWxcIixcbiAgICAgIG5vbmNlOiB0aGlzLnByb3BzLmNhY2hlLnNoZWV0Lm5vbmNlLFxuICAgICAgY29udGFpbmVyOiB0aGlzLnByb3BzLmNhY2hlLnNoZWV0LmNvbnRhaW5lclxuICAgIH0pOyAvLyAkRmxvd0ZpeE1lXG5cbiAgICB2YXIgbm9kZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJzdHlsZVtkYXRhLWVtb3Rpb24tXCIgKyB0aGlzLnByb3BzLmNhY2hlLmtleSArIFwiPVxcXCJcIiArIHRoaXMucHJvcHMuc2VyaWFsaXplZC5uYW1lICsgXCJcXFwiXVwiKTtcblxuICAgIGlmIChub2RlICE9PSBudWxsKSB7XG4gICAgICB0aGlzLnNoZWV0LnRhZ3MucHVzaChub2RlKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm9wcy5jYWNoZS5zaGVldC50YWdzLmxlbmd0aCkge1xuICAgICAgdGhpcy5zaGVldC5iZWZvcmUgPSB0aGlzLnByb3BzLmNhY2hlLnNoZWV0LnRhZ3NbMF07XG4gICAgfVxuXG4gICAgdGhpcy5pbnNlcnRTdHlsZXMoKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIGlmIChwcmV2UHJvcHMuc2VyaWFsaXplZC5uYW1lICE9PSB0aGlzLnByb3BzLnNlcmlhbGl6ZWQubmFtZSkge1xuICAgICAgdGhpcy5pbnNlcnRTdHlsZXMoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmluc2VydFN0eWxlcyA9IGZ1bmN0aW9uIGluc2VydFN0eWxlcyQxKCkge1xuICAgIGlmICh0aGlzLnByb3BzLnNlcmlhbGl6ZWQubmV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBpbnNlcnQga2V5ZnJhbWVzXG4gICAgICBpbnNlcnRTdHlsZXModGhpcy5wcm9wcy5jYWNoZSwgdGhpcy5wcm9wcy5zZXJpYWxpemVkLm5leHQsIHRydWUpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnNoZWV0LnRhZ3MubGVuZ3RoKSB7XG4gICAgICAvLyBpZiB0aGlzIGRvZXNuJ3QgZXhpc3QgdGhlbiBpdCB3aWxsIGJlIG51bGwgc28gdGhlIHN0eWxlIGVsZW1lbnQgd2lsbCBiZSBhcHBlbmRlZFxuICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLnNoZWV0LnRhZ3NbdGhpcy5zaGVldC50YWdzLmxlbmd0aCAtIDFdLm5leHRFbGVtZW50U2libGluZztcbiAgICAgIHRoaXMuc2hlZXQuYmVmb3JlID0gZWxlbWVudDtcbiAgICAgIHRoaXMuc2hlZXQuZmx1c2goKTtcbiAgICB9XG5cbiAgICB0aGlzLnByb3BzLmNhY2hlLmluc2VydChcIlwiLCB0aGlzLnByb3BzLnNlcmlhbGl6ZWQsIHRoaXMuc2hlZXQsIGZhbHNlKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLnNoZWV0LmZsdXNoKCk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcblxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBJbm5lckdsb2JhbDtcbn0oQ29tcG9uZW50KTtcblxudmFyIGtleWZyYW1lcyA9IGZ1bmN0aW9uIGtleWZyYW1lcygpIHtcbiAgdmFyIGluc2VydGFibGUgPSBjc3MuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICB2YXIgbmFtZSA9IFwiYW5pbWF0aW9uLVwiICsgaW5zZXJ0YWJsZS5uYW1lOyAvLyAkRmxvd0ZpeE1lXG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIHN0eWxlczogXCJAa2V5ZnJhbWVzIFwiICsgbmFtZSArIFwie1wiICsgaW5zZXJ0YWJsZS5zdHlsZXMgKyBcIn1cIixcbiAgICBhbmltOiAxLFxuICAgIHRvU3RyaW5nOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgIHJldHVybiBcIl9FTU9fXCIgKyB0aGlzLm5hbWUgKyBcIl9cIiArIHRoaXMuc3R5bGVzICsgXCJfRU1PX1wiO1xuICAgIH1cbiAgfTtcbn07XG5cbnZhciBjbGFzc25hbWVzID0gZnVuY3Rpb24gY2xhc3NuYW1lcyhhcmdzKSB7XG4gIHZhciBsZW4gPSBhcmdzLmxlbmd0aDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgY2xzID0gJyc7XG5cbiAgZm9yICg7IGkgPCBsZW47IGkrKykge1xuICAgIHZhciBhcmcgPSBhcmdzW2ldO1xuICAgIGlmIChhcmcgPT0gbnVsbCkgY29udGludWU7XG4gICAgdmFyIHRvQWRkID0gdm9pZCAwO1xuXG4gICAgc3dpdGNoICh0eXBlb2YgYXJnKSB7XG4gICAgICBjYXNlICdib29sZWFuJzpcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgIHtcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShhcmcpKSB7XG4gICAgICAgICAgICB0b0FkZCA9IGNsYXNzbmFtZXMoYXJnKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdG9BZGQgPSAnJztcblxuICAgICAgICAgICAgZm9yICh2YXIgayBpbiBhcmcpIHtcbiAgICAgICAgICAgICAgaWYgKGFyZ1trXSAmJiBrKSB7XG4gICAgICAgICAgICAgICAgdG9BZGQgJiYgKHRvQWRkICs9ICcgJyk7XG4gICAgICAgICAgICAgICAgdG9BZGQgKz0gaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHtcbiAgICAgICAgICB0b0FkZCA9IGFyZztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0b0FkZCkge1xuICAgICAgY2xzICYmIChjbHMgKz0gJyAnKTtcbiAgICAgIGNscyArPSB0b0FkZDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY2xzO1xufTtcblxuZnVuY3Rpb24gbWVyZ2UocmVnaXN0ZXJlZCwgY3NzLCBjbGFzc05hbWUpIHtcbiAgdmFyIHJlZ2lzdGVyZWRTdHlsZXMgPSBbXTtcbiAgdmFyIHJhd0NsYXNzTmFtZSA9IGdldFJlZ2lzdGVyZWRTdHlsZXMocmVnaXN0ZXJlZCwgcmVnaXN0ZXJlZFN0eWxlcywgY2xhc3NOYW1lKTtcblxuICBpZiAocmVnaXN0ZXJlZFN0eWxlcy5sZW5ndGggPCAyKSB7XG4gICAgcmV0dXJuIGNsYXNzTmFtZTtcbiAgfVxuXG4gIHJldHVybiByYXdDbGFzc05hbWUgKyBjc3MocmVnaXN0ZXJlZFN0eWxlcyk7XG59XG5cbnZhciBDbGFzc05hbWVzID0gd2l0aEVtb3Rpb25DYWNoZShmdW5jdGlvbiAocHJvcHMsIGNvbnRleHQpIHtcbiAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoVGhlbWVDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAodGhlbWUpIHtcbiAgICB2YXIgaGFzUmVuZGVyZWQgPSBmYWxzZTtcblxuICAgIHZhciBjc3MgPSBmdW5jdGlvbiBjc3MoKSB7XG4gICAgICBpZiAoaGFzUmVuZGVyZWQgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NzcyBjYW4gb25seSBiZSB1c2VkIGR1cmluZyByZW5kZXInKTtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHZhciBzZXJpYWxpemVkID0gc2VyaWFsaXplU3R5bGVzKGFyZ3MsIGNvbnRleHQucmVnaXN0ZXJlZCk7XG5cbiAgICAgIHtcbiAgICAgICAgaW5zZXJ0U3R5bGVzKGNvbnRleHQsIHNlcmlhbGl6ZWQsIGZhbHNlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRleHQua2V5ICsgXCItXCIgKyBzZXJpYWxpemVkLm5hbWU7XG4gICAgfTtcblxuICAgIHZhciBjeCA9IGZ1bmN0aW9uIGN4KCkge1xuICAgICAgaWYgKGhhc1JlbmRlcmVkICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjeCBjYW4gb25seSBiZSB1c2VkIGR1cmluZyByZW5kZXInKTtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1lcmdlKGNvbnRleHQucmVnaXN0ZXJlZCwgY3NzLCBjbGFzc25hbWVzKGFyZ3MpKTtcbiAgICB9O1xuXG4gICAgdmFyIGNvbnRlbnQgPSB7XG4gICAgICBjc3M6IGNzcyxcbiAgICAgIGN4OiBjeCxcbiAgICAgIHRoZW1lOiB0aGVtZVxuICAgIH07XG4gICAgdmFyIGVsZSA9IHByb3BzLmNoaWxkcmVuKGNvbnRlbnQpO1xuICAgIGhhc1JlbmRlcmVkID0gdHJ1ZTtcblxuICAgIHJldHVybiBlbGU7XG4gIH0pO1xufSk7XG5cbmV4cG9ydCB7IENhY2hlUHJvdmlkZXIsIENsYXNzTmFtZXMsIEdsb2JhbCwgVGhlbWVDb250ZXh0LCBqc3gsIGtleWZyYW1lcywgd2l0aEVtb3Rpb25DYWNoZSB9O1xuIiwiaW1wb3J0IF90eXBlb2YgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mJztcblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBOTyBPUFxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG52YXIgbm9vcCA9IGZ1bmN0aW9uIG5vb3AoKSB7fTtcbi8vIENsYXNzIE5hbWUgUHJlZml4ZXJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vKipcbiBTdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgY29tcG9uZW50IHN0YXRlIGZvciBzdHlsaW5nIHdpdGggY2xhc3MgbmFtZXMuXG5cbiBFeHBlY3RzIGFuIGFycmF5IG9mIHN0cmluZ3MgT1IgYSBzdHJpbmcvb2JqZWN0IHBhaXI6XG4gLSBjbGFzc05hbWUoWydjb21wJywgJ2NvbXAtYXJnJywgJ2NvbXAtYXJnLTInXSlcbiAgIEByZXR1cm5zICdyZWFjdC1zZWxlY3RfX2NvbXAgcmVhY3Qtc2VsZWN0X19jb21wLWFyZyByZWFjdC1zZWxlY3RfX2NvbXAtYXJnLTInXG4gLSBjbGFzc05hbWUoJ2NvbXAnLCB7IHNvbWU6IHRydWUsIHN0YXRlOiBmYWxzZSB9KVxuICAgQHJldHVybnMgJ3JlYWN0LXNlbGVjdF9fY29tcCByZWFjdC1zZWxlY3RfX2NvbXAtLXNvbWUnXG4qL1xuXG5mdW5jdGlvbiBhcHBseVByZWZpeFRvTmFtZShwcmVmaXgsIG5hbWUpIHtcbiAgaWYgKCFuYW1lKSB7XG4gICAgcmV0dXJuIHByZWZpeDtcbiAgfSBlbHNlIGlmIChuYW1lWzBdID09PSAnLScpIHtcbiAgICByZXR1cm4gcHJlZml4ICsgbmFtZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcHJlZml4ICsgJ19fJyArIG5hbWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2xhc3NOYW1lcyhwcmVmaXgsIHN0YXRlLCBjbGFzc05hbWUpIHtcbiAgdmFyIGFyciA9IFtjbGFzc05hbWVdO1xuXG4gIGlmIChzdGF0ZSAmJiBwcmVmaXgpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gc3RhdGUpIHtcbiAgICAgIGlmIChzdGF0ZS5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIHN0YXRlW2tleV0pIHtcbiAgICAgICAgYXJyLnB1c2goXCJcIi5jb25jYXQoYXBwbHlQcmVmaXhUb05hbWUocHJlZml4LCBrZXkpKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGFyci5maWx0ZXIoZnVuY3Rpb24gKGkpIHtcbiAgICByZXR1cm4gaTtcbiAgfSkubWFwKGZ1bmN0aW9uIChpKSB7XG4gICAgcmV0dXJuIFN0cmluZyhpKS50cmltKCk7XG4gIH0pLmpvaW4oJyAnKTtcbn0gLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBDbGVhbiBWYWx1ZVxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbnZhciBjbGVhblZhbHVlID0gZnVuY3Rpb24gY2xlYW5WYWx1ZSh2YWx1ZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHJldHVybiB2YWx1ZS5maWx0ZXIoQm9vbGVhbik7XG4gIGlmIChfdHlwZW9mKHZhbHVlKSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgIT09IG51bGwpIHJldHVybiBbdmFsdWVdO1xuICByZXR1cm4gW107XG59OyAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIEhhbmRsZSBJbnB1dCBDaGFuZ2Vcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5mdW5jdGlvbiBoYW5kbGVJbnB1dENoYW5nZShpbnB1dFZhbHVlLCBhY3Rpb25NZXRhLCBvbklucHV0Q2hhbmdlKSB7XG4gIGlmIChvbklucHV0Q2hhbmdlKSB7XG4gICAgdmFyIG5ld1ZhbHVlID0gb25JbnB1dENoYW5nZShpbnB1dFZhbHVlLCBhY3Rpb25NZXRhKTtcbiAgICBpZiAodHlwZW9mIG5ld1ZhbHVlID09PSAnc3RyaW5nJykgcmV0dXJuIG5ld1ZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIGlucHV0VmFsdWU7XG59IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gU2Nyb2xsIEhlbHBlcnNcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5mdW5jdGlvbiBpc0RvY3VtZW50RWxlbWVudChlbCkge1xuICByZXR1cm4gW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgZG9jdW1lbnQuYm9keSwgd2luZG93XS5pbmRleE9mKGVsKSA+IC0xO1xufSAvLyBOb3JtYWxpemVkIFNjcm9sbCBUb3Bcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5mdW5jdGlvbiBnZXRTY3JvbGxUb3AoZWwpIHtcbiAgaWYgKGlzRG9jdW1lbnRFbGVtZW50KGVsKSkge1xuICAgIHJldHVybiB3aW5kb3cucGFnZVlPZmZzZXQ7XG4gIH1cblxuICByZXR1cm4gZWwuc2Nyb2xsVG9wO1xufVxuZnVuY3Rpb24gc2Nyb2xsVG8oZWwsIHRvcCkge1xuICAvLyB3aXRoIGEgc2Nyb2xsIGRpc3RhbmNlLCB3ZSBwZXJmb3JtIHNjcm9sbCBvbiB0aGUgZWxlbWVudFxuICBpZiAoaXNEb2N1bWVudEVsZW1lbnQoZWwpKSB7XG4gICAgd2luZG93LnNjcm9sbFRvKDAsIHRvcCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZWwuc2Nyb2xsVG9wID0gdG9wO1xufSAvLyBHZXQgU2Nyb2xsIFBhcmVudFxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmZ1bmN0aW9uIGdldFNjcm9sbFBhcmVudChlbGVtZW50KSB7XG4gIHZhciBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG4gIHZhciBleGNsdWRlU3RhdGljUGFyZW50ID0gc3R5bGUucG9zaXRpb24gPT09ICdhYnNvbHV0ZSc7XG4gIHZhciBvdmVyZmxvd1J4ID0gLyhhdXRvfHNjcm9sbCkvO1xuICB2YXIgZG9jRWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7IC8vIHN1Y2sgaXQsIGZsb3cuLi5cblxuICBpZiAoc3R5bGUucG9zaXRpb24gPT09ICdmaXhlZCcpIHJldHVybiBkb2NFbDtcblxuICBmb3IgKHZhciBwYXJlbnQgPSBlbGVtZW50OyBwYXJlbnQgPSBwYXJlbnQucGFyZW50RWxlbWVudDspIHtcbiAgICBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUocGFyZW50KTtcblxuICAgIGlmIChleGNsdWRlU3RhdGljUGFyZW50ICYmIHN0eWxlLnBvc2l0aW9uID09PSAnc3RhdGljJykge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKG92ZXJmbG93UngudGVzdChzdHlsZS5vdmVyZmxvdyArIHN0eWxlLm92ZXJmbG93WSArIHN0eWxlLm92ZXJmbG93WCkpIHtcbiAgICAgIHJldHVybiBwYXJlbnQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRvY0VsO1xufSAvLyBBbmltYXRlZCBTY3JvbGwgVG9cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vKipcbiAgQHBhcmFtIHQ6IHRpbWUgKGVsYXBzZWQpXG4gIEBwYXJhbSBiOiBpbml0aWFsIHZhbHVlXG4gIEBwYXJhbSBjOiBhbW91bnQgb2YgY2hhbmdlXG4gIEBwYXJhbSBkOiBkdXJhdGlvblxuKi9cblxuZnVuY3Rpb24gZWFzZU91dEN1YmljKHQsIGIsIGMsIGQpIHtcbiAgcmV0dXJuIGMgKiAoKHQgPSB0IC8gZCAtIDEpICogdCAqIHQgKyAxKSArIGI7XG59XG5cbmZ1bmN0aW9uIGFuaW1hdGVkU2Nyb2xsVG8oZWxlbWVudCwgdG8pIHtcbiAgdmFyIGR1cmF0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAyMDA7XG4gIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogbm9vcDtcbiAgdmFyIHN0YXJ0ID0gZ2V0U2Nyb2xsVG9wKGVsZW1lbnQpO1xuICB2YXIgY2hhbmdlID0gdG8gLSBzdGFydDtcbiAgdmFyIGluY3JlbWVudCA9IDEwO1xuICB2YXIgY3VycmVudFRpbWUgPSAwO1xuXG4gIGZ1bmN0aW9uIGFuaW1hdGVTY3JvbGwoKSB7XG4gICAgY3VycmVudFRpbWUgKz0gaW5jcmVtZW50O1xuICAgIHZhciB2YWwgPSBlYXNlT3V0Q3ViaWMoY3VycmVudFRpbWUsIHN0YXJ0LCBjaGFuZ2UsIGR1cmF0aW9uKTtcbiAgICBzY3JvbGxUbyhlbGVtZW50LCB2YWwpO1xuXG4gICAgaWYgKGN1cnJlbnRUaW1lIDwgZHVyYXRpb24pIHtcbiAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZVNjcm9sbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKGVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIGFuaW1hdGVTY3JvbGwoKTtcbn0gLy8gU2Nyb2xsIEludG8gVmlld1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmZ1bmN0aW9uIHNjcm9sbEludG9WaWV3KG1lbnVFbCwgZm9jdXNlZEVsKSB7XG4gIHZhciBtZW51UmVjdCA9IG1lbnVFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgdmFyIGZvY3VzZWRSZWN0ID0gZm9jdXNlZEVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB2YXIgb3ZlclNjcm9sbCA9IGZvY3VzZWRFbC5vZmZzZXRIZWlnaHQgLyAzO1xuXG4gIGlmIChmb2N1c2VkUmVjdC5ib3R0b20gKyBvdmVyU2Nyb2xsID4gbWVudVJlY3QuYm90dG9tKSB7XG4gICAgc2Nyb2xsVG8obWVudUVsLCBNYXRoLm1pbihmb2N1c2VkRWwub2Zmc2V0VG9wICsgZm9jdXNlZEVsLmNsaWVudEhlaWdodCAtIG1lbnVFbC5vZmZzZXRIZWlnaHQgKyBvdmVyU2Nyb2xsLCBtZW51RWwuc2Nyb2xsSGVpZ2h0KSk7XG4gIH0gZWxzZSBpZiAoZm9jdXNlZFJlY3QudG9wIC0gb3ZlclNjcm9sbCA8IG1lbnVSZWN0LnRvcCkge1xuICAgIHNjcm9sbFRvKG1lbnVFbCwgTWF0aC5tYXgoZm9jdXNlZEVsLm9mZnNldFRvcCAtIG92ZXJTY3JvbGwsIDApKTtcbiAgfVxufSAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIEdldCBib3VuZGluZyBjbGllbnQgb2JqZWN0XG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIGNhbm5vdCBnZXQga2V5cyB1c2luZyBhcnJheSBub3RhdGlvbiB3aXRoIERPTVJlY3RcblxuZnVuY3Rpb24gZ2V0Qm91bmRpbmdDbGllbnRPYmooZWxlbWVudCkge1xuICB2YXIgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHJldHVybiB7XG4gICAgYm90dG9tOiByZWN0LmJvdHRvbSxcbiAgICBoZWlnaHQ6IHJlY3QuaGVpZ2h0LFxuICAgIGxlZnQ6IHJlY3QubGVmdCxcbiAgICByaWdodDogcmVjdC5yaWdodCxcbiAgICB0b3A6IHJlY3QudG9wLFxuICAgIHdpZHRoOiByZWN0LndpZHRoXG4gIH07XG59XG4vLyBUb3VjaCBDYXBhYmlsaXR5IERldGVjdG9yXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuZnVuY3Rpb24gaXNUb3VjaENhcGFibGUoKSB7XG4gIHRyeSB7XG4gICAgZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ1RvdWNoRXZlbnQnKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufSAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIE1vYmlsZSBEZXZpY2UgRGV0ZWN0b3Jcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5mdW5jdGlvbiBpc01vYmlsZURldmljZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gL0FuZHJvaWR8d2ViT1N8aVBob25lfGlQYWR8aVBvZHxCbGFja0JlcnJ5fElFTW9iaWxlfE9wZXJhIE1pbmkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmV4cG9ydCB7IGdldFNjcm9sbFBhcmVudCBhcyBhLCBnZXRTY3JvbGxUb3AgYXMgYiwgYW5pbWF0ZWRTY3JvbGxUbyBhcyBjLCBpc01vYmlsZURldmljZSBhcyBkLCBpc0RvY3VtZW50RWxlbWVudCBhcyBlLCBjbGVhblZhbHVlIGFzIGYsIGdldEJvdW5kaW5nQ2xpZW50T2JqIGFzIGcsIHNjcm9sbEludG9WaWV3IGFzIGgsIGlzVG91Y2hDYXBhYmxlIGFzIGksIGNsYXNzTmFtZXMgYXMgaiwgaGFuZGxlSW5wdXRDaGFuZ2UgYXMgaywgbm9vcCBhcyBuLCBzY3JvbGxUbyBhcyBzIH07XG4iLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZCc7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MnO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9nZXRQcm90b3R5cGVPZiBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9nZXRQcm90b3R5cGVPZic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzJztcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZCc7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5JztcbmltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGpzeCwga2V5ZnJhbWVzLCBDbGFzc05hbWVzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5pbXBvcnQgeyBjcmVhdGVQb3J0YWwgfSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBfdHlwZW9mIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZic7XG5pbXBvcnQgeyBnIGFzIGdldEJvdW5kaW5nQ2xpZW50T2JqLCBhIGFzIGdldFNjcm9sbFBhcmVudCwgYiBhcyBnZXRTY3JvbGxUb3AsIGMgYXMgYW5pbWF0ZWRTY3JvbGxUbywgcyBhcyBzY3JvbGxUbyB9IGZyb20gJy4vY2h1bmstMzlkM2ZkYTguYnJvd3Nlci5lc20uanMnO1xuaW1wb3J0IF9jc3MgZnJvbSAnQGVtb3Rpb24vY3NzJztcbmltcG9ydCBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbCc7XG5pbXBvcnQgQXV0b3NpemVJbnB1dCBmcm9tICdyZWFjdC1pbnB1dC1hdXRvc2l6ZSc7XG5cbmZ1bmN0aW9uIGdldE1lbnVQbGFjZW1lbnQoX3JlZikge1xuICB2YXIgbWF4SGVpZ2h0ID0gX3JlZi5tYXhIZWlnaHQsXG4gICAgICBtZW51RWwgPSBfcmVmLm1lbnVFbCxcbiAgICAgIG1pbkhlaWdodCA9IF9yZWYubWluSGVpZ2h0LFxuICAgICAgcGxhY2VtZW50ID0gX3JlZi5wbGFjZW1lbnQsXG4gICAgICBzaG91bGRTY3JvbGwgPSBfcmVmLnNob3VsZFNjcm9sbCxcbiAgICAgIGlzRml4ZWRQb3NpdGlvbiA9IF9yZWYuaXNGaXhlZFBvc2l0aW9uLFxuICAgICAgdGhlbWUgPSBfcmVmLnRoZW1lO1xuICB2YXIgc3BhY2luZyA9IHRoZW1lLnNwYWNpbmc7XG4gIHZhciBzY3JvbGxQYXJlbnQgPSBnZXRTY3JvbGxQYXJlbnQobWVudUVsKTtcbiAgdmFyIGRlZmF1bHRTdGF0ZSA9IHtcbiAgICBwbGFjZW1lbnQ6ICdib3R0b20nLFxuICAgIG1heEhlaWdodDogbWF4SGVpZ2h0XG4gIH07IC8vIHNvbWV0aGluZyB3ZW50IHdyb25nLCByZXR1cm4gZGVmYXVsdCBzdGF0ZVxuXG4gIGlmICghbWVudUVsIHx8ICFtZW51RWwub2Zmc2V0UGFyZW50KSByZXR1cm4gZGVmYXVsdFN0YXRlOyAvLyB3ZSBjYW4ndCB0cnVzdCBgc2Nyb2xsUGFyZW50LnNjcm9sbEhlaWdodGAgLS0+IGl0IG1heSBpbmNyZWFzZSB3aGVuXG4gIC8vIHRoZSBtZW51IGlzIHJlbmRlcmVkXG5cbiAgdmFyIF9zY3JvbGxQYXJlbnQkZ2V0Qm91biA9IHNjcm9sbFBhcmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgIHNjcm9sbEhlaWdodCA9IF9zY3JvbGxQYXJlbnQkZ2V0Qm91bi5oZWlnaHQ7XG5cbiAgdmFyIF9tZW51RWwkZ2V0Qm91bmRpbmdDbCA9IG1lbnVFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgIG1lbnVCb3R0b20gPSBfbWVudUVsJGdldEJvdW5kaW5nQ2wuYm90dG9tLFxuICAgICAgbWVudUhlaWdodCA9IF9tZW51RWwkZ2V0Qm91bmRpbmdDbC5oZWlnaHQsXG4gICAgICBtZW51VG9wID0gX21lbnVFbCRnZXRCb3VuZGluZ0NsLnRvcDtcblxuICB2YXIgX21lbnVFbCRvZmZzZXRQYXJlbnQkID0gbWVudUVsLm9mZnNldFBhcmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgIGNvbnRhaW5lclRvcCA9IF9tZW51RWwkb2Zmc2V0UGFyZW50JC50b3A7XG5cbiAgdmFyIHZpZXdIZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gIHZhciBzY3JvbGxUb3AgPSBnZXRTY3JvbGxUb3Aoc2Nyb2xsUGFyZW50KTtcbiAgdmFyIG1hcmdpbkJvdHRvbSA9IHBhcnNlSW50KGdldENvbXB1dGVkU3R5bGUobWVudUVsKS5tYXJnaW5Cb3R0b20sIDEwKTtcbiAgdmFyIG1hcmdpblRvcCA9IHBhcnNlSW50KGdldENvbXB1dGVkU3R5bGUobWVudUVsKS5tYXJnaW5Ub3AsIDEwKTtcbiAgdmFyIHZpZXdTcGFjZUFib3ZlID0gY29udGFpbmVyVG9wIC0gbWFyZ2luVG9wO1xuICB2YXIgdmlld1NwYWNlQmVsb3cgPSB2aWV3SGVpZ2h0IC0gbWVudVRvcDtcbiAgdmFyIHNjcm9sbFNwYWNlQWJvdmUgPSB2aWV3U3BhY2VBYm92ZSArIHNjcm9sbFRvcDtcbiAgdmFyIHNjcm9sbFNwYWNlQmVsb3cgPSBzY3JvbGxIZWlnaHQgLSBzY3JvbGxUb3AgLSBtZW51VG9wO1xuICB2YXIgc2Nyb2xsRG93biA9IG1lbnVCb3R0b20gLSB2aWV3SGVpZ2h0ICsgc2Nyb2xsVG9wICsgbWFyZ2luQm90dG9tO1xuICB2YXIgc2Nyb2xsVXAgPSBzY3JvbGxUb3AgKyBtZW51VG9wIC0gbWFyZ2luVG9wO1xuICB2YXIgc2Nyb2xsRHVyYXRpb24gPSAxNjA7XG5cbiAgc3dpdGNoIChwbGFjZW1lbnQpIHtcbiAgICBjYXNlICdhdXRvJzpcbiAgICBjYXNlICdib3R0b20nOlxuICAgICAgLy8gMTogdGhlIG1lbnUgd2lsbCBmaXQsIGRvIG5vdGhpbmdcbiAgICAgIGlmICh2aWV3U3BhY2VCZWxvdyA+PSBtZW51SGVpZ2h0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcGxhY2VtZW50OiAnYm90dG9tJyxcbiAgICAgICAgICBtYXhIZWlnaHQ6IG1heEhlaWdodFxuICAgICAgICB9O1xuICAgICAgfSAvLyAyOiB0aGUgbWVudSB3aWxsIGZpdCwgaWYgc2Nyb2xsZWRcblxuXG4gICAgICBpZiAoc2Nyb2xsU3BhY2VCZWxvdyA+PSBtZW51SGVpZ2h0ICYmICFpc0ZpeGVkUG9zaXRpb24pIHtcbiAgICAgICAgaWYgKHNob3VsZFNjcm9sbCkge1xuICAgICAgICAgIGFuaW1hdGVkU2Nyb2xsVG8oc2Nyb2xsUGFyZW50LCBzY3JvbGxEb3duLCBzY3JvbGxEdXJhdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHBsYWNlbWVudDogJ2JvdHRvbScsXG4gICAgICAgICAgbWF4SGVpZ2h0OiBtYXhIZWlnaHRcbiAgICAgICAgfTtcbiAgICAgIH0gLy8gMzogdGhlIG1lbnUgd2lsbCBmaXQsIGlmIGNvbnN0cmFpbmVkXG5cblxuICAgICAgaWYgKCFpc0ZpeGVkUG9zaXRpb24gJiYgc2Nyb2xsU3BhY2VCZWxvdyA+PSBtaW5IZWlnaHQgfHwgaXNGaXhlZFBvc2l0aW9uICYmIHZpZXdTcGFjZUJlbG93ID49IG1pbkhlaWdodCkge1xuICAgICAgICBpZiAoc2hvdWxkU2Nyb2xsKSB7XG4gICAgICAgICAgYW5pbWF0ZWRTY3JvbGxUbyhzY3JvbGxQYXJlbnQsIHNjcm9sbERvd24sIHNjcm9sbER1cmF0aW9uKTtcbiAgICAgICAgfSAvLyB3ZSB3YW50IHRvIHByb3ZpZGUgYXMgbXVjaCBvZiB0aGUgbWVudSBhcyBwb3NzaWJsZSB0byB0aGUgdXNlcixcbiAgICAgICAgLy8gc28gZ2l2ZSB0aGVtIHdoYXRldmVyIGlzIGF2YWlsYWJsZSBiZWxvdyByYXRoZXIgdGhhbiB0aGUgbWluSGVpZ2h0LlxuXG5cbiAgICAgICAgdmFyIGNvbnN0cmFpbmVkSGVpZ2h0ID0gaXNGaXhlZFBvc2l0aW9uID8gdmlld1NwYWNlQmVsb3cgLSBtYXJnaW5Cb3R0b20gOiBzY3JvbGxTcGFjZUJlbG93IC0gbWFyZ2luQm90dG9tO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHBsYWNlbWVudDogJ2JvdHRvbScsXG4gICAgICAgICAgbWF4SGVpZ2h0OiBjb25zdHJhaW5lZEhlaWdodFxuICAgICAgICB9O1xuICAgICAgfSAvLyA0LiBGb3JrZWQgYmV2aW91ciB3aGVuIHRoZXJlIGlzbid0IGVub3VnaCBzcGFjZSBiZWxvd1xuICAgICAgLy8gQVVUTzogZmxpcCB0aGUgbWVudSwgcmVuZGVyIGFib3ZlXG5cblxuICAgICAgaWYgKHBsYWNlbWVudCA9PT0gJ2F1dG8nIHx8IGlzRml4ZWRQb3NpdGlvbikge1xuICAgICAgICAvLyBtYXkgbmVlZCB0byBiZSBjb25zdHJhaW5lZCBhZnRlciBmbGlwcGluZ1xuICAgICAgICB2YXIgX2NvbnN0cmFpbmVkSGVpZ2h0ID0gbWF4SGVpZ2h0O1xuICAgICAgICB2YXIgc3BhY2VBYm92ZSA9IGlzRml4ZWRQb3NpdGlvbiA/IHZpZXdTcGFjZUFib3ZlIDogc2Nyb2xsU3BhY2VBYm92ZTtcblxuICAgICAgICBpZiAoc3BhY2VBYm92ZSA+PSBtaW5IZWlnaHQpIHtcbiAgICAgICAgICBfY29uc3RyYWluZWRIZWlnaHQgPSBNYXRoLm1pbihzcGFjZUFib3ZlIC0gbWFyZ2luQm90dG9tIC0gc3BhY2luZy5jb250cm9sSGVpZ2h0LCBtYXhIZWlnaHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBwbGFjZW1lbnQ6ICd0b3AnLFxuICAgICAgICAgIG1heEhlaWdodDogX2NvbnN0cmFpbmVkSGVpZ2h0XG4gICAgICAgIH07XG4gICAgICB9IC8vIEJPVFRPTTogYWxsb3cgYnJvd3NlciB0byBpbmNyZWFzZSBzY3JvbGxhYmxlIGFyZWEgYW5kIGltbWVkaWF0ZWx5IHNldCBzY3JvbGxcblxuXG4gICAgICBpZiAocGxhY2VtZW50ID09PSAnYm90dG9tJykge1xuICAgICAgICBzY3JvbGxUbyhzY3JvbGxQYXJlbnQsIHNjcm9sbERvd24pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHBsYWNlbWVudDogJ2JvdHRvbScsXG4gICAgICAgICAgbWF4SGVpZ2h0OiBtYXhIZWlnaHRcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICd0b3AnOlxuICAgICAgLy8gMTogdGhlIG1lbnUgd2lsbCBmaXQsIGRvIG5vdGhpbmdcbiAgICAgIGlmICh2aWV3U3BhY2VBYm92ZSA+PSBtZW51SGVpZ2h0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcGxhY2VtZW50OiAndG9wJyxcbiAgICAgICAgICBtYXhIZWlnaHQ6IG1heEhlaWdodFxuICAgICAgICB9O1xuICAgICAgfSAvLyAyOiB0aGUgbWVudSB3aWxsIGZpdCwgaWYgc2Nyb2xsZWRcblxuXG4gICAgICBpZiAoc2Nyb2xsU3BhY2VBYm92ZSA+PSBtZW51SGVpZ2h0ICYmICFpc0ZpeGVkUG9zaXRpb24pIHtcbiAgICAgICAgaWYgKHNob3VsZFNjcm9sbCkge1xuICAgICAgICAgIGFuaW1hdGVkU2Nyb2xsVG8oc2Nyb2xsUGFyZW50LCBzY3JvbGxVcCwgc2Nyb2xsRHVyYXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBwbGFjZW1lbnQ6ICd0b3AnLFxuICAgICAgICAgIG1heEhlaWdodDogbWF4SGVpZ2h0XG4gICAgICAgIH07XG4gICAgICB9IC8vIDM6IHRoZSBtZW51IHdpbGwgZml0LCBpZiBjb25zdHJhaW5lZFxuXG5cbiAgICAgIGlmICghaXNGaXhlZFBvc2l0aW9uICYmIHNjcm9sbFNwYWNlQWJvdmUgPj0gbWluSGVpZ2h0IHx8IGlzRml4ZWRQb3NpdGlvbiAmJiB2aWV3U3BhY2VBYm92ZSA+PSBtaW5IZWlnaHQpIHtcbiAgICAgICAgdmFyIF9jb25zdHJhaW5lZEhlaWdodDIgPSBtYXhIZWlnaHQ7IC8vIHdlIHdhbnQgdG8gcHJvdmlkZSBhcyBtdWNoIG9mIHRoZSBtZW51IGFzIHBvc3NpYmxlIHRvIHRoZSB1c2VyLFxuICAgICAgICAvLyBzbyBnaXZlIHRoZW0gd2hhdGV2ZXIgaXMgYXZhaWxhYmxlIGJlbG93IHJhdGhlciB0aGFuIHRoZSBtaW5IZWlnaHQuXG5cbiAgICAgICAgaWYgKCFpc0ZpeGVkUG9zaXRpb24gJiYgc2Nyb2xsU3BhY2VBYm92ZSA+PSBtaW5IZWlnaHQgfHwgaXNGaXhlZFBvc2l0aW9uICYmIHZpZXdTcGFjZUFib3ZlID49IG1pbkhlaWdodCkge1xuICAgICAgICAgIF9jb25zdHJhaW5lZEhlaWdodDIgPSBpc0ZpeGVkUG9zaXRpb24gPyB2aWV3U3BhY2VBYm92ZSAtIG1hcmdpblRvcCA6IHNjcm9sbFNwYWNlQWJvdmUgLSBtYXJnaW5Ub3A7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2hvdWxkU2Nyb2xsKSB7XG4gICAgICAgICAgYW5pbWF0ZWRTY3JvbGxUbyhzY3JvbGxQYXJlbnQsIHNjcm9sbFVwLCBzY3JvbGxEdXJhdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHBsYWNlbWVudDogJ3RvcCcsXG4gICAgICAgICAgbWF4SGVpZ2h0OiBfY29uc3RyYWluZWRIZWlnaHQyXG4gICAgICAgIH07XG4gICAgICB9IC8vIDQuIG5vdCBlbm91Z2ggc3BhY2UsIHRoZSBicm93c2VyIFdJTEwgTk9UIGluY3JlYXNlIHNjcm9sbGFibGUgYXJlYSB3aGVuXG4gICAgICAvLyBhYnNvbHV0ZWx5IHBvc2l0aW9uZWQgZWxlbWVudCByZW5kZXJlZCBhYm92ZSB0aGUgdmlld3BvcnQgKG9ubHkgYmVsb3cpLlxuICAgICAgLy8gRmxpcCB0aGUgbWVudSwgcmVuZGVyIGJlbG93XG5cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGxhY2VtZW50OiAnYm90dG9tJyxcbiAgICAgICAgbWF4SGVpZ2h0OiBtYXhIZWlnaHRcbiAgICAgIH07XG5cbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBwbGFjZW1lbnQgcHJvdmlkZWQgXFxcIlwiLmNvbmNhdChwbGFjZW1lbnQsIFwiXFxcIi5cIikpO1xuICB9IC8vIGZ1bGZpbCBjb250cmFjdCB3aXRoIGZsb3c6IGltcGxpY2l0IHJldHVybiB2YWx1ZSBvZiB1bmRlZmluZWRcblxuXG4gIHJldHVybiBkZWZhdWx0U3RhdGU7XG59IC8vIE1lbnUgQ29tcG9uZW50XG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZnVuY3Rpb24gYWxpZ25Ub0NvbnRyb2wocGxhY2VtZW50KSB7XG4gIHZhciBwbGFjZW1lbnRUb0NTU1Byb3AgPSB7XG4gICAgYm90dG9tOiAndG9wJyxcbiAgICB0b3A6ICdib3R0b20nXG4gIH07XG4gIHJldHVybiBwbGFjZW1lbnQgPyBwbGFjZW1lbnRUb0NTU1Byb3BbcGxhY2VtZW50XSA6ICdib3R0b20nO1xufVxuXG52YXIgY29lcmNlUGxhY2VtZW50ID0gZnVuY3Rpb24gY29lcmNlUGxhY2VtZW50KHApIHtcbiAgcmV0dXJuIHAgPT09ICdhdXRvJyA/ICdib3R0b20nIDogcDtcbn07XG5cbnZhciBtZW51Q1NTID0gZnVuY3Rpb24gbWVudUNTUyhfcmVmMikge1xuICB2YXIgX3JlZjM7XG5cbiAgdmFyIHBsYWNlbWVudCA9IF9yZWYyLnBsYWNlbWVudCxcbiAgICAgIF9yZWYyJHRoZW1lID0gX3JlZjIudGhlbWUsXG4gICAgICBib3JkZXJSYWRpdXMgPSBfcmVmMiR0aGVtZS5ib3JkZXJSYWRpdXMsXG4gICAgICBzcGFjaW5nID0gX3JlZjIkdGhlbWUuc3BhY2luZyxcbiAgICAgIGNvbG9ycyA9IF9yZWYyJHRoZW1lLmNvbG9ycztcbiAgcmV0dXJuIF9yZWYzID0ge1xuICAgIGxhYmVsOiAnbWVudSdcbiAgfSwgX2RlZmluZVByb3BlcnR5KF9yZWYzLCBhbGlnblRvQ29udHJvbChwbGFjZW1lbnQpLCAnMTAwJScpLCBfZGVmaW5lUHJvcGVydHkoX3JlZjMsIFwiYmFja2dyb3VuZENvbG9yXCIsIGNvbG9ycy5uZXV0cmFsMCksIF9kZWZpbmVQcm9wZXJ0eShfcmVmMywgXCJib3JkZXJSYWRpdXNcIiwgYm9yZGVyUmFkaXVzKSwgX2RlZmluZVByb3BlcnR5KF9yZWYzLCBcImJveFNoYWRvd1wiLCAnMCAwIDAgMXB4IGhzbGEoMCwgMCUsIDAlLCAwLjEpLCAwIDRweCAxMXB4IGhzbGEoMCwgMCUsIDAlLCAwLjEpJyksIF9kZWZpbmVQcm9wZXJ0eShfcmVmMywgXCJtYXJnaW5Cb3R0b21cIiwgc3BhY2luZy5tZW51R3V0dGVyKSwgX2RlZmluZVByb3BlcnR5KF9yZWYzLCBcIm1hcmdpblRvcFwiLCBzcGFjaW5nLm1lbnVHdXR0ZXIpLCBfZGVmaW5lUHJvcGVydHkoX3JlZjMsIFwicG9zaXRpb25cIiwgJ2Fic29sdXRlJyksIF9kZWZpbmVQcm9wZXJ0eShfcmVmMywgXCJ3aWR0aFwiLCAnMTAwJScpLCBfZGVmaW5lUHJvcGVydHkoX3JlZjMsIFwiekluZGV4XCIsIDEpLCBfcmVmMztcbn07IC8vIE5PVEU6IGludGVybmFsIG9ubHlcblxudmFyIE1lbnVQbGFjZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE1lbnVQbGFjZXIsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1lbnVQbGFjZXIoKSB7XG4gICAgdmFyIF9nZXRQcm90b3R5cGVPZjI7XG5cbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWVudVBsYWNlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9IF9nZXRQcm90b3R5cGVPZihNZW51UGxhY2VyKSkuY2FsbC5hcHBseShfZ2V0UHJvdG90eXBlT2YyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwic3RhdGVcIiwge1xuICAgICAgbWF4SGVpZ2h0OiBfdGhpcy5wcm9wcy5tYXhNZW51SGVpZ2h0LFxuICAgICAgcGxhY2VtZW50OiBudWxsXG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiZ2V0UGxhY2VtZW50XCIsIGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIG1pbk1lbnVIZWlnaHQgPSBfdGhpcyRwcm9wcy5taW5NZW51SGVpZ2h0LFxuICAgICAgICAgIG1heE1lbnVIZWlnaHQgPSBfdGhpcyRwcm9wcy5tYXhNZW51SGVpZ2h0LFxuICAgICAgICAgIG1lbnVQbGFjZW1lbnQgPSBfdGhpcyRwcm9wcy5tZW51UGxhY2VtZW50LFxuICAgICAgICAgIG1lbnVQb3NpdGlvbiA9IF90aGlzJHByb3BzLm1lbnVQb3NpdGlvbixcbiAgICAgICAgICBtZW51U2hvdWxkU2Nyb2xsSW50b1ZpZXcgPSBfdGhpcyRwcm9wcy5tZW51U2hvdWxkU2Nyb2xsSW50b1ZpZXcsXG4gICAgICAgICAgdGhlbWUgPSBfdGhpcyRwcm9wcy50aGVtZTtcbiAgICAgIHZhciBnZXRQb3J0YWxQbGFjZW1lbnQgPSBfdGhpcy5jb250ZXh0LmdldFBvcnRhbFBsYWNlbWVudDtcbiAgICAgIGlmICghcmVmKSByZXR1cm47IC8vIERPIE5PVCBzY3JvbGwgaWYgcG9zaXRpb24gaXMgZml4ZWRcblxuICAgICAgdmFyIGlzRml4ZWRQb3NpdGlvbiA9IG1lbnVQb3NpdGlvbiA9PT0gJ2ZpeGVkJztcbiAgICAgIHZhciBzaG91bGRTY3JvbGwgPSBtZW51U2hvdWxkU2Nyb2xsSW50b1ZpZXcgJiYgIWlzRml4ZWRQb3NpdGlvbjtcbiAgICAgIHZhciBzdGF0ZSA9IGdldE1lbnVQbGFjZW1lbnQoe1xuICAgICAgICBtYXhIZWlnaHQ6IG1heE1lbnVIZWlnaHQsXG4gICAgICAgIG1lbnVFbDogcmVmLFxuICAgICAgICBtaW5IZWlnaHQ6IG1pbk1lbnVIZWlnaHQsXG4gICAgICAgIHBsYWNlbWVudDogbWVudVBsYWNlbWVudCxcbiAgICAgICAgc2hvdWxkU2Nyb2xsOiBzaG91bGRTY3JvbGwsXG4gICAgICAgIGlzRml4ZWRQb3NpdGlvbjogaXNGaXhlZFBvc2l0aW9uLFxuICAgICAgICB0aGVtZTogdGhlbWVcbiAgICAgIH0pO1xuICAgICAgaWYgKGdldFBvcnRhbFBsYWNlbWVudCkgZ2V0UG9ydGFsUGxhY2VtZW50KHN0YXRlKTtcblxuICAgICAgX3RoaXMuc2V0U3RhdGUoc3RhdGUpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImdldFVwZGF0ZWRQcm9wc1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbWVudVBsYWNlbWVudCA9IF90aGlzLnByb3BzLm1lbnVQbGFjZW1lbnQ7XG4gICAgICB2YXIgcGxhY2VtZW50ID0gX3RoaXMuc3RhdGUucGxhY2VtZW50IHx8IGNvZXJjZVBsYWNlbWVudChtZW51UGxhY2VtZW50KTtcbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBfdGhpcy5wcm9wcywge1xuICAgICAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudCxcbiAgICAgICAgbWF4SGVpZ2h0OiBfdGhpcy5zdGF0ZS5tYXhIZWlnaHRcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKE1lbnVQbGFjZXIsIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgICAgcmV0dXJuIGNoaWxkcmVuKHtcbiAgICAgICAgcmVmOiB0aGlzLmdldFBsYWNlbWVudCxcbiAgICAgICAgcGxhY2VyUHJvcHM6IHRoaXMuZ2V0VXBkYXRlZFByb3BzKClcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBNZW51UGxhY2VyO1xufShDb21wb25lbnQpO1xuXG5fZGVmaW5lUHJvcGVydHkoTWVudVBsYWNlciwgXCJjb250ZXh0VHlwZXNcIiwge1xuICBnZXRQb3J0YWxQbGFjZW1lbnQ6IFByb3BUeXBlcy5mdW5jXG59KTtcblxudmFyIE1lbnUgPSBmdW5jdGlvbiBNZW51KHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY3ggPSBwcm9wcy5jeCxcbiAgICAgIGdldFN0eWxlcyA9IHByb3BzLmdldFN0eWxlcyxcbiAgICAgIGlubmVyUmVmID0gcHJvcHMuaW5uZXJSZWYsXG4gICAgICBpbm5lclByb3BzID0gcHJvcHMuaW5uZXJQcm9wcztcbiAgcmV0dXJuIGpzeChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgY3NzOiBnZXRTdHlsZXMoJ21lbnUnLCBwcm9wcyksXG4gICAgY2xhc3NOYW1lOiBjeCh7XG4gICAgICBtZW51OiB0cnVlXG4gICAgfSwgY2xhc3NOYW1lKVxuICB9LCBpbm5lclByb3BzLCB7XG4gICAgcmVmOiBpbm5lclJlZlxuICB9KSwgY2hpbGRyZW4pO1xufTtcbi8vIE1lbnUgTGlzdFxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbnZhciBtZW51TGlzdENTUyA9IGZ1bmN0aW9uIG1lbnVMaXN0Q1NTKF9yZWY0KSB7XG4gIHZhciBtYXhIZWlnaHQgPSBfcmVmNC5tYXhIZWlnaHQsXG4gICAgICBiYXNlVW5pdCA9IF9yZWY0LnRoZW1lLnNwYWNpbmcuYmFzZVVuaXQ7XG4gIHJldHVybiB7XG4gICAgbWF4SGVpZ2h0OiBtYXhIZWlnaHQsXG4gICAgb3ZlcmZsb3dZOiAnYXV0bycsXG4gICAgcGFkZGluZ0JvdHRvbTogYmFzZVVuaXQsXG4gICAgcGFkZGluZ1RvcDogYmFzZVVuaXQsXG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgLy8gcmVxdWlyZWQgZm9yIG9mZnNldFtIZWlnaHQsIFRvcF0gPiBrZXlib2FyZCBzY3JvbGxcbiAgICBXZWJraXRPdmVyZmxvd1Njcm9sbGluZzogJ3RvdWNoJ1xuICB9O1xufTtcbnZhciBNZW51TGlzdCA9IGZ1bmN0aW9uIE1lbnVMaXN0KHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY3ggPSBwcm9wcy5jeCxcbiAgICAgIGdldFN0eWxlcyA9IHByb3BzLmdldFN0eWxlcyxcbiAgICAgIGlzTXVsdGkgPSBwcm9wcy5pc011bHRpLFxuICAgICAgaW5uZXJSZWYgPSBwcm9wcy5pbm5lclJlZjtcbiAgcmV0dXJuIGpzeChcImRpdlwiLCB7XG4gICAgY3NzOiBnZXRTdHlsZXMoJ21lbnVMaXN0JywgcHJvcHMpLFxuICAgIGNsYXNzTmFtZTogY3goe1xuICAgICAgJ21lbnUtbGlzdCc6IHRydWUsXG4gICAgICAnbWVudS1saXN0LS1pcy1tdWx0aSc6IGlzTXVsdGlcbiAgICB9LCBjbGFzc05hbWUpLFxuICAgIHJlZjogaW5uZXJSZWZcbiAgfSwgY2hpbGRyZW4pO1xufTsgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBNZW51IE5vdGljZXNcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG52YXIgbm90aWNlQ1NTID0gZnVuY3Rpb24gbm90aWNlQ1NTKF9yZWY1KSB7XG4gIHZhciBfcmVmNSR0aGVtZSA9IF9yZWY1LnRoZW1lLFxuICAgICAgYmFzZVVuaXQgPSBfcmVmNSR0aGVtZS5zcGFjaW5nLmJhc2VVbml0LFxuICAgICAgY29sb3JzID0gX3JlZjUkdGhlbWUuY29sb3JzO1xuICByZXR1cm4ge1xuICAgIGNvbG9yOiBjb2xvcnMubmV1dHJhbDQwLFxuICAgIHBhZGRpbmc6IFwiXCIuY29uY2F0KGJhc2VVbml0ICogMiwgXCJweCBcIikuY29uY2F0KGJhc2VVbml0ICogMywgXCJweFwiKSxcbiAgICB0ZXh0QWxpZ246ICdjZW50ZXInXG4gIH07XG59O1xuXG52YXIgbm9PcHRpb25zTWVzc2FnZUNTUyA9IG5vdGljZUNTUztcbnZhciBsb2FkaW5nTWVzc2FnZUNTUyA9IG5vdGljZUNTUztcbnZhciBOb09wdGlvbnNNZXNzYWdlID0gZnVuY3Rpb24gTm9PcHRpb25zTWVzc2FnZShwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGN4ID0gcHJvcHMuY3gsXG4gICAgICBnZXRTdHlsZXMgPSBwcm9wcy5nZXRTdHlsZXMsXG4gICAgICBpbm5lclByb3BzID0gcHJvcHMuaW5uZXJQcm9wcztcbiAgcmV0dXJuIGpzeChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgY3NzOiBnZXRTdHlsZXMoJ25vT3B0aW9uc01lc3NhZ2UnLCBwcm9wcyksXG4gICAgY2xhc3NOYW1lOiBjeCh7XG4gICAgICAnbWVudS1ub3RpY2UnOiB0cnVlLFxuICAgICAgJ21lbnUtbm90aWNlLS1uby1vcHRpb25zJzogdHJ1ZVxuICAgIH0sIGNsYXNzTmFtZSlcbiAgfSwgaW5uZXJQcm9wcyksIGNoaWxkcmVuKTtcbn07XG5Ob09wdGlvbnNNZXNzYWdlLmRlZmF1bHRQcm9wcyA9IHtcbiAgY2hpbGRyZW46ICdObyBvcHRpb25zJ1xufTtcbnZhciBMb2FkaW5nTWVzc2FnZSA9IGZ1bmN0aW9uIExvYWRpbmdNZXNzYWdlKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY3ggPSBwcm9wcy5jeCxcbiAgICAgIGdldFN0eWxlcyA9IHByb3BzLmdldFN0eWxlcyxcbiAgICAgIGlubmVyUHJvcHMgPSBwcm9wcy5pbm5lclByb3BzO1xuICByZXR1cm4ganN4KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICBjc3M6IGdldFN0eWxlcygnbG9hZGluZ01lc3NhZ2UnLCBwcm9wcyksXG4gICAgY2xhc3NOYW1lOiBjeCh7XG4gICAgICAnbWVudS1ub3RpY2UnOiB0cnVlLFxuICAgICAgJ21lbnUtbm90aWNlLS1sb2FkaW5nJzogdHJ1ZVxuICAgIH0sIGNsYXNzTmFtZSlcbiAgfSwgaW5uZXJQcm9wcyksIGNoaWxkcmVuKTtcbn07XG5Mb2FkaW5nTWVzc2FnZS5kZWZhdWx0UHJvcHMgPSB7XG4gIGNoaWxkcmVuOiAnTG9hZGluZy4uLidcbn07IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gTWVudSBQb3J0YWxcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG52YXIgbWVudVBvcnRhbENTUyA9IGZ1bmN0aW9uIG1lbnVQb3J0YWxDU1MoX3JlZjYpIHtcbiAgdmFyIHJlY3QgPSBfcmVmNi5yZWN0LFxuICAgICAgb2Zmc2V0ID0gX3JlZjYub2Zmc2V0LFxuICAgICAgcG9zaXRpb24gPSBfcmVmNi5wb3NpdGlvbjtcbiAgcmV0dXJuIHtcbiAgICBsZWZ0OiByZWN0LmxlZnQsXG4gICAgcG9zaXRpb246IHBvc2l0aW9uLFxuICAgIHRvcDogb2Zmc2V0LFxuICAgIHdpZHRoOiByZWN0LndpZHRoLFxuICAgIHpJbmRleDogMVxuICB9O1xufTtcbnZhciBNZW51UG9ydGFsID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29tcG9uZW50Mikge1xuICBfaW5oZXJpdHMoTWVudVBvcnRhbCwgX0NvbXBvbmVudDIpO1xuXG4gIGZ1bmN0aW9uIE1lbnVQb3J0YWwoKSB7XG4gICAgdmFyIF9nZXRQcm90b3R5cGVPZjM7XG5cbiAgICB2YXIgX3RoaXMyO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1lbnVQb3J0YWwpO1xuXG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgfVxuXG4gICAgX3RoaXMyID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9nZXRQcm90b3R5cGVPZjMgPSBfZ2V0UHJvdG90eXBlT2YoTWVudVBvcnRhbCkpLmNhbGwuYXBwbHkoX2dldFByb3RvdHlwZU9mMywgW3RoaXNdLmNvbmNhdChhcmdzKSkpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczIpKSwgXCJzdGF0ZVwiLCB7XG4gICAgICBwbGFjZW1lbnQ6IG51bGxcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMyKSksIFwiZ2V0UG9ydGFsUGxhY2VtZW50XCIsIGZ1bmN0aW9uIChfcmVmNykge1xuICAgICAgdmFyIHBsYWNlbWVudCA9IF9yZWY3LnBsYWNlbWVudDtcbiAgICAgIHZhciBpbml0aWFsUGxhY2VtZW50ID0gY29lcmNlUGxhY2VtZW50KF90aGlzMi5wcm9wcy5tZW51UGxhY2VtZW50KTsgLy8gYXZvaWQgcmUtcmVuZGVycyBpZiB0aGUgcGxhY2VtZW50IGhhcyBub3QgY2hhbmdlZFxuXG4gICAgICBpZiAocGxhY2VtZW50ICE9PSBpbml0aWFsUGxhY2VtZW50KSB7XG4gICAgICAgIF90aGlzMi5zZXRTdGF0ZSh7XG4gICAgICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnRcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3RoaXMyO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKE1lbnVQb3J0YWwsIFt7XG4gICAga2V5OiBcImdldENoaWxkQ29udGV4dFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBnZXRQb3J0YWxQbGFjZW1lbnQ6IHRoaXMuZ2V0UG9ydGFsUGxhY2VtZW50XG4gICAgICB9O1xuICAgIH0gLy8gY2FsbGJhY2sgZm9yIG9jY2Fzc2lvbnMgd2hlcmUgdGhlIG1lbnUgbXVzdCBcImZsaXBcIlxuXG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGFwcGVuZFRvID0gX3RoaXMkcHJvcHMyLmFwcGVuZFRvLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMyLmNoaWxkcmVuLFxuICAgICAgICAgIGNvbnRyb2xFbGVtZW50ID0gX3RoaXMkcHJvcHMyLmNvbnRyb2xFbGVtZW50LFxuICAgICAgICAgIG1lbnVQbGFjZW1lbnQgPSBfdGhpcyRwcm9wczIubWVudVBsYWNlbWVudCxcbiAgICAgICAgICBwb3NpdGlvbiA9IF90aGlzJHByb3BzMi5tZW51UG9zaXRpb24sXG4gICAgICAgICAgZ2V0U3R5bGVzID0gX3RoaXMkcHJvcHMyLmdldFN0eWxlcztcbiAgICAgIHZhciBpc0ZpeGVkID0gcG9zaXRpb24gPT09ICdmaXhlZCc7IC8vIGJhaWwgZWFybHkgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlbid0IHByZXNlbnRcblxuICAgICAgaWYgKCFhcHBlbmRUbyAmJiAhaXNGaXhlZCB8fCAhY29udHJvbEVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBwbGFjZW1lbnQgPSB0aGlzLnN0YXRlLnBsYWNlbWVudCB8fCBjb2VyY2VQbGFjZW1lbnQobWVudVBsYWNlbWVudCk7XG4gICAgICB2YXIgcmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50T2JqKGNvbnRyb2xFbGVtZW50KTtcbiAgICAgIHZhciBzY3JvbGxEaXN0YW5jZSA9IGlzRml4ZWQgPyAwIDogd2luZG93LnBhZ2VZT2Zmc2V0O1xuICAgICAgdmFyIG9mZnNldCA9IHJlY3RbcGxhY2VtZW50XSArIHNjcm9sbERpc3RhbmNlO1xuICAgICAgdmFyIHN0YXRlID0ge1xuICAgICAgICBvZmZzZXQ6IG9mZnNldCxcbiAgICAgICAgcG9zaXRpb246IHBvc2l0aW9uLFxuICAgICAgICByZWN0OiByZWN0XG4gICAgICB9OyAvLyBzYW1lIHdyYXBwZXIgZWxlbWVudCB3aGV0aGVyIGZpeGVkIG9yIHBvcnRhbGxlZFxuXG4gICAgICB2YXIgbWVudVdyYXBwZXIgPSBqc3goXCJkaXZcIiwge1xuICAgICAgICBjc3M6IGdldFN0eWxlcygnbWVudVBvcnRhbCcsIHN0YXRlKVxuICAgICAgfSwgY2hpbGRyZW4pO1xuICAgICAgcmV0dXJuIGFwcGVuZFRvID8gY3JlYXRlUG9ydGFsKG1lbnVXcmFwcGVyLCBhcHBlbmRUbykgOiBtZW51V3JhcHBlcjtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTWVudVBvcnRhbDtcbn0oQ29tcG9uZW50KTtcblxuX2RlZmluZVByb3BlcnR5KE1lbnVQb3J0YWwsIFwiY2hpbGRDb250ZXh0VHlwZXNcIiwge1xuICBnZXRQb3J0YWxQbGFjZW1lbnQ6IFByb3BUeXBlcy5mdW5jXG59KTtcblxudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xudmFyIGtleUxpc3QgPSBPYmplY3Qua2V5cztcbnZhciBoYXNQcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuZnVuY3Rpb24gZXF1YWwoYSwgYikge1xuICAvLyBmYXN0LWRlZXAtZXF1YWwgaW5kZXguanMgMi4wLjFcbiAgaWYgKGEgPT09IGIpIHJldHVybiB0cnVlO1xuXG4gIGlmIChhICYmIGIgJiYgX3R5cGVvZihhKSA9PSAnb2JqZWN0JyAmJiBfdHlwZW9mKGIpID09ICdvYmplY3QnKSB7XG4gICAgdmFyIGFyckEgPSBpc0FycmF5KGEpLFxuICAgICAgICBhcnJCID0gaXNBcnJheShiKSxcbiAgICAgICAgaSxcbiAgICAgICAgbGVuZ3RoLFxuICAgICAgICBrZXk7XG5cbiAgICBpZiAoYXJyQSAmJiBhcnJCKSB7XG4gICAgICBsZW5ndGggPSBhLmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGggIT0gYi5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICAgICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gIT09IDA7KSB7XG4gICAgICAgIGlmICghZXF1YWwoYVtpXSwgYltpXSkpIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGFyckEgIT0gYXJyQikgcmV0dXJuIGZhbHNlO1xuICAgIHZhciBkYXRlQSA9IGEgaW5zdGFuY2VvZiBEYXRlLFxuICAgICAgICBkYXRlQiA9IGIgaW5zdGFuY2VvZiBEYXRlO1xuICAgIGlmIChkYXRlQSAhPSBkYXRlQikgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChkYXRlQSAmJiBkYXRlQikgcmV0dXJuIGEuZ2V0VGltZSgpID09IGIuZ2V0VGltZSgpO1xuICAgIHZhciByZWdleHBBID0gYSBpbnN0YW5jZW9mIFJlZ0V4cCxcbiAgICAgICAgcmVnZXhwQiA9IGIgaW5zdGFuY2VvZiBSZWdFeHA7XG4gICAgaWYgKHJlZ2V4cEEgIT0gcmVnZXhwQikgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChyZWdleHBBICYmIHJlZ2V4cEIpIHJldHVybiBhLnRvU3RyaW5nKCkgPT0gYi50b1N0cmluZygpO1xuICAgIHZhciBrZXlzID0ga2V5TGlzdChhKTtcbiAgICBsZW5ndGggPSBrZXlzLmxlbmd0aDtcblxuICAgIGlmIChsZW5ndGggIT09IGtleUxpc3QoYikubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gIT09IDA7KSB7XG4gICAgICBpZiAoIWhhc1Byb3AuY2FsbChiLCBrZXlzW2ldKSkgcmV0dXJuIGZhbHNlO1xuICAgIH0gLy8gZW5kIGZhc3QtZGVlcC1lcXVhbFxuICAgIC8vIEN1c3RvbSBoYW5kbGluZyBmb3IgUmVhY3RcblxuXG4gICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gIT09IDA7KSB7XG4gICAgICBrZXkgPSBrZXlzW2ldO1xuXG4gICAgICBpZiAoa2V5ID09PSAnX293bmVyJyAmJiBhLiQkdHlwZW9mKSB7XG4gICAgICAgIC8vIFJlYWN0LXNwZWNpZmljOiBhdm9pZCB0cmF2ZXJzaW5nIFJlYWN0IGVsZW1lbnRzJyBfb3duZXIuXG4gICAgICAgIC8vICBfb3duZXIgY29udGFpbnMgY2lyY3VsYXIgcmVmZXJlbmNlc1xuICAgICAgICAvLyBhbmQgaXMgbm90IG5lZWRlZCB3aGVuIGNvbXBhcmluZyB0aGUgYWN0dWFsIGVsZW1lbnRzIChhbmQgbm90IHRoZWlyIG93bmVycylcbiAgICAgICAgLy8gLiQkdHlwZW9mIGFuZCAuX3N0b3JlIG9uIGp1c3QgcmVhc29uYWJsZSBtYXJrZXJzIG9mIGEgcmVhY3QgZWxlbWVudFxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGFsbCBvdGhlciBwcm9wZXJ0aWVzIHNob3VsZCBiZSB0cmF2ZXJzZWQgYXMgdXN1YWxcbiAgICAgICAgaWYgKCFlcXVhbChhW2tleV0sIGJba2V5XSkpIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IC8vIGZhc3QtZGVlcC1lcXVhbCBpbmRleC5qcyAyLjAuMVxuXG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBhICE9PSBhICYmIGIgIT09IGI7XG59IC8vIGVuZCBmYXN0LWRlZXAtZXF1YWxcblxuXG5mdW5jdGlvbiBleHBvcnRlZEVxdWFsKGEsIGIpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZXF1YWwoYSwgYik7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKGVycm9yLm1lc3NhZ2UgJiYgZXJyb3IubWVzc2FnZS5tYXRjaCgvc3RhY2t8cmVjdXJzaW9uL2kpKSB7XG4gICAgICAvLyB3YXJuIG9uIGNpcmN1bGFyIHJlZmVyZW5jZXMsIGRvbid0IGNyYXNoXG4gICAgICAvLyBicm93c2VycyBnaXZlIHRoaXMgZGlmZmVyZW50IGVycm9ycyBuYW1lIGFuZCBtZXNzYWdlczpcbiAgICAgIC8vIGNocm9tZS9zYWZhcmk6IFwiUmFuZ2VFcnJvclwiLCBcIk1heGltdW0gY2FsbCBzdGFjayBzaXplIGV4Y2VlZGVkXCJcbiAgICAgIC8vIGZpcmVmb3g6IFwiSW50ZXJuYWxFcnJvclwiLCB0b28gbXVjaCByZWN1cnNpb25cIlxuICAgICAgLy8gZWRnZTogXCJFcnJvclwiLCBcIk91dCBvZiBzdGFjayBzcGFjZVwiXG4gICAgICBjb25zb2xlLndhcm4oJ1dhcm5pbmc6IHJlYWN0LWZhc3QtY29tcGFyZSBkb2VzIG5vdCBoYW5kbGUgY2lyY3VsYXIgcmVmZXJlbmNlcy4nLCBlcnJvci5uYW1lLCBlcnJvci5tZXNzYWdlKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IC8vIHNvbWUgb3RoZXIgZXJyb3IuIHdlIHNob3VsZCBkZWZpbml0ZWx5IGtub3cgYWJvdXQgdGhlc2VcblxuXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxudmFyIGNvbnRhaW5lckNTUyA9IGZ1bmN0aW9uIGNvbnRhaW5lckNTUyhfcmVmKSB7XG4gIHZhciBpc0Rpc2FibGVkID0gX3JlZi5pc0Rpc2FibGVkLFxuICAgICAgaXNSdGwgPSBfcmVmLmlzUnRsO1xuICByZXR1cm4ge1xuICAgIGxhYmVsOiAnY29udGFpbmVyJyxcbiAgICBkaXJlY3Rpb246IGlzUnRsID8gJ3J0bCcgOiBudWxsLFxuICAgIHBvaW50ZXJFdmVudHM6IGlzRGlzYWJsZWQgPyAnbm9uZScgOiBudWxsLFxuICAgIC8vIGNhbmNlbCBtb3VzZSBldmVudHMgd2hlbiBkaXNhYmxlZFxuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gIH07XG59O1xudmFyIFNlbGVjdENvbnRhaW5lciA9IGZ1bmN0aW9uIFNlbGVjdENvbnRhaW5lcihwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGN4ID0gcHJvcHMuY3gsXG4gICAgICBnZXRTdHlsZXMgPSBwcm9wcy5nZXRTdHlsZXMsXG4gICAgICBpbm5lclByb3BzID0gcHJvcHMuaW5uZXJQcm9wcyxcbiAgICAgIGlzRGlzYWJsZWQgPSBwcm9wcy5pc0Rpc2FibGVkLFxuICAgICAgaXNSdGwgPSBwcm9wcy5pc1J0bDtcbiAgcmV0dXJuIGpzeChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgY3NzOiBnZXRTdHlsZXMoJ2NvbnRhaW5lcicsIHByb3BzKSxcbiAgICBjbGFzc05hbWU6IGN4KHtcbiAgICAgICctLWlzLWRpc2FibGVkJzogaXNEaXNhYmxlZCxcbiAgICAgICctLWlzLXJ0bCc6IGlzUnRsXG4gICAgfSwgY2xhc3NOYW1lKVxuICB9LCBpbm5lclByb3BzKSwgY2hpbGRyZW4pO1xufTsgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBWYWx1ZSBDb250YWluZXJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG52YXIgdmFsdWVDb250YWluZXJDU1MgPSBmdW5jdGlvbiB2YWx1ZUNvbnRhaW5lckNTUyhfcmVmMikge1xuICB2YXIgc3BhY2luZyA9IF9yZWYyLnRoZW1lLnNwYWNpbmc7XG4gIHJldHVybiB7XG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGZsZXg6IDEsXG4gICAgZmxleFdyYXA6ICd3cmFwJyxcbiAgICBwYWRkaW5nOiBcIlwiLmNvbmNhdChzcGFjaW5nLmJhc2VVbml0IC8gMiwgXCJweCBcIikuY29uY2F0KHNwYWNpbmcuYmFzZVVuaXQgKiAyLCBcInB4XCIpLFxuICAgIFdlYmtpdE92ZXJmbG93U2Nyb2xsaW5nOiAndG91Y2gnLFxuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIG92ZXJmbG93OiAnaGlkZGVuJ1xuICB9O1xufTtcbnZhciBWYWx1ZUNvbnRhaW5lciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoVmFsdWVDb250YWluZXIsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFZhbHVlQ29udGFpbmVyKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBWYWx1ZUNvbnRhaW5lcik7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKFZhbHVlQ29udGFpbmVyKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhWYWx1ZUNvbnRhaW5lciwgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgICAgY3ggPSBfdGhpcyRwcm9wcy5jeCxcbiAgICAgICAgICBpc011bHRpID0gX3RoaXMkcHJvcHMuaXNNdWx0aSxcbiAgICAgICAgICBnZXRTdHlsZXMgPSBfdGhpcyRwcm9wcy5nZXRTdHlsZXMsXG4gICAgICAgICAgaGFzVmFsdWUgPSBfdGhpcyRwcm9wcy5oYXNWYWx1ZTtcbiAgICAgIHJldHVybiBqc3goXCJkaXZcIiwge1xuICAgICAgICBjc3M6IGdldFN0eWxlcygndmFsdWVDb250YWluZXInLCB0aGlzLnByb3BzKSxcbiAgICAgICAgY2xhc3NOYW1lOiBjeCh7XG4gICAgICAgICAgJ3ZhbHVlLWNvbnRhaW5lcic6IHRydWUsXG4gICAgICAgICAgJ3ZhbHVlLWNvbnRhaW5lci0taXMtbXVsdGknOiBpc011bHRpLFxuICAgICAgICAgICd2YWx1ZS1jb250YWluZXItLWhhcy12YWx1ZSc6IGhhc1ZhbHVlXG4gICAgICAgIH0sIGNsYXNzTmFtZSlcbiAgICAgIH0sIGNoaWxkcmVuKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVmFsdWVDb250YWluZXI7XG59KENvbXBvbmVudCk7IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gSW5kaWNhdG9yIENvbnRhaW5lclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbnZhciBpbmRpY2F0b3JzQ29udGFpbmVyQ1NTID0gZnVuY3Rpb24gaW5kaWNhdG9yc0NvbnRhaW5lckNTUygpIHtcbiAgcmV0dXJuIHtcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBhbGlnblNlbGY6ICdzdHJldGNoJyxcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgZmxleFNocmluazogMFxuICB9O1xufTtcbnZhciBJbmRpY2F0b3JzQ29udGFpbmVyID0gZnVuY3Rpb24gSW5kaWNhdG9yc0NvbnRhaW5lcihwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGN4ID0gcHJvcHMuY3gsXG4gICAgICBnZXRTdHlsZXMgPSBwcm9wcy5nZXRTdHlsZXM7XG4gIHJldHVybiBqc3goXCJkaXZcIiwge1xuICAgIGNzczogZ2V0U3R5bGVzKCdpbmRpY2F0b3JzQ29udGFpbmVyJywgcHJvcHMpLFxuICAgIGNsYXNzTmFtZTogY3goe1xuICAgICAgaW5kaWNhdG9yczogdHJ1ZVxuICAgIH0sIGNsYXNzTmFtZSlcbiAgfSwgY2hpbGRyZW4pO1xufTtcblxuZnVuY3Rpb24gX3RlbXBsYXRlT2JqZWN0KCkge1xuICB2YXIgZGF0YSA9IF90YWdnZWRUZW1wbGF0ZUxpdGVyYWwoW1wiXFxuICAwJSwgODAlLCAxMDAlIHsgb3BhY2l0eTogMDsgfVxcbiAgNDAlIHsgb3BhY2l0eTogMTsgfVxcblwiXSk7XG5cbiAgX3RlbXBsYXRlT2JqZWN0ID0gZnVuY3Rpb24gX3RlbXBsYXRlT2JqZWN0KCkge1xuICAgIHJldHVybiBkYXRhO1xuICB9O1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG52YXIgX3JlZjIgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIG5hbWU6IFwiMTlicWgyclwiLFxuICBzdHlsZXM6IFwiZGlzcGxheTppbmxpbmUtYmxvY2s7ZmlsbDpjdXJyZW50Q29sb3I7bGluZS1oZWlnaHQ6MTtzdHJva2U6Y3VycmVudENvbG9yO3N0cm9rZS13aWR0aDowO1wiXG59IDoge1xuICBuYW1lOiBcIjE5YnFoMnJcIixcbiAgc3R5bGVzOiBcImRpc3BsYXk6aW5saW5lLWJsb2NrO2ZpbGw6Y3VycmVudENvbG9yO2xpbmUtaGVpZ2h0OjE7c3Ryb2tlOmN1cnJlbnRDb2xvcjtzdHJva2Utd2lkdGg6MDtcIixcbiAgbWFwOiBcIi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltbHVaR2xqWVhSdmNuTXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJa0ZCYTBKSklpd2labWxzWlNJNkltbHVaR2xqWVhSdmNuTXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdkx5QkFabXh2ZDF4dUx5b3FJRUJxYzNnZ2FuTjRJQ292WEc1cGJYQnZjblFnZXlCMGVYQmxJRTV2WkdVZ2ZTQm1jbTl0SUNkeVpXRmpkQ2M3WEc1cGJYQnZjblFnZXlCcWMzZ3NJR3RsZVdaeVlXMWxjeUI5SUdaeWIyMGdKMEJsYlc5MGFXOXVMMk52Y21Vbk8xeHVYRzVwYlhCdmNuUWdkSGx3WlNCN0lFTnZiVzF2YmxCeWIzQnpMQ0JVYUdWdFpTQjlJR1p5YjIwZ0p5NHVMM1I1Y0dWekp6dGNibHh1THk4Z1BUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlYRzR2THlCRWNtOXdaRzkzYmlBbUlFTnNaV0Z5SUVsamIyNXpYRzR2THlBOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMWNibHh1WTI5dWMzUWdVM1puSUQwZ0tIc2djMmw2WlN3Z0xpNHVjSEp2Y0hNZ2ZUb2dleUJ6YVhwbE9pQnVkVzFpWlhJZ2ZTa2dQVDRnS0Z4dUlDQThjM1puWEc0Z0lDQWdhR1ZwWjJoMFBYdHphWHBsZlZ4dUlDQWdJSGRwWkhSb1BYdHphWHBsZlZ4dUlDQWdJSFpwWlhkQ2IzZzlYQ0l3SURBZ01qQWdNakJjSWx4dUlDQWdJR0Z5YVdFdGFHbGtaR1Z1UFZ3aWRISjFaVndpWEc0Z0lDQWdabTlqZFhOaFlteGxQVndpWm1Gc2MyVmNJbHh1SUNBZ0lHTnpjejE3ZTF4dUlDQWdJQ0FnWkdsemNHeGhlVG9nSjJsdWJHbHVaUzFpYkc5amF5Y3NYRzRnSUNBZ0lDQm1hV3hzT2lBblkzVnljbVZ1ZEVOdmJHOXlKeXhjYmlBZ0lDQWdJR3hwYm1WSVpXbG5hSFE2SURFc1hHNGdJQ0FnSUNCemRISnZhMlU2SUNkamRYSnlaVzUwUTI5c2IzSW5MRnh1SUNBZ0lDQWdjM1J5YjJ0bFYybGtkR2c2SURBc1hHNGdJQ0FnZlgxY2JpQWdJQ0I3TGk0dWNISnZjSE45WEc0Z0lDOCtYRzRwTzF4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnUTNKdmMzTkpZMjl1SUQwZ0tIQnliM0J6T2lCaGJua3BJRDArSUNoY2JpQWdQRk4yWnlCemFYcGxQWHN5TUgwZ2V5NHVMbkJ5YjNCemZUNWNiaUFnSUNBOGNHRjBhQ0JrUFZ3aVRURTBMak0wT0NBeE5DNDRORGxqTFRBdU5EWTVJREF1TkRZNUxURXVNakk1SURBdU5EWTVMVEV1TmprM0lEQnNMVEl1TmpVeExUTXVNRE13TFRJdU5qVXhJRE11TURJNVl5MHdMalEyT1NBd0xqUTJPUzB4TGpJeU9TQXdMalEyT1MweExqWTVOeUF3TFRBdU5EWTVMVEF1TkRZNUxUQXVORFk1TFRFdU1qSTVJREF0TVM0Mk9UZHNNaTQzTlRndE15NHhOUzB5TGpjMU9TMHpMakUxTW1NdE1DNDBOamt0TUM0ME5qa3RNQzQwTmprdE1TNHlNamdnTUMweExqWTVOM014TGpJeU9DMHdMalEyT1NBeExqWTVOeUF3YkRJdU5qVXlJRE11TURNeElESXVOalV4TFRNdU1ETXhZekF1TkRZNUxUQXVORFk1SURFdU1qSTRMVEF1TkRZNUlERXVOamszSURCek1DNDBOamtnTVM0eU1qa2dNQ0F4TGpZNU4yd3RNaTQzTlRnZ015NHhOVElnTWk0M05UZ2dNeTR4TldNd0xqUTJPU0F3TGpRMk9TQXdMalEyT1NBeExqSXlPU0F3SURFdU5qazRlbHdpSUM4K1hHNGdJRHd2VTNablBseHVLVHRjYm1WNGNHOXlkQ0JqYjI1emRDQkViM2R1UTJobGRuSnZiaUE5SUNod2NtOXdjem9nWVc1NUtTQTlQaUFvWEc0Z0lEeFRkbWNnYzJsNlpUMTdNakI5SUhzdUxpNXdjbTl3YzMwK1hHNGdJQ0FnUEhCaGRHZ2daRDFjSWswMExqVXhOaUEzTGpVME9HTXdMalF6Tmkwd0xqUTBOaUF4TGpBME15MHdMalE0TVNBeExqVTNOaUF3YkRNdU9UQTRJRE11TnpRM0lETXVPVEE0TFRNdU56UTNZekF1TlRNekxUQXVORGd4SURFdU1UUXhMVEF1TkRRMklERXVOVGMwSURBZ01DNDBNellnTUM0ME5EVWdNQzQwTURnZ01TNHhPVGNnTUNBeExqWXhOUzB3TGpRd05pQXdMalF4T0MwMExqWTVOU0EwTGpVd01pMDBMalk1TlNBMExqVXdNaTB3TGpJeE55QXdMakl5TXkwd0xqVXdNaUF3TGpNek5TMHdMamM0TnlBd0xqTXpOWE10TUM0MU55MHdMakV4TWkwd0xqYzRPUzB3TGpNek5XTXdJREF0TkM0eU9EY3ROQzR3T0RRdE5DNDJPVFV0TkM0MU1ESnpMVEF1TkRNMkxURXVNVGNnTUMweExqWXhOWHBjSWlBdlBseHVJQ0E4TDFOMlp6NWNiaWs3WEc1Y2JpOHZJRDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFZ4dUx5OGdSSEp2Y0dSdmQyNGdKaUJEYkdWaGNpQkNkWFIwYjI1elhHNHZMeUE5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQxY2JseHVaWGh3YjNKMElIUjVjR1VnU1c1a2FXTmhkRzl5VUhKdmNITWdQU0JEYjIxdGIyNVFjbTl3Y3lBbUlIdGNiaUFnTHlvcUlGUm9aU0JqYUdsc1pISmxiaUIwYnlCaVpTQnlaVzVrWlhKbFpDQnBibk5wWkdVZ2RHaGxJR2x1WkdsallYUnZjaTRnS2k5Y2JpQWdZMmhwYkdSeVpXNDZJRTV2WkdVc1hHNGdJQzhxS2lCUWNtOXdjeUIwYUdGMElIZHBiR3dnWW1VZ2NHRnpjMlZrSUc5dUlIUnZJSFJvWlNCamFHbHNaSEpsYmk0Z0tpOWNiaUFnYVc1dVpYSlFjbTl3Y3pvZ1lXNTVMRnh1SUNBdktpb2dWR2hsSUdadlkzVnpaV1FnYzNSaGRHVWdiMllnZEdobElITmxiR1ZqZEM0Z0tpOWNiaUFnYVhOR2IyTjFjMlZrT2lCaWIyOXNaV0Z1TEZ4dUlDQXZLaW9nVjJobGRHaGxjaUIwYUdVZ2RHVjRkQ0JwY3lCeWFXZG9kQ0IwYnlCc1pXWjBJQ292WEc0Z0lHbHpVblJzT2lCaWIyOXNaV0Z1TEZ4dWZUdGNibHh1WTI5dWMzUWdZbUZ6WlVOVFV5QTlJQ2g3WEc0Z0lHbHpSbTlqZFhObFpDeGNiaUFnZEdobGJXVTZJSHRjYmlBZ0lDQnpjR0ZqYVc1bk9pQjdJR0poYzJWVmJtbDBJSDBzWEc0Z0lDQWdZMjlzYjNKekxGeHVJQ0I5TEZ4dWZUb2dTVzVrYVdOaGRHOXlVSEp2Y0hNcElEMCtJQ2g3WEc0Z0lHeGhZbVZzT2lBbmFXNWthV05oZEc5eVEyOXVkR0ZwYm1WeUp5eGNiaUFnWTI5c2IzSTZJR2x6Um05amRYTmxaQ0EvSUdOdmJHOXljeTV1WlhWMGNtRnNOakFnT2lCamIyeHZjbk11Ym1WMWRISmhiREl3TEZ4dUlDQmthWE53YkdGNU9pQW5abXhsZUNjc1hHNGdJSEJoWkdScGJtYzZJR0poYzJWVmJtbDBJQ29nTWl4Y2JpQWdkSEpoYm5OcGRHbHZiam9nSjJOdmJHOXlJREUxTUcxekp5eGNibHh1SUNBbk9taHZkbVZ5SnpvZ2UxeHVJQ0FnSUdOdmJHOXlPaUJwYzBadlkzVnpaV1FnUHlCamIyeHZjbk11Ym1WMWRISmhiRGd3SURvZ1kyOXNiM0p6TG01bGRYUnlZV3cwTUN4Y2JpQWdmU3hjYm4wcE8xeHVYRzVsZUhCdmNuUWdZMjl1YzNRZ1pISnZjR1J2ZDI1SmJtUnBZMkYwYjNKRFUxTWdQU0JpWVhObFExTlRPMXh1Wlhod2IzSjBJR052Ym5OMElFUnliM0JrYjNkdVNXNWthV05oZEc5eUlEMGdLSEJ5YjNCek9pQkpibVJwWTJGMGIzSlFjbTl3Y3lrZ1BUNGdlMXh1SUNCamIyNXpkQ0I3SUdOb2FXeGtjbVZ1TENCamJHRnpjMDVoYldVc0lHTjRMQ0JuWlhSVGRIbHNaWE1zSUdsdWJtVnlVSEp2Y0hNZ2ZTQTlJSEJ5YjNCek8xeHVJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lEeGthWFpjYmlBZ0lDQWdJSHN1TGk1cGJtNWxjbEJ5YjNCemZWeHVJQ0FnSUNBZ1kzTnpQWHRuWlhSVGRIbHNaWE1vSjJSeWIzQmtiM2R1U1c1a2FXTmhkRzl5Snl3Z2NISnZjSE1wZlZ4dUlDQWdJQ0FnWTJ4aGMzTk9ZVzFsUFh0amVDaGNiaUFnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUdsdVpHbGpZWFJ2Y2pvZ2RISjFaU3hjYmlBZ0lDQWdJQ0FnSUNBblpISnZjR1J2ZDI0dGFXNWthV05oZEc5eUp6b2dkSEoxWlN4Y2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdZMnhoYzNOT1lXMWxYRzRnSUNBZ0lDQXBmVnh1SUNBZ0lENWNiaUFnSUNBZ0lIdGphR2xzWkhKbGJpQjhmQ0E4Ukc5M2JrTm9aWFp5YjI0Z0x6NTlYRzRnSUNBZ1BDOWthWFkrWEc0Z0lDazdYRzU5TzF4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnWTJ4bFlYSkpibVJwWTJGMGIzSkRVMU1nUFNCaVlYTmxRMU5UTzF4dVpYaHdiM0owSUdOdmJuTjBJRU5zWldGeVNXNWthV05oZEc5eUlEMGdLSEJ5YjNCek9pQkpibVJwWTJGMGIzSlFjbTl3Y3lrZ1BUNGdlMXh1SUNCamIyNXpkQ0I3SUdOb2FXeGtjbVZ1TENCamJHRnpjMDVoYldVc0lHTjRMQ0JuWlhSVGRIbHNaWE1zSUdsdWJtVnlVSEp2Y0hNZ2ZTQTlJSEJ5YjNCek8xeHVJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lEeGthWFpjYmlBZ0lDQWdJSHN1TGk1cGJtNWxjbEJ5YjNCemZWeHVJQ0FnSUNBZ1kzTnpQWHRuWlhSVGRIbHNaWE1vSjJOc1pXRnlTVzVrYVdOaGRHOXlKeXdnY0hKdmNITXBmVnh1SUNBZ0lDQWdZMnhoYzNOT1lXMWxQWHRqZUNoY2JpQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJR2x1WkdsallYUnZjam9nZEhKMVpTeGNiaUFnSUNBZ0lDQWdJQ0FuWTJ4bFlYSXRhVzVrYVdOaGRHOXlKem9nZEhKMVpTeGNiaUFnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnWTJ4aGMzTk9ZVzFsWEc0Z0lDQWdJQ0FwZlZ4dUlDQWdJRDVjYmlBZ0lDQWdJSHRqYUdsc1pISmxiaUI4ZkNBOFEzSnZjM05KWTI5dUlDOCtmVnh1SUNBZ0lEd3ZaR2wyUGx4dUlDQXBPMXh1ZlR0Y2JseHVMeThnUFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVhHNHZMeUJUWlhCaGNtRjBiM0pjYmk4dklEMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVnh1WEc1MGVYQmxJRk5sY0dGeVlYUnZjbE4wWVhSbElEMGdleUJwYzBScGMyRmliR1ZrT2lCaWIyOXNaV0Z1SUgwN1hHNWNibVY0Y0c5eWRDQmpiMjV6ZENCcGJtUnBZMkYwYjNKVFpYQmhjbUYwYjNKRFUxTWdQU0FvZTF4dUlDQnBjMFJwYzJGaWJHVmtMRnh1SUNCMGFHVnRaVG9nZTF4dUlDQWdJSE53WVdOcGJtYzZJSHNnWW1GelpWVnVhWFFnZlN4Y2JpQWdJQ0JqYjJ4dmNuTXNYRzRnSUgwc1hHNTlPaUJEYjIxdGIyNVFjbTl3Y3lBbUlGTmxjR0Z5WVhSdmNsTjBZWFJsS1NBOVBpQW9lMXh1SUNCc1lXSmxiRG9nSjJsdVpHbGpZWFJ2Y2xObGNHRnlZWFJ2Y2ljc1hHNGdJR0ZzYVdkdVUyVnNaam9nSjNOMGNtVjBZMmduTEZ4dUlDQmlZV05yWjNKdmRXNWtRMjlzYjNJNklHbHpSR2x6WVdKc1pXUWdQeUJqYjJ4dmNuTXVibVYxZEhKaGJERXdJRG9nWTI5c2IzSnpMbTVsZFhSeVlXd3lNQ3hjYmlBZ2JXRnlaMmx1UW05MGRHOXRPaUJpWVhObFZXNXBkQ0FxSURJc1hHNGdJRzFoY21kcGJsUnZjRG9nWW1GelpWVnVhWFFnS2lBeUxGeHVJQ0IzYVdSMGFEb2dNU3hjYm4wcE8xeHVYRzVsZUhCdmNuUWdZMjl1YzNRZ1NXNWthV05oZEc5eVUyVndZWEpoZEc5eUlEMGdLSEJ5YjNCek9pQkpibVJwWTJGMGIzSlFjbTl3Y3lrZ1BUNGdlMXh1SUNCamIyNXpkQ0I3SUdOc1lYTnpUbUZ0WlN3Z1kzZ3NJR2RsZEZOMGVXeGxjeXdnYVc1dVpYSlFjbTl3Y3lCOUlEMGdjSEp2Y0hNN1hHNGdJSEpsZEhWeWJpQW9YRzRnSUNBZ1BITndZVzVjYmlBZ0lDQWdJSHN1TGk1cGJtNWxjbEJ5YjNCemZWeHVJQ0FnSUNBZ1kzTnpQWHRuWlhSVGRIbHNaWE1vSjJsdVpHbGpZWFJ2Y2xObGNHRnlZWFJ2Y2ljc0lIQnliM0J6S1gxY2JpQWdJQ0FnSUdOc1lYTnpUbUZ0WlQxN1kzZ29leUFuYVc1a2FXTmhkRzl5TFhObGNHRnlZWFJ2Y2ljNklIUnlkV1VnZlN3Z1kyeGhjM05PWVcxbEtYMWNiaUFnSUNBdlBseHVJQ0FwTzF4dWZUdGNibHh1THk4Z1BUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlYRzR2THlCTWIyRmthVzVuWEc0dkx5QTlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDFjYmx4dVkyOXVjM1FnYkc5aFpHbHVaMFJ2ZEVGdWFXMWhkR2x2Ym5NZ1BTQnJaWGxtY21GdFpYTmdYRzRnSURBbExDQTRNQ1VzSURFd01DVWdleUJ2Y0dGamFYUjVPaUF3T3lCOVhHNGdJRFF3SlNCN0lHOXdZV05wZEhrNklERTdJSDFjYm1BN1hHNWNibVY0Y0c5eWRDQmpiMjV6ZENCc2IyRmthVzVuU1c1a2FXTmhkRzl5UTFOVElEMGdLSHRjYmlBZ2FYTkdiMk4xYzJWa0xGeHVJQ0J6YVhwbExGeHVJQ0IwYUdWdFpUb2dlMXh1SUNBZ0lHTnZiRzl5Y3l4Y2JpQWdJQ0J6Y0dGamFXNW5PaUI3SUdKaGMyVlZibWwwSUgwc1hHNGdJSDBzWEc1OU9pQjdYRzRnSUdselJtOWpkWE5sWkRvZ1ltOXZiR1ZoYml4Y2JpQWdjMmw2WlRvZ2JuVnRZbVZ5TEZ4dUlDQjBhR1Z0WlRvZ1ZHaGxiV1VzWEc1OUtTQTlQaUFvZTF4dUlDQnNZV0psYkRvZ0oyeHZZV1JwYm1kSmJtUnBZMkYwYjNJbkxGeHVJQ0JqYjJ4dmNqb2dhWE5HYjJOMWMyVmtJRDhnWTI5c2IzSnpMbTVsZFhSeVlXdzJNQ0E2SUdOdmJHOXljeTV1WlhWMGNtRnNNakFzWEc0Z0lHUnBjM0JzWVhrNklDZG1iR1Y0Snl4Y2JpQWdjR0ZrWkdsdVp6b2dZbUZ6WlZWdWFYUWdLaUF5TEZ4dUlDQjBjbUZ1YzJsMGFXOXVPaUFuWTI5c2IzSWdNVFV3YlhNbkxGeHVJQ0JoYkdsbmJsTmxiR1k2SUNkalpXNTBaWEluTEZ4dUlDQm1iMjUwVTJsNlpUb2djMmw2WlN4Y2JpQWdiR2x1WlVobGFXZG9kRG9nTVN4Y2JpQWdiV0Z5WjJsdVVtbG5hSFE2SUhOcGVtVXNYRzRnSUhSbGVIUkJiR2xuYmpvZ0oyTmxiblJsY2ljc1hHNGdJSFpsY25ScFkyRnNRV3hwWjI0NklDZHRhV1JrYkdVbkxGeHVmU2s3WEc1Y2JuUjVjR1VnUkc5MFVISnZjSE1nUFNCN0lHUmxiR0Y1T2lCdWRXMWlaWElzSUc5bVpuTmxkRG9nWW05dmJHVmhiaUI5TzF4dVkyOXVjM1FnVEc5aFpHbHVaMFJ2ZENBOUlDaDdJR1JsYkdGNUxDQnZabVp6WlhRZ2ZUb2dSRzkwVUhKdmNITXBJRDArSUNoY2JpQWdQSE53WVc1Y2JpQWdJQ0JqYzNNOWUzdGNiaUFnSUNBZ0lHRnVhVzFoZEdsdmJqb2dZQ1I3Ykc5aFpHbHVaMFJ2ZEVGdWFXMWhkR2x2Ym5OOUlERnpJR1ZoYzJVdGFXNHRiM1YwSUNSN1pHVnNZWGw5YlhNZ2FXNW1hVzVwZEdVN1lDeGNiaUFnSUNBZ0lHSmhZMnRuY205MWJtUkRiMnh2Y2pvZ0oyTjFjbkpsYm5SRGIyeHZjaWNzWEc0Z0lDQWdJQ0JpYjNKa1pYSlNZV1JwZFhNNklDY3haVzBuTEZ4dUlDQWdJQ0FnWkdsemNHeGhlVG9nSjJsdWJHbHVaUzFpYkc5amF5Y3NYRzRnSUNBZ0lDQnRZWEpuYVc1TVpXWjBPaUJ2Wm1aelpYUWdQeUFuTVdWdEp5QTZJRzUxYkd3c1hHNGdJQ0FnSUNCb1pXbG5hSFE2SUNjeFpXMG5MRnh1SUNBZ0lDQWdkbVZ5ZEdsallXeEJiR2xuYmpvZ0ozUnZjQ2NzWEc0Z0lDQWdJQ0IzYVdSMGFEb2dKekZsYlNjc1hHNGdJQ0FnZlgxY2JpQWdMejVjYmlrN1hHNWNibVY0Y0c5eWRDQjBlWEJsSUV4dllXUnBibWRKWTI5dVVISnZjSE1nUFNCN1hHNGdJQzhxS2lCUWNtOXdjeUIwYUdGMElIZHBiR3dnWW1VZ2NHRnpjMlZrSUc5dUlIUnZJSFJvWlNCamFHbHNaSEpsYmk0Z0tpOWNiaUFnYVc1dVpYSlFjbTl3Y3pvZ1lXNTVMRnh1SUNBdktpb2dWR2hsSUdadlkzVnpaV1FnYzNSaGRHVWdiMllnZEdobElITmxiR1ZqZEM0Z0tpOWNiaUFnYVhOR2IyTjFjMlZrT2lCaWIyOXNaV0Z1TEZ4dUlDQXZLaW9nVjJobGRHaGxjaUIwYUdVZ2RHVjRkQ0JwY3lCeWFXZG9kQ0IwYnlCc1pXWjBJQ292WEc0Z0lHbHpVblJzT2lCaWIyOXNaV0Z1TEZ4dWZTQW1JRU52YlcxdmJsQnliM0J6SUNZZ2UxeHVJQ0FnSUM4cUtpQlRaWFFnYzJsNlpTQnZaaUIwYUdVZ1kyOXVkR0ZwYm1WeUxpQXFMMXh1SUNBZ0lITnBlbVU2SUc1MWJXSmxjaXhjYmlBZ2ZUdGNibVY0Y0c5eWRDQmpiMjV6ZENCTWIyRmthVzVuU1c1a2FXTmhkRzl5SUQwZ0tIQnliM0J6T2lCTWIyRmthVzVuU1dOdmJsQnliM0J6S1NBOVBpQjdYRzRnSUdOdmJuTjBJSHNnWTJ4aGMzTk9ZVzFsTENCamVDd2daMlYwVTNSNWJHVnpMQ0JwYm01bGNsQnliM0J6TENCcGMxSjBiQ0I5SUQwZ2NISnZjSE03WEc1Y2JpQWdjbVYwZFhKdUlDaGNiaUFnSUNBOFpHbDJYRzRnSUNBZ0lDQjdMaTR1YVc1dVpYSlFjbTl3YzMxY2JpQWdJQ0FnSUdOemN6MTdaMlYwVTNSNWJHVnpLQ2RzYjJGa2FXNW5TVzVrYVdOaGRHOXlKeXdnY0hKdmNITXBmVnh1SUNBZ0lDQWdZMnhoYzNOT1lXMWxQWHRqZUNoY2JpQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJR2x1WkdsallYUnZjam9nZEhKMVpTeGNiaUFnSUNBZ0lDQWdJQ0FuYkc5aFpHbHVaeTFwYm1ScFkyRjBiM0luT2lCMGNuVmxMRnh1SUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNCamJHRnpjMDVoYldWY2JpQWdJQ0FnSUNsOVhHNGdJQ0FnUGx4dUlDQWdJQ0FnUEV4dllXUnBibWRFYjNRZ1pHVnNZWGs5ZXpCOUlHOW1abk5sZEQxN2FYTlNkR3g5SUM4K1hHNGdJQ0FnSUNBOFRHOWhaR2x1WjBSdmRDQmtaV3hoZVQxN01UWXdmU0J2Wm1aelpYUWdMejVjYmlBZ0lDQWdJRHhNYjJGa2FXNW5SRzkwSUdSbGJHRjVQWHN6TWpCOUlHOW1abk5sZEQxN0lXbHpVblJzZlNBdlBseHVJQ0FnSUR3dlpHbDJQbHh1SUNBcE8xeHVmVHRjYmt4dllXUnBibWRKYm1ScFkyRjBiM0l1WkdWbVlYVnNkRkJ5YjNCeklEMGdleUJ6YVhwbE9pQTBJSDA3WEc0aVhYMD0gKi9cIlxufTtcblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBEcm9wZG93biAmIENsZWFyIEljb25zXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbnZhciBTdmcgPSBmdW5jdGlvbiBTdmcoX3JlZikge1xuICB2YXIgc2l6ZSA9IF9yZWYuc2l6ZSxcbiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFtcInNpemVcIl0pO1xuXG4gIHJldHVybiBqc3goXCJzdmdcIiwgX2V4dGVuZHMoe1xuICAgIGhlaWdodDogc2l6ZSxcbiAgICB3aWR0aDogc2l6ZSxcbiAgICB2aWV3Qm94OiBcIjAgMCAyMCAyMFwiLFxuICAgIFwiYXJpYS1oaWRkZW5cIjogXCJ0cnVlXCIsXG4gICAgZm9jdXNhYmxlOiBcImZhbHNlXCIsXG4gICAgY3NzOiBfcmVmMlxuICB9LCBwcm9wcykpO1xufTtcblxudmFyIENyb3NzSWNvbiA9IGZ1bmN0aW9uIENyb3NzSWNvbihwcm9wcykge1xuICByZXR1cm4ganN4KFN2ZywgX2V4dGVuZHMoe1xuICAgIHNpemU6IDIwXG4gIH0sIHByb3BzKSwganN4KFwicGF0aFwiLCB7XG4gICAgZDogXCJNMTQuMzQ4IDE0Ljg0OWMtMC40NjkgMC40NjktMS4yMjkgMC40NjktMS42OTcgMGwtMi42NTEtMy4wMzAtMi42NTEgMy4wMjljLTAuNDY5IDAuNDY5LTEuMjI5IDAuNDY5LTEuNjk3IDAtMC40NjktMC40NjktMC40NjktMS4yMjkgMC0xLjY5N2wyLjc1OC0zLjE1LTIuNzU5LTMuMTUyYy0wLjQ2OS0wLjQ2OS0wLjQ2OS0xLjIyOCAwLTEuNjk3czEuMjI4LTAuNDY5IDEuNjk3IDBsMi42NTIgMy4wMzEgMi42NTEtMy4wMzFjMC40NjktMC40NjkgMS4yMjgtMC40NjkgMS42OTcgMHMwLjQ2OSAxLjIyOSAwIDEuNjk3bC0yLjc1OCAzLjE1MiAyLjc1OCAzLjE1YzAuNDY5IDAuNDY5IDAuNDY5IDEuMjI5IDAgMS42OTh6XCJcbiAgfSkpO1xufTtcbnZhciBEb3duQ2hldnJvbiA9IGZ1bmN0aW9uIERvd25DaGV2cm9uKHByb3BzKSB7XG4gIHJldHVybiBqc3goU3ZnLCBfZXh0ZW5kcyh7XG4gICAgc2l6ZTogMjBcbiAgfSwgcHJvcHMpLCBqc3goXCJwYXRoXCIsIHtcbiAgICBkOiBcIk00LjUxNiA3LjU0OGMwLjQzNi0wLjQ0NiAxLjA0My0wLjQ4MSAxLjU3NiAwbDMuOTA4IDMuNzQ3IDMuOTA4LTMuNzQ3YzAuNTMzLTAuNDgxIDEuMTQxLTAuNDQ2IDEuNTc0IDAgMC40MzYgMC40NDUgMC40MDggMS4xOTcgMCAxLjYxNS0wLjQwNiAwLjQxOC00LjY5NSA0LjUwMi00LjY5NSA0LjUwMi0wLjIxNyAwLjIyMy0wLjUwMiAwLjMzNS0wLjc4NyAwLjMzNXMtMC41Ny0wLjExMi0wLjc4OS0wLjMzNWMwIDAtNC4yODctNC4wODQtNC42OTUtNC41MDJzLTAuNDM2LTEuMTcgMC0xLjYxNXpcIlxuICB9KSk7XG59OyAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIERyb3Bkb3duICYgQ2xlYXIgQnV0dG9uc1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbnZhciBiYXNlQ1NTID0gZnVuY3Rpb24gYmFzZUNTUyhfcmVmMykge1xuICB2YXIgaXNGb2N1c2VkID0gX3JlZjMuaXNGb2N1c2VkLFxuICAgICAgX3JlZjMkdGhlbWUgPSBfcmVmMy50aGVtZSxcbiAgICAgIGJhc2VVbml0ID0gX3JlZjMkdGhlbWUuc3BhY2luZy5iYXNlVW5pdCxcbiAgICAgIGNvbG9ycyA9IF9yZWYzJHRoZW1lLmNvbG9ycztcbiAgcmV0dXJuIHtcbiAgICBsYWJlbDogJ2luZGljYXRvckNvbnRhaW5lcicsXG4gICAgY29sb3I6IGlzRm9jdXNlZCA/IGNvbG9ycy5uZXV0cmFsNjAgOiBjb2xvcnMubmV1dHJhbDIwLFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBwYWRkaW5nOiBiYXNlVW5pdCAqIDIsXG4gICAgdHJhbnNpdGlvbjogJ2NvbG9yIDE1MG1zJyxcbiAgICAnOmhvdmVyJzoge1xuICAgICAgY29sb3I6IGlzRm9jdXNlZCA/IGNvbG9ycy5uZXV0cmFsODAgOiBjb2xvcnMubmV1dHJhbDQwXG4gICAgfVxuICB9O1xufTtcblxudmFyIGRyb3Bkb3duSW5kaWNhdG9yQ1NTID0gYmFzZUNTUztcbnZhciBEcm9wZG93bkluZGljYXRvciA9IGZ1bmN0aW9uIERyb3Bkb3duSW5kaWNhdG9yKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY3ggPSBwcm9wcy5jeCxcbiAgICAgIGdldFN0eWxlcyA9IHByb3BzLmdldFN0eWxlcyxcbiAgICAgIGlubmVyUHJvcHMgPSBwcm9wcy5pbm5lclByb3BzO1xuICByZXR1cm4ganN4KFwiZGl2XCIsIF9leHRlbmRzKHt9LCBpbm5lclByb3BzLCB7XG4gICAgY3NzOiBnZXRTdHlsZXMoJ2Ryb3Bkb3duSW5kaWNhdG9yJywgcHJvcHMpLFxuICAgIGNsYXNzTmFtZTogY3goe1xuICAgICAgaW5kaWNhdG9yOiB0cnVlLFxuICAgICAgJ2Ryb3Bkb3duLWluZGljYXRvcic6IHRydWVcbiAgICB9LCBjbGFzc05hbWUpXG4gIH0pLCBjaGlsZHJlbiB8fCBqc3goRG93bkNoZXZyb24sIG51bGwpKTtcbn07XG52YXIgY2xlYXJJbmRpY2F0b3JDU1MgPSBiYXNlQ1NTO1xudmFyIENsZWFySW5kaWNhdG9yID0gZnVuY3Rpb24gQ2xlYXJJbmRpY2F0b3IocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjeCA9IHByb3BzLmN4LFxuICAgICAgZ2V0U3R5bGVzID0gcHJvcHMuZ2V0U3R5bGVzLFxuICAgICAgaW5uZXJQcm9wcyA9IHByb3BzLmlubmVyUHJvcHM7XG4gIHJldHVybiBqc3goXCJkaXZcIiwgX2V4dGVuZHMoe30sIGlubmVyUHJvcHMsIHtcbiAgICBjc3M6IGdldFN0eWxlcygnY2xlYXJJbmRpY2F0b3InLCBwcm9wcyksXG4gICAgY2xhc3NOYW1lOiBjeCh7XG4gICAgICBpbmRpY2F0b3I6IHRydWUsXG4gICAgICAnY2xlYXItaW5kaWNhdG9yJzogdHJ1ZVxuICAgIH0sIGNsYXNzTmFtZSlcbiAgfSksIGNoaWxkcmVuIHx8IGpzeChDcm9zc0ljb24sIG51bGwpKTtcbn07IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gU2VwYXJhdG9yXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxudmFyIGluZGljYXRvclNlcGFyYXRvckNTUyA9IGZ1bmN0aW9uIGluZGljYXRvclNlcGFyYXRvckNTUyhfcmVmNCkge1xuICB2YXIgaXNEaXNhYmxlZCA9IF9yZWY0LmlzRGlzYWJsZWQsXG4gICAgICBfcmVmNCR0aGVtZSA9IF9yZWY0LnRoZW1lLFxuICAgICAgYmFzZVVuaXQgPSBfcmVmNCR0aGVtZS5zcGFjaW5nLmJhc2VVbml0LFxuICAgICAgY29sb3JzID0gX3JlZjQkdGhlbWUuY29sb3JzO1xuICByZXR1cm4ge1xuICAgIGxhYmVsOiAnaW5kaWNhdG9yU2VwYXJhdG9yJyxcbiAgICBhbGlnblNlbGY6ICdzdHJldGNoJyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IGlzRGlzYWJsZWQgPyBjb2xvcnMubmV1dHJhbDEwIDogY29sb3JzLm5ldXRyYWwyMCxcbiAgICBtYXJnaW5Cb3R0b206IGJhc2VVbml0ICogMixcbiAgICBtYXJnaW5Ub3A6IGJhc2VVbml0ICogMixcbiAgICB3aWR0aDogMVxuICB9O1xufTtcbnZhciBJbmRpY2F0b3JTZXBhcmF0b3IgPSBmdW5jdGlvbiBJbmRpY2F0b3JTZXBhcmF0b3IocHJvcHMpIHtcbiAgdmFyIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGN4ID0gcHJvcHMuY3gsXG4gICAgICBnZXRTdHlsZXMgPSBwcm9wcy5nZXRTdHlsZXMsXG4gICAgICBpbm5lclByb3BzID0gcHJvcHMuaW5uZXJQcm9wcztcbiAgcmV0dXJuIGpzeChcInNwYW5cIiwgX2V4dGVuZHMoe30sIGlubmVyUHJvcHMsIHtcbiAgICBjc3M6IGdldFN0eWxlcygnaW5kaWNhdG9yU2VwYXJhdG9yJywgcHJvcHMpLFxuICAgIGNsYXNzTmFtZTogY3goe1xuICAgICAgJ2luZGljYXRvci1zZXBhcmF0b3InOiB0cnVlXG4gICAgfSwgY2xhc3NOYW1lKVxuICB9KSk7XG59OyAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIExvYWRpbmdcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG52YXIgbG9hZGluZ0RvdEFuaW1hdGlvbnMgPSBrZXlmcmFtZXMoX3RlbXBsYXRlT2JqZWN0KCkpO1xudmFyIGxvYWRpbmdJbmRpY2F0b3JDU1MgPSBmdW5jdGlvbiBsb2FkaW5nSW5kaWNhdG9yQ1NTKF9yZWY1KSB7XG4gIHZhciBpc0ZvY3VzZWQgPSBfcmVmNS5pc0ZvY3VzZWQsXG4gICAgICBzaXplID0gX3JlZjUuc2l6ZSxcbiAgICAgIF9yZWY1JHRoZW1lID0gX3JlZjUudGhlbWUsXG4gICAgICBjb2xvcnMgPSBfcmVmNSR0aGVtZS5jb2xvcnMsXG4gICAgICBiYXNlVW5pdCA9IF9yZWY1JHRoZW1lLnNwYWNpbmcuYmFzZVVuaXQ7XG4gIHJldHVybiB7XG4gICAgbGFiZWw6ICdsb2FkaW5nSW5kaWNhdG9yJyxcbiAgICBjb2xvcjogaXNGb2N1c2VkID8gY29sb3JzLm5ldXRyYWw2MCA6IGNvbG9ycy5uZXV0cmFsMjAsXG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIHBhZGRpbmc6IGJhc2VVbml0ICogMixcbiAgICB0cmFuc2l0aW9uOiAnY29sb3IgMTUwbXMnLFxuICAgIGFsaWduU2VsZjogJ2NlbnRlcicsXG4gICAgZm9udFNpemU6IHNpemUsXG4gICAgbGluZUhlaWdodDogMSxcbiAgICBtYXJnaW5SaWdodDogc2l6ZSxcbiAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnXG4gIH07XG59O1xuXG52YXIgTG9hZGluZ0RvdCA9IGZ1bmN0aW9uIExvYWRpbmdEb3QoX3JlZjYpIHtcbiAgdmFyIGRlbGF5ID0gX3JlZjYuZGVsYXksXG4gICAgICBvZmZzZXQgPSBfcmVmNi5vZmZzZXQ7XG4gIHJldHVybiBqc3goXCJzcGFuXCIsIHtcbiAgICBjc3M6XG4gICAgLyojX19QVVJFX18qL1xuICAgIF9jc3Moe1xuICAgICAgYW5pbWF0aW9uOiBcIlwiLmNvbmNhdChsb2FkaW5nRG90QW5pbWF0aW9ucywgXCIgMXMgZWFzZS1pbi1vdXQgXCIpLmNvbmNhdChkZWxheSwgXCJtcyBpbmZpbml0ZTtcIiksXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdjdXJyZW50Q29sb3InLFxuICAgICAgYm9yZGVyUmFkaXVzOiAnMWVtJyxcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgbWFyZ2luTGVmdDogb2Zmc2V0ID8gJzFlbScgOiBudWxsLFxuICAgICAgaGVpZ2h0OiAnMWVtJyxcbiAgICAgIHZlcnRpY2FsQWxpZ246ICd0b3AnLFxuICAgICAgd2lkdGg6ICcxZW0nXG4gICAgfSwgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gXCJcIiA6IFwiLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1sdVpHbGpZWFJ2Y25NdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklrRkJjMHhKSWl3aVptbHNaU0k2SW1sdVpHbGpZWFJ2Y25NdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2THlCQVpteHZkMXh1THlvcUlFQnFjM2dnYW5ONElDb3ZYRzVwYlhCdmNuUWdleUIwZVhCbElFNXZaR1VnZlNCbWNtOXRJQ2R5WldGamRDYzdYRzVwYlhCdmNuUWdleUJxYzNnc0lHdGxlV1p5WVcxbGN5QjlJR1p5YjIwZ0owQmxiVzkwYVc5dUwyTnZjbVVuTzF4dVhHNXBiWEJ2Y25RZ2RIbHdaU0I3SUVOdmJXMXZibEJ5YjNCekxDQlVhR1Z0WlNCOUlHWnliMjBnSnk0dUwzUjVjR1Z6Snp0Y2JseHVMeThnUFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVhHNHZMeUJFY205d1pHOTNiaUFtSUVOc1pXRnlJRWxqYjI1elhHNHZMeUE5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQxY2JseHVZMjl1YzNRZ1UzWm5JRDBnS0hzZ2MybDZaU3dnTGk0dWNISnZjSE1nZlRvZ2V5QnphWHBsT2lCdWRXMWlaWElnZlNrZ1BUNGdLRnh1SUNBOGMzWm5YRzRnSUNBZ2FHVnBaMmgwUFh0emFYcGxmVnh1SUNBZ0lIZHBaSFJvUFh0emFYcGxmVnh1SUNBZ0lIWnBaWGRDYjNnOVhDSXdJREFnTWpBZ01qQmNJbHh1SUNBZ0lHRnlhV0V0YUdsa1pHVnVQVndpZEhKMVpWd2lYRzRnSUNBZ1ptOWpkWE5oWW14bFBWd2labUZzYzJWY0lseHVJQ0FnSUdOemN6MTdlMXh1SUNBZ0lDQWdaR2x6Y0d4aGVUb2dKMmx1YkdsdVpTMWliRzlqYXljc1hHNGdJQ0FnSUNCbWFXeHNPaUFuWTNWeWNtVnVkRU52Ykc5eUp5eGNiaUFnSUNBZ0lHeHBibVZJWldsbmFIUTZJREVzWEc0Z0lDQWdJQ0J6ZEhKdmEyVTZJQ2RqZFhKeVpXNTBRMjlzYjNJbkxGeHVJQ0FnSUNBZ2MzUnliMnRsVjJsa2RHZzZJREFzWEc0Z0lDQWdmWDFjYmlBZ0lDQjdMaTR1Y0hKdmNITjlYRzRnSUM4K1hHNHBPMXh1WEc1bGVIQnZjblFnWTI5dWMzUWdRM0p2YzNOSlkyOXVJRDBnS0hCeWIzQnpPaUJoYm5rcElEMCtJQ2hjYmlBZ1BGTjJaeUJ6YVhwbFBYc3lNSDBnZXk0dUxuQnliM0J6ZlQ1Y2JpQWdJQ0E4Y0dGMGFDQmtQVndpVFRFMExqTTBPQ0F4TkM0NE5EbGpMVEF1TkRZNUlEQXVORFk1TFRFdU1qSTVJREF1TkRZNUxURXVOamszSURCc0xUSXVOalV4TFRNdU1ETXdMVEl1TmpVeElETXVNREk1WXkwd0xqUTJPU0F3TGpRMk9TMHhMakl5T1NBd0xqUTJPUzB4TGpZNU55QXdMVEF1TkRZNUxUQXVORFk1TFRBdU5EWTVMVEV1TWpJNUlEQXRNUzQyT1Rkc01pNDNOVGd0TXk0eE5TMHlMamMxT1MwekxqRTFNbU10TUM0ME5qa3RNQzQwTmprdE1DNDBOamt0TVM0eU1qZ2dNQzB4TGpZNU4zTXhMakl5T0Mwd0xqUTJPU0F4TGpZNU55QXdiREl1TmpVeUlETXVNRE14SURJdU5qVXhMVE11TURNeFl6QXVORFk1TFRBdU5EWTVJREV1TWpJNExUQXVORFk1SURFdU5qazNJREJ6TUM0ME5qa2dNUzR5TWprZ01DQXhMalk1TjJ3dE1pNDNOVGdnTXk0eE5USWdNaTQzTlRnZ015NHhOV013TGpRMk9TQXdMalEyT1NBd0xqUTJPU0F4TGpJeU9TQXdJREV1TmprNGVsd2lJQzgrWEc0Z0lEd3ZVM1puUGx4dUtUdGNibVY0Y0c5eWRDQmpiMjV6ZENCRWIzZHVRMmhsZG5KdmJpQTlJQ2h3Y205d2N6b2dZVzU1S1NBOVBpQW9YRzRnSUR4VGRtY2djMmw2WlQxN01qQjlJSHN1TGk1d2NtOXdjMzArWEc0Z0lDQWdQSEJoZEdnZ1pEMWNJazAwTGpVeE5pQTNMalUwT0dNd0xqUXpOaTB3TGpRME5pQXhMakEwTXkwd0xqUTRNU0F4TGpVM05pQXdiRE11T1RBNElETXVOelEzSURNdU9UQTRMVE11TnpRM1l6QXVOVE16TFRBdU5EZ3hJREV1TVRReExUQXVORFEySURFdU5UYzBJREFnTUM0ME16WWdNQzQwTkRVZ01DNDBNRGdnTVM0eE9UY2dNQ0F4TGpZeE5TMHdMalF3TmlBd0xqUXhPQzAwTGpZNU5TQTBMalV3TWkwMExqWTVOU0EwTGpVd01pMHdMakl4TnlBd0xqSXlNeTB3TGpVd01pQXdMak16TlMwd0xqYzROeUF3TGpNek5YTXRNQzQxTnkwd0xqRXhNaTB3TGpjNE9TMHdMak16TldNd0lEQXROQzR5T0RjdE5DNHdPRFF0TkM0Mk9UVXROQzQxTURKekxUQXVORE0yTFRFdU1UY2dNQzB4TGpZeE5YcGNJaUF2UGx4dUlDQThMMU4yWno1Y2JpazdYRzVjYmk4dklEMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVnh1THk4Z1JISnZjR1J2ZDI0Z0ppQkRiR1ZoY2lCQ2RYUjBiMjV6WEc0dkx5QTlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDFjYmx4dVpYaHdiM0owSUhSNWNHVWdTVzVrYVdOaGRHOXlVSEp2Y0hNZ1BTQkRiMjF0YjI1UWNtOXdjeUFtSUh0Y2JpQWdMeW9xSUZSb1pTQmphR2xzWkhKbGJpQjBieUJpWlNCeVpXNWtaWEpsWkNCcGJuTnBaR1VnZEdobElHbHVaR2xqWVhSdmNpNGdLaTljYmlBZ1kyaHBiR1J5Wlc0NklFNXZaR1VzWEc0Z0lDOHFLaUJRY205d2N5QjBhR0YwSUhkcGJHd2dZbVVnY0dGemMyVmtJRzl1SUhSdklIUm9aU0JqYUdsc1pISmxiaTRnS2k5Y2JpQWdhVzV1WlhKUWNtOXdjem9nWVc1NUxGeHVJQ0F2S2lvZ1ZHaGxJR1p2WTNWelpXUWdjM1JoZEdVZ2IyWWdkR2hsSUhObGJHVmpkQzRnS2k5Y2JpQWdhWE5HYjJOMWMyVmtPaUJpYjI5c1pXRnVMRnh1SUNBdktpb2dWMmhsZEdobGNpQjBhR1VnZEdWNGRDQnBjeUJ5YVdkb2RDQjBieUJzWldaMElDb3ZYRzRnSUdselVuUnNPaUJpYjI5c1pXRnVMRnh1ZlR0Y2JseHVZMjl1YzNRZ1ltRnpaVU5UVXlBOUlDaDdYRzRnSUdselJtOWpkWE5sWkN4Y2JpQWdkR2hsYldVNklIdGNiaUFnSUNCemNHRmphVzVuT2lCN0lHSmhjMlZWYm1sMElIMHNYRzRnSUNBZ1kyOXNiM0p6TEZ4dUlDQjlMRnh1ZlRvZ1NXNWthV05oZEc5eVVISnZjSE1wSUQwK0lDaDdYRzRnSUd4aFltVnNPaUFuYVc1a2FXTmhkRzl5UTI5dWRHRnBibVZ5Snl4Y2JpQWdZMjlzYjNJNklHbHpSbTlqZFhObFpDQS9JR052Ykc5eWN5NXVaWFYwY21Gc05qQWdPaUJqYjJ4dmNuTXVibVYxZEhKaGJESXdMRnh1SUNCa2FYTndiR0Y1T2lBblpteGxlQ2NzWEc0Z0lIQmhaR1JwYm1jNklHSmhjMlZWYm1sMElDb2dNaXhjYmlBZ2RISmhibk5wZEdsdmJqb2dKMk52Ykc5eUlERTFNRzF6Snl4Y2JseHVJQ0FuT21odmRtVnlKem9nZTF4dUlDQWdJR052Ykc5eU9pQnBjMFp2WTNWelpXUWdQeUJqYjJ4dmNuTXVibVYxZEhKaGJEZ3dJRG9nWTI5c2IzSnpMbTVsZFhSeVlXdzBNQ3hjYmlBZ2ZTeGNibjBwTzF4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnWkhKdmNHUnZkMjVKYm1ScFkyRjBiM0pEVTFNZ1BTQmlZWE5sUTFOVE8xeHVaWGh3YjNKMElHTnZibk4wSUVSeWIzQmtiM2R1U1c1a2FXTmhkRzl5SUQwZ0tIQnliM0J6T2lCSmJtUnBZMkYwYjNKUWNtOXdjeWtnUFQ0Z2UxeHVJQ0JqYjI1emRDQjdJR05vYVd4a2NtVnVMQ0JqYkdGemMwNWhiV1VzSUdONExDQm5aWFJUZEhsc1pYTXNJR2x1Ym1WeVVISnZjSE1nZlNBOUlIQnliM0J6TzF4dUlDQnlaWFIxY200Z0tGeHVJQ0FnSUR4a2FYWmNiaUFnSUNBZ0lIc3VMaTVwYm01bGNsQnliM0J6ZlZ4dUlDQWdJQ0FnWTNOelBYdG5aWFJUZEhsc1pYTW9KMlJ5YjNCa2IzZHVTVzVrYVdOaGRHOXlKeXdnY0hKdmNITXBmVnh1SUNBZ0lDQWdZMnhoYzNOT1lXMWxQWHRqZUNoY2JpQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJR2x1WkdsallYUnZjam9nZEhKMVpTeGNiaUFnSUNBZ0lDQWdJQ0FuWkhKdmNHUnZkMjR0YVc1a2FXTmhkRzl5SnpvZ2RISjFaU3hjYmlBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbFhHNGdJQ0FnSUNBcGZWeHVJQ0FnSUQ1Y2JpQWdJQ0FnSUh0amFHbHNaSEpsYmlCOGZDQThSRzkzYmtOb1pYWnliMjRnTHo1OVhHNGdJQ0FnUEM5a2FYWStYRzRnSUNrN1hHNTlPMXh1WEc1bGVIQnZjblFnWTI5dWMzUWdZMnhsWVhKSmJtUnBZMkYwYjNKRFUxTWdQU0JpWVhObFExTlRPMXh1Wlhod2IzSjBJR052Ym5OMElFTnNaV0Z5U1c1a2FXTmhkRzl5SUQwZ0tIQnliM0J6T2lCSmJtUnBZMkYwYjNKUWNtOXdjeWtnUFQ0Z2UxeHVJQ0JqYjI1emRDQjdJR05vYVd4a2NtVnVMQ0JqYkdGemMwNWhiV1VzSUdONExDQm5aWFJUZEhsc1pYTXNJR2x1Ym1WeVVISnZjSE1nZlNBOUlIQnliM0J6TzF4dUlDQnlaWFIxY200Z0tGeHVJQ0FnSUR4a2FYWmNiaUFnSUNBZ0lIc3VMaTVwYm01bGNsQnliM0J6ZlZ4dUlDQWdJQ0FnWTNOelBYdG5aWFJUZEhsc1pYTW9KMk5zWldGeVNXNWthV05oZEc5eUp5d2djSEp2Y0hNcGZWeHVJQ0FnSUNBZ1kyeGhjM05PWVcxbFBYdGplQ2hjYmlBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lHbHVaR2xqWVhSdmNqb2dkSEoxWlN4Y2JpQWdJQ0FnSUNBZ0lDQW5ZMnhsWVhJdGFXNWthV05oZEc5eUp6b2dkSEoxWlN4Y2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdZMnhoYzNOT1lXMWxYRzRnSUNBZ0lDQXBmVnh1SUNBZ0lENWNiaUFnSUNBZ0lIdGphR2xzWkhKbGJpQjhmQ0E4UTNKdmMzTkpZMjl1SUM4K2ZWeHVJQ0FnSUR3dlpHbDJQbHh1SUNBcE8xeHVmVHRjYmx4dUx5OGdQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5WEc0dkx5QlRaWEJoY21GMGIzSmNiaTh2SUQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBWeHVYRzUwZVhCbElGTmxjR0Z5WVhSdmNsTjBZWFJsSUQwZ2V5QnBjMFJwYzJGaWJHVmtPaUJpYjI5c1pXRnVJSDA3WEc1Y2JtVjRjRzl5ZENCamIyNXpkQ0JwYm1ScFkyRjBiM0pUWlhCaGNtRjBiM0pEVTFNZ1BTQW9lMXh1SUNCcGMwUnBjMkZpYkdWa0xGeHVJQ0IwYUdWdFpUb2dlMXh1SUNBZ0lITndZV05wYm1jNklIc2dZbUZ6WlZWdWFYUWdmU3hjYmlBZ0lDQmpiMnh2Y25Nc1hHNGdJSDBzWEc1OU9pQkRiMjF0YjI1UWNtOXdjeUFtSUZObGNHRnlZWFJ2Y2xOMFlYUmxLU0E5UGlBb2UxeHVJQ0JzWVdKbGJEb2dKMmx1WkdsallYUnZjbE5sY0dGeVlYUnZjaWNzWEc0Z0lHRnNhV2R1VTJWc1pqb2dKM04wY21WMFkyZ25MRnh1SUNCaVlXTnJaM0p2ZFc1a1EyOXNiM0k2SUdselJHbHpZV0pzWldRZ1B5QmpiMnh2Y25NdWJtVjFkSEpoYkRFd0lEb2dZMjlzYjNKekxtNWxkWFJ5WVd3eU1DeGNiaUFnYldGeVoybHVRbTkwZEc5dE9pQmlZWE5sVlc1cGRDQXFJRElzWEc0Z0lHMWhjbWRwYmxSdmNEb2dZbUZ6WlZWdWFYUWdLaUF5TEZ4dUlDQjNhV1IwYURvZ01TeGNibjBwTzF4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnU1c1a2FXTmhkRzl5VTJWd1lYSmhkRzl5SUQwZ0tIQnliM0J6T2lCSmJtUnBZMkYwYjNKUWNtOXdjeWtnUFQ0Z2UxeHVJQ0JqYjI1emRDQjdJR05zWVhOelRtRnRaU3dnWTNnc0lHZGxkRk4wZVd4bGN5d2dhVzV1WlhKUWNtOXdjeUI5SUQwZ2NISnZjSE03WEc0Z0lISmxkSFZ5YmlBb1hHNGdJQ0FnUEhOd1lXNWNiaUFnSUNBZ0lIc3VMaTVwYm01bGNsQnliM0J6ZlZ4dUlDQWdJQ0FnWTNOelBYdG5aWFJUZEhsc1pYTW9KMmx1WkdsallYUnZjbE5sY0dGeVlYUnZjaWNzSUhCeWIzQnpLWDFjYmlBZ0lDQWdJR05zWVhOelRtRnRaVDE3WTNnb2V5QW5hVzVrYVdOaGRHOXlMWE5sY0dGeVlYUnZjaWM2SUhSeWRXVWdmU3dnWTJ4aGMzTk9ZVzFsS1gxY2JpQWdJQ0F2UGx4dUlDQXBPMXh1ZlR0Y2JseHVMeThnUFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVhHNHZMeUJNYjJGa2FXNW5YRzR2THlBOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMWNibHh1WTI5dWMzUWdiRzloWkdsdVowUnZkRUZ1YVcxaGRHbHZibk1nUFNCclpYbG1jbUZ0WlhOZ1hHNGdJREFsTENBNE1DVXNJREV3TUNVZ2V5QnZjR0ZqYVhSNU9pQXdPeUI5WEc0Z0lEUXdKU0I3SUc5d1lXTnBkSGs2SURFN0lIMWNibUE3WEc1Y2JtVjRjRzl5ZENCamIyNXpkQ0JzYjJGa2FXNW5TVzVrYVdOaGRHOXlRMU5USUQwZ0tIdGNiaUFnYVhOR2IyTjFjMlZrTEZ4dUlDQnphWHBsTEZ4dUlDQjBhR1Z0WlRvZ2UxeHVJQ0FnSUdOdmJHOXljeXhjYmlBZ0lDQnpjR0ZqYVc1bk9pQjdJR0poYzJWVmJtbDBJSDBzWEc0Z0lIMHNYRzU5T2lCN1hHNGdJR2x6Um05amRYTmxaRG9nWW05dmJHVmhiaXhjYmlBZ2MybDZaVG9nYm5WdFltVnlMRnh1SUNCMGFHVnRaVG9nVkdobGJXVXNYRzU5S1NBOVBpQW9lMXh1SUNCc1lXSmxiRG9nSjJ4dllXUnBibWRKYm1ScFkyRjBiM0luTEZ4dUlDQmpiMnh2Y2pvZ2FYTkdiMk4xYzJWa0lEOGdZMjlzYjNKekxtNWxkWFJ5WVd3Mk1DQTZJR052Ykc5eWN5NXVaWFYwY21Gc01qQXNYRzRnSUdScGMzQnNZWGs2SUNkbWJHVjRKeXhjYmlBZ2NHRmtaR2x1WnpvZ1ltRnpaVlZ1YVhRZ0tpQXlMRnh1SUNCMGNtRnVjMmwwYVc5dU9pQW5ZMjlzYjNJZ01UVXdiWE1uTEZ4dUlDQmhiR2xuYmxObGJHWTZJQ2RqWlc1MFpYSW5MRnh1SUNCbWIyNTBVMmw2WlRvZ2MybDZaU3hjYmlBZ2JHbHVaVWhsYVdkb2REb2dNU3hjYmlBZ2JXRnlaMmx1VW1sbmFIUTZJSE5wZW1Vc1hHNGdJSFJsZUhSQmJHbG5iam9nSjJObGJuUmxjaWNzWEc0Z0lIWmxjblJwWTJGc1FXeHBaMjQ2SUNkdGFXUmtiR1VuTEZ4dWZTazdYRzVjYm5SNWNHVWdSRzkwVUhKdmNITWdQU0I3SUdSbGJHRjVPaUJ1ZFcxaVpYSXNJRzltWm5ObGREb2dZbTl2YkdWaGJpQjlPMXh1WTI5dWMzUWdURzloWkdsdVowUnZkQ0E5SUNoN0lHUmxiR0Y1TENCdlptWnpaWFFnZlRvZ1JHOTBVSEp2Y0hNcElEMCtJQ2hjYmlBZ1BITndZVzVjYmlBZ0lDQmpjM005ZTN0Y2JpQWdJQ0FnSUdGdWFXMWhkR2x2YmpvZ1lDUjdiRzloWkdsdVowUnZkRUZ1YVcxaGRHbHZibk45SURGeklHVmhjMlV0YVc0dGIzVjBJQ1I3WkdWc1lYbDliWE1nYVc1bWFXNXBkR1U3WUN4Y2JpQWdJQ0FnSUdKaFkydG5jbTkxYm1SRGIyeHZjam9nSjJOMWNuSmxiblJEYjJ4dmNpY3NYRzRnSUNBZ0lDQmliM0prWlhKU1lXUnBkWE02SUNjeFpXMG5MRnh1SUNBZ0lDQWdaR2x6Y0d4aGVUb2dKMmx1YkdsdVpTMWliRzlqYXljc1hHNGdJQ0FnSUNCdFlYSm5hVzVNWldaME9pQnZabVp6WlhRZ1B5QW5NV1Z0SnlBNklHNTFiR3dzWEc0Z0lDQWdJQ0JvWldsbmFIUTZJQ2N4WlcwbkxGeHVJQ0FnSUNBZ2RtVnlkR2xqWVd4QmJHbG5iam9nSjNSdmNDY3NYRzRnSUNBZ0lDQjNhV1IwYURvZ0p6RmxiU2NzWEc0Z0lDQWdmWDFjYmlBZ0x6NWNiaWs3WEc1Y2JtVjRjRzl5ZENCMGVYQmxJRXh2WVdScGJtZEpZMjl1VUhKdmNITWdQU0I3WEc0Z0lDOHFLaUJRY205d2N5QjBhR0YwSUhkcGJHd2dZbVVnY0dGemMyVmtJRzl1SUhSdklIUm9aU0JqYUdsc1pISmxiaTRnS2k5Y2JpQWdhVzV1WlhKUWNtOXdjem9nWVc1NUxGeHVJQ0F2S2lvZ1ZHaGxJR1p2WTNWelpXUWdjM1JoZEdVZ2IyWWdkR2hsSUhObGJHVmpkQzRnS2k5Y2JpQWdhWE5HYjJOMWMyVmtPaUJpYjI5c1pXRnVMRnh1SUNBdktpb2dWMmhsZEdobGNpQjBhR1VnZEdWNGRDQnBjeUJ5YVdkb2RDQjBieUJzWldaMElDb3ZYRzRnSUdselVuUnNPaUJpYjI5c1pXRnVMRnh1ZlNBbUlFTnZiVzF2YmxCeWIzQnpJQ1lnZTF4dUlDQWdJQzhxS2lCVFpYUWdjMmw2WlNCdlppQjBhR1VnWTI5dWRHRnBibVZ5TGlBcUwxeHVJQ0FnSUhOcGVtVTZJRzUxYldKbGNpeGNiaUFnZlR0Y2JtVjRjRzl5ZENCamIyNXpkQ0JNYjJGa2FXNW5TVzVrYVdOaGRHOXlJRDBnS0hCeWIzQnpPaUJNYjJGa2FXNW5TV052YmxCeWIzQnpLU0E5UGlCN1hHNGdJR052Ym5OMElIc2dZMnhoYzNOT1lXMWxMQ0JqZUN3Z1oyVjBVM1I1YkdWekxDQnBibTVsY2xCeWIzQnpMQ0JwYzFKMGJDQjlJRDBnY0hKdmNITTdYRzVjYmlBZ2NtVjBkWEp1SUNoY2JpQWdJQ0E4WkdsMlhHNGdJQ0FnSUNCN0xpNHVhVzV1WlhKUWNtOXdjMzFjYmlBZ0lDQWdJR056Y3oxN1oyVjBVM1I1YkdWektDZHNiMkZrYVc1blNXNWthV05oZEc5eUp5d2djSEp2Y0hNcGZWeHVJQ0FnSUNBZ1kyeGhjM05PWVcxbFBYdGplQ2hjYmlBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lHbHVaR2xqWVhSdmNqb2dkSEoxWlN4Y2JpQWdJQ0FnSUNBZ0lDQW5iRzloWkdsdVp5MXBibVJwWTJGMGIzSW5PaUIwY25WbExGeHVJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0JqYkdGemMwNWhiV1ZjYmlBZ0lDQWdJQ2w5WEc0Z0lDQWdQbHh1SUNBZ0lDQWdQRXh2WVdScGJtZEViM1FnWkdWc1lYazllekI5SUc5bVpuTmxkRDE3YVhOU2RHeDlJQzgrWEc0Z0lDQWdJQ0E4VEc5aFpHbHVaMFJ2ZENCa1pXeGhlVDE3TVRZd2ZTQnZabVp6WlhRZ0x6NWNiaUFnSUNBZ0lEeE1iMkZrYVc1blJHOTBJR1JsYkdGNVBYc3pNakI5SUc5bVpuTmxkRDE3SVdselVuUnNmU0F2UGx4dUlDQWdJRHd2WkdsMlBseHVJQ0FwTzF4dWZUdGNia3h2WVdScGJtZEpibVJwWTJGMGIzSXVaR1ZtWVhWc2RGQnliM0J6SUQwZ2V5QnphWHBsT2lBMElIMDdYRzRpWFgwPSAqL1wiKVxuICB9KTtcbn07XG5cbnZhciBMb2FkaW5nSW5kaWNhdG9yID0gZnVuY3Rpb24gTG9hZGluZ0luZGljYXRvcihwcm9wcykge1xuICB2YXIgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY3ggPSBwcm9wcy5jeCxcbiAgICAgIGdldFN0eWxlcyA9IHByb3BzLmdldFN0eWxlcyxcbiAgICAgIGlubmVyUHJvcHMgPSBwcm9wcy5pbm5lclByb3BzLFxuICAgICAgaXNSdGwgPSBwcm9wcy5pc1J0bDtcbiAgcmV0dXJuIGpzeChcImRpdlwiLCBfZXh0ZW5kcyh7fSwgaW5uZXJQcm9wcywge1xuICAgIGNzczogZ2V0U3R5bGVzKCdsb2FkaW5nSW5kaWNhdG9yJywgcHJvcHMpLFxuICAgIGNsYXNzTmFtZTogY3goe1xuICAgICAgaW5kaWNhdG9yOiB0cnVlLFxuICAgICAgJ2xvYWRpbmctaW5kaWNhdG9yJzogdHJ1ZVxuICAgIH0sIGNsYXNzTmFtZSlcbiAgfSksIGpzeChMb2FkaW5nRG90LCB7XG4gICAgZGVsYXk6IDAsXG4gICAgb2Zmc2V0OiBpc1J0bFxuICB9KSwganN4KExvYWRpbmdEb3QsIHtcbiAgICBkZWxheTogMTYwLFxuICAgIG9mZnNldDogdHJ1ZVxuICB9KSwganN4KExvYWRpbmdEb3QsIHtcbiAgICBkZWxheTogMzIwLFxuICAgIG9mZnNldDogIWlzUnRsXG4gIH0pKTtcbn07XG5Mb2FkaW5nSW5kaWNhdG9yLmRlZmF1bHRQcm9wcyA9IHtcbiAgc2l6ZTogNFxufTtcblxudmFyIGNzcyA9IGZ1bmN0aW9uIGNzcyhfcmVmKSB7XG4gIHZhciBpc0Rpc2FibGVkID0gX3JlZi5pc0Rpc2FibGVkLFxuICAgICAgaXNGb2N1c2VkID0gX3JlZi5pc0ZvY3VzZWQsXG4gICAgICBfcmVmJHRoZW1lID0gX3JlZi50aGVtZSxcbiAgICAgIGNvbG9ycyA9IF9yZWYkdGhlbWUuY29sb3JzLFxuICAgICAgYm9yZGVyUmFkaXVzID0gX3JlZiR0aGVtZS5ib3JkZXJSYWRpdXMsXG4gICAgICBzcGFjaW5nID0gX3JlZiR0aGVtZS5zcGFjaW5nO1xuICByZXR1cm4ge1xuICAgIGxhYmVsOiAnY29udHJvbCcsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgYmFja2dyb3VuZENvbG9yOiBpc0Rpc2FibGVkID8gY29sb3JzLm5ldXRyYWw1IDogY29sb3JzLm5ldXRyYWwwLFxuICAgIGJvcmRlckNvbG9yOiBpc0Rpc2FibGVkID8gY29sb3JzLm5ldXRyYWwxMCA6IGlzRm9jdXNlZCA/IGNvbG9ycy5wcmltYXJ5IDogY29sb3JzLm5ldXRyYWwyMCxcbiAgICBib3JkZXJSYWRpdXM6IGJvcmRlclJhZGl1cyxcbiAgICBib3JkZXJTdHlsZTogJ3NvbGlkJyxcbiAgICBib3JkZXJXaWR0aDogMSxcbiAgICBib3hTaGFkb3c6IGlzRm9jdXNlZCA/IFwiMCAwIDAgMXB4IFwiLmNvbmNhdChjb2xvcnMucHJpbWFyeSkgOiBudWxsLFxuICAgIGN1cnNvcjogJ2RlZmF1bHQnLFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBmbGV4V3JhcDogJ3dyYXAnLFxuICAgIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYmV0d2VlbicsXG4gICAgbWluSGVpZ2h0OiBzcGFjaW5nLmNvbnRyb2xIZWlnaHQsXG4gICAgb3V0bGluZTogJzAgIWltcG9ydGFudCcsXG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgdHJhbnNpdGlvbjogJ2FsbCAxMDBtcycsXG4gICAgJyY6aG92ZXInOiB7XG4gICAgICBib3JkZXJDb2xvcjogaXNGb2N1c2VkID8gY29sb3JzLnByaW1hcnkgOiBjb2xvcnMubmV1dHJhbDMwXG4gICAgfVxuICB9O1xufTtcblxudmFyIENvbnRyb2wgPSBmdW5jdGlvbiBDb250cm9sKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY3ggPSBwcm9wcy5jeCxcbiAgICAgIGdldFN0eWxlcyA9IHByb3BzLmdldFN0eWxlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGlzRGlzYWJsZWQgPSBwcm9wcy5pc0Rpc2FibGVkLFxuICAgICAgaXNGb2N1c2VkID0gcHJvcHMuaXNGb2N1c2VkLFxuICAgICAgaW5uZXJSZWYgPSBwcm9wcy5pbm5lclJlZixcbiAgICAgIGlubmVyUHJvcHMgPSBwcm9wcy5pbm5lclByb3BzLFxuICAgICAgbWVudUlzT3BlbiA9IHByb3BzLm1lbnVJc09wZW47XG4gIHJldHVybiBqc3goXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgIHJlZjogaW5uZXJSZWYsXG4gICAgY3NzOiBnZXRTdHlsZXMoJ2NvbnRyb2wnLCBwcm9wcyksXG4gICAgY2xhc3NOYW1lOiBjeCh7XG4gICAgICBjb250cm9sOiB0cnVlLFxuICAgICAgJ2NvbnRyb2wtLWlzLWRpc2FibGVkJzogaXNEaXNhYmxlZCxcbiAgICAgICdjb250cm9sLS1pcy1mb2N1c2VkJzogaXNGb2N1c2VkLFxuICAgICAgJ2NvbnRyb2wtLW1lbnUtaXMtb3Blbic6IG1lbnVJc09wZW5cbiAgICB9LCBjbGFzc05hbWUpXG4gIH0sIGlubmVyUHJvcHMpLCBjaGlsZHJlbik7XG59O1xuXG52YXIgZ3JvdXBDU1MgPSBmdW5jdGlvbiBncm91cENTUyhfcmVmKSB7XG4gIHZhciBzcGFjaW5nID0gX3JlZi50aGVtZS5zcGFjaW5nO1xuICByZXR1cm4ge1xuICAgIHBhZGRpbmdCb3R0b206IHNwYWNpbmcuYmFzZVVuaXQgKiAyLFxuICAgIHBhZGRpbmdUb3A6IHNwYWNpbmcuYmFzZVVuaXQgKiAyXG4gIH07XG59O1xuXG52YXIgR3JvdXAgPSBmdW5jdGlvbiBHcm91cChwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGN4ID0gcHJvcHMuY3gsXG4gICAgICBnZXRTdHlsZXMgPSBwcm9wcy5nZXRTdHlsZXMsXG4gICAgICBIZWFkaW5nID0gcHJvcHMuSGVhZGluZyxcbiAgICAgIGhlYWRpbmdQcm9wcyA9IHByb3BzLmhlYWRpbmdQcm9wcyxcbiAgICAgIGxhYmVsID0gcHJvcHMubGFiZWwsXG4gICAgICB0aGVtZSA9IHByb3BzLnRoZW1lLFxuICAgICAgc2VsZWN0UHJvcHMgPSBwcm9wcy5zZWxlY3RQcm9wcztcbiAgcmV0dXJuIGpzeChcImRpdlwiLCB7XG4gICAgY3NzOiBnZXRTdHlsZXMoJ2dyb3VwJywgcHJvcHMpLFxuICAgIGNsYXNzTmFtZTogY3goe1xuICAgICAgZ3JvdXA6IHRydWVcbiAgICB9LCBjbGFzc05hbWUpXG4gIH0sIGpzeChIZWFkaW5nLCBfZXh0ZW5kcyh7fSwgaGVhZGluZ1Byb3BzLCB7XG4gICAgc2VsZWN0UHJvcHM6IHNlbGVjdFByb3BzLFxuICAgIHRoZW1lOiB0aGVtZSxcbiAgICBnZXRTdHlsZXM6IGdldFN0eWxlcyxcbiAgICBjeDogY3hcbiAgfSksIGxhYmVsKSwganN4KFwiZGl2XCIsIG51bGwsIGNoaWxkcmVuKSk7XG59O1xuXG52YXIgZ3JvdXBIZWFkaW5nQ1NTID0gZnVuY3Rpb24gZ3JvdXBIZWFkaW5nQ1NTKF9yZWYyKSB7XG4gIHZhciBzcGFjaW5nID0gX3JlZjIudGhlbWUuc3BhY2luZztcbiAgcmV0dXJuIHtcbiAgICBsYWJlbDogJ2dyb3VwJyxcbiAgICBjb2xvcjogJyM5OTknLFxuICAgIGN1cnNvcjogJ2RlZmF1bHQnLFxuICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgZm9udFNpemU6ICc3NSUnLFxuICAgIGZvbnRXZWlnaHQ6ICc1MDAnLFxuICAgIG1hcmdpbkJvdHRvbTogJzAuMjVlbScsXG4gICAgcGFkZGluZ0xlZnQ6IHNwYWNpbmcuYmFzZVVuaXQgKiAzLFxuICAgIHBhZGRpbmdSaWdodDogc3BhY2luZy5iYXNlVW5pdCAqIDMsXG4gICAgdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZSdcbiAgfTtcbn07XG52YXIgR3JvdXBIZWFkaW5nID0gZnVuY3Rpb24gR3JvdXBIZWFkaW5nKHByb3BzKSB7XG4gIHZhciBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjeCA9IHByb3BzLmN4LFxuICAgICAgZ2V0U3R5bGVzID0gcHJvcHMuZ2V0U3R5bGVzLFxuICAgICAgdGhlbWUgPSBwcm9wcy50aGVtZSxcbiAgICAgIHNlbGVjdFByb3BzID0gcHJvcHMuc2VsZWN0UHJvcHMsXG4gICAgICBjbGVhblByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjbGFzc05hbWVcIiwgXCJjeFwiLCBcImdldFN0eWxlc1wiLCBcInRoZW1lXCIsIFwic2VsZWN0UHJvcHNcIl0pO1xuXG4gIHJldHVybiBqc3goXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgIGNzczogZ2V0U3R5bGVzKCdncm91cEhlYWRpbmcnLCBfb2JqZWN0U3ByZWFkKHtcbiAgICAgIHRoZW1lOiB0aGVtZVxuICAgIH0sIGNsZWFuUHJvcHMpKSxcbiAgICBjbGFzc05hbWU6IGN4KHtcbiAgICAgICdncm91cC1oZWFkaW5nJzogdHJ1ZVxuICAgIH0sIGNsYXNzTmFtZSlcbiAgfSwgY2xlYW5Qcm9wcykpO1xufTtcblxudmFyIGlucHV0Q1NTID0gZnVuY3Rpb24gaW5wdXRDU1MoX3JlZikge1xuICB2YXIgaXNEaXNhYmxlZCA9IF9yZWYuaXNEaXNhYmxlZCxcbiAgICAgIF9yZWYkdGhlbWUgPSBfcmVmLnRoZW1lLFxuICAgICAgc3BhY2luZyA9IF9yZWYkdGhlbWUuc3BhY2luZyxcbiAgICAgIGNvbG9ycyA9IF9yZWYkdGhlbWUuY29sb3JzO1xuICByZXR1cm4ge1xuICAgIG1hcmdpbjogc3BhY2luZy5iYXNlVW5pdCAvIDIsXG4gICAgcGFkZGluZ0JvdHRvbTogc3BhY2luZy5iYXNlVW5pdCAvIDIsXG4gICAgcGFkZGluZ1RvcDogc3BhY2luZy5iYXNlVW5pdCAvIDIsXG4gICAgdmlzaWJpbGl0eTogaXNEaXNhYmxlZCA/ICdoaWRkZW4nIDogJ3Zpc2libGUnLFxuICAgIGNvbG9yOiBjb2xvcnMubmV1dHJhbDgwXG4gIH07XG59O1xuXG52YXIgaW5wdXRTdHlsZSA9IGZ1bmN0aW9uIGlucHV0U3R5bGUoaXNIaWRkZW4pIHtcbiAgcmV0dXJuIHtcbiAgICBsYWJlbDogJ2lucHV0JyxcbiAgICBiYWNrZ3JvdW5kOiAwLFxuICAgIGJvcmRlcjogMCxcbiAgICBmb250U2l6ZTogJ2luaGVyaXQnLFxuICAgIG9wYWNpdHk6IGlzSGlkZGVuID8gMCA6IDEsXG4gICAgb3V0bGluZTogMCxcbiAgICBwYWRkaW5nOiAwLFxuICAgIGNvbG9yOiAnaW5oZXJpdCdcbiAgfTtcbn07XG5cbnZhciBJbnB1dCA9IGZ1bmN0aW9uIElucHV0KF9yZWYyKSB7XG4gIHZhciBjbGFzc05hbWUgPSBfcmVmMi5jbGFzc05hbWUsXG4gICAgICBjeCA9IF9yZWYyLmN4LFxuICAgICAgZ2V0U3R5bGVzID0gX3JlZjIuZ2V0U3R5bGVzLFxuICAgICAgaW5uZXJSZWYgPSBfcmVmMi5pbm5lclJlZixcbiAgICAgIGlzSGlkZGVuID0gX3JlZjIuaXNIaWRkZW4sXG4gICAgICBpc0Rpc2FibGVkID0gX3JlZjIuaXNEaXNhYmxlZCxcbiAgICAgIHRoZW1lID0gX3JlZjIudGhlbWUsXG4gICAgICBzZWxlY3RQcm9wcyA9IF9yZWYyLnNlbGVjdFByb3BzLFxuICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZjIsIFtcImNsYXNzTmFtZVwiLCBcImN4XCIsIFwiZ2V0U3R5bGVzXCIsIFwiaW5uZXJSZWZcIiwgXCJpc0hpZGRlblwiLCBcImlzRGlzYWJsZWRcIiwgXCJ0aGVtZVwiLCBcInNlbGVjdFByb3BzXCJdKTtcblxuICByZXR1cm4ganN4KFwiZGl2XCIsIHtcbiAgICBjc3M6IGdldFN0eWxlcygnaW5wdXQnLCBfb2JqZWN0U3ByZWFkKHtcbiAgICAgIHRoZW1lOiB0aGVtZVxuICAgIH0sIHByb3BzKSlcbiAgfSwganN4KEF1dG9zaXplSW5wdXQsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGN4KHtcbiAgICAgIGlucHV0OiB0cnVlXG4gICAgfSwgY2xhc3NOYW1lKSxcbiAgICBpbnB1dFJlZjogaW5uZXJSZWYsXG4gICAgaW5wdXRTdHlsZTogaW5wdXRTdHlsZShpc0hpZGRlbiksXG4gICAgZGlzYWJsZWQ6IGlzRGlzYWJsZWRcbiAgfSwgcHJvcHMpKSk7XG59O1xuXG52YXIgbXVsdGlWYWx1ZUNTUyA9IGZ1bmN0aW9uIG11bHRpVmFsdWVDU1MoX3JlZikge1xuICB2YXIgX3JlZiR0aGVtZSA9IF9yZWYudGhlbWUsXG4gICAgICBzcGFjaW5nID0gX3JlZiR0aGVtZS5zcGFjaW5nLFxuICAgICAgYm9yZGVyUmFkaXVzID0gX3JlZiR0aGVtZS5ib3JkZXJSYWRpdXMsXG4gICAgICBjb2xvcnMgPSBfcmVmJHRoZW1lLmNvbG9ycztcbiAgcmV0dXJuIHtcbiAgICBsYWJlbDogJ211bHRpVmFsdWUnLFxuICAgIGJhY2tncm91bmRDb2xvcjogY29sb3JzLm5ldXRyYWwxMCxcbiAgICBib3JkZXJSYWRpdXM6IGJvcmRlclJhZGl1cyAvIDIsXG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIG1hcmdpbjogc3BhY2luZy5iYXNlVW5pdCAvIDIsXG4gICAgbWluV2lkdGg6IDAgLy8gcmVzb2x2ZXMgZmxleC90ZXh0LW92ZXJmbG93IGJ1Z1xuXG4gIH07XG59O1xudmFyIG11bHRpVmFsdWVMYWJlbENTUyA9IGZ1bmN0aW9uIG11bHRpVmFsdWVMYWJlbENTUyhfcmVmMikge1xuICB2YXIgX3JlZjIkdGhlbWUgPSBfcmVmMi50aGVtZSxcbiAgICAgIGJvcmRlclJhZGl1cyA9IF9yZWYyJHRoZW1lLmJvcmRlclJhZGl1cyxcbiAgICAgIGNvbG9ycyA9IF9yZWYyJHRoZW1lLmNvbG9ycyxcbiAgICAgIGNyb3BXaXRoRWxsaXBzaXMgPSBfcmVmMi5jcm9wV2l0aEVsbGlwc2lzO1xuICByZXR1cm4ge1xuICAgIGJvcmRlclJhZGl1czogYm9yZGVyUmFkaXVzIC8gMixcbiAgICBjb2xvcjogY29sb3JzLm5ldXRyYWw4MCxcbiAgICBmb250U2l6ZTogJzg1JScsXG4gICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgIHBhZGRpbmc6IDMsXG4gICAgcGFkZGluZ0xlZnQ6IDYsXG4gICAgdGV4dE92ZXJmbG93OiBjcm9wV2l0aEVsbGlwc2lzID8gJ2VsbGlwc2lzJyA6IG51bGwsXG4gICAgd2hpdGVTcGFjZTogJ25vd3JhcCdcbiAgfTtcbn07XG52YXIgbXVsdGlWYWx1ZVJlbW92ZUNTUyA9IGZ1bmN0aW9uIG11bHRpVmFsdWVSZW1vdmVDU1MoX3JlZjMpIHtcbiAgdmFyIF9yZWYzJHRoZW1lID0gX3JlZjMudGhlbWUsXG4gICAgICBzcGFjaW5nID0gX3JlZjMkdGhlbWUuc3BhY2luZyxcbiAgICAgIGJvcmRlclJhZGl1cyA9IF9yZWYzJHRoZW1lLmJvcmRlclJhZGl1cyxcbiAgICAgIGNvbG9ycyA9IF9yZWYzJHRoZW1lLmNvbG9ycyxcbiAgICAgIGlzRm9jdXNlZCA9IF9yZWYzLmlzRm9jdXNlZDtcbiAgcmV0dXJuIHtcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBib3JkZXJSYWRpdXM6IGJvcmRlclJhZGl1cyAvIDIsXG4gICAgYmFja2dyb3VuZENvbG9yOiBpc0ZvY3VzZWQgJiYgY29sb3JzLmRhbmdlckxpZ2h0LFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBwYWRkaW5nTGVmdDogc3BhY2luZy5iYXNlVW5pdCxcbiAgICBwYWRkaW5nUmlnaHQ6IHNwYWNpbmcuYmFzZVVuaXQsXG4gICAgJzpob3Zlcic6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogY29sb3JzLmRhbmdlckxpZ2h0LFxuICAgICAgY29sb3I6IGNvbG9ycy5kYW5nZXJcbiAgICB9XG4gIH07XG59O1xudmFyIE11bHRpVmFsdWVHZW5lcmljID0gZnVuY3Rpb24gTXVsdGlWYWx1ZUdlbmVyaWMoX3JlZjQpIHtcbiAgdmFyIGNoaWxkcmVuID0gX3JlZjQuY2hpbGRyZW4sXG4gICAgICBpbm5lclByb3BzID0gX3JlZjQuaW5uZXJQcm9wcztcbiAgcmV0dXJuIGpzeChcImRpdlwiLCBpbm5lclByb3BzLCBjaGlsZHJlbik7XG59O1xudmFyIE11bHRpVmFsdWVDb250YWluZXIgPSBNdWx0aVZhbHVlR2VuZXJpYztcbnZhciBNdWx0aVZhbHVlTGFiZWwgPSBNdWx0aVZhbHVlR2VuZXJpYztcbnZhciBNdWx0aVZhbHVlUmVtb3ZlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhNdWx0aVZhbHVlUmVtb3ZlLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNdWx0aVZhbHVlUmVtb3ZlKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNdWx0aVZhbHVlUmVtb3ZlKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoTXVsdGlWYWx1ZVJlbW92ZSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoTXVsdGlWYWx1ZVJlbW92ZSwgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICBpbm5lclByb3BzID0gX3RoaXMkcHJvcHMuaW5uZXJQcm9wcztcbiAgICAgIHJldHVybiBqc3goXCJkaXZcIiwgaW5uZXJQcm9wcywgY2hpbGRyZW4gfHwganN4KENyb3NzSWNvbiwge1xuICAgICAgICBzaXplOiAxNFxuICAgICAgfSkpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBNdWx0aVZhbHVlUmVtb3ZlO1xufShDb21wb25lbnQpO1xuXG52YXIgTXVsdGlWYWx1ZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbXBvbmVudDIpIHtcbiAgX2luaGVyaXRzKE11bHRpVmFsdWUsIF9Db21wb25lbnQyKTtcblxuICBmdW5jdGlvbiBNdWx0aVZhbHVlKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNdWx0aVZhbHVlKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoTXVsdGlWYWx1ZSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoTXVsdGlWYWx1ZSwgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMyLmNoaWxkcmVuLFxuICAgICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzMi5jbGFzc05hbWUsXG4gICAgICAgICAgY29tcG9uZW50cyA9IF90aGlzJHByb3BzMi5jb21wb25lbnRzLFxuICAgICAgICAgIGN4ID0gX3RoaXMkcHJvcHMyLmN4LFxuICAgICAgICAgIGRhdGEgPSBfdGhpcyRwcm9wczIuZGF0YSxcbiAgICAgICAgICBnZXRTdHlsZXMgPSBfdGhpcyRwcm9wczIuZ2V0U3R5bGVzLFxuICAgICAgICAgIGlubmVyUHJvcHMgPSBfdGhpcyRwcm9wczIuaW5uZXJQcm9wcyxcbiAgICAgICAgICBpc0Rpc2FibGVkID0gX3RoaXMkcHJvcHMyLmlzRGlzYWJsZWQsXG4gICAgICAgICAgcmVtb3ZlUHJvcHMgPSBfdGhpcyRwcm9wczIucmVtb3ZlUHJvcHMsXG4gICAgICAgICAgc2VsZWN0UHJvcHMgPSBfdGhpcyRwcm9wczIuc2VsZWN0UHJvcHM7XG4gICAgICB2YXIgQ29udGFpbmVyID0gY29tcG9uZW50cy5Db250YWluZXIsXG4gICAgICAgICAgTGFiZWwgPSBjb21wb25lbnRzLkxhYmVsLFxuICAgICAgICAgIFJlbW92ZSA9IGNvbXBvbmVudHMuUmVtb3ZlO1xuICAgICAgcmV0dXJuIGpzeChDbGFzc05hbWVzLCBudWxsLCBmdW5jdGlvbiAoX3JlZjUpIHtcbiAgICAgICAgdmFyIGNzcyA9IF9yZWY1LmNzcyxcbiAgICAgICAgICAgIGVtb3Rpb25DeCA9IF9yZWY1LmN4O1xuICAgICAgICByZXR1cm4ganN4KENvbnRhaW5lciwge1xuICAgICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgICAgaW5uZXJQcm9wczogX29iamVjdFNwcmVhZCh7fSwgaW5uZXJQcm9wcywge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiBlbW90aW9uQ3goY3NzKGdldFN0eWxlcygnbXVsdGlWYWx1ZScsIF90aGlzLnByb3BzKSksIGN4KHtcbiAgICAgICAgICAgICAgJ211bHRpLXZhbHVlJzogdHJ1ZSxcbiAgICAgICAgICAgICAgJ211bHRpLXZhbHVlLS1pcy1kaXNhYmxlZCc6IGlzRGlzYWJsZWRcbiAgICAgICAgICAgIH0sIGNsYXNzTmFtZSkpXG4gICAgICAgICAgfSksXG4gICAgICAgICAgc2VsZWN0UHJvcHM6IHNlbGVjdFByb3BzXG4gICAgICAgIH0sIGpzeChMYWJlbCwge1xuICAgICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgICAgaW5uZXJQcm9wczoge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiBlbW90aW9uQ3goY3NzKGdldFN0eWxlcygnbXVsdGlWYWx1ZUxhYmVsJywgX3RoaXMucHJvcHMpKSwgY3goe1xuICAgICAgICAgICAgICAnbXVsdGktdmFsdWVfX2xhYmVsJzogdHJ1ZVxuICAgICAgICAgICAgfSwgY2xhc3NOYW1lKSlcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNlbGVjdFByb3BzOiBzZWxlY3RQcm9wc1xuICAgICAgICB9LCBjaGlsZHJlbiksIGpzeChSZW1vdmUsIHtcbiAgICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICAgIGlubmVyUHJvcHM6IF9vYmplY3RTcHJlYWQoe1xuICAgICAgICAgICAgY2xhc3NOYW1lOiBlbW90aW9uQ3goY3NzKGdldFN0eWxlcygnbXVsdGlWYWx1ZVJlbW92ZScsIF90aGlzLnByb3BzKSksIGN4KHtcbiAgICAgICAgICAgICAgJ211bHRpLXZhbHVlX19yZW1vdmUnOiB0cnVlXG4gICAgICAgICAgICB9LCBjbGFzc05hbWUpKVxuICAgICAgICAgIH0sIHJlbW92ZVByb3BzKSxcbiAgICAgICAgICBzZWxlY3RQcm9wczogc2VsZWN0UHJvcHNcbiAgICAgICAgfSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE11bHRpVmFsdWU7XG59KENvbXBvbmVudCk7XG5cbl9kZWZpbmVQcm9wZXJ0eShNdWx0aVZhbHVlLCBcImRlZmF1bHRQcm9wc1wiLCB7XG4gIGNyb3BXaXRoRWxsaXBzaXM6IHRydWVcbn0pO1xuXG52YXIgb3B0aW9uQ1NTID0gZnVuY3Rpb24gb3B0aW9uQ1NTKF9yZWYpIHtcbiAgdmFyIGlzRGlzYWJsZWQgPSBfcmVmLmlzRGlzYWJsZWQsXG4gICAgICBpc0ZvY3VzZWQgPSBfcmVmLmlzRm9jdXNlZCxcbiAgICAgIGlzU2VsZWN0ZWQgPSBfcmVmLmlzU2VsZWN0ZWQsXG4gICAgICBfcmVmJHRoZW1lID0gX3JlZi50aGVtZSxcbiAgICAgIHNwYWNpbmcgPSBfcmVmJHRoZW1lLnNwYWNpbmcsXG4gICAgICBjb2xvcnMgPSBfcmVmJHRoZW1lLmNvbG9ycztcbiAgcmV0dXJuIHtcbiAgICBsYWJlbDogJ29wdGlvbicsXG4gICAgYmFja2dyb3VuZENvbG9yOiBpc1NlbGVjdGVkID8gY29sb3JzLnByaW1hcnkgOiBpc0ZvY3VzZWQgPyBjb2xvcnMucHJpbWFyeTI1IDogJ3RyYW5zcGFyZW50JyxcbiAgICBjb2xvcjogaXNEaXNhYmxlZCA/IGNvbG9ycy5uZXV0cmFsMjAgOiBpc1NlbGVjdGVkID8gY29sb3JzLm5ldXRyYWwwIDogJ2luaGVyaXQnLFxuICAgIGN1cnNvcjogJ2RlZmF1bHQnLFxuICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgZm9udFNpemU6ICdpbmhlcml0JyxcbiAgICBwYWRkaW5nOiBcIlwiLmNvbmNhdChzcGFjaW5nLmJhc2VVbml0ICogMiwgXCJweCBcIikuY29uY2F0KHNwYWNpbmcuYmFzZVVuaXQgKiAzLCBcInB4XCIpLFxuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgdXNlclNlbGVjdDogJ25vbmUnLFxuICAgIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAncmdiYSgwLCAwLCAwLCAwKScsXG4gICAgLy8gcHJvdmlkZSBzb21lIGFmZm9yZGFuY2Ugb24gdG91Y2ggZGV2aWNlc1xuICAgICc6YWN0aXZlJzoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiAhaXNEaXNhYmxlZCAmJiAoaXNTZWxlY3RlZCA/IGNvbG9ycy5wcmltYXJ5IDogY29sb3JzLnByaW1hcnk1MClcbiAgICB9XG4gIH07XG59O1xuXG52YXIgT3B0aW9uID0gZnVuY3Rpb24gT3B0aW9uKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY3ggPSBwcm9wcy5jeCxcbiAgICAgIGdldFN0eWxlcyA9IHByb3BzLmdldFN0eWxlcyxcbiAgICAgIGlzRGlzYWJsZWQgPSBwcm9wcy5pc0Rpc2FibGVkLFxuICAgICAgaXNGb2N1c2VkID0gcHJvcHMuaXNGb2N1c2VkLFxuICAgICAgaXNTZWxlY3RlZCA9IHByb3BzLmlzU2VsZWN0ZWQsXG4gICAgICBpbm5lclJlZiA9IHByb3BzLmlubmVyUmVmLFxuICAgICAgaW5uZXJQcm9wcyA9IHByb3BzLmlubmVyUHJvcHM7XG4gIHJldHVybiBqc3goXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgIGNzczogZ2V0U3R5bGVzKCdvcHRpb24nLCBwcm9wcyksXG4gICAgY2xhc3NOYW1lOiBjeCh7XG4gICAgICBvcHRpb246IHRydWUsXG4gICAgICAnb3B0aW9uLS1pcy1kaXNhYmxlZCc6IGlzRGlzYWJsZWQsXG4gICAgICAnb3B0aW9uLS1pcy1mb2N1c2VkJzogaXNGb2N1c2VkLFxuICAgICAgJ29wdGlvbi0taXMtc2VsZWN0ZWQnOiBpc1NlbGVjdGVkXG4gICAgfSwgY2xhc3NOYW1lKSxcbiAgICByZWY6IGlubmVyUmVmXG4gIH0sIGlubmVyUHJvcHMpLCBjaGlsZHJlbik7XG59O1xuXG52YXIgcGxhY2Vob2xkZXJDU1MgPSBmdW5jdGlvbiBwbGFjZWhvbGRlckNTUyhfcmVmKSB7XG4gIHZhciBfcmVmJHRoZW1lID0gX3JlZi50aGVtZSxcbiAgICAgIHNwYWNpbmcgPSBfcmVmJHRoZW1lLnNwYWNpbmcsXG4gICAgICBjb2xvcnMgPSBfcmVmJHRoZW1lLmNvbG9ycztcbiAgcmV0dXJuIHtcbiAgICBsYWJlbDogJ3BsYWNlaG9sZGVyJyxcbiAgICBjb2xvcjogY29sb3JzLm5ldXRyYWw1MCxcbiAgICBtYXJnaW5MZWZ0OiBzcGFjaW5nLmJhc2VVbml0IC8gMixcbiAgICBtYXJnaW5SaWdodDogc3BhY2luZy5iYXNlVW5pdCAvIDIsXG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgdG9wOiAnNTAlJyxcbiAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKC01MCUpJ1xuICB9O1xufTtcblxudmFyIFBsYWNlaG9sZGVyID0gZnVuY3Rpb24gUGxhY2Vob2xkZXIocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjeCA9IHByb3BzLmN4LFxuICAgICAgZ2V0U3R5bGVzID0gcHJvcHMuZ2V0U3R5bGVzLFxuICAgICAgaW5uZXJQcm9wcyA9IHByb3BzLmlubmVyUHJvcHM7XG4gIHJldHVybiBqc3goXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgIGNzczogZ2V0U3R5bGVzKCdwbGFjZWhvbGRlcicsIHByb3BzKSxcbiAgICBjbGFzc05hbWU6IGN4KHtcbiAgICAgIHBsYWNlaG9sZGVyOiB0cnVlXG4gICAgfSwgY2xhc3NOYW1lKVxuICB9LCBpbm5lclByb3BzKSwgY2hpbGRyZW4pO1xufTtcblxudmFyIGNzcyQxID0gZnVuY3Rpb24gY3NzKF9yZWYpIHtcbiAgdmFyIGlzRGlzYWJsZWQgPSBfcmVmLmlzRGlzYWJsZWQsXG4gICAgICBfcmVmJHRoZW1lID0gX3JlZi50aGVtZSxcbiAgICAgIHNwYWNpbmcgPSBfcmVmJHRoZW1lLnNwYWNpbmcsXG4gICAgICBjb2xvcnMgPSBfcmVmJHRoZW1lLmNvbG9ycztcbiAgcmV0dXJuIHtcbiAgICBsYWJlbDogJ3NpbmdsZVZhbHVlJyxcbiAgICBjb2xvcjogaXNEaXNhYmxlZCA/IGNvbG9ycy5uZXV0cmFsNDAgOiBjb2xvcnMubmV1dHJhbDgwLFxuICAgIG1hcmdpbkxlZnQ6IHNwYWNpbmcuYmFzZVVuaXQgLyAyLFxuICAgIG1hcmdpblJpZ2h0OiBzcGFjaW5nLmJhc2VVbml0IC8gMixcbiAgICBtYXhXaWR0aDogXCJjYWxjKDEwMCUgLSBcIi5jb25jYXQoc3BhY2luZy5iYXNlVW5pdCAqIDIsIFwicHgpXCIpLFxuICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICB0ZXh0T3ZlcmZsb3c6ICdlbGxpcHNpcycsXG4gICAgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG4gICAgdG9wOiAnNTAlJyxcbiAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKC01MCUpJ1xuICB9O1xufTtcblxudmFyIFNpbmdsZVZhbHVlID0gZnVuY3Rpb24gU2luZ2xlVmFsdWUocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjeCA9IHByb3BzLmN4LFxuICAgICAgZ2V0U3R5bGVzID0gcHJvcHMuZ2V0U3R5bGVzLFxuICAgICAgaXNEaXNhYmxlZCA9IHByb3BzLmlzRGlzYWJsZWQsXG4gICAgICBpbm5lclByb3BzID0gcHJvcHMuaW5uZXJQcm9wcztcbiAgcmV0dXJuIGpzeChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgY3NzOiBnZXRTdHlsZXMoJ3NpbmdsZVZhbHVlJywgcHJvcHMpLFxuICAgIGNsYXNzTmFtZTogY3goe1xuICAgICAgJ3NpbmdsZS12YWx1ZSc6IHRydWUsXG4gICAgICAnc2luZ2xlLXZhbHVlLS1pcy1kaXNhYmxlZCc6IGlzRGlzYWJsZWRcbiAgICB9LCBjbGFzc05hbWUpXG4gIH0sIGlubmVyUHJvcHMpLCBjaGlsZHJlbik7XG59O1xuXG52YXIgY29tcG9uZW50cyA9IHtcbiAgQ2xlYXJJbmRpY2F0b3I6IENsZWFySW5kaWNhdG9yLFxuICBDb250cm9sOiBDb250cm9sLFxuICBEcm9wZG93bkluZGljYXRvcjogRHJvcGRvd25JbmRpY2F0b3IsXG4gIERvd25DaGV2cm9uOiBEb3duQ2hldnJvbixcbiAgQ3Jvc3NJY29uOiBDcm9zc0ljb24sXG4gIEdyb3VwOiBHcm91cCxcbiAgR3JvdXBIZWFkaW5nOiBHcm91cEhlYWRpbmcsXG4gIEluZGljYXRvcnNDb250YWluZXI6IEluZGljYXRvcnNDb250YWluZXIsXG4gIEluZGljYXRvclNlcGFyYXRvcjogSW5kaWNhdG9yU2VwYXJhdG9yLFxuICBJbnB1dDogSW5wdXQsXG4gIExvYWRpbmdJbmRpY2F0b3I6IExvYWRpbmdJbmRpY2F0b3IsXG4gIE1lbnU6IE1lbnUsXG4gIE1lbnVMaXN0OiBNZW51TGlzdCxcbiAgTWVudVBvcnRhbDogTWVudVBvcnRhbCxcbiAgTG9hZGluZ01lc3NhZ2U6IExvYWRpbmdNZXNzYWdlLFxuICBOb09wdGlvbnNNZXNzYWdlOiBOb09wdGlvbnNNZXNzYWdlLFxuICBNdWx0aVZhbHVlOiBNdWx0aVZhbHVlLFxuICBNdWx0aVZhbHVlQ29udGFpbmVyOiBNdWx0aVZhbHVlQ29udGFpbmVyLFxuICBNdWx0aVZhbHVlTGFiZWw6IE11bHRpVmFsdWVMYWJlbCxcbiAgTXVsdGlWYWx1ZVJlbW92ZTogTXVsdGlWYWx1ZVJlbW92ZSxcbiAgT3B0aW9uOiBPcHRpb24sXG4gIFBsYWNlaG9sZGVyOiBQbGFjZWhvbGRlcixcbiAgU2VsZWN0Q29udGFpbmVyOiBTZWxlY3RDb250YWluZXIsXG4gIFNpbmdsZVZhbHVlOiBTaW5nbGVWYWx1ZSxcbiAgVmFsdWVDb250YWluZXI6IFZhbHVlQ29udGFpbmVyXG59O1xudmFyIGRlZmF1bHRDb21wb25lbnRzID0gZnVuY3Rpb24gZGVmYXVsdENvbXBvbmVudHMocHJvcHMpIHtcbiAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIGNvbXBvbmVudHMsIHByb3BzLmNvbXBvbmVudHMpO1xufTtcblxuZXhwb3J0IHsgTWVudVBsYWNlciBhcyBNLCBjb250YWluZXJDU1MgYXMgYSwgY3NzIGFzIGIsIGNsZWFySW5kaWNhdG9yQ1NTIGFzIGMsIGRyb3Bkb3duSW5kaWNhdG9yQ1NTIGFzIGQsIGdyb3VwSGVhZGluZ0NTUyBhcyBlLCBpbmRpY2F0b3JTZXBhcmF0b3JDU1MgYXMgZiwgZ3JvdXBDU1MgYXMgZywgaW5wdXRDU1MgYXMgaCwgaW5kaWNhdG9yc0NvbnRhaW5lckNTUyBhcyBpLCBsb2FkaW5nTWVzc2FnZUNTUyBhcyBqLCBtZW51TGlzdENTUyBhcyBrLCBsb2FkaW5nSW5kaWNhdG9yQ1NTIGFzIGwsIG1lbnVDU1MgYXMgbSwgbWVudVBvcnRhbENTUyBhcyBuLCBtdWx0aVZhbHVlQ1NTIGFzIG8sIG11bHRpVmFsdWVMYWJlbENTUyBhcyBwLCBtdWx0aVZhbHVlUmVtb3ZlQ1NTIGFzIHEsIG5vT3B0aW9uc01lc3NhZ2VDU1MgYXMgciwgb3B0aW9uQ1NTIGFzIHMsIHBsYWNlaG9sZGVyQ1NTIGFzIHQsIGNzcyQxIGFzIHUsIHZhbHVlQ29udGFpbmVyQ1NTIGFzIHYsIGRlZmF1bHRDb21wb25lbnRzIGFzIHcsIGV4cG9ydGVkRXF1YWwgYXMgeCwgY29tcG9uZW50cyBhcyB5IH07XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsKHN0cmluZ3MsIHJhdykge1xuICBpZiAoIXJhdykge1xuICAgIHJhdyA9IHN0cmluZ3Muc2xpY2UoMCk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmZyZWV6ZShPYmplY3QuZGVmaW5lUHJvcGVydGllcyhzdHJpbmdzLCB7XG4gICAgcmF3OiB7XG4gICAgICB2YWx1ZTogT2JqZWN0LmZyZWV6ZShyYXcpXG4gICAgfVxuICB9KSk7XG59IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllcyc7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgX3RvQ29uc3VtYWJsZUFycmF5IGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5JztcbmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZCc7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MnO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9nZXRQcm90b3R5cGVPZiBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9nZXRQcm90b3R5cGVPZic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzJztcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZCc7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5JztcbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQsIFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgbWVtb2l6ZU9uZSBmcm9tICdtZW1vaXplLW9uZSc7XG5pbXBvcnQgeyBqc3ggfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCB7IGZpbmRET01Ob2RlIH0gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCB7IGkgYXMgaXNUb3VjaENhcGFibGUsIGQgYXMgaXNNb2JpbGVEZXZpY2UsIGUgYXMgaXNEb2N1bWVudEVsZW1lbnQsIGYgYXMgY2xlYW5WYWx1ZSwgaCBhcyBzY3JvbGxJbnRvVmlldywgaiBhcyBjbGFzc05hbWVzLCBuIGFzIG5vb3AgfSBmcm9tICcuLi8uLi9jaHVuay0zOWQzZmRhOC5icm93c2VyLmVzbS5qcyc7XG5pbXBvcnQgeyBjIGFzIGNsZWFySW5kaWNhdG9yQ1NTLCBhIGFzIGNvbnRhaW5lckNTUywgYiBhcyBjc3MsIGQgYXMgZHJvcGRvd25JbmRpY2F0b3JDU1MsIGcgYXMgZ3JvdXBDU1MsIGUgYXMgZ3JvdXBIZWFkaW5nQ1NTLCBpIGFzIGluZGljYXRvcnNDb250YWluZXJDU1MsIGYgYXMgaW5kaWNhdG9yU2VwYXJhdG9yQ1NTLCBoIGFzIGlucHV0Q1NTLCBsIGFzIGxvYWRpbmdJbmRpY2F0b3JDU1MsIGogYXMgbG9hZGluZ01lc3NhZ2VDU1MsIG0gYXMgbWVudUNTUywgayBhcyBtZW51TGlzdENTUywgbiBhcyBtZW51UG9ydGFsQ1NTLCBvIGFzIG11bHRpVmFsdWVDU1MsIHAgYXMgbXVsdGlWYWx1ZUxhYmVsQ1NTLCBxIGFzIG11bHRpVmFsdWVSZW1vdmVDU1MsIHIgYXMgbm9PcHRpb25zTWVzc2FnZUNTUywgcyBhcyBvcHRpb25DU1MsIHQgYXMgcGxhY2Vob2xkZXJDU1MsIHUgYXMgY3NzJDEsIHYgYXMgdmFsdWVDb250YWluZXJDU1MsIHcgYXMgZGVmYXVsdENvbXBvbmVudHMsIHggYXMgZXhwb3J0ZWRFcXVhbCwgTSBhcyBNZW51UGxhY2VyIH0gZnJvbSAnLi4vLi4vY2h1bmstODA2NDAwMzYuYnJvd3Nlci5lc20uanMnO1xuaW1wb3J0IF9jc3MgZnJvbSAnQGVtb3Rpb24vY3NzJztcblxudmFyIGRpYWNyaXRpY3MgPSBbe1xuICBiYXNlOiAnQScsXG4gIGxldHRlcnM6IC9bXFx1MDA0MVxcdTI0QjZcXHVGRjIxXFx1MDBDMFxcdTAwQzFcXHUwMEMyXFx1MUVBNlxcdTFFQTRcXHUxRUFBXFx1MUVBOFxcdTAwQzNcXHUwMTAwXFx1MDEwMlxcdTFFQjBcXHUxRUFFXFx1MUVCNFxcdTFFQjJcXHUwMjI2XFx1MDFFMFxcdTAwQzRcXHUwMURFXFx1MUVBMlxcdTAwQzVcXHUwMUZBXFx1MDFDRFxcdTAyMDBcXHUwMjAyXFx1MUVBMFxcdTFFQUNcXHUxRUI2XFx1MUUwMFxcdTAxMDRcXHUwMjNBXFx1MkM2Rl0vZ1xufSwge1xuICBiYXNlOiAnQUEnLFxuICBsZXR0ZXJzOiAvW1xcdUE3MzJdL2dcbn0sIHtcbiAgYmFzZTogJ0FFJyxcbiAgbGV0dGVyczogL1tcXHUwMEM2XFx1MDFGQ1xcdTAxRTJdL2dcbn0sIHtcbiAgYmFzZTogJ0FPJyxcbiAgbGV0dGVyczogL1tcXHVBNzM0XS9nXG59LCB7XG4gIGJhc2U6ICdBVScsXG4gIGxldHRlcnM6IC9bXFx1QTczNl0vZ1xufSwge1xuICBiYXNlOiAnQVYnLFxuICBsZXR0ZXJzOiAvW1xcdUE3MzhcXHVBNzNBXS9nXG59LCB7XG4gIGJhc2U6ICdBWScsXG4gIGxldHRlcnM6IC9bXFx1QTczQ10vZ1xufSwge1xuICBiYXNlOiAnQicsXG4gIGxldHRlcnM6IC9bXFx1MDA0MlxcdTI0QjdcXHVGRjIyXFx1MUUwMlxcdTFFMDRcXHUxRTA2XFx1MDI0M1xcdTAxODJcXHUwMTgxXS9nXG59LCB7XG4gIGJhc2U6ICdDJyxcbiAgbGV0dGVyczogL1tcXHUwMDQzXFx1MjRCOFxcdUZGMjNcXHUwMTA2XFx1MDEwOFxcdTAxMEFcXHUwMTBDXFx1MDBDN1xcdTFFMDhcXHUwMTg3XFx1MDIzQlxcdUE3M0VdL2dcbn0sIHtcbiAgYmFzZTogJ0QnLFxuICBsZXR0ZXJzOiAvW1xcdTAwNDRcXHUyNEI5XFx1RkYyNFxcdTFFMEFcXHUwMTBFXFx1MUUwQ1xcdTFFMTBcXHUxRTEyXFx1MUUwRVxcdTAxMTBcXHUwMThCXFx1MDE4QVxcdTAxODlcXHVBNzc5XS9nXG59LCB7XG4gIGJhc2U6ICdEWicsXG4gIGxldHRlcnM6IC9bXFx1MDFGMVxcdTAxQzRdL2dcbn0sIHtcbiAgYmFzZTogJ0R6JyxcbiAgbGV0dGVyczogL1tcXHUwMUYyXFx1MDFDNV0vZ1xufSwge1xuICBiYXNlOiAnRScsXG4gIGxldHRlcnM6IC9bXFx1MDA0NVxcdTI0QkFcXHVGRjI1XFx1MDBDOFxcdTAwQzlcXHUwMENBXFx1MUVDMFxcdTFFQkVcXHUxRUM0XFx1MUVDMlxcdTFFQkNcXHUwMTEyXFx1MUUxNFxcdTFFMTZcXHUwMTE0XFx1MDExNlxcdTAwQ0JcXHUxRUJBXFx1MDExQVxcdTAyMDRcXHUwMjA2XFx1MUVCOFxcdTFFQzZcXHUwMjI4XFx1MUUxQ1xcdTAxMThcXHUxRTE4XFx1MUUxQVxcdTAxOTBcXHUwMThFXS9nXG59LCB7XG4gIGJhc2U6ICdGJyxcbiAgbGV0dGVyczogL1tcXHUwMDQ2XFx1MjRCQlxcdUZGMjZcXHUxRTFFXFx1MDE5MVxcdUE3N0JdL2dcbn0sIHtcbiAgYmFzZTogJ0cnLFxuICBsZXR0ZXJzOiAvW1xcdTAwNDdcXHUyNEJDXFx1RkYyN1xcdTAxRjRcXHUwMTFDXFx1MUUyMFxcdTAxMUVcXHUwMTIwXFx1MDFFNlxcdTAxMjJcXHUwMUU0XFx1MDE5M1xcdUE3QTBcXHVBNzdEXFx1QTc3RV0vZ1xufSwge1xuICBiYXNlOiAnSCcsXG4gIGxldHRlcnM6IC9bXFx1MDA0OFxcdTI0QkRcXHVGRjI4XFx1MDEyNFxcdTFFMjJcXHUxRTI2XFx1MDIxRVxcdTFFMjRcXHUxRTI4XFx1MUUyQVxcdTAxMjZcXHUyQzY3XFx1MkM3NVxcdUE3OERdL2dcbn0sIHtcbiAgYmFzZTogJ0knLFxuICBsZXR0ZXJzOiAvW1xcdTAwNDlcXHUyNEJFXFx1RkYyOVxcdTAwQ0NcXHUwMENEXFx1MDBDRVxcdTAxMjhcXHUwMTJBXFx1MDEyQ1xcdTAxMzBcXHUwMENGXFx1MUUyRVxcdTFFQzhcXHUwMUNGXFx1MDIwOFxcdTAyMEFcXHUxRUNBXFx1MDEyRVxcdTFFMkNcXHUwMTk3XS9nXG59LCB7XG4gIGJhc2U6ICdKJyxcbiAgbGV0dGVyczogL1tcXHUwMDRBXFx1MjRCRlxcdUZGMkFcXHUwMTM0XFx1MDI0OF0vZ1xufSwge1xuICBiYXNlOiAnSycsXG4gIGxldHRlcnM6IC9bXFx1MDA0QlxcdTI0QzBcXHVGRjJCXFx1MUUzMFxcdTAxRThcXHUxRTMyXFx1MDEzNlxcdTFFMzRcXHUwMTk4XFx1MkM2OVxcdUE3NDBcXHVBNzQyXFx1QTc0NFxcdUE3QTJdL2dcbn0sIHtcbiAgYmFzZTogJ0wnLFxuICBsZXR0ZXJzOiAvW1xcdTAwNENcXHUyNEMxXFx1RkYyQ1xcdTAxM0ZcXHUwMTM5XFx1MDEzRFxcdTFFMzZcXHUxRTM4XFx1MDEzQlxcdTFFM0NcXHUxRTNBXFx1MDE0MVxcdTAyM0RcXHUyQzYyXFx1MkM2MFxcdUE3NDhcXHVBNzQ2XFx1QTc4MF0vZ1xufSwge1xuICBiYXNlOiAnTEonLFxuICBsZXR0ZXJzOiAvW1xcdTAxQzddL2dcbn0sIHtcbiAgYmFzZTogJ0xqJyxcbiAgbGV0dGVyczogL1tcXHUwMUM4XS9nXG59LCB7XG4gIGJhc2U6ICdNJyxcbiAgbGV0dGVyczogL1tcXHUwMDREXFx1MjRDMlxcdUZGMkRcXHUxRTNFXFx1MUU0MFxcdTFFNDJcXHUyQzZFXFx1MDE5Q10vZ1xufSwge1xuICBiYXNlOiAnTicsXG4gIGxldHRlcnM6IC9bXFx1MDA0RVxcdTI0QzNcXHVGRjJFXFx1MDFGOFxcdTAxNDNcXHUwMEQxXFx1MUU0NFxcdTAxNDdcXHUxRTQ2XFx1MDE0NVxcdTFFNEFcXHUxRTQ4XFx1MDIyMFxcdTAxOURcXHVBNzkwXFx1QTdBNF0vZ1xufSwge1xuICBiYXNlOiAnTkonLFxuICBsZXR0ZXJzOiAvW1xcdTAxQ0FdL2dcbn0sIHtcbiAgYmFzZTogJ05qJyxcbiAgbGV0dGVyczogL1tcXHUwMUNCXS9nXG59LCB7XG4gIGJhc2U6ICdPJyxcbiAgbGV0dGVyczogL1tcXHUwMDRGXFx1MjRDNFxcdUZGMkZcXHUwMEQyXFx1MDBEM1xcdTAwRDRcXHUxRUQyXFx1MUVEMFxcdTFFRDZcXHUxRUQ0XFx1MDBENVxcdTFFNENcXHUwMjJDXFx1MUU0RVxcdTAxNENcXHUxRTUwXFx1MUU1MlxcdTAxNEVcXHUwMjJFXFx1MDIzMFxcdTAwRDZcXHUwMjJBXFx1MUVDRVxcdTAxNTBcXHUwMUQxXFx1MDIwQ1xcdTAyMEVcXHUwMUEwXFx1MUVEQ1xcdTFFREFcXHUxRUUwXFx1MUVERVxcdTFFRTJcXHUxRUNDXFx1MUVEOFxcdTAxRUFcXHUwMUVDXFx1MDBEOFxcdTAxRkVcXHUwMTg2XFx1MDE5RlxcdUE3NEFcXHVBNzRDXS9nXG59LCB7XG4gIGJhc2U6ICdPSScsXG4gIGxldHRlcnM6IC9bXFx1MDFBMl0vZ1xufSwge1xuICBiYXNlOiAnT08nLFxuICBsZXR0ZXJzOiAvW1xcdUE3NEVdL2dcbn0sIHtcbiAgYmFzZTogJ09VJyxcbiAgbGV0dGVyczogL1tcXHUwMjIyXS9nXG59LCB7XG4gIGJhc2U6ICdQJyxcbiAgbGV0dGVyczogL1tcXHUwMDUwXFx1MjRDNVxcdUZGMzBcXHUxRTU0XFx1MUU1NlxcdTAxQTRcXHUyQzYzXFx1QTc1MFxcdUE3NTJcXHVBNzU0XS9nXG59LCB7XG4gIGJhc2U6ICdRJyxcbiAgbGV0dGVyczogL1tcXHUwMDUxXFx1MjRDNlxcdUZGMzFcXHVBNzU2XFx1QTc1OFxcdTAyNEFdL2dcbn0sIHtcbiAgYmFzZTogJ1InLFxuICBsZXR0ZXJzOiAvW1xcdTAwNTJcXHUyNEM3XFx1RkYzMlxcdTAxNTRcXHUxRTU4XFx1MDE1OFxcdTAyMTBcXHUwMjEyXFx1MUU1QVxcdTFFNUNcXHUwMTU2XFx1MUU1RVxcdTAyNENcXHUyQzY0XFx1QTc1QVxcdUE3QTZcXHVBNzgyXS9nXG59LCB7XG4gIGJhc2U6ICdTJyxcbiAgbGV0dGVyczogL1tcXHUwMDUzXFx1MjRDOFxcdUZGMzNcXHUxRTlFXFx1MDE1QVxcdTFFNjRcXHUwMTVDXFx1MUU2MFxcdTAxNjBcXHUxRTY2XFx1MUU2MlxcdTFFNjhcXHUwMjE4XFx1MDE1RVxcdTJDN0VcXHVBN0E4XFx1QTc4NF0vZ1xufSwge1xuICBiYXNlOiAnVCcsXG4gIGxldHRlcnM6IC9bXFx1MDA1NFxcdTI0QzlcXHVGRjM0XFx1MUU2QVxcdTAxNjRcXHUxRTZDXFx1MDIxQVxcdTAxNjJcXHUxRTcwXFx1MUU2RVxcdTAxNjZcXHUwMUFDXFx1MDFBRVxcdTAyM0VcXHVBNzg2XS9nXG59LCB7XG4gIGJhc2U6ICdUWicsXG4gIGxldHRlcnM6IC9bXFx1QTcyOF0vZ1xufSwge1xuICBiYXNlOiAnVScsXG4gIGxldHRlcnM6IC9bXFx1MDA1NVxcdTI0Q0FcXHVGRjM1XFx1MDBEOVxcdTAwREFcXHUwMERCXFx1MDE2OFxcdTFFNzhcXHUwMTZBXFx1MUU3QVxcdTAxNkNcXHUwMERDXFx1MDFEQlxcdTAxRDdcXHUwMUQ1XFx1MDFEOVxcdTFFRTZcXHUwMTZFXFx1MDE3MFxcdTAxRDNcXHUwMjE0XFx1MDIxNlxcdTAxQUZcXHUxRUVBXFx1MUVFOFxcdTFFRUVcXHUxRUVDXFx1MUVGMFxcdTFFRTRcXHUxRTcyXFx1MDE3MlxcdTFFNzZcXHUxRTc0XFx1MDI0NF0vZ1xufSwge1xuICBiYXNlOiAnVicsXG4gIGxldHRlcnM6IC9bXFx1MDA1NlxcdTI0Q0JcXHVGRjM2XFx1MUU3Q1xcdTFFN0VcXHUwMUIyXFx1QTc1RVxcdTAyNDVdL2dcbn0sIHtcbiAgYmFzZTogJ1ZZJyxcbiAgbGV0dGVyczogL1tcXHVBNzYwXS9nXG59LCB7XG4gIGJhc2U6ICdXJyxcbiAgbGV0dGVyczogL1tcXHUwMDU3XFx1MjRDQ1xcdUZGMzdcXHUxRTgwXFx1MUU4MlxcdTAxNzRcXHUxRTg2XFx1MUU4NFxcdTFFODhcXHUyQzcyXS9nXG59LCB7XG4gIGJhc2U6ICdYJyxcbiAgbGV0dGVyczogL1tcXHUwMDU4XFx1MjRDRFxcdUZGMzhcXHUxRThBXFx1MUU4Q10vZ1xufSwge1xuICBiYXNlOiAnWScsXG4gIGxldHRlcnM6IC9bXFx1MDA1OVxcdTI0Q0VcXHVGRjM5XFx1MUVGMlxcdTAwRERcXHUwMTc2XFx1MUVGOFxcdTAyMzJcXHUxRThFXFx1MDE3OFxcdTFFRjZcXHUxRUY0XFx1MDFCM1xcdTAyNEVcXHUxRUZFXS9nXG59LCB7XG4gIGJhc2U6ICdaJyxcbiAgbGV0dGVyczogL1tcXHUwMDVBXFx1MjRDRlxcdUZGM0FcXHUwMTc5XFx1MUU5MFxcdTAxN0JcXHUwMTdEXFx1MUU5MlxcdTFFOTRcXHUwMUI1XFx1MDIyNFxcdTJDN0ZcXHUyQzZCXFx1QTc2Ml0vZ1xufSwge1xuICBiYXNlOiAnYScsXG4gIGxldHRlcnM6IC9bXFx1MDA2MVxcdTI0RDBcXHVGRjQxXFx1MUU5QVxcdTAwRTBcXHUwMEUxXFx1MDBFMlxcdTFFQTdcXHUxRUE1XFx1MUVBQlxcdTFFQTlcXHUwMEUzXFx1MDEwMVxcdTAxMDNcXHUxRUIxXFx1MUVBRlxcdTFFQjVcXHUxRUIzXFx1MDIyN1xcdTAxRTFcXHUwMEU0XFx1MDFERlxcdTFFQTNcXHUwMEU1XFx1MDFGQlxcdTAxQ0VcXHUwMjAxXFx1MDIwM1xcdTFFQTFcXHUxRUFEXFx1MUVCN1xcdTFFMDFcXHUwMTA1XFx1MkM2NVxcdTAyNTBdL2dcbn0sIHtcbiAgYmFzZTogJ2FhJyxcbiAgbGV0dGVyczogL1tcXHVBNzMzXS9nXG59LCB7XG4gIGJhc2U6ICdhZScsXG4gIGxldHRlcnM6IC9bXFx1MDBFNlxcdTAxRkRcXHUwMUUzXS9nXG59LCB7XG4gIGJhc2U6ICdhbycsXG4gIGxldHRlcnM6IC9bXFx1QTczNV0vZ1xufSwge1xuICBiYXNlOiAnYXUnLFxuICBsZXR0ZXJzOiAvW1xcdUE3MzddL2dcbn0sIHtcbiAgYmFzZTogJ2F2JyxcbiAgbGV0dGVyczogL1tcXHVBNzM5XFx1QTczQl0vZ1xufSwge1xuICBiYXNlOiAnYXknLFxuICBsZXR0ZXJzOiAvW1xcdUE3M0RdL2dcbn0sIHtcbiAgYmFzZTogJ2InLFxuICBsZXR0ZXJzOiAvW1xcdTAwNjJcXHUyNEQxXFx1RkY0MlxcdTFFMDNcXHUxRTA1XFx1MUUwN1xcdTAxODBcXHUwMTgzXFx1MDI1M10vZ1xufSwge1xuICBiYXNlOiAnYycsXG4gIGxldHRlcnM6IC9bXFx1MDA2M1xcdTI0RDJcXHVGRjQzXFx1MDEwN1xcdTAxMDlcXHUwMTBCXFx1MDEwRFxcdTAwRTdcXHUxRTA5XFx1MDE4OFxcdTAyM0NcXHVBNzNGXFx1MjE4NF0vZ1xufSwge1xuICBiYXNlOiAnZCcsXG4gIGxldHRlcnM6IC9bXFx1MDA2NFxcdTI0RDNcXHVGRjQ0XFx1MUUwQlxcdTAxMEZcXHUxRTBEXFx1MUUxMVxcdTFFMTNcXHUxRTBGXFx1MDExMVxcdTAxOENcXHUwMjU2XFx1MDI1N1xcdUE3N0FdL2dcbn0sIHtcbiAgYmFzZTogJ2R6JyxcbiAgbGV0dGVyczogL1tcXHUwMUYzXFx1MDFDNl0vZ1xufSwge1xuICBiYXNlOiAnZScsXG4gIGxldHRlcnM6IC9bXFx1MDA2NVxcdTI0RDRcXHVGRjQ1XFx1MDBFOFxcdTAwRTlcXHUwMEVBXFx1MUVDMVxcdTFFQkZcXHUxRUM1XFx1MUVDM1xcdTFFQkRcXHUwMTEzXFx1MUUxNVxcdTFFMTdcXHUwMTE1XFx1MDExN1xcdTAwRUJcXHUxRUJCXFx1MDExQlxcdTAyMDVcXHUwMjA3XFx1MUVCOVxcdTFFQzdcXHUwMjI5XFx1MUUxRFxcdTAxMTlcXHUxRTE5XFx1MUUxQlxcdTAyNDdcXHUwMjVCXFx1MDFERF0vZ1xufSwge1xuICBiYXNlOiAnZicsXG4gIGxldHRlcnM6IC9bXFx1MDA2NlxcdTI0RDVcXHVGRjQ2XFx1MUUxRlxcdTAxOTJcXHVBNzdDXS9nXG59LCB7XG4gIGJhc2U6ICdnJyxcbiAgbGV0dGVyczogL1tcXHUwMDY3XFx1MjRENlxcdUZGNDdcXHUwMUY1XFx1MDExRFxcdTFFMjFcXHUwMTFGXFx1MDEyMVxcdTAxRTdcXHUwMTIzXFx1MDFFNVxcdTAyNjBcXHVBN0ExXFx1MUQ3OVxcdUE3N0ZdL2dcbn0sIHtcbiAgYmFzZTogJ2gnLFxuICBsZXR0ZXJzOiAvW1xcdTAwNjhcXHUyNEQ3XFx1RkY0OFxcdTAxMjVcXHUxRTIzXFx1MUUyN1xcdTAyMUZcXHUxRTI1XFx1MUUyOVxcdTFFMkJcXHUxRTk2XFx1MDEyN1xcdTJDNjhcXHUyQzc2XFx1MDI2NV0vZ1xufSwge1xuICBiYXNlOiAnaHYnLFxuICBsZXR0ZXJzOiAvW1xcdTAxOTVdL2dcbn0sIHtcbiAgYmFzZTogJ2knLFxuICBsZXR0ZXJzOiAvW1xcdTAwNjlcXHUyNEQ4XFx1RkY0OVxcdTAwRUNcXHUwMEVEXFx1MDBFRVxcdTAxMjlcXHUwMTJCXFx1MDEyRFxcdTAwRUZcXHUxRTJGXFx1MUVDOVxcdTAxRDBcXHUwMjA5XFx1MDIwQlxcdTFFQ0JcXHUwMTJGXFx1MUUyRFxcdTAyNjhcXHUwMTMxXS9nXG59LCB7XG4gIGJhc2U6ICdqJyxcbiAgbGV0dGVyczogL1tcXHUwMDZBXFx1MjREOVxcdUZGNEFcXHUwMTM1XFx1MDFGMFxcdTAyNDldL2dcbn0sIHtcbiAgYmFzZTogJ2snLFxuICBsZXR0ZXJzOiAvW1xcdTAwNkJcXHUyNERBXFx1RkY0QlxcdTFFMzFcXHUwMUU5XFx1MUUzM1xcdTAxMzdcXHUxRTM1XFx1MDE5OVxcdTJDNkFcXHVBNzQxXFx1QTc0M1xcdUE3NDVcXHVBN0EzXS9nXG59LCB7XG4gIGJhc2U6ICdsJyxcbiAgbGV0dGVyczogL1tcXHUwMDZDXFx1MjREQlxcdUZGNENcXHUwMTQwXFx1MDEzQVxcdTAxM0VcXHUxRTM3XFx1MUUzOVxcdTAxM0NcXHUxRTNEXFx1MUUzQlxcdTAxN0ZcXHUwMTQyXFx1MDE5QVxcdTAyNkJcXHUyQzYxXFx1QTc0OVxcdUE3ODFcXHVBNzQ3XS9nXG59LCB7XG4gIGJhc2U6ICdsaicsXG4gIGxldHRlcnM6IC9bXFx1MDFDOV0vZ1xufSwge1xuICBiYXNlOiAnbScsXG4gIGxldHRlcnM6IC9bXFx1MDA2RFxcdTI0RENcXHVGRjREXFx1MUUzRlxcdTFFNDFcXHUxRTQzXFx1MDI3MVxcdTAyNkZdL2dcbn0sIHtcbiAgYmFzZTogJ24nLFxuICBsZXR0ZXJzOiAvW1xcdTAwNkVcXHUyNEREXFx1RkY0RVxcdTAxRjlcXHUwMTQ0XFx1MDBGMVxcdTFFNDVcXHUwMTQ4XFx1MUU0N1xcdTAxNDZcXHUxRTRCXFx1MUU0OVxcdTAxOUVcXHUwMjcyXFx1MDE0OVxcdUE3OTFcXHVBN0E1XS9nXG59LCB7XG4gIGJhc2U6ICduaicsXG4gIGxldHRlcnM6IC9bXFx1MDFDQ10vZ1xufSwge1xuICBiYXNlOiAnbycsXG4gIGxldHRlcnM6IC9bXFx1MDA2RlxcdTI0REVcXHVGRjRGXFx1MDBGMlxcdTAwRjNcXHUwMEY0XFx1MUVEM1xcdTFFRDFcXHUxRUQ3XFx1MUVENVxcdTAwRjVcXHUxRTREXFx1MDIyRFxcdTFFNEZcXHUwMTREXFx1MUU1MVxcdTFFNTNcXHUwMTRGXFx1MDIyRlxcdTAyMzFcXHUwMEY2XFx1MDIyQlxcdTFFQ0ZcXHUwMTUxXFx1MDFEMlxcdTAyMERcXHUwMjBGXFx1MDFBMVxcdTFFRERcXHUxRURCXFx1MUVFMVxcdTFFREZcXHUxRUUzXFx1MUVDRFxcdTFFRDlcXHUwMUVCXFx1MDFFRFxcdTAwRjhcXHUwMUZGXFx1MDI1NFxcdUE3NEJcXHVBNzREXFx1MDI3NV0vZ1xufSwge1xuICBiYXNlOiAnb2knLFxuICBsZXR0ZXJzOiAvW1xcdTAxQTNdL2dcbn0sIHtcbiAgYmFzZTogJ291JyxcbiAgbGV0dGVyczogL1tcXHUwMjIzXS9nXG59LCB7XG4gIGJhc2U6ICdvbycsXG4gIGxldHRlcnM6IC9bXFx1QTc0Rl0vZ1xufSwge1xuICBiYXNlOiAncCcsXG4gIGxldHRlcnM6IC9bXFx1MDA3MFxcdTI0REZcXHVGRjUwXFx1MUU1NVxcdTFFNTdcXHUwMUE1XFx1MUQ3RFxcdUE3NTFcXHVBNzUzXFx1QTc1NV0vZ1xufSwge1xuICBiYXNlOiAncScsXG4gIGxldHRlcnM6IC9bXFx1MDA3MVxcdTI0RTBcXHVGRjUxXFx1MDI0QlxcdUE3NTdcXHVBNzU5XS9nXG59LCB7XG4gIGJhc2U6ICdyJyxcbiAgbGV0dGVyczogL1tcXHUwMDcyXFx1MjRFMVxcdUZGNTJcXHUwMTU1XFx1MUU1OVxcdTAxNTlcXHUwMjExXFx1MDIxM1xcdTFFNUJcXHUxRTVEXFx1MDE1N1xcdTFFNUZcXHUwMjREXFx1MDI3RFxcdUE3NUJcXHVBN0E3XFx1QTc4M10vZ1xufSwge1xuICBiYXNlOiAncycsXG4gIGxldHRlcnM6IC9bXFx1MDA3M1xcdTI0RTJcXHVGRjUzXFx1MDBERlxcdTAxNUJcXHUxRTY1XFx1MDE1RFxcdTFFNjFcXHUwMTYxXFx1MUU2N1xcdTFFNjNcXHUxRTY5XFx1MDIxOVxcdTAxNUZcXHUwMjNGXFx1QTdBOVxcdUE3ODVcXHUxRTlCXS9nXG59LCB7XG4gIGJhc2U6ICd0JyxcbiAgbGV0dGVyczogL1tcXHUwMDc0XFx1MjRFM1xcdUZGNTRcXHUxRTZCXFx1MUU5N1xcdTAxNjVcXHUxRTZEXFx1MDIxQlxcdTAxNjNcXHUxRTcxXFx1MUU2RlxcdTAxNjdcXHUwMUFEXFx1MDI4OFxcdTJDNjZcXHVBNzg3XS9nXG59LCB7XG4gIGJhc2U6ICd0eicsXG4gIGxldHRlcnM6IC9bXFx1QTcyOV0vZ1xufSwge1xuICBiYXNlOiAndScsXG4gIGxldHRlcnM6IC9bXFx1MDA3NVxcdTI0RTRcXHVGRjU1XFx1MDBGOVxcdTAwRkFcXHUwMEZCXFx1MDE2OVxcdTFFNzlcXHUwMTZCXFx1MUU3QlxcdTAxNkRcXHUwMEZDXFx1MDFEQ1xcdTAxRDhcXHUwMUQ2XFx1MDFEQVxcdTFFRTdcXHUwMTZGXFx1MDE3MVxcdTAxRDRcXHUwMjE1XFx1MDIxN1xcdTAxQjBcXHUxRUVCXFx1MUVFOVxcdTFFRUZcXHUxRUVEXFx1MUVGMVxcdTFFRTVcXHUxRTczXFx1MDE3M1xcdTFFNzdcXHUxRTc1XFx1MDI4OV0vZ1xufSwge1xuICBiYXNlOiAndicsXG4gIGxldHRlcnM6IC9bXFx1MDA3NlxcdTI0RTVcXHVGRjU2XFx1MUU3RFxcdTFFN0ZcXHUwMjhCXFx1QTc1RlxcdTAyOENdL2dcbn0sIHtcbiAgYmFzZTogJ3Z5JyxcbiAgbGV0dGVyczogL1tcXHVBNzYxXS9nXG59LCB7XG4gIGJhc2U6ICd3JyxcbiAgbGV0dGVyczogL1tcXHUwMDc3XFx1MjRFNlxcdUZGNTdcXHUxRTgxXFx1MUU4M1xcdTAxNzVcXHUxRTg3XFx1MUU4NVxcdTFFOThcXHUxRTg5XFx1MkM3M10vZ1xufSwge1xuICBiYXNlOiAneCcsXG4gIGxldHRlcnM6IC9bXFx1MDA3OFxcdTI0RTdcXHVGRjU4XFx1MUU4QlxcdTFFOERdL2dcbn0sIHtcbiAgYmFzZTogJ3knLFxuICBsZXR0ZXJzOiAvW1xcdTAwNzlcXHUyNEU4XFx1RkY1OVxcdTFFRjNcXHUwMEZEXFx1MDE3N1xcdTFFRjlcXHUwMjMzXFx1MUU4RlxcdTAwRkZcXHUxRUY3XFx1MUU5OVxcdTFFRjVcXHUwMUI0XFx1MDI0RlxcdTFFRkZdL2dcbn0sIHtcbiAgYmFzZTogJ3onLFxuICBsZXR0ZXJzOiAvW1xcdTAwN0FcXHUyNEU5XFx1RkY1QVxcdTAxN0FcXHUxRTkxXFx1MDE3Q1xcdTAxN0VcXHUxRTkzXFx1MUU5NVxcdTAxQjZcXHUwMjI1XFx1MDI0MFxcdTJDNkNcXHVBNzYzXS9nXG59XTtcbnZhciBzdHJpcERpYWNyaXRpY3MgPSBmdW5jdGlvbiBzdHJpcERpYWNyaXRpY3Moc3RyKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZGlhY3JpdGljcy5sZW5ndGg7IGkrKykge1xuICAgIHN0ciA9IHN0ci5yZXBsYWNlKGRpYWNyaXRpY3NbaV0ubGV0dGVycywgZGlhY3JpdGljc1tpXS5iYXNlKTtcbiAgfVxuXG4gIHJldHVybiBzdHI7XG59O1xuXG52YXIgdHJpbVN0cmluZyA9IGZ1bmN0aW9uIHRyaW1TdHJpbmcoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpO1xufTtcblxudmFyIGRlZmF1bHRTdHJpbmdpZnkgPSBmdW5jdGlvbiBkZWZhdWx0U3RyaW5naWZ5KG9wdGlvbikge1xuICByZXR1cm4gXCJcIi5jb25jYXQob3B0aW9uLmxhYmVsLCBcIiBcIikuY29uY2F0KG9wdGlvbi52YWx1ZSk7XG59O1xuXG52YXIgY3JlYXRlRmlsdGVyID0gZnVuY3Rpb24gY3JlYXRlRmlsdGVyKGNvbmZpZykge1xuICByZXR1cm4gZnVuY3Rpb24gKG9wdGlvbiwgcmF3SW5wdXQpIHtcbiAgICB2YXIgX2lnbm9yZUNhc2UkaWdub3JlQWNjID0gX29iamVjdFNwcmVhZCh7XG4gICAgICBpZ25vcmVDYXNlOiB0cnVlLFxuICAgICAgaWdub3JlQWNjZW50czogdHJ1ZSxcbiAgICAgIHN0cmluZ2lmeTogZGVmYXVsdFN0cmluZ2lmeSxcbiAgICAgIHRyaW06IHRydWUsXG4gICAgICBtYXRjaEZyb206ICdhbnknXG4gICAgfSwgY29uZmlnKSxcbiAgICAgICAgaWdub3JlQ2FzZSA9IF9pZ25vcmVDYXNlJGlnbm9yZUFjYy5pZ25vcmVDYXNlLFxuICAgICAgICBpZ25vcmVBY2NlbnRzID0gX2lnbm9yZUNhc2UkaWdub3JlQWNjLmlnbm9yZUFjY2VudHMsXG4gICAgICAgIHN0cmluZ2lmeSA9IF9pZ25vcmVDYXNlJGlnbm9yZUFjYy5zdHJpbmdpZnksXG4gICAgICAgIHRyaW0gPSBfaWdub3JlQ2FzZSRpZ25vcmVBY2MudHJpbSxcbiAgICAgICAgbWF0Y2hGcm9tID0gX2lnbm9yZUNhc2UkaWdub3JlQWNjLm1hdGNoRnJvbTtcblxuICAgIHZhciBpbnB1dCA9IHRyaW0gPyB0cmltU3RyaW5nKHJhd0lucHV0KSA6IHJhd0lucHV0O1xuICAgIHZhciBjYW5kaWRhdGUgPSB0cmltID8gdHJpbVN0cmluZyhzdHJpbmdpZnkob3B0aW9uKSkgOiBzdHJpbmdpZnkob3B0aW9uKTtcblxuICAgIGlmIChpZ25vcmVDYXNlKSB7XG4gICAgICBpbnB1dCA9IGlucHV0LnRvTG93ZXJDYXNlKCk7XG4gICAgICBjYW5kaWRhdGUgPSBjYW5kaWRhdGUudG9Mb3dlckNhc2UoKTtcbiAgICB9XG5cbiAgICBpZiAoaWdub3JlQWNjZW50cykge1xuICAgICAgaW5wdXQgPSBzdHJpcERpYWNyaXRpY3MoaW5wdXQpO1xuICAgICAgY2FuZGlkYXRlID0gc3RyaXBEaWFjcml0aWNzKGNhbmRpZGF0ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hdGNoRnJvbSA9PT0gJ3N0YXJ0JyA/IGNhbmRpZGF0ZS5zdWJzdHIoMCwgaW5wdXQubGVuZ3RoKSA9PT0gaW5wdXQgOiBjYW5kaWRhdGUuaW5kZXhPZihpbnB1dCkgPiAtMTtcbiAgfTtcbn07XG5cbnZhciBfcmVmID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8ge1xuICBuYW1lOiBcIjFsYWFvMjEtYTExeVRleHRcIixcbiAgc3R5bGVzOiBcImxhYmVsOmExMXlUZXh0O3otaW5kZXg6OTk5OTtib3JkZXI6MDtjbGlwOnJlY3QoMXB4LCAxcHgsIDFweCwgMXB4KTtoZWlnaHQ6MXB4O3dpZHRoOjFweDtwb3NpdGlvbjphYnNvbHV0ZTtvdmVyZmxvdzpoaWRkZW47cGFkZGluZzowO3doaXRlLXNwYWNlOm5vd3JhcDtcIlxufSA6IHtcbiAgbmFtZTogXCIxbGFhbzIxLWExMXlUZXh0XCIsXG4gIHN0eWxlczogXCJsYWJlbDphMTF5VGV4dDt6LWluZGV4Ojk5OTk7Ym9yZGVyOjA7Y2xpcDpyZWN0KDFweCwgMXB4LCAxcHgsIDFweCk7aGVpZ2h0OjFweDt3aWR0aDoxcHg7cG9zaXRpb246YWJzb2x1dGU7b3ZlcmZsb3c6aGlkZGVuO3BhZGRpbmc6MDt3aGl0ZS1zcGFjZTpub3dyYXA7XCIsXG4gIG1hcDogXCIvKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJa0V4TVhsVVpYaDBMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUpCUVZGTklpd2labWxzWlNJNklrRXhNWGxVWlhoMExtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpTHk4Z1FHWnNiM2RjYmk4cUtpQkFhbk40SUdwemVDQXFMMXh1YVcxd2IzSjBJSHNnZEhsd1pTQkZiR1Z0Wlc1MFEyOXVabWxuSUgwZ1puSnZiU0FuY21WaFkzUW5PMXh1YVcxd2IzSjBJSHNnYW5ONElIMGdabkp2YlNBblFHVnRiM1JwYjI0dlkyOXlaU2M3WEc1Y2JpOHZJRUZ6YzJsemRHbDJaU0IwWlhoMElIUnZJR1JsYzJOeWFXSmxJSFpwYzNWaGJDQmxiR1Z0Wlc1MGN5NGdTR2xrWkdWdUlHWnZjaUJ6YVdkb2RHVmtJSFZ6WlhKekxseHVZMjl1YzNRZ1FURXhlVlJsZUhRZ1BTQW9jSEp2Y0hNNklFVnNaVzFsYm5SRGIyNW1hV2M4SjNOd1lXNG5QaWtnUFQ0Z0tGeHVJQ0FnSUR4emNHRnVYRzRnSUNBZ0lDQmpjM005ZTN0Y2JpQWdJQ0FnSUNBZ2JHRmlaV3c2SUNkaE1URjVWR1Y0ZENjc1hHNGdJQ0FnSUNBZ0lIcEpibVJsZURvZ09UazVPU3hjYmlBZ0lDQWdJQ0FnWW05eVpHVnlPaUF3TEZ4dUlDQWdJQ0FnSUNCamJHbHdPaUFuY21WamRDZ3hjSGdzSURGd2VDd2dNWEI0TENBeGNIZ3BKeXhjYmlBZ0lDQWdJQ0FnYUdWcFoyaDBPaUF4TEZ4dUlDQWdJQ0FnSUNCM2FXUjBhRG9nTVN4Y2JpQWdJQ0FnSUNBZ2NHOXphWFJwYjI0NklDZGhZbk52YkhWMFpTY3NYRzRnSUNBZ0lDQWdJRzkyWlhKbWJHOTNPaUFuYUdsa1pHVnVKeXhjYmlBZ0lDQWdJQ0FnY0dGa1pHbHVaem9nTUN4Y2JpQWdJQ0FnSUNBZ2QyaHBkR1ZUY0dGalpUb2dKMjV2ZDNKaGNDY3NYRzRnSUNBZ0lDQjlmVnh1SUNBZ0lDQWdleTR1TG5CeWIzQnpmVnh1SUNBZ0lDOCtYRzRwTzF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCQk1URjVWR1Y0ZER0Y2JpSmRmUT09ICovXCJcbn07XG5cbnZhciBBMTF5VGV4dCA9IGZ1bmN0aW9uIEExMXlUZXh0KHByb3BzKSB7XG4gIHJldHVybiBqc3goXCJzcGFuXCIsIF9leHRlbmRzKHtcbiAgICBjc3M6IF9yZWZcbiAgfSwgcHJvcHMpKTtcbn07XG5cbnZhciBEdW1teUlucHV0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhEdW1teUlucHV0LCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBEdW1teUlucHV0KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEdW1teUlucHV0KTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoRHVtbXlJbnB1dCkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRHVtbXlJbnB1dCwgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgaW5Qcm9wID0gX3RoaXMkcHJvcHMuaW4sXG4gICAgICAgICAgb3V0ID0gX3RoaXMkcHJvcHMub3V0LFxuICAgICAgICAgIG9uRXhpdGVkID0gX3RoaXMkcHJvcHMub25FeGl0ZWQsXG4gICAgICAgICAgYXBwZWFyID0gX3RoaXMkcHJvcHMuYXBwZWFyLFxuICAgICAgICAgIGVudGVyID0gX3RoaXMkcHJvcHMuZW50ZXIsXG4gICAgICAgICAgZXhpdCA9IF90aGlzJHByb3BzLmV4aXQsXG4gICAgICAgICAgaW5uZXJSZWYgPSBfdGhpcyRwcm9wcy5pbm5lclJlZixcbiAgICAgICAgICBlbW90aW9uID0gX3RoaXMkcHJvcHMuZW1vdGlvbixcbiAgICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfdGhpcyRwcm9wcywgW1wiaW5cIiwgXCJvdXRcIiwgXCJvbkV4aXRlZFwiLCBcImFwcGVhclwiLCBcImVudGVyXCIsIFwiZXhpdFwiLCBcImlubmVyUmVmXCIsIFwiZW1vdGlvblwiXSk7XG5cbiAgICAgIHJldHVybiBqc3goXCJpbnB1dFwiLCBfZXh0ZW5kcyh7XG4gICAgICAgIHJlZjogaW5uZXJSZWZcbiAgICAgIH0sIHByb3BzLCB7XG4gICAgICAgIGNzczpcbiAgICAgICAgLyojX19QVVJFX18qL1xuICAgICAgICBfY3NzKHtcbiAgICAgICAgICBsYWJlbDogJ2R1bW15SW5wdXQnLFxuICAgICAgICAgIC8vIGdldCByaWQgb2YgYW55IGRlZmF1bHQgc3R5bGVzXG4gICAgICAgICAgYmFja2dyb3VuZDogMCxcbiAgICAgICAgICBib3JkZXI6IDAsXG4gICAgICAgICAgZm9udFNpemU6ICdpbmhlcml0JyxcbiAgICAgICAgICBvdXRsaW5lOiAwLFxuICAgICAgICAgIHBhZGRpbmc6IDAsXG4gICAgICAgICAgLy8gaW1wb3J0YW50ISB3aXRob3V0IGB3aWR0aGAgYnJvd3NlcnMgd29uJ3QgYWxsb3cgZm9jdXNcbiAgICAgICAgICB3aWR0aDogMSxcbiAgICAgICAgICAvLyByZW1vdmUgY3Vyc29yIG9uIGRlc2t0b3BcbiAgICAgICAgICBjb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICAgICAgICAvLyByZW1vdmUgY3Vyc29yIG9uIG1vYmlsZSB3aGlsc3QgbWFpbnRhaW5pbmcgXCJzY3JvbGwgaW50byB2aWV3XCIgYmVoYXZpb3VyXG4gICAgICAgICAgbGVmdDogLTEwMCxcbiAgICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDApJ1xuICAgICAgICB9LCBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBcIlwiIDogXCIvKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJa1IxYlcxNVNXNXdkWFF1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQldWRWlMQ0ptYVd4bElqb2lSSFZ0YlhsSmJuQjFkQzVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHZJRUJtYkc5M1hHNHZLaW9nUUdwemVDQnFjM2dnS2k5Y2JtbHRjRzl5ZENCN0lFTnZiWEJ2Ym1WdWRDQjlJR1p5YjIwZ0ozSmxZV04wSnp0Y2JtbHRjRzl5ZENCN0lHcHplQ0I5SUdaeWIyMGdKMEJsYlc5MGFXOXVMMk52Y21Vbk8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQmpiR0Z6Y3lCRWRXMXRlVWx1Y0hWMElHVjRkR1Z1WkhNZ1EyOXRjRzl1Wlc1MFBHRnVlVDRnZTF4dUlDQnlaVzVrWlhJZ0tDa2dlMXh1SUNBZ0lHTnZibk4wSUhzZ2FXNDZJR2x1VUhKdmNDd2diM1YwTENCdmJrVjRhWFJsWkN3Z1lYQndaV0Z5TENCbGJuUmxjaXdnWlhocGRDd2dhVzV1WlhKU1pXWXNJR1Z0YjNScGIyNHNJQzR1TG5CeWIzQnpJSDBnUFNCMGFHbHpMbkJ5YjNCek8xeHVJQ0FnSUhKbGRIVnliaWhjYmlBZ0lDQWdJRHhwYm5CMWRGeHVJQ0FnSUNBZ0lDQnlaV1k5ZTJsdWJtVnlVbVZtZlZ4dUlDQWdJQ0FnSUNCN0xpNHVjSEp2Y0hOOVhHNGdJQ0FnSUNBZ0lHTnpjejE3ZTF4dUlDQWdJQ0FnSUNBZ0lHeGhZbVZzT2lBblpIVnRiWGxKYm5CMWRDY3NYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1oyVjBJSEpwWkNCdlppQmhibmtnWkdWbVlYVnNkQ0J6ZEhsc1pYTmNiaUFnSUNBZ0lDQWdJQ0JpWVdOclozSnZkVzVrT2lBd0xGeHVJQ0FnSUNBZ0lDQWdJR0p2Y21SbGNqb2dNQ3hjYmlBZ0lDQWdJQ0FnSUNCbWIyNTBVMmw2WlRvZ0oybHVhR1Z5YVhRbkxGeHVJQ0FnSUNBZ0lDQWdJRzkxZEd4cGJtVTZJREFzWEc0Z0lDQWdJQ0FnSUNBZ2NHRmtaR2x1WnpvZ01DeGNiaUFnSUNBZ0lDQWdJQ0F2THlCcGJYQnZjblJoYm5RaElIZHBkR2h2ZFhRZ1lIZHBaSFJvWUNCaWNtOTNjMlZ5Y3lCM2IyNG5kQ0JoYkd4dmR5Qm1iMk4xYzF4dUlDQWdJQ0FnSUNBZ0lIZHBaSFJvT2lBeExGeHVYRzRnSUNBZ0lDQWdJQ0FnTHk4Z2NtVnRiM1psSUdOMWNuTnZjaUJ2YmlCa1pYTnJkRzl3WEc0Z0lDQWdJQ0FnSUNBZ1kyOXNiM0k2SUNkMGNtRnVjM0JoY21WdWRDY3NYRzVjYmlBZ0lDQWdJQ0FnSUNBdkx5QnlaVzF2ZG1VZ1kzVnljMjl5SUc5dUlHMXZZbWxzWlNCM2FHbHNjM1FnYldGcGJuUmhhVzVwYm1jZ1hDSnpZM0p2Ykd3Z2FXNTBieUIyYVdWM1hDSWdZbVZvWVhacGIzVnlYRzRnSUNBZ0lDQWdJQ0FnYkdWbWREb2dMVEV3TUN4Y2JpQWdJQ0FnSUNBZ0lDQnZjR0ZqYVhSNU9pQXdMRnh1SUNBZ0lDQWdJQ0FnSUhCdmMybDBhVzl1T2lBbmNtVnNZWFJwZG1VbkxGeHVJQ0FnSUNBZ0lDQWdJSFJ5WVc1elptOXliVG9nSjNOallXeGxLREFwSnl4Y2JpQWdJQ0FnSUNBZ2ZYMWNiaUFnSUNBZ0lDOCtYRzRnSUNBZ0tUdGNiaUFnZlZ4dWZWeHVJbDE5ICovXCIpXG4gICAgICB9KSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIER1bW15SW5wdXQ7XG59KENvbXBvbmVudCk7XG5cbnZhciBOb2RlUmVzb2x2ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE5vZGVSZXNvbHZlciwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTm9kZVJlc29sdmVyKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBOb2RlUmVzb2x2ZXIpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihOb2RlUmVzb2x2ZXIpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKE5vZGVSZXNvbHZlciwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB0aGlzLnByb3BzLmlubmVyUmVmKGZpbmRET01Ob2RlKHRoaXMpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLnByb3BzLmlubmVyUmVmKG51bGwpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE5vZGVSZXNvbHZlcjtcbn0oQ29tcG9uZW50KTtcblxudmFyIFNUWUxFX0tFWVMgPSBbJ2JveFNpemluZycsICdoZWlnaHQnLCAnb3ZlcmZsb3cnLCAncGFkZGluZ1JpZ2h0JywgJ3Bvc2l0aW9uJ107XG52YXIgTE9DS19TVFlMRVMgPSB7XG4gIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAvLyBhY2NvdW50IGZvciBwb3NzaWJsZSBkZWNsYXJhdGlvbiBgd2lkdGg6IDEwMCU7YCBvbiBib2R5XG4gIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIGhlaWdodDogJzEwMCUnXG59O1xuXG5mdW5jdGlvbiBwcmV2ZW50VG91Y2hNb3ZlKGUpIHtcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xufVxuZnVuY3Rpb24gYWxsb3dUb3VjaE1vdmUoZSkge1xuICBlLnN0b3BQcm9wYWdhdGlvbigpO1xufVxuZnVuY3Rpb24gcHJldmVudEluZXJ0aWFTY3JvbGwoKSB7XG4gIHZhciB0b3AgPSB0aGlzLnNjcm9sbFRvcDtcbiAgdmFyIHRvdGFsU2Nyb2xsID0gdGhpcy5zY3JvbGxIZWlnaHQ7XG4gIHZhciBjdXJyZW50U2Nyb2xsID0gdG9wICsgdGhpcy5vZmZzZXRIZWlnaHQ7XG5cbiAgaWYgKHRvcCA9PT0gMCkge1xuICAgIHRoaXMuc2Nyb2xsVG9wID0gMTtcbiAgfSBlbHNlIGlmIChjdXJyZW50U2Nyb2xsID09PSB0b3RhbFNjcm9sbCkge1xuICAgIHRoaXMuc2Nyb2xsVG9wID0gdG9wIC0gMTtcbiAgfVxufSAvLyBgb250b3VjaHN0YXJ0YCBjaGVjayB3b3JrcyBvbiBtb3N0IGJyb3dzZXJzXG4vLyBgbWF4VG91Y2hQb2ludHNgIHdvcmtzIG9uIElFMTAvMTEgYW5kIFN1cmZhY2VcblxuZnVuY3Rpb24gaXNUb3VjaERldmljZSgpIHtcbiAgcmV0dXJuICdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdyB8fCBuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHM7XG59XG5cbnZhciBjYW5Vc2VET00gPSAhISh3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xudmFyIGFjdGl2ZVNjcm9sbExvY2tzID0gMDtcblxudmFyIFNjcm9sbExvY2sgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFNjcm9sbExvY2ssIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFNjcm9sbExvY2soKSB7XG4gICAgdmFyIF9nZXRQcm90b3R5cGVPZjI7XG5cbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2Nyb2xsTG9jayk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9IF9nZXRQcm90b3R5cGVPZihTY3JvbGxMb2NrKSkuY2FsbC5hcHBseShfZ2V0UHJvdG90eXBlT2YyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwib3JpZ2luYWxTdHlsZXNcIiwge30pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImxpc3RlbmVyT3B0aW9uc1wiLCB7XG4gICAgICBjYXB0dXJlOiBmYWxzZSxcbiAgICAgIHBhc3NpdmU6IGZhbHNlXG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU2Nyb2xsTG9jaywgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgaWYgKCFjYW5Vc2VET00pIHJldHVybjtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgYWNjb3VudEZvclNjcm9sbGJhcnMgPSBfdGhpcyRwcm9wcy5hY2NvdW50Rm9yU2Nyb2xsYmFycyxcbiAgICAgICAgICB0b3VjaFNjcm9sbFRhcmdldCA9IF90aGlzJHByb3BzLnRvdWNoU2Nyb2xsVGFyZ2V0O1xuICAgICAgdmFyIHRhcmdldCA9IGRvY3VtZW50LmJvZHk7XG4gICAgICB2YXIgdGFyZ2V0U3R5bGUgPSB0YXJnZXQgJiYgdGFyZ2V0LnN0eWxlO1xuXG4gICAgICBpZiAoYWNjb3VudEZvclNjcm9sbGJhcnMpIHtcbiAgICAgICAgLy8gc3RvcmUgYW55IHN0eWxlcyBhbHJlYWR5IGFwcGxpZWQgdG8gdGhlIGJvZHlcbiAgICAgICAgU1RZTEVfS0VZUy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICB2YXIgdmFsID0gdGFyZ2V0U3R5bGUgJiYgdGFyZ2V0U3R5bGVba2V5XTtcbiAgICAgICAgICBfdGhpczIub3JpZ2luYWxTdHlsZXNba2V5XSA9IHZhbDtcbiAgICAgICAgfSk7XG4gICAgICB9IC8vIGFwcGx5IHRoZSBsb2NrIHN0eWxlcyBhbmQgcGFkZGluZyBpZiB0aGlzIGlzIHRoZSBmaXJzdCBzY3JvbGwgbG9ja1xuXG5cbiAgICAgIGlmIChhY2NvdW50Rm9yU2Nyb2xsYmFycyAmJiBhY3RpdmVTY3JvbGxMb2NrcyA8IDEpIHtcbiAgICAgICAgdmFyIGN1cnJlbnRQYWRkaW5nID0gcGFyc2VJbnQodGhpcy5vcmlnaW5hbFN0eWxlcy5wYWRkaW5nUmlnaHQsIDEwKSB8fCAwO1xuICAgICAgICB2YXIgY2xpZW50V2lkdGggPSBkb2N1bWVudC5ib2R5ID8gZG9jdW1lbnQuYm9keS5jbGllbnRXaWR0aCA6IDA7XG4gICAgICAgIHZhciBhZGp1c3RlZFBhZGRpbmcgPSB3aW5kb3cuaW5uZXJXaWR0aCAtIGNsaWVudFdpZHRoICsgY3VycmVudFBhZGRpbmcgfHwgMDtcbiAgICAgICAgT2JqZWN0LmtleXMoTE9DS19TVFlMRVMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIHZhciB2YWwgPSBMT0NLX1NUWUxFU1trZXldO1xuXG4gICAgICAgICAgaWYgKHRhcmdldFN0eWxlKSB7XG4gICAgICAgICAgICB0YXJnZXRTdHlsZVtrZXldID0gdmFsO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHRhcmdldFN0eWxlKSB7XG4gICAgICAgICAgdGFyZ2V0U3R5bGUucGFkZGluZ1JpZ2h0ID0gXCJcIi5jb25jYXQoYWRqdXN0ZWRQYWRkaW5nLCBcInB4XCIpO1xuICAgICAgICB9XG4gICAgICB9IC8vIGFjY291bnQgZm9yIHRvdWNoIGRldmljZXNcblxuXG4gICAgICBpZiAodGFyZ2V0ICYmIGlzVG91Y2hEZXZpY2UoKSkge1xuICAgICAgICAvLyBNb2JpbGUgU2FmYXJpIGlnbm9yZXMgeyBvdmVyZmxvdzogaGlkZGVuIH0gZGVjbGFyYXRpb24gb24gdGhlIGJvZHkuXG4gICAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBwcmV2ZW50VG91Y2hNb3ZlLCB0aGlzLmxpc3RlbmVyT3B0aW9ucyk7IC8vIEFsbG93IHNjcm9sbCBvbiBwcm92aWRlZCB0YXJnZXRcblxuICAgICAgICBpZiAodG91Y2hTY3JvbGxUYXJnZXQpIHtcbiAgICAgICAgICB0b3VjaFNjcm9sbFRhcmdldC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgcHJldmVudEluZXJ0aWFTY3JvbGwsIHRoaXMubGlzdGVuZXJPcHRpb25zKTtcbiAgICAgICAgICB0b3VjaFNjcm9sbFRhcmdldC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBhbGxvd1RvdWNoTW92ZSwgdGhpcy5saXN0ZW5lck9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9IC8vIGluY3JlbWVudCBhY3RpdmUgc2Nyb2xsIGxvY2tzXG5cblxuICAgICAgYWN0aXZlU2Nyb2xsTG9ja3MgKz0gMTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgaWYgKCFjYW5Vc2VET00pIHJldHVybjtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGFjY291bnRGb3JTY3JvbGxiYXJzID0gX3RoaXMkcHJvcHMyLmFjY291bnRGb3JTY3JvbGxiYXJzLFxuICAgICAgICAgIHRvdWNoU2Nyb2xsVGFyZ2V0ID0gX3RoaXMkcHJvcHMyLnRvdWNoU2Nyb2xsVGFyZ2V0O1xuICAgICAgdmFyIHRhcmdldCA9IGRvY3VtZW50LmJvZHk7XG4gICAgICB2YXIgdGFyZ2V0U3R5bGUgPSB0YXJnZXQgJiYgdGFyZ2V0LnN0eWxlOyAvLyBzYWZlbHkgZGVjcmVtZW50IGFjdGl2ZSBzY3JvbGwgbG9ja3NcblxuICAgICAgYWN0aXZlU2Nyb2xsTG9ja3MgPSBNYXRoLm1heChhY3RpdmVTY3JvbGxMb2NrcyAtIDEsIDApOyAvLyByZWFwcGx5IG9yaWdpbmFsIGJvZHkgc3R5bGVzLCBpZiBhbnlcblxuICAgICAgaWYgKGFjY291bnRGb3JTY3JvbGxiYXJzICYmIGFjdGl2ZVNjcm9sbExvY2tzIDwgMSkge1xuICAgICAgICBTVFlMRV9LRVlTLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIHZhciB2YWwgPSBfdGhpczMub3JpZ2luYWxTdHlsZXNba2V5XTtcblxuICAgICAgICAgIGlmICh0YXJnZXRTdHlsZSkge1xuICAgICAgICAgICAgdGFyZ2V0U3R5bGVba2V5XSA9IHZhbDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSAvLyByZW1vdmUgdG91Y2ggbGlzdGVuZXJzXG5cblxuICAgICAgaWYgKHRhcmdldCAmJiBpc1RvdWNoRGV2aWNlKCkpIHtcbiAgICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHByZXZlbnRUb3VjaE1vdmUsIHRoaXMubGlzdGVuZXJPcHRpb25zKTtcblxuICAgICAgICBpZiAodG91Y2hTY3JvbGxUYXJnZXQpIHtcbiAgICAgICAgICB0b3VjaFNjcm9sbFRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgcHJldmVudEluZXJ0aWFTY3JvbGwsIHRoaXMubGlzdGVuZXJPcHRpb25zKTtcbiAgICAgICAgICB0b3VjaFNjcm9sbFRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBhbGxvd1RvdWNoTW92ZSwgdGhpcy5saXN0ZW5lck9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2Nyb2xsTG9jaztcbn0oQ29tcG9uZW50KTtcblxuX2RlZmluZVByb3BlcnR5KFNjcm9sbExvY2ssIFwiZGVmYXVsdFByb3BzXCIsIHtcbiAgYWNjb3VudEZvclNjcm9sbGJhcnM6IHRydWVcbn0pO1xuXG52YXIgX3JlZiQxID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8ge1xuICBuYW1lOiBcIjFkc2JwY3BcIixcbiAgc3R5bGVzOiBcInBvc2l0aW9uOmZpeGVkO2xlZnQ6MDtib3R0b206MDtyaWdodDowO3RvcDowO1wiXG59IDoge1xuICBuYW1lOiBcIjFkc2JwY3BcIixcbiAgc3R5bGVzOiBcInBvc2l0aW9uOmZpeGVkO2xlZnQ6MDtib3R0b206MDtyaWdodDowO3RvcDowO1wiLFxuICBtYXA6IFwiLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxOamNtOXNiRUpzYjJOckxtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSkJRVFpFVlNJc0ltWnBiR1VpT2lKVFkzSnZiR3hDYkc5amF5NXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4dklFQm1iRzkzWEc0dktpb2dRR3B6ZUNCcWMzZ2dLaTljYm1sdGNHOXlkQ0I3SUZCMWNtVkRiMjF3YjI1bGJuUXNJSFI1Y0dVZ1JXeGxiV1Z1ZENCOUlHWnliMjBnSjNKbFlXTjBKenRjYm1sdGNHOXlkQ0I3SUdwemVDQjlJR1p5YjIwZ0owQmxiVzkwYVc5dUwyTnZjbVVuTzF4dWFXMXdiM0owSUU1dlpHVlNaWE52YkhabGNpQm1jbTl0SUNjdUwwNXZaR1ZTWlhOdmJIWmxjaWM3WEc1cGJYQnZjblFnVTJOeWIyeHNURzlqYXlCbWNtOXRJQ2N1TDFOamNtOXNiRXh2WTJzdmFXNWtaWGduTzF4dVhHNTBlWEJsSUZCeWIzQnpJRDBnZTF4dUlDQmphR2xzWkhKbGJqb2dSV3hsYldWdWREd3FQaXhjYmlBZ2FYTkZibUZpYkdWa09pQmliMjlzWldGdUxGeHVmVHRjYm5SNWNHVWdVM1JoZEdVZ1BTQjdYRzRnSUhSdmRXTm9VMk55YjJ4c1ZHRnlaMlYwT2lCSVZFMU1SV3hsYldWdWRDQjhJRzUxYkd3c1hHNTlPMXh1WEc0dkx5Qk9UMVJGT2x4dUx5OGdWMlVnYzJodmRXeGtiaWQwSUc1bFpXUWdkR2hwY3lCaFpuUmxjaUIxY0dSaGRHbHVaeUIwYnlCU1pXRmpkQ0IyTVRZdU15NHdMQ0IzYUdsamFDQnBiblJ5YjJSMVkyVnpPbHh1THk4Z0xTQmpjbVZoZEdWU1pXWW9LU0JvZEhSd2N6b3ZMM0psWVdOMGFuTXViM0puTDJSdlkzTXZjbVZoWTNRdFlYQnBMbWgwYld3amNtVmhZM1JqY21WaGRHVnlaV1pjYmk4dklDMGdabTl5ZDJGeVpGSmxaaWdwSUdoMGRIQnpPaTh2Y21WaFkzUnFjeTV2Y21jdlpHOWpjeTl5WldGamRDMWhjR2t1YUhSdGJDTnlaV0ZqZEdadmNuZGhjbVJ5WldaY2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1kyeGhjM01nVTJOeWIyeHNRbXh2WTJzZ1pYaDBaVzVrY3lCUWRYSmxRMjl0Y0c5dVpXNTBQRkJ5YjNCekxDQlRkR0YwWlQ0Z2UxeHVJQ0J6ZEdGMFpTQTlJSHNnZEc5MVkyaFRZM0p2Ykd4VVlYSm5aWFE2SUc1MWJHd2dmVHRjYmx4dUlDQXZMeUJ0ZFhOMElHSmxJR2x1SUhOMFlYUmxJSFJ2SUhSeWFXZG5aWElnWVNCeVpTMXlaVzVrWlhJc0lHOXViSGtnY25WdWN5QnZibU5sSUhCbGNpQnBibk4wWVc1alpWeHVJQ0JuWlhSVFkzSnZiR3hVWVhKblpYUWdQU0FvY21WbU9pQklWRTFNUld4bGJXVnVkQ2tnUFQ0Z2UxeHVJQ0FnSUdsbUlDaHlaV1lnUFQwOUlIUm9hWE11YzNSaGRHVXVkRzkxWTJoVFkzSnZiR3hVWVhKblpYUXBJSEpsZEhWeWJqdGNiaUFnSUNCMGFHbHpMbk5sZEZOMFlYUmxLSHNnZEc5MVkyaFRZM0p2Ykd4VVlYSm5aWFE2SUhKbFppQjlLVHRjYmlBZ2ZUdGNibHh1SUNBdkx5QjBhR2x6SUhkcGJHd2dZMnh2YzJVZ2RHaGxJRzFsYm5VZ2QyaGxiaUJoSUhWelpYSWdZMnhwWTJ0eklHOTFkSE5wWkdWY2JpQWdZbXgxY2xObGJHVmpkRWx1Y0hWMElEMGdLQ2tnUFQ0Z2UxeHVJQ0FnSUdsbUlDaGtiMk4xYldWdWRDNWhZM1JwZG1WRmJHVnRaVzUwS1NCN1hHNGdJQ0FnSUNCa2IyTjFiV1Z1ZEM1aFkzUnBkbVZGYkdWdFpXNTBMbUpzZFhJb0tUdGNiaUFnSUNCOVhHNGdJSDA3WEc1Y2JpQWdjbVZ1WkdWeUtDa2dlMXh1SUNBZ0lHTnZibk4wSUhzZ1kyaHBiR1J5Wlc0c0lHbHpSVzVoWW14bFpDQjlJRDBnZEdocGN5NXdjbTl3Y3p0Y2JpQWdJQ0JqYjI1emRDQjdJSFJ2ZFdOb1UyTnliMnhzVkdGeVoyVjBJSDBnUFNCMGFHbHpMbk4wWVhSbE8xeHVYRzRnSUNBZ0x5OGdZbUZwYkNCbFlYSnNlU0JwWmlCdWIzUWdaVzVoWW14bFpGeHVJQ0FnSUdsbUlDZ2hhWE5GYm1GaWJHVmtLU0J5WlhSMWNtNGdZMmhwYkdSeVpXNDdYRzVjYmlBZ0lDQXZLbHh1SUNBZ0lDQXFJRVJwZGx4dUlDQWdJQ0FxSUMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExWeHVJQ0FnSUNBcUlHSnNiMk5yY3lCelkzSnZiR3hwYm1jZ2IyNGdibTl1TFdKdlpIa2daV3hsYldWdWRITWdZbVZvYVc1a0lIUm9aU0J0Wlc1MVhHNWNiaUFnSUNBZ0tpQk9iMlJsVW1WemIyeDJaWEpjYmlBZ0lDQWdLaUF0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMxY2JpQWdJQ0FnS2lCM1pTQnVaV1ZrSUdFZ2NtVm1aWEpsYm1ObElIUnZJSFJvWlNCelkzSnZiR3hoWW14bElHVnNaVzFsYm5RZ2RHOGdYQ0oxYm14dlkydGNJaUJ6WTNKdmJHd2diMjVjYmlBZ0lDQWdLaUJ0YjJKcGJHVWdaR1YyYVdObGMxeHVYRzRnSUNBZ0lDb2dVMk55YjJ4c1RHOWphMXh1SUNBZ0lDQXFJQzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFZ4dUlDQWdJQ0FxSUdGamRIVmhiR3g1SUdSdlpYTWdkR2hsSUhOamNtOXNiQ0JzYjJOcmFXNW5YRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NtVjBkWEp1SUNoY2JpQWdJQ0FnSUR4a2FYWStYRzRnSUNBZ0lDQWdJRHhrYVhaY2JpQWdJQ0FnSUNBZ0lDQnZia05zYVdOclBYdDBhR2x6TG1Kc2RYSlRaV3hsWTNSSmJuQjFkSDFjYmlBZ0lDQWdJQ0FnSUNCamMzTTllM3NnY0c5emFYUnBiMjQ2SUNkbWFYaGxaQ2NzSUd4bFpuUTZJREFzSUdKdmRIUnZiVG9nTUN3Z2NtbG5hSFE2SURBc0lIUnZjRG9nTUNCOWZWeHVJQ0FnSUNBZ0lDQXZQbHh1SUNBZ0lDQWdJQ0E4VG05a1pWSmxjMjlzZG1WeUlHbHVibVZ5VW1WbVBYdDBhR2x6TG1kbGRGTmpjbTlzYkZSaGNtZGxkSDArZTJOb2FXeGtjbVZ1ZlR3dlRtOWtaVkpsYzI5c2RtVnlQbHh1SUNBZ0lDQWdJQ0I3ZEc5MVkyaFRZM0p2Ykd4VVlYSm5aWFFnUHlBb1hHNGdJQ0FnSUNBZ0lDQWdQRk5qY205c2JFeHZZMnNnZEc5MVkyaFRZM0p2Ykd4VVlYSm5aWFE5ZTNSdmRXTm9VMk55YjJ4c1ZHRnlaMlYwZlNBdlBseHVJQ0FnSUNBZ0lDQXBJRG9nYm5Wc2JIMWNiaUFnSUNBZ0lEd3ZaR2wyUGx4dUlDQWdJQ2s3WEc0Z0lIMWNibjFjYmlKZGZRPT0gKi9cIlxufTtcblxuLy8gTk9URTpcbi8vIFdlIHNob3VsZG4ndCBuZWVkIHRoaXMgYWZ0ZXIgdXBkYXRpbmcgdG8gUmVhY3QgdjE2LjMuMCwgd2hpY2ggaW50cm9kdWNlczpcbi8vIC0gY3JlYXRlUmVmKCkgaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL3JlYWN0LWFwaS5odG1sI3JlYWN0Y3JlYXRlcmVmXG4vLyAtIGZvcndhcmRSZWYoKSBodHRwczovL3JlYWN0anMub3JnL2RvY3MvcmVhY3QtYXBpLmh0bWwjcmVhY3Rmb3J3YXJkcmVmXG52YXIgU2Nyb2xsQmxvY2sgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9QdXJlQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhTY3JvbGxCbG9jaywgX1B1cmVDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFNjcm9sbEJsb2NrKCkge1xuICAgIHZhciBfZ2V0UHJvdG90eXBlT2YyO1xuXG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNjcm9sbEJsb2NrKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfZ2V0UHJvdG90eXBlT2YyID0gX2dldFByb3RvdHlwZU9mKFNjcm9sbEJsb2NrKSkuY2FsbC5hcHBseShfZ2V0UHJvdG90eXBlT2YyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwic3RhdGVcIiwge1xuICAgICAgdG91Y2hTY3JvbGxUYXJnZXQ6IG51bGxcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJnZXRTY3JvbGxUYXJnZXRcIiwgZnVuY3Rpb24gKHJlZikge1xuICAgICAgaWYgKHJlZiA9PT0gX3RoaXMuc3RhdGUudG91Y2hTY3JvbGxUYXJnZXQpIHJldHVybjtcblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICB0b3VjaFNjcm9sbFRhcmdldDogcmVmXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJibHVyU2VsZWN0SW5wdXRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ibHVyKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU2Nyb2xsQmxvY2ssIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgaXNFbmFibGVkID0gX3RoaXMkcHJvcHMuaXNFbmFibGVkO1xuICAgICAgdmFyIHRvdWNoU2Nyb2xsVGFyZ2V0ID0gdGhpcy5zdGF0ZS50b3VjaFNjcm9sbFRhcmdldDsgLy8gYmFpbCBlYXJseSBpZiBub3QgZW5hYmxlZFxuXG4gICAgICBpZiAoIWlzRW5hYmxlZCkgcmV0dXJuIGNoaWxkcmVuO1xuICAgICAgLypcbiAgICAgICAqIERpdlxuICAgICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgKiBibG9ja3Mgc2Nyb2xsaW5nIG9uIG5vbi1ib2R5IGVsZW1lbnRzIGJlaGluZCB0aGUgbWVudVxuICAgICAgICAqIE5vZGVSZXNvbHZlclxuICAgICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgKiB3ZSBuZWVkIGEgcmVmZXJlbmNlIHRvIHRoZSBzY3JvbGxhYmxlIGVsZW1lbnQgdG8gXCJ1bmxvY2tcIiBzY3JvbGwgb25cbiAgICAgICAqIG1vYmlsZSBkZXZpY2VzXG4gICAgICAgICogU2Nyb2xsTG9ja1xuICAgICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgKiBhY3R1YWxseSBkb2VzIHRoZSBzY3JvbGwgbG9ja2luZ1xuICAgICAgICovXG5cbiAgICAgIHJldHVybiBqc3goXCJkaXZcIiwgbnVsbCwganN4KFwiZGl2XCIsIHtcbiAgICAgICAgb25DbGljazogdGhpcy5ibHVyU2VsZWN0SW5wdXQsXG4gICAgICAgIGNzczogX3JlZiQxXG4gICAgICB9KSwganN4KE5vZGVSZXNvbHZlciwge1xuICAgICAgICBpbm5lclJlZjogdGhpcy5nZXRTY3JvbGxUYXJnZXRcbiAgICAgIH0sIGNoaWxkcmVuKSwgdG91Y2hTY3JvbGxUYXJnZXQgPyBqc3goU2Nyb2xsTG9jaywge1xuICAgICAgICB0b3VjaFNjcm9sbFRhcmdldDogdG91Y2hTY3JvbGxUYXJnZXRcbiAgICAgIH0pIDogbnVsbCk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFNjcm9sbEJsb2NrO1xufShQdXJlQ29tcG9uZW50KTtcblxudmFyIFNjcm9sbENhcHRvciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoU2Nyb2xsQ2FwdG9yLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTY3JvbGxDYXB0b3IoKSB7XG4gICAgdmFyIF9nZXRQcm90b3R5cGVPZjI7XG5cbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2Nyb2xsQ2FwdG9yKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfZ2V0UHJvdG90eXBlT2YyID0gX2dldFByb3RvdHlwZU9mKFNjcm9sbENhcHRvcikpLmNhbGwuYXBwbHkoX2dldFByb3RvdHlwZU9mMiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImlzQm90dG9tXCIsIGZhbHNlKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJpc1RvcFwiLCBmYWxzZSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwic2Nyb2xsVGFyZ2V0XCIsIHZvaWQgMCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwidG91Y2hTdGFydFwiLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImNhbmNlbFNjcm9sbFwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJoYW5kbGVFdmVudERlbHRhXCIsIGZ1bmN0aW9uIChldmVudCwgZGVsdGEpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIG9uQm90dG9tQXJyaXZlID0gX3RoaXMkcHJvcHMub25Cb3R0b21BcnJpdmUsXG4gICAgICAgICAgb25Cb3R0b21MZWF2ZSA9IF90aGlzJHByb3BzLm9uQm90dG9tTGVhdmUsXG4gICAgICAgICAgb25Ub3BBcnJpdmUgPSBfdGhpcyRwcm9wcy5vblRvcEFycml2ZSxcbiAgICAgICAgICBvblRvcExlYXZlID0gX3RoaXMkcHJvcHMub25Ub3BMZWF2ZTtcbiAgICAgIHZhciBfdGhpcyRzY3JvbGxUYXJnZXQgPSBfdGhpcy5zY3JvbGxUYXJnZXQsXG4gICAgICAgICAgc2Nyb2xsVG9wID0gX3RoaXMkc2Nyb2xsVGFyZ2V0LnNjcm9sbFRvcCxcbiAgICAgICAgICBzY3JvbGxIZWlnaHQgPSBfdGhpcyRzY3JvbGxUYXJnZXQuc2Nyb2xsSGVpZ2h0LFxuICAgICAgICAgIGNsaWVudEhlaWdodCA9IF90aGlzJHNjcm9sbFRhcmdldC5jbGllbnRIZWlnaHQ7XG4gICAgICB2YXIgdGFyZ2V0ID0gX3RoaXMuc2Nyb2xsVGFyZ2V0O1xuICAgICAgdmFyIGlzRGVsdGFQb3NpdGl2ZSA9IGRlbHRhID4gMDtcbiAgICAgIHZhciBhdmFpbGFibGVTY3JvbGwgPSBzY3JvbGxIZWlnaHQgLSBjbGllbnRIZWlnaHQgLSBzY3JvbGxUb3A7XG4gICAgICB2YXIgc2hvdWxkQ2FuY2VsU2Nyb2xsID0gZmFsc2U7IC8vIHJlc2V0IGJvdHRvbS90b3AgZmxhZ3NcblxuICAgICAgaWYgKGF2YWlsYWJsZVNjcm9sbCA+IGRlbHRhICYmIF90aGlzLmlzQm90dG9tKSB7XG4gICAgICAgIGlmIChvbkJvdHRvbUxlYXZlKSBvbkJvdHRvbUxlYXZlKGV2ZW50KTtcbiAgICAgICAgX3RoaXMuaXNCb3R0b20gPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRGVsdGFQb3NpdGl2ZSAmJiBfdGhpcy5pc1RvcCkge1xuICAgICAgICBpZiAob25Ub3BMZWF2ZSkgb25Ub3BMZWF2ZShldmVudCk7XG4gICAgICAgIF90aGlzLmlzVG9wID0gZmFsc2U7XG4gICAgICB9IC8vIGJvdHRvbSBsaW1pdFxuXG5cbiAgICAgIGlmIChpc0RlbHRhUG9zaXRpdmUgJiYgZGVsdGEgPiBhdmFpbGFibGVTY3JvbGwpIHtcbiAgICAgICAgaWYgKG9uQm90dG9tQXJyaXZlICYmICFfdGhpcy5pc0JvdHRvbSkge1xuICAgICAgICAgIG9uQm90dG9tQXJyaXZlKGV2ZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRhcmdldC5zY3JvbGxUb3AgPSBzY3JvbGxIZWlnaHQ7XG4gICAgICAgIHNob3VsZENhbmNlbFNjcm9sbCA9IHRydWU7XG4gICAgICAgIF90aGlzLmlzQm90dG9tID0gdHJ1ZTsgLy8gdG9wIGxpbWl0XG4gICAgICB9IGVsc2UgaWYgKCFpc0RlbHRhUG9zaXRpdmUgJiYgLWRlbHRhID4gc2Nyb2xsVG9wKSB7XG4gICAgICAgIGlmIChvblRvcEFycml2ZSAmJiAhX3RoaXMuaXNUb3ApIHtcbiAgICAgICAgICBvblRvcEFycml2ZShldmVudCk7XG4gICAgICAgIH1cblxuICAgICAgICB0YXJnZXQuc2Nyb2xsVG9wID0gMDtcbiAgICAgICAgc2hvdWxkQ2FuY2VsU2Nyb2xsID0gdHJ1ZTtcbiAgICAgICAgX3RoaXMuaXNUb3AgPSB0cnVlO1xuICAgICAgfSAvLyBjYW5jZWwgc2Nyb2xsXG5cblxuICAgICAgaWYgKHNob3VsZENhbmNlbFNjcm9sbCkge1xuICAgICAgICBfdGhpcy5jYW5jZWxTY3JvbGwoZXZlbnQpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcIm9uV2hlZWxcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBfdGhpcy5oYW5kbGVFdmVudERlbHRhKGV2ZW50LCBldmVudC5kZWx0YVkpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcIm9uVG91Y2hTdGFydFwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIC8vIHNldCB0b3VjaCBzdGFydCBzbyB3ZSBjYW4gY2FsY3VsYXRlIHRvdWNobW92ZSBkZWx0YVxuICAgICAgX3RoaXMudG91Y2hTdGFydCA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwib25Ub3VjaE1vdmVcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgZGVsdGFZID0gX3RoaXMudG91Y2hTdGFydCAtIGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFk7XG5cbiAgICAgIF90aGlzLmhhbmRsZUV2ZW50RGVsdGEoZXZlbnQsIGRlbHRhWSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiZ2V0U2Nyb2xsVGFyZ2V0XCIsIGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgIF90aGlzLnNjcm9sbFRhcmdldCA9IHJlZjtcbiAgICB9KTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTY3JvbGxDYXB0b3IsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy5zdGFydExpc3RlbmluZyh0aGlzLnNjcm9sbFRhcmdldCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgdGhpcy5zdG9wTGlzdGVuaW5nKHRoaXMuc2Nyb2xsVGFyZ2V0KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic3RhcnRMaXN0ZW5pbmdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RhcnRMaXN0ZW5pbmcoZWwpIHtcbiAgICAgIC8vIGJhaWwgZWFybHkgaWYgbm8gZWxlbWVudCBpcyBhdmFpbGFibGUgdG8gYXR0YWNoIHRvXG4gICAgICBpZiAoIWVsKSByZXR1cm47IC8vIGFsbCB0aGUgaWYgc3RhdGVtZW50cyBhcmUgdG8gYXBwZWFzZSBGbG93IPCfmKJcblxuICAgICAgaWYgKHR5cGVvZiBlbC5hZGRFdmVudExpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ3doZWVsJywgdGhpcy5vbldoZWVsLCBmYWxzZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgZWwuYWRkRXZlbnRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5vblRvdWNoU3RhcnQsIGZhbHNlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBlbC5hZGRFdmVudExpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHRoaXMub25Ub3VjaE1vdmUsIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic3RvcExpc3RlbmluZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdG9wTGlzdGVuaW5nKGVsKSB7XG4gICAgICAvLyBhbGwgdGhlIGlmIHN0YXRlbWVudHMgYXJlIHRvIGFwcGVhc2UgRmxvdyDwn5iiXG4gICAgICBpZiAodHlwZW9mIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignd2hlZWwnLCB0aGlzLm9uV2hlZWwsIGZhbHNlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBlbC5yZW1vdmVFdmVudExpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLm9uVG91Y2hTdGFydCwgZmFsc2UpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdGhpcy5vblRvdWNoTW92ZSwgZmFsc2UpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTm9kZVJlc29sdmVyLCB7XG4gICAgICAgIGlubmVyUmVmOiB0aGlzLmdldFNjcm9sbFRhcmdldFxuICAgICAgfSwgdGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFNjcm9sbENhcHRvcjtcbn0oQ29tcG9uZW50KTtcblxudmFyIFNjcm9sbENhcHRvclN3aXRjaCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbXBvbmVudDIpIHtcbiAgX2luaGVyaXRzKFNjcm9sbENhcHRvclN3aXRjaCwgX0NvbXBvbmVudDIpO1xuXG4gIGZ1bmN0aW9uIFNjcm9sbENhcHRvclN3aXRjaCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2Nyb2xsQ2FwdG9yU3dpdGNoKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoU2Nyb2xsQ2FwdG9yU3dpdGNoKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTY3JvbGxDYXB0b3JTd2l0Y2gsIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBpc0VuYWJsZWQgPSBfdGhpcyRwcm9wczIuaXNFbmFibGVkLFxuICAgICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF90aGlzJHByb3BzMiwgW1wiaXNFbmFibGVkXCJdKTtcblxuICAgICAgcmV0dXJuIGlzRW5hYmxlZCA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoU2Nyb2xsQ2FwdG9yLCBwcm9wcykgOiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTY3JvbGxDYXB0b3JTd2l0Y2g7XG59KENvbXBvbmVudCk7XG5cbl9kZWZpbmVQcm9wZXJ0eShTY3JvbGxDYXB0b3JTd2l0Y2gsIFwiZGVmYXVsdFByb3BzXCIsIHtcbiAgaXNFbmFibGVkOiB0cnVlXG59KTtcblxudmFyIGluc3RydWN0aW9uc0FyaWFNZXNzYWdlID0gZnVuY3Rpb24gaW5zdHJ1Y3Rpb25zQXJpYU1lc3NhZ2UoZXZlbnQpIHtcbiAgdmFyIGNvbnRleHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICB2YXIgaXNTZWFyY2hhYmxlID0gY29udGV4dC5pc1NlYXJjaGFibGUsXG4gICAgICBpc011bHRpID0gY29udGV4dC5pc011bHRpLFxuICAgICAgbGFiZWwgPSBjb250ZXh0LmxhYmVsLFxuICAgICAgaXNEaXNhYmxlZCA9IGNvbnRleHQuaXNEaXNhYmxlZDtcblxuICBzd2l0Y2ggKGV2ZW50KSB7XG4gICAgY2FzZSAnbWVudSc6XG4gICAgICByZXR1cm4gXCJVc2UgVXAgYW5kIERvd24gdG8gY2hvb3NlIG9wdGlvbnNcIi5jb25jYXQoaXNEaXNhYmxlZCA/ICcnIDogJywgcHJlc3MgRW50ZXIgdG8gc2VsZWN0IHRoZSBjdXJyZW50bHkgZm9jdXNlZCBvcHRpb24nLCBcIiwgcHJlc3MgRXNjYXBlIHRvIGV4aXQgdGhlIG1lbnUsIHByZXNzIFRhYiB0byBzZWxlY3QgdGhlIG9wdGlvbiBhbmQgZXhpdCB0aGUgbWVudS5cIik7XG5cbiAgICBjYXNlICdpbnB1dCc6XG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQobGFiZWwgPyBsYWJlbCA6ICdTZWxlY3QnLCBcIiBpcyBmb2N1c2VkIFwiKS5jb25jYXQoaXNTZWFyY2hhYmxlID8gJyx0eXBlIHRvIHJlZmluZSBsaXN0JyA6ICcnLCBcIiwgcHJlc3MgRG93biB0byBvcGVuIHRoZSBtZW51LCBcIikuY29uY2F0KGlzTXVsdGkgPyAnIHByZXNzIGxlZnQgdG8gZm9jdXMgc2VsZWN0ZWQgdmFsdWVzJyA6ICcnKTtcblxuICAgIGNhc2UgJ3ZhbHVlJzpcbiAgICAgIHJldHVybiAnVXNlIGxlZnQgYW5kIHJpZ2h0IHRvIHRvZ2dsZSBiZXR3ZWVuIGZvY3VzZWQgdmFsdWVzLCBwcmVzcyBCYWNrc3BhY2UgdG8gcmVtb3ZlIHRoZSBjdXJyZW50bHkgZm9jdXNlZCB2YWx1ZSc7XG4gIH1cbn07XG52YXIgdmFsdWVFdmVudEFyaWFNZXNzYWdlID0gZnVuY3Rpb24gdmFsdWVFdmVudEFyaWFNZXNzYWdlKGV2ZW50LCBjb250ZXh0KSB7XG4gIHZhciB2YWx1ZSA9IGNvbnRleHQudmFsdWUsXG4gICAgICBpc0Rpc2FibGVkID0gY29udGV4dC5pc0Rpc2FibGVkO1xuICBpZiAoIXZhbHVlKSByZXR1cm47XG5cbiAgc3dpdGNoIChldmVudCkge1xuICAgIGNhc2UgJ2Rlc2VsZWN0LW9wdGlvbic6XG4gICAgY2FzZSAncG9wLXZhbHVlJzpcbiAgICBjYXNlICdyZW1vdmUtdmFsdWUnOlxuICAgICAgcmV0dXJuIFwib3B0aW9uIFwiLmNvbmNhdCh2YWx1ZSwgXCIsIGRlc2VsZWN0ZWQuXCIpO1xuXG4gICAgY2FzZSAnc2VsZWN0LW9wdGlvbic6XG4gICAgICByZXR1cm4gaXNEaXNhYmxlZCA/IFwib3B0aW9uIFwiLmNvbmNhdCh2YWx1ZSwgXCIgaXMgZGlzYWJsZWQuIFNlbGVjdCBhbm90aGVyIG9wdGlvbi5cIikgOiBcIm9wdGlvbiBcIi5jb25jYXQodmFsdWUsIFwiLCBzZWxlY3RlZC5cIik7XG4gIH1cbn07XG52YXIgdmFsdWVGb2N1c0FyaWFNZXNzYWdlID0gZnVuY3Rpb24gdmFsdWVGb2N1c0FyaWFNZXNzYWdlKF9yZWYpIHtcbiAgdmFyIGZvY3VzZWRWYWx1ZSA9IF9yZWYuZm9jdXNlZFZhbHVlLFxuICAgICAgZ2V0T3B0aW9uTGFiZWwgPSBfcmVmLmdldE9wdGlvbkxhYmVsLFxuICAgICAgc2VsZWN0VmFsdWUgPSBfcmVmLnNlbGVjdFZhbHVlO1xuICByZXR1cm4gXCJ2YWx1ZSBcIi5jb25jYXQoZ2V0T3B0aW9uTGFiZWwoZm9jdXNlZFZhbHVlKSwgXCIgZm9jdXNlZCwgXCIpLmNvbmNhdChzZWxlY3RWYWx1ZS5pbmRleE9mKGZvY3VzZWRWYWx1ZSkgKyAxLCBcIiBvZiBcIikuY29uY2F0KHNlbGVjdFZhbHVlLmxlbmd0aCwgXCIuXCIpO1xufTtcbnZhciBvcHRpb25Gb2N1c0FyaWFNZXNzYWdlID0gZnVuY3Rpb24gb3B0aW9uRm9jdXNBcmlhTWVzc2FnZShfcmVmMikge1xuICB2YXIgZm9jdXNlZE9wdGlvbiA9IF9yZWYyLmZvY3VzZWRPcHRpb24sXG4gICAgICBnZXRPcHRpb25MYWJlbCA9IF9yZWYyLmdldE9wdGlvbkxhYmVsLFxuICAgICAgb3B0aW9ucyA9IF9yZWYyLm9wdGlvbnM7XG4gIHJldHVybiBcIm9wdGlvbiBcIi5jb25jYXQoZ2V0T3B0aW9uTGFiZWwoZm9jdXNlZE9wdGlvbiksIFwiIGZvY3VzZWRcIikuY29uY2F0KGZvY3VzZWRPcHRpb24uaXNEaXNhYmxlZCA/ICcgZGlzYWJsZWQnIDogJycsIFwiLCBcIikuY29uY2F0KG9wdGlvbnMuaW5kZXhPZihmb2N1c2VkT3B0aW9uKSArIDEsIFwiIG9mIFwiKS5jb25jYXQob3B0aW9ucy5sZW5ndGgsIFwiLlwiKTtcbn07XG52YXIgcmVzdWx0c0FyaWFNZXNzYWdlID0gZnVuY3Rpb24gcmVzdWx0c0FyaWFNZXNzYWdlKF9yZWYzKSB7XG4gIHZhciBpbnB1dFZhbHVlID0gX3JlZjMuaW5wdXRWYWx1ZSxcbiAgICAgIHNjcmVlblJlYWRlck1lc3NhZ2UgPSBfcmVmMy5zY3JlZW5SZWFkZXJNZXNzYWdlO1xuICByZXR1cm4gXCJcIi5jb25jYXQoc2NyZWVuUmVhZGVyTWVzc2FnZSkuY29uY2F0KGlucHV0VmFsdWUgPyAnIGZvciBzZWFyY2ggdGVybSAnICsgaW5wdXRWYWx1ZSA6ICcnLCBcIi5cIik7XG59O1xuXG52YXIgZm9ybWF0R3JvdXBMYWJlbCA9IGZ1bmN0aW9uIGZvcm1hdEdyb3VwTGFiZWwoZ3JvdXApIHtcbiAgcmV0dXJuIGdyb3VwLmxhYmVsO1xufTtcbnZhciBnZXRPcHRpb25MYWJlbCA9IGZ1bmN0aW9uIGdldE9wdGlvbkxhYmVsKG9wdGlvbikge1xuICByZXR1cm4gb3B0aW9uLmxhYmVsO1xufTtcbnZhciBnZXRPcHRpb25WYWx1ZSA9IGZ1bmN0aW9uIGdldE9wdGlvblZhbHVlKG9wdGlvbikge1xuICByZXR1cm4gb3B0aW9uLnZhbHVlO1xufTtcbnZhciBpc09wdGlvbkRpc2FibGVkID0gZnVuY3Rpb24gaXNPcHRpb25EaXNhYmxlZChvcHRpb24pIHtcbiAgcmV0dXJuICEhb3B0aW9uLmlzRGlzYWJsZWQ7XG59O1xuXG52YXIgZGVmYXVsdFN0eWxlcyA9IHtcbiAgY2xlYXJJbmRpY2F0b3I6IGNsZWFySW5kaWNhdG9yQ1NTLFxuICBjb250YWluZXI6IGNvbnRhaW5lckNTUyxcbiAgY29udHJvbDogY3NzLFxuICBkcm9wZG93bkluZGljYXRvcjogZHJvcGRvd25JbmRpY2F0b3JDU1MsXG4gIGdyb3VwOiBncm91cENTUyxcbiAgZ3JvdXBIZWFkaW5nOiBncm91cEhlYWRpbmdDU1MsXG4gIGluZGljYXRvcnNDb250YWluZXI6IGluZGljYXRvcnNDb250YWluZXJDU1MsXG4gIGluZGljYXRvclNlcGFyYXRvcjogaW5kaWNhdG9yU2VwYXJhdG9yQ1NTLFxuICBpbnB1dDogaW5wdXRDU1MsXG4gIGxvYWRpbmdJbmRpY2F0b3I6IGxvYWRpbmdJbmRpY2F0b3JDU1MsXG4gIGxvYWRpbmdNZXNzYWdlOiBsb2FkaW5nTWVzc2FnZUNTUyxcbiAgbWVudTogbWVudUNTUyxcbiAgbWVudUxpc3Q6IG1lbnVMaXN0Q1NTLFxuICBtZW51UG9ydGFsOiBtZW51UG9ydGFsQ1NTLFxuICBtdWx0aVZhbHVlOiBtdWx0aVZhbHVlQ1NTLFxuICBtdWx0aVZhbHVlTGFiZWw6IG11bHRpVmFsdWVMYWJlbENTUyxcbiAgbXVsdGlWYWx1ZVJlbW92ZTogbXVsdGlWYWx1ZVJlbW92ZUNTUyxcbiAgbm9PcHRpb25zTWVzc2FnZTogbm9PcHRpb25zTWVzc2FnZUNTUyxcbiAgb3B0aW9uOiBvcHRpb25DU1MsXG4gIHBsYWNlaG9sZGVyOiBwbGFjZWhvbGRlckNTUyxcbiAgc2luZ2xlVmFsdWU6IGNzcyQxLFxuICB2YWx1ZUNvbnRhaW5lcjogdmFsdWVDb250YWluZXJDU1Ncbn07IC8vIE1lcmdlIFV0aWxpdHlcbi8vIEFsbG93cyBjb25zdW1lcnMgdG8gZXh0ZW5kIGEgYmFzZSBTZWxlY3Qgd2l0aCBhZGRpdGlvbmFsIHN0eWxlc1xuXG5mdW5jdGlvbiBtZXJnZVN0eWxlcyhzb3VyY2UpIHtcbiAgdmFyIHRhcmdldCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgLy8gaW5pdGlhbGl6ZSB3aXRoIHNvdXJjZSBzdHlsZXNcbiAgdmFyIHN0eWxlcyA9IF9vYmplY3RTcHJlYWQoe30sIHNvdXJjZSk7IC8vIG1hc3NhZ2UgaW4gdGFyZ2V0IHN0eWxlc1xuXG5cbiAgT2JqZWN0LmtleXModGFyZ2V0KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoc291cmNlW2tleV0pIHtcbiAgICAgIHN0eWxlc1trZXldID0gZnVuY3Rpb24gKHJzQ3NzLCBwcm9wcykge1xuICAgICAgICByZXR1cm4gdGFyZ2V0W2tleV0oc291cmNlW2tleV0ocnNDc3MsIHByb3BzKSwgcHJvcHMpO1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzW2tleV0gPSB0YXJnZXRba2V5XTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gc3R5bGVzO1xufVxuXG52YXIgY29sb3JzID0ge1xuICBwcmltYXJ5OiAnIzI2ODRGRicsXG4gIHByaW1hcnk3NTogJyM0QzlBRkYnLFxuICBwcmltYXJ5NTA6ICcjQjJENEZGJyxcbiAgcHJpbWFyeTI1OiAnI0RFRUJGRicsXG4gIGRhbmdlcjogJyNERTM1MEInLFxuICBkYW5nZXJMaWdodDogJyNGRkJEQUQnLFxuICBuZXV0cmFsMDogJ2hzbCgwLCAwJSwgMTAwJSknLFxuICBuZXV0cmFsNTogJ2hzbCgwLCAwJSwgOTUlKScsXG4gIG5ldXRyYWwxMDogJ2hzbCgwLCAwJSwgOTAlKScsXG4gIG5ldXRyYWwyMDogJ2hzbCgwLCAwJSwgODAlKScsXG4gIG5ldXRyYWwzMDogJ2hzbCgwLCAwJSwgNzAlKScsXG4gIG5ldXRyYWw0MDogJ2hzbCgwLCAwJSwgNjAlKScsXG4gIG5ldXRyYWw1MDogJ2hzbCgwLCAwJSwgNTAlKScsXG4gIG5ldXRyYWw2MDogJ2hzbCgwLCAwJSwgNDAlKScsXG4gIG5ldXRyYWw3MDogJ2hzbCgwLCAwJSwgMzAlKScsXG4gIG5ldXRyYWw4MDogJ2hzbCgwLCAwJSwgMjAlKScsXG4gIG5ldXRyYWw5MDogJ2hzbCgwLCAwJSwgMTAlKSdcbn07XG52YXIgYm9yZGVyUmFkaXVzID0gNDsgLy8gVXNlZCB0byBjYWxjdWxhdGUgY29uc2lzdGVudCBtYXJnaW4vcGFkZGluZyBvbiBlbGVtZW50c1xuXG52YXIgYmFzZVVuaXQgPSA0OyAvLyBUaGUgbWluaW11bSBoZWlnaHQgb2YgdGhlIGNvbnRyb2xcblxudmFyIGNvbnRyb2xIZWlnaHQgPSAzODsgLy8gVGhlIGFtb3VudCBvZiBzcGFjZSBiZXR3ZWVuIHRoZSBjb250cm9sIGFuZCBtZW51ICovXG5cbnZhciBtZW51R3V0dGVyID0gYmFzZVVuaXQgKiAyO1xudmFyIHNwYWNpbmcgPSB7XG4gIGJhc2VVbml0OiBiYXNlVW5pdCxcbiAgY29udHJvbEhlaWdodDogY29udHJvbEhlaWdodCxcbiAgbWVudUd1dHRlcjogbWVudUd1dHRlclxufTtcbnZhciBkZWZhdWx0VGhlbWUgPSB7XG4gIGJvcmRlclJhZGl1czogYm9yZGVyUmFkaXVzLFxuICBjb2xvcnM6IGNvbG9ycyxcbiAgc3BhY2luZzogc3BhY2luZ1xufTtcblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgYmFja3NwYWNlUmVtb3Zlc1ZhbHVlOiB0cnVlLFxuICBibHVySW5wdXRPblNlbGVjdDogaXNUb3VjaENhcGFibGUoKSxcbiAgY2FwdHVyZU1lbnVTY3JvbGw6ICFpc1RvdWNoQ2FwYWJsZSgpLFxuICBjbG9zZU1lbnVPblNlbGVjdDogdHJ1ZSxcbiAgY2xvc2VNZW51T25TY3JvbGw6IGZhbHNlLFxuICBjb21wb25lbnRzOiB7fSxcbiAgY29udHJvbFNob3VsZFJlbmRlclZhbHVlOiB0cnVlLFxuICBlc2NhcGVDbGVhcnNWYWx1ZTogZmFsc2UsXG4gIGZpbHRlck9wdGlvbjogY3JlYXRlRmlsdGVyKCksXG4gIGZvcm1hdEdyb3VwTGFiZWw6IGZvcm1hdEdyb3VwTGFiZWwsXG4gIGdldE9wdGlvbkxhYmVsOiBnZXRPcHRpb25MYWJlbCxcbiAgZ2V0T3B0aW9uVmFsdWU6IGdldE9wdGlvblZhbHVlLFxuICBpc0Rpc2FibGVkOiBmYWxzZSxcbiAgaXNMb2FkaW5nOiBmYWxzZSxcbiAgaXNNdWx0aTogZmFsc2UsXG4gIGlzUnRsOiBmYWxzZSxcbiAgaXNTZWFyY2hhYmxlOiB0cnVlLFxuICBpc09wdGlvbkRpc2FibGVkOiBpc09wdGlvbkRpc2FibGVkLFxuICBsb2FkaW5nTWVzc2FnZTogZnVuY3Rpb24gbG9hZGluZ01lc3NhZ2UoKSB7XG4gICAgcmV0dXJuICdMb2FkaW5nLi4uJztcbiAgfSxcbiAgbWF4TWVudUhlaWdodDogMzAwLFxuICBtaW5NZW51SGVpZ2h0OiAxNDAsXG4gIG1lbnVJc09wZW46IGZhbHNlLFxuICBtZW51UGxhY2VtZW50OiAnYm90dG9tJyxcbiAgbWVudVBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICBtZW51U2hvdWxkQmxvY2tTY3JvbGw6IGZhbHNlLFxuICBtZW51U2hvdWxkU2Nyb2xsSW50b1ZpZXc6ICFpc01vYmlsZURldmljZSgpLFxuICBub09wdGlvbnNNZXNzYWdlOiBmdW5jdGlvbiBub09wdGlvbnNNZXNzYWdlKCkge1xuICAgIHJldHVybiAnTm8gb3B0aW9ucyc7XG4gIH0sXG4gIG9wZW5NZW51T25Gb2N1czogZmFsc2UsXG4gIG9wZW5NZW51T25DbGljazogdHJ1ZSxcbiAgb3B0aW9uczogW10sXG4gIHBhZ2VTaXplOiA1LFxuICBwbGFjZWhvbGRlcjogJ1NlbGVjdC4uLicsXG4gIHNjcmVlblJlYWRlclN0YXR1czogZnVuY3Rpb24gc2NyZWVuUmVhZGVyU3RhdHVzKF9yZWYpIHtcbiAgICB2YXIgY291bnQgPSBfcmVmLmNvdW50O1xuICAgIHJldHVybiBcIlwiLmNvbmNhdChjb3VudCwgXCIgcmVzdWx0XCIpLmNvbmNhdChjb3VudCAhPT0gMSA/ICdzJyA6ICcnLCBcIiBhdmFpbGFibGVcIik7XG4gIH0sXG4gIHN0eWxlczoge30sXG4gIHRhYkluZGV4OiAnMCcsXG4gIHRhYlNlbGVjdHNWYWx1ZTogdHJ1ZVxufTtcbnZhciBpbnN0YW5jZUlkID0gMTtcblxudmFyIFNlbGVjdCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoU2VsZWN0LCBfQ29tcG9uZW50KTtcblxuICAvLyBNaXNjLiBJbnN0YW5jZSBQcm9wZXJ0aWVzXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyBUT0RPXG4gIC8vIFJlZnNcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIExpZmVjeWNsZVxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgZnVuY3Rpb24gU2VsZWN0KF9wcm9wcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTZWxlY3QpO1xuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoU2VsZWN0KS5jYWxsKHRoaXMsIF9wcm9wcykpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcInN0YXRlXCIsIHtcbiAgICAgIGFyaWFMaXZlU2VsZWN0aW9uOiAnJyxcbiAgICAgIGFyaWFMaXZlQ29udGV4dDogJycsXG4gICAgICBmb2N1c2VkT3B0aW9uOiBudWxsLFxuICAgICAgZm9jdXNlZFZhbHVlOiBudWxsLFxuICAgICAgaW5wdXRJc0hpZGRlbjogZmFsc2UsXG4gICAgICBpc0ZvY3VzZWQ6IGZhbHNlLFxuICAgICAgbWVudU9wdGlvbnM6IHtcbiAgICAgICAgcmVuZGVyOiBbXSxcbiAgICAgICAgZm9jdXNhYmxlOiBbXVxuICAgICAgfSxcbiAgICAgIHNlbGVjdFZhbHVlOiBbXVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImJsb2NrT3B0aW9uSG92ZXJcIiwgZmFsc2UpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImlzQ29tcG9zaW5nXCIsIGZhbHNlKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJjbGVhckZvY3VzVmFsdWVPblVwZGF0ZVwiLCBmYWxzZSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiY29tbW9uUHJvcHNcIiwgdm9pZCAwKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJjb21wb25lbnRzXCIsIHZvaWQgMCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiaGFzR3JvdXBzXCIsIGZhbHNlKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJpbml0aWFsVG91Y2hYXCIsIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImluaXRpYWxUb3VjaFlcIiwgMCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiaW5wdXRJc0hpZGRlbkFmdGVyVXBkYXRlXCIsIHZvaWQgMCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiaW5zdGFuY2VQcmVmaXhcIiwgJycpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcIm9wZW5BZnRlckZvY3VzXCIsIGZhbHNlKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJzY3JvbGxUb0ZvY3VzZWRPcHRpb25PblVwZGF0ZVwiLCBmYWxzZSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwidXNlcklzRHJhZ2dpbmdcIiwgdm9pZCAwKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJjb250cm9sUmVmXCIsIG51bGwpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImdldENvbnRyb2xSZWZcIiwgZnVuY3Rpb24gKHJlZikge1xuICAgICAgX3RoaXMuY29udHJvbFJlZiA9IHJlZjtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJmb2N1c2VkT3B0aW9uUmVmXCIsIG51bGwpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImdldEZvY3VzZWRPcHRpb25SZWZcIiwgZnVuY3Rpb24gKHJlZikge1xuICAgICAgX3RoaXMuZm9jdXNlZE9wdGlvblJlZiA9IHJlZjtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJtZW51TGlzdFJlZlwiLCBudWxsKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJnZXRNZW51TGlzdFJlZlwiLCBmdW5jdGlvbiAocmVmKSB7XG4gICAgICBfdGhpcy5tZW51TGlzdFJlZiA9IHJlZjtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJpbnB1dFJlZlwiLCBudWxsKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJnZXRJbnB1dFJlZlwiLCBmdW5jdGlvbiAocmVmKSB7XG4gICAgICBfdGhpcy5pbnB1dFJlZiA9IHJlZjtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJjYWNoZUNvbXBvbmVudHNcIiwgZnVuY3Rpb24gKGNvbXBvbmVudHMpIHtcbiAgICAgIF90aGlzLmNvbXBvbmVudHMgPSBkZWZhdWx0Q29tcG9uZW50cyh7XG4gICAgICAgIGNvbXBvbmVudHM6IGNvbXBvbmVudHNcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImZvY3VzXCIsIF90aGlzLmZvY3VzSW5wdXQpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImJsdXJcIiwgX3RoaXMuYmx1cklucHV0KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJvbkNoYW5nZVwiLCBmdW5jdGlvbiAobmV3VmFsdWUsIGFjdGlvbk1ldGEpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIG9uQ2hhbmdlID0gX3RoaXMkcHJvcHMub25DaGFuZ2UsXG4gICAgICAgICAgbmFtZSA9IF90aGlzJHByb3BzLm5hbWU7XG4gICAgICBvbkNoYW5nZShuZXdWYWx1ZSwgX29iamVjdFNwcmVhZCh7fSwgYWN0aW9uTWV0YSwge1xuICAgICAgICBuYW1lOiBuYW1lXG4gICAgICB9KSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwic2V0VmFsdWVcIiwgZnVuY3Rpb24gKG5ld1ZhbHVlKSB7XG4gICAgICB2YXIgYWN0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnc2V0LXZhbHVlJztcbiAgICAgIHZhciBvcHRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBjbG9zZU1lbnVPblNlbGVjdCA9IF90aGlzJHByb3BzMi5jbG9zZU1lbnVPblNlbGVjdCxcbiAgICAgICAgICBpc011bHRpID0gX3RoaXMkcHJvcHMyLmlzTXVsdGk7XG5cbiAgICAgIF90aGlzLm9uSW5wdXRDaGFuZ2UoJycsIHtcbiAgICAgICAgYWN0aW9uOiAnc2V0LXZhbHVlJ1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChjbG9zZU1lbnVPblNlbGVjdCkge1xuICAgICAgICBfdGhpcy5pbnB1dElzSGlkZGVuQWZ0ZXJVcGRhdGUgPSAhaXNNdWx0aTtcblxuICAgICAgICBfdGhpcy5vbk1lbnVDbG9zZSgpO1xuICAgICAgfSAvLyB3aGVuIHRoZSBzZWxlY3QgdmFsdWUgc2hvdWxkIGNoYW5nZSwgd2Ugc2hvdWxkIHJlc2V0IGZvY3VzZWRWYWx1ZVxuXG5cbiAgICAgIF90aGlzLmNsZWFyRm9jdXNWYWx1ZU9uVXBkYXRlID0gdHJ1ZTtcblxuICAgICAgX3RoaXMub25DaGFuZ2UobmV3VmFsdWUsIHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIG9wdGlvbjogb3B0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJzZWxlY3RPcHRpb25cIiwgZnVuY3Rpb24gKG5ld1ZhbHVlKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgYmx1cklucHV0T25TZWxlY3QgPSBfdGhpcyRwcm9wczMuYmx1cklucHV0T25TZWxlY3QsXG4gICAgICAgICAgaXNNdWx0aSA9IF90aGlzJHByb3BzMy5pc011bHRpO1xuICAgICAgdmFyIHNlbGVjdFZhbHVlID0gX3RoaXMuc3RhdGUuc2VsZWN0VmFsdWU7XG5cbiAgICAgIGlmIChpc011bHRpKSB7XG4gICAgICAgIGlmIChfdGhpcy5pc09wdGlvblNlbGVjdGVkKG5ld1ZhbHVlLCBzZWxlY3RWYWx1ZSkpIHtcbiAgICAgICAgICB2YXIgY2FuZGlkYXRlID0gX3RoaXMuZ2V0T3B0aW9uVmFsdWUobmV3VmFsdWUpO1xuXG4gICAgICAgICAgX3RoaXMuc2V0VmFsdWUoc2VsZWN0VmFsdWUuZmlsdGVyKGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuZ2V0T3B0aW9uVmFsdWUoaSkgIT09IGNhbmRpZGF0ZTtcbiAgICAgICAgICB9KSwgJ2Rlc2VsZWN0LW9wdGlvbicsIG5ld1ZhbHVlKTtcblxuICAgICAgICAgIF90aGlzLmFubm91bmNlQXJpYUxpdmVTZWxlY3Rpb24oe1xuICAgICAgICAgICAgZXZlbnQ6ICdkZXNlbGVjdC1vcHRpb24nLFxuICAgICAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgICAgICB2YWx1ZTogX3RoaXMuZ2V0T3B0aW9uTGFiZWwobmV3VmFsdWUpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCFfdGhpcy5pc09wdGlvbkRpc2FibGVkKG5ld1ZhbHVlLCBzZWxlY3RWYWx1ZSkpIHtcbiAgICAgICAgICAgIF90aGlzLnNldFZhbHVlKFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoc2VsZWN0VmFsdWUpLCBbbmV3VmFsdWVdKSwgJ3NlbGVjdC1vcHRpb24nLCBuZXdWYWx1ZSk7XG5cbiAgICAgICAgICAgIF90aGlzLmFubm91bmNlQXJpYUxpdmVTZWxlY3Rpb24oe1xuICAgICAgICAgICAgICBldmVudDogJ3NlbGVjdC1vcHRpb24nLFxuICAgICAgICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IF90aGlzLmdldE9wdGlvbkxhYmVsKG5ld1ZhbHVlKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gYW5ub3VuY2UgdGhhdCBvcHRpb24gaXMgZGlzYWJsZWRcbiAgICAgICAgICAgIF90aGlzLmFubm91bmNlQXJpYUxpdmVTZWxlY3Rpb24oe1xuICAgICAgICAgICAgICBldmVudDogJ3NlbGVjdC1vcHRpb24nLFxuICAgICAgICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IF90aGlzLmdldE9wdGlvbkxhYmVsKG5ld1ZhbHVlKSxcbiAgICAgICAgICAgICAgICBpc0Rpc2FibGVkOiB0cnVlXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFfdGhpcy5pc09wdGlvbkRpc2FibGVkKG5ld1ZhbHVlLCBzZWxlY3RWYWx1ZSkpIHtcbiAgICAgICAgICBfdGhpcy5zZXRWYWx1ZShuZXdWYWx1ZSwgJ3NlbGVjdC1vcHRpb24nKTtcblxuICAgICAgICAgIF90aGlzLmFubm91bmNlQXJpYUxpdmVTZWxlY3Rpb24oe1xuICAgICAgICAgICAgZXZlbnQ6ICdzZWxlY3Qtb3B0aW9uJyxcbiAgICAgICAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgICAgICAgdmFsdWU6IF90aGlzLmdldE9wdGlvbkxhYmVsKG5ld1ZhbHVlKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGFubm91bmNlIHRoYXQgb3B0aW9uIGlzIGRpc2FibGVkXG4gICAgICAgICAgX3RoaXMuYW5ub3VuY2VBcmlhTGl2ZVNlbGVjdGlvbih7XG4gICAgICAgICAgICBldmVudDogJ3NlbGVjdC1vcHRpb24nLFxuICAgICAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgICAgICB2YWx1ZTogX3RoaXMuZ2V0T3B0aW9uTGFiZWwobmV3VmFsdWUpLFxuICAgICAgICAgICAgICBpc0Rpc2FibGVkOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGJsdXJJbnB1dE9uU2VsZWN0KSB7XG4gICAgICAgIF90aGlzLmJsdXJJbnB1dCgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcInJlbW92ZVZhbHVlXCIsIGZ1bmN0aW9uIChyZW1vdmVkVmFsdWUpIHtcbiAgICAgIHZhciBzZWxlY3RWYWx1ZSA9IF90aGlzLnN0YXRlLnNlbGVjdFZhbHVlO1xuXG4gICAgICB2YXIgY2FuZGlkYXRlID0gX3RoaXMuZ2V0T3B0aW9uVmFsdWUocmVtb3ZlZFZhbHVlKTtcblxuICAgICAgdmFyIG5ld1ZhbHVlID0gc2VsZWN0VmFsdWUuZmlsdGVyKGZ1bmN0aW9uIChpKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5nZXRPcHRpb25WYWx1ZShpKSAhPT0gY2FuZGlkYXRlO1xuICAgICAgfSk7XG5cbiAgICAgIF90aGlzLm9uQ2hhbmdlKG5ld1ZhbHVlLmxlbmd0aCA/IG5ld1ZhbHVlIDogbnVsbCwge1xuICAgICAgICBhY3Rpb246ICdyZW1vdmUtdmFsdWUnLFxuICAgICAgICByZW1vdmVkVmFsdWU6IHJlbW92ZWRWYWx1ZVxuICAgICAgfSk7XG5cbiAgICAgIF90aGlzLmFubm91bmNlQXJpYUxpdmVTZWxlY3Rpb24oe1xuICAgICAgICBldmVudDogJ3JlbW92ZS12YWx1ZScsXG4gICAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgICB2YWx1ZTogcmVtb3ZlZFZhbHVlID8gX3RoaXMuZ2V0T3B0aW9uTGFiZWwocmVtb3ZlZFZhbHVlKSA6ICcnXG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBfdGhpcy5mb2N1c0lucHV0KCk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiY2xlYXJWYWx1ZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgaXNNdWx0aSA9IF90aGlzLnByb3BzLmlzTXVsdGk7XG5cbiAgICAgIF90aGlzLm9uQ2hhbmdlKGlzTXVsdGkgPyBbXSA6IG51bGwsIHtcbiAgICAgICAgYWN0aW9uOiAnY2xlYXInXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJwb3BWYWx1ZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc2VsZWN0VmFsdWUgPSBfdGhpcy5zdGF0ZS5zZWxlY3RWYWx1ZTtcbiAgICAgIHZhciBsYXN0U2VsZWN0ZWRWYWx1ZSA9IHNlbGVjdFZhbHVlW3NlbGVjdFZhbHVlLmxlbmd0aCAtIDFdO1xuICAgICAgdmFyIG5ld1ZhbHVlID0gc2VsZWN0VmFsdWUuc2xpY2UoMCwgc2VsZWN0VmFsdWUubGVuZ3RoIC0gMSk7XG5cbiAgICAgIF90aGlzLmFubm91bmNlQXJpYUxpdmVTZWxlY3Rpb24oe1xuICAgICAgICBldmVudDogJ3BvcC12YWx1ZScsXG4gICAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgICB2YWx1ZTogbGFzdFNlbGVjdGVkVmFsdWUgPyBfdGhpcy5nZXRPcHRpb25MYWJlbChsYXN0U2VsZWN0ZWRWYWx1ZSkgOiAnJ1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgX3RoaXMub25DaGFuZ2UobmV3VmFsdWUubGVuZ3RoID8gbmV3VmFsdWUgOiBudWxsLCB7XG4gICAgICAgIGFjdGlvbjogJ3BvcC12YWx1ZScsXG4gICAgICAgIHJlbW92ZWRWYWx1ZTogbGFzdFNlbGVjdGVkVmFsdWVcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImdldE9wdGlvbkxhYmVsXCIsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICByZXR1cm4gX3RoaXMucHJvcHMuZ2V0T3B0aW9uTGFiZWwoZGF0YSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiZ2V0T3B0aW9uVmFsdWVcIiwgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgIHJldHVybiBfdGhpcy5wcm9wcy5nZXRPcHRpb25WYWx1ZShkYXRhKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJnZXRTdHlsZXNcIiwgZnVuY3Rpb24gKGtleSwgcHJvcHMpIHtcbiAgICAgIHZhciBiYXNlID0gZGVmYXVsdFN0eWxlc1trZXldKHByb3BzKTtcbiAgICAgIGJhc2UuYm94U2l6aW5nID0gJ2JvcmRlci1ib3gnO1xuICAgICAgdmFyIGN1c3RvbSA9IF90aGlzLnByb3BzLnN0eWxlc1trZXldO1xuICAgICAgcmV0dXJuIGN1c3RvbSA/IGN1c3RvbShiYXNlLCBwcm9wcykgOiBiYXNlO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImdldEVsZW1lbnRJZFwiLCBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KF90aGlzLmluc3RhbmNlUHJlZml4LCBcIi1cIikuY29uY2F0KGVsZW1lbnQpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImdldEFjdGl2ZURlc2NlbmRlbnRJZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbWVudUlzT3BlbiA9IF90aGlzLnByb3BzLm1lbnVJc09wZW47XG4gICAgICB2YXIgX3RoaXMkc3RhdGUgPSBfdGhpcy5zdGF0ZSxcbiAgICAgICAgICBtZW51T3B0aW9ucyA9IF90aGlzJHN0YXRlLm1lbnVPcHRpb25zLFxuICAgICAgICAgIGZvY3VzZWRPcHRpb24gPSBfdGhpcyRzdGF0ZS5mb2N1c2VkT3B0aW9uO1xuICAgICAgaWYgKCFmb2N1c2VkT3B0aW9uIHx8ICFtZW51SXNPcGVuKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgdmFyIGluZGV4ID0gbWVudU9wdGlvbnMuZm9jdXNhYmxlLmluZGV4T2YoZm9jdXNlZE9wdGlvbik7XG4gICAgICB2YXIgb3B0aW9uID0gbWVudU9wdGlvbnMucmVuZGVyW2luZGV4XTtcbiAgICAgIHJldHVybiBvcHRpb24gJiYgb3B0aW9uLmtleTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJhbm5vdW5jZUFyaWFMaXZlU2VsZWN0aW9uXCIsIGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgdmFyIGV2ZW50ID0gX3JlZjIuZXZlbnQsXG4gICAgICAgICAgY29udGV4dCA9IF9yZWYyLmNvbnRleHQ7XG5cbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgYXJpYUxpdmVTZWxlY3Rpb246IHZhbHVlRXZlbnRBcmlhTWVzc2FnZShldmVudCwgY29udGV4dClcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImFubm91bmNlQXJpYUxpdmVDb250ZXh0XCIsIGZ1bmN0aW9uIChfcmVmMykge1xuICAgICAgdmFyIGV2ZW50ID0gX3JlZjMuZXZlbnQsXG4gICAgICAgICAgY29udGV4dCA9IF9yZWYzLmNvbnRleHQ7XG5cbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgYXJpYUxpdmVDb250ZXh0OiBpbnN0cnVjdGlvbnNBcmlhTWVzc2FnZShldmVudCwgX29iamVjdFNwcmVhZCh7fSwgY29udGV4dCwge1xuICAgICAgICAgIGxhYmVsOiBfdGhpcy5wcm9wc1snYXJpYS1sYWJlbCddXG4gICAgICAgIH0pKVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwib25NZW51TW91c2VEb3duXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKGV2ZW50LmJ1dHRvbiAhPT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgX3RoaXMuZm9jdXNJbnB1dCgpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcIm9uTWVudU1vdXNlTW92ZVwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIF90aGlzLmJsb2NrT3B0aW9uSG92ZXIgPSBmYWxzZTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJvbkNvbnRyb2xNb3VzZURvd25cIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgb3Blbk1lbnVPbkNsaWNrID0gX3RoaXMucHJvcHMub3Blbk1lbnVPbkNsaWNrO1xuXG4gICAgICBpZiAoIV90aGlzLnN0YXRlLmlzRm9jdXNlZCkge1xuICAgICAgICBpZiAob3Blbk1lbnVPbkNsaWNrKSB7XG4gICAgICAgICAgX3RoaXMub3BlbkFmdGVyRm9jdXMgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMuZm9jdXNJbnB1dCgpO1xuICAgICAgfSBlbHNlIGlmICghX3RoaXMucHJvcHMubWVudUlzT3Blbikge1xuICAgICAgICBpZiAob3Blbk1lbnVPbkNsaWNrKSB7XG4gICAgICAgICAgX3RoaXMub3Blbk1lbnUoJ2ZpcnN0Jyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vJEZsb3dGaXhNZVxuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0LnRhZ05hbWUgIT09ICdJTlBVVCcpIHtcbiAgICAgICAgICBfdGhpcy5vbk1lbnVDbG9zZSgpO1xuICAgICAgICB9XG4gICAgICB9IC8vJEZsb3dGaXhNZVxuXG5cbiAgICAgIGlmIChldmVudC50YXJnZXQudGFnTmFtZSAhPT0gJ0lOUFVUJykge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcIm9uRHJvcGRvd25JbmRpY2F0b3JNb3VzZURvd25cIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAvLyBpZ25vcmUgbW91c2UgZXZlbnRzIHRoYXQgd2VyZW4ndCB0cmlnZ2VyZWQgYnkgdGhlIHByaW1hcnkgYnV0dG9uXG4gICAgICBpZiAoZXZlbnQgJiYgZXZlbnQudHlwZSA9PT0gJ21vdXNlZG93bicgJiYgZXZlbnQuYnV0dG9uICE9PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKF90aGlzLnByb3BzLmlzRGlzYWJsZWQpIHJldHVybjtcbiAgICAgIHZhciBfdGhpcyRwcm9wczQgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBpc011bHRpID0gX3RoaXMkcHJvcHM0LmlzTXVsdGksXG4gICAgICAgICAgbWVudUlzT3BlbiA9IF90aGlzJHByb3BzNC5tZW51SXNPcGVuO1xuXG4gICAgICBfdGhpcy5mb2N1c0lucHV0KCk7XG5cbiAgICAgIGlmIChtZW51SXNPcGVuKSB7XG4gICAgICAgIF90aGlzLmlucHV0SXNIaWRkZW5BZnRlclVwZGF0ZSA9ICFpc011bHRpO1xuXG4gICAgICAgIF90aGlzLm9uTWVudUNsb3NlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpcy5vcGVuTWVudSgnZmlyc3QnKTtcbiAgICAgIH1cblxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcIm9uQ2xlYXJJbmRpY2F0b3JNb3VzZURvd25cIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAvLyBpZ25vcmUgbW91c2UgZXZlbnRzIHRoYXQgd2VyZW4ndCB0cmlnZ2VyZWQgYnkgdGhlIHByaW1hcnkgYnV0dG9uXG4gICAgICBpZiAoZXZlbnQgJiYgZXZlbnQudHlwZSA9PT0gJ21vdXNlZG93bicgJiYgZXZlbnQuYnV0dG9uICE9PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuY2xlYXJWYWx1ZSgpO1xuXG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIF90aGlzLm9wZW5BZnRlckZvY3VzID0gZmFsc2U7XG5cbiAgICAgIGlmIChldmVudC50eXBlID09PSAndG91Y2hlbmQnKSB7XG4gICAgICAgIF90aGlzLmZvY3VzSW5wdXQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5mb2N1c0lucHV0KCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcIm9uU2Nyb2xsXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKHR5cGVvZiBfdGhpcy5wcm9wcy5jbG9zZU1lbnVPblNjcm9sbCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIGlmIChldmVudC50YXJnZXQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCAmJiBpc0RvY3VtZW50RWxlbWVudChldmVudC50YXJnZXQpKSB7XG4gICAgICAgICAgX3RoaXMucHJvcHMub25NZW51Q2xvc2UoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgX3RoaXMucHJvcHMuY2xvc2VNZW51T25TY3JvbGwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgaWYgKF90aGlzLnByb3BzLmNsb3NlTWVudU9uU2Nyb2xsKGV2ZW50KSkge1xuICAgICAgICAgIF90aGlzLnByb3BzLm9uTWVudUNsb3NlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJvbkNvbXBvc2l0aW9uU3RhcnRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuaXNDb21wb3NpbmcgPSB0cnVlO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcIm9uQ29tcG9zaXRpb25FbmRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuaXNDb21wb3NpbmcgPSBmYWxzZTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJvblRvdWNoU3RhcnRcIiwgZnVuY3Rpb24gKF9yZWY0KSB7XG4gICAgICB2YXIgdG91Y2hlcyA9IF9yZWY0LnRvdWNoZXM7XG4gICAgICB2YXIgdG91Y2ggPSB0b3VjaGVzLml0ZW0oMCk7XG5cbiAgICAgIGlmICghdG91Y2gpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5pbml0aWFsVG91Y2hYID0gdG91Y2guY2xpZW50WDtcbiAgICAgIF90aGlzLmluaXRpYWxUb3VjaFkgPSB0b3VjaC5jbGllbnRZO1xuICAgICAgX3RoaXMudXNlcklzRHJhZ2dpbmcgPSBmYWxzZTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJvblRvdWNoTW92ZVwiLCBmdW5jdGlvbiAoX3JlZjUpIHtcbiAgICAgIHZhciB0b3VjaGVzID0gX3JlZjUudG91Y2hlcztcbiAgICAgIHZhciB0b3VjaCA9IHRvdWNoZXMuaXRlbSgwKTtcblxuICAgICAgaWYgKCF0b3VjaCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBkZWx0YVggPSBNYXRoLmFicyh0b3VjaC5jbGllbnRYIC0gX3RoaXMuaW5pdGlhbFRvdWNoWCk7XG4gICAgICB2YXIgZGVsdGFZID0gTWF0aC5hYnModG91Y2guY2xpZW50WSAtIF90aGlzLmluaXRpYWxUb3VjaFkpO1xuICAgICAgdmFyIG1vdmVUaHJlc2hvbGQgPSA1O1xuICAgICAgX3RoaXMudXNlcklzRHJhZ2dpbmcgPSBkZWx0YVggPiBtb3ZlVGhyZXNob2xkIHx8IGRlbHRhWSA+IG1vdmVUaHJlc2hvbGQ7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwib25Ub3VjaEVuZFwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChfdGhpcy51c2VySXNEcmFnZ2luZykgcmV0dXJuOyAvLyBjbG9zZSB0aGUgbWVudSBpZiB0aGUgdXNlciB0YXBzIG91dHNpZGVcbiAgICAgIC8vIHdlJ3JlIGNoZWNraW5nIG9uIGV2ZW50LnRhcmdldCBoZXJlIGluc3RlYWQgb2YgZXZlbnQuY3VycmVudFRhcmdldCwgYmVjYXVzZSB3ZSB3YW50IHRvIGFzc2VydCBpbmZvcm1hdGlvblxuICAgICAgLy8gb24gZXZlbnRzIG9uIGNoaWxkIGVsZW1lbnRzLCBub3QgdGhlIGRvY3VtZW50ICh3aGljaCB3ZSd2ZSBhdHRhY2hlZCB0aGlzIGhhbmRsZXIgdG8pLlxuXG4gICAgICBpZiAoX3RoaXMuY29udHJvbFJlZiAmJiAhX3RoaXMuY29udHJvbFJlZi5jb250YWlucyhldmVudC50YXJnZXQpICYmIF90aGlzLm1lbnVMaXN0UmVmICYmICFfdGhpcy5tZW51TGlzdFJlZi5jb250YWlucyhldmVudC50YXJnZXQpKSB7XG4gICAgICAgIF90aGlzLmJsdXJJbnB1dCgpO1xuICAgICAgfSAvLyByZXNldCBtb3ZlIHZhcnNcblxuXG4gICAgICBfdGhpcy5pbml0aWFsVG91Y2hYID0gMDtcbiAgICAgIF90aGlzLmluaXRpYWxUb3VjaFkgPSAwO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcIm9uQ29udHJvbFRvdWNoRW5kXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKF90aGlzLnVzZXJJc0RyYWdnaW5nKSByZXR1cm47XG5cbiAgICAgIF90aGlzLm9uQ29udHJvbE1vdXNlRG93bihldmVudCk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwib25DbGVhckluZGljYXRvclRvdWNoRW5kXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKF90aGlzLnVzZXJJc0RyYWdnaW5nKSByZXR1cm47XG5cbiAgICAgIF90aGlzLm9uQ2xlYXJJbmRpY2F0b3JNb3VzZURvd24oZXZlbnQpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcIm9uRHJvcGRvd25JbmRpY2F0b3JUb3VjaEVuZFwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChfdGhpcy51c2VySXNEcmFnZ2luZykgcmV0dXJuO1xuXG4gICAgICBfdGhpcy5vbkRyb3Bkb3duSW5kaWNhdG9yTW91c2VEb3duKGV2ZW50KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJoYW5kbGVJbnB1dENoYW5nZVwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBpbnB1dFZhbHVlID0gZXZlbnQuY3VycmVudFRhcmdldC52YWx1ZTtcbiAgICAgIF90aGlzLmlucHV0SXNIaWRkZW5BZnRlclVwZGF0ZSA9IGZhbHNlO1xuXG4gICAgICBfdGhpcy5vbklucHV0Q2hhbmdlKGlucHV0VmFsdWUsIHtcbiAgICAgICAgYWN0aW9uOiAnaW5wdXQtY2hhbmdlJ1xuICAgICAgfSk7XG5cbiAgICAgIF90aGlzLm9uTWVudU9wZW4oKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJvbklucHV0Rm9jdXNcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHM1ID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgaXNTZWFyY2hhYmxlID0gX3RoaXMkcHJvcHM1LmlzU2VhcmNoYWJsZSxcbiAgICAgICAgICBpc011bHRpID0gX3RoaXMkcHJvcHM1LmlzTXVsdGk7XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkZvY3VzKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uRm9jdXMoZXZlbnQpO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5pbnB1dElzSGlkZGVuQWZ0ZXJVcGRhdGUgPSBmYWxzZTtcblxuICAgICAgX3RoaXMuYW5ub3VuY2VBcmlhTGl2ZUNvbnRleHQoe1xuICAgICAgICBldmVudDogJ2lucHV0JyxcbiAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgIGlzU2VhcmNoYWJsZTogaXNTZWFyY2hhYmxlLFxuICAgICAgICAgIGlzTXVsdGk6IGlzTXVsdGlcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgaXNGb2N1c2VkOiB0cnVlXG4gICAgICB9KTtcblxuICAgICAgaWYgKF90aGlzLm9wZW5BZnRlckZvY3VzIHx8IF90aGlzLnByb3BzLm9wZW5NZW51T25Gb2N1cykge1xuICAgICAgICBfdGhpcy5vcGVuTWVudSgnZmlyc3QnKTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMub3BlbkFmdGVyRm9jdXMgPSBmYWxzZTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJvbklucHV0Qmx1clwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChfdGhpcy5tZW51TGlzdFJlZiAmJiBfdGhpcy5tZW51TGlzdFJlZi5jb250YWlucyhkb2N1bWVudC5hY3RpdmVFbGVtZW50KSkge1xuICAgICAgICBfdGhpcy5pbnB1dFJlZi5mb2N1cygpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uQmx1cikge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkJsdXIoZXZlbnQpO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5vbklucHV0Q2hhbmdlKCcnLCB7XG4gICAgICAgIGFjdGlvbjogJ2lucHV0LWJsdXInXG4gICAgICB9KTtcblxuICAgICAgX3RoaXMub25NZW51Q2xvc2UoKTtcblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBmb2N1c2VkVmFsdWU6IG51bGwsXG4gICAgICAgIGlzRm9jdXNlZDogZmFsc2VcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcIm9uT3B0aW9uSG92ZXJcIiwgZnVuY3Rpb24gKGZvY3VzZWRPcHRpb24pIHtcbiAgICAgIGlmIChfdGhpcy5ibG9ja09wdGlvbkhvdmVyIHx8IF90aGlzLnN0YXRlLmZvY3VzZWRPcHRpb24gPT09IGZvY3VzZWRPcHRpb24pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGZvY3VzZWRPcHRpb246IGZvY3VzZWRPcHRpb25cbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcInNob3VsZEhpZGVTZWxlY3RlZE9wdGlvbnNcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzNiA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGhpZGVTZWxlY3RlZE9wdGlvbnMgPSBfdGhpcyRwcm9wczYuaGlkZVNlbGVjdGVkT3B0aW9ucyxcbiAgICAgICAgICBpc011bHRpID0gX3RoaXMkcHJvcHM2LmlzTXVsdGk7XG4gICAgICBpZiAoaGlkZVNlbGVjdGVkT3B0aW9ucyA9PT0gdW5kZWZpbmVkKSByZXR1cm4gaXNNdWx0aTtcbiAgICAgIHJldHVybiBoaWRlU2VsZWN0ZWRPcHRpb25zO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcIm9uS2V5RG93blwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczcgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBpc011bHRpID0gX3RoaXMkcHJvcHM3LmlzTXVsdGksXG4gICAgICAgICAgYmFja3NwYWNlUmVtb3Zlc1ZhbHVlID0gX3RoaXMkcHJvcHM3LmJhY2tzcGFjZVJlbW92ZXNWYWx1ZSxcbiAgICAgICAgICBlc2NhcGVDbGVhcnNWYWx1ZSA9IF90aGlzJHByb3BzNy5lc2NhcGVDbGVhcnNWYWx1ZSxcbiAgICAgICAgICBpbnB1dFZhbHVlID0gX3RoaXMkcHJvcHM3LmlucHV0VmFsdWUsXG4gICAgICAgICAgaXNDbGVhcmFibGUgPSBfdGhpcyRwcm9wczcuaXNDbGVhcmFibGUsXG4gICAgICAgICAgaXNEaXNhYmxlZCA9IF90aGlzJHByb3BzNy5pc0Rpc2FibGVkLFxuICAgICAgICAgIG1lbnVJc09wZW4gPSBfdGhpcyRwcm9wczcubWVudUlzT3BlbixcbiAgICAgICAgICBvbktleURvd24gPSBfdGhpcyRwcm9wczcub25LZXlEb3duLFxuICAgICAgICAgIHRhYlNlbGVjdHNWYWx1ZSA9IF90aGlzJHByb3BzNy50YWJTZWxlY3RzVmFsdWUsXG4gICAgICAgICAgb3Blbk1lbnVPbkZvY3VzID0gX3RoaXMkcHJvcHM3Lm9wZW5NZW51T25Gb2N1cztcbiAgICAgIHZhciBfdGhpcyRzdGF0ZTIgPSBfdGhpcy5zdGF0ZSxcbiAgICAgICAgICBmb2N1c2VkT3B0aW9uID0gX3RoaXMkc3RhdGUyLmZvY3VzZWRPcHRpb24sXG4gICAgICAgICAgZm9jdXNlZFZhbHVlID0gX3RoaXMkc3RhdGUyLmZvY3VzZWRWYWx1ZSxcbiAgICAgICAgICBzZWxlY3RWYWx1ZSA9IF90aGlzJHN0YXRlMi5zZWxlY3RWYWx1ZTtcbiAgICAgIGlmIChpc0Rpc2FibGVkKSByZXR1cm47XG5cbiAgICAgIGlmICh0eXBlb2Ygb25LZXlEb3duID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIG9uS2V5RG93bihldmVudCk7XG5cbiAgICAgICAgaWYgKGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0gLy8gQmxvY2sgb3B0aW9uIGhvdmVyIGV2ZW50cyB3aGVuIHRoZSB1c2VyIGhhcyBqdXN0IHByZXNzZWQgYSBrZXlcblxuXG4gICAgICBfdGhpcy5ibG9ja09wdGlvbkhvdmVyID0gdHJ1ZTtcblxuICAgICAgc3dpdGNoIChldmVudC5rZXkpIHtcbiAgICAgICAgY2FzZSAnQXJyb3dMZWZ0JzpcbiAgICAgICAgICBpZiAoIWlzTXVsdGkgfHwgaW5wdXRWYWx1ZSkgcmV0dXJuO1xuXG4gICAgICAgICAgX3RoaXMuZm9jdXNWYWx1ZSgncHJldmlvdXMnKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ0Fycm93UmlnaHQnOlxuICAgICAgICAgIGlmICghaXNNdWx0aSB8fCBpbnB1dFZhbHVlKSByZXR1cm47XG5cbiAgICAgICAgICBfdGhpcy5mb2N1c1ZhbHVlKCduZXh0Jyk7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdEZWxldGUnOlxuICAgICAgICBjYXNlICdCYWNrc3BhY2UnOlxuICAgICAgICAgIGlmIChpbnB1dFZhbHVlKSByZXR1cm47XG5cbiAgICAgICAgICBpZiAoZm9jdXNlZFZhbHVlKSB7XG4gICAgICAgICAgICBfdGhpcy5yZW1vdmVWYWx1ZShmb2N1c2VkVmFsdWUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWJhY2tzcGFjZVJlbW92ZXNWYWx1ZSkgcmV0dXJuO1xuXG4gICAgICAgICAgICBpZiAoaXNNdWx0aSkge1xuICAgICAgICAgICAgICBfdGhpcy5wb3BWYWx1ZSgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc0NsZWFyYWJsZSkge1xuICAgICAgICAgICAgICBfdGhpcy5jbGVhclZhbHVlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnVGFiJzpcbiAgICAgICAgICBpZiAoX3RoaXMuaXNDb21wb3NpbmcpIHJldHVybjtcblxuICAgICAgICAgIGlmIChldmVudC5zaGlmdEtleSB8fCAhbWVudUlzT3BlbiB8fCAhdGFiU2VsZWN0c1ZhbHVlIHx8ICFmb2N1c2VkT3B0aW9uIHx8IC8vIGRvbid0IGNhcHR1cmUgdGhlIGV2ZW50IGlmIHRoZSBtZW51IG9wZW5zIG9uIGZvY3VzIGFuZCB0aGUgZm9jdXNlZFxuICAgICAgICAgIC8vIG9wdGlvbiBpcyBhbHJlYWR5IHNlbGVjdGVkOyBpdCBicmVha3MgdGhlIGZsb3cgb2YgbmF2aWdhdGlvblxuICAgICAgICAgIG9wZW5NZW51T25Gb2N1cyAmJiBfdGhpcy5pc09wdGlvblNlbGVjdGVkKGZvY3VzZWRPcHRpb24sIHNlbGVjdFZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIF90aGlzLnNlbGVjdE9wdGlvbihmb2N1c2VkT3B0aW9uKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ0VudGVyJzpcbiAgICAgICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gMjI5KSB7XG4gICAgICAgICAgICAvLyBpZ25vcmUgdGhlIGtleWRvd24gZXZlbnQgZnJvbSBhbiBJbnB1dCBNZXRob2QgRWRpdG9yKElNRSlcbiAgICAgICAgICAgIC8vIHJlZi4gaHR0cHM6Ly93d3cudzMub3JnL1RSL3VpZXZlbnRzLyNkZXRlcm1pbmUta2V5ZG93bi1rZXl1cC1rZXlDb2RlXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAobWVudUlzT3Blbikge1xuICAgICAgICAgICAgaWYgKCFmb2N1c2VkT3B0aW9uKSByZXR1cm47XG4gICAgICAgICAgICBpZiAoX3RoaXMuaXNDb21wb3NpbmcpIHJldHVybjtcblxuICAgICAgICAgICAgX3RoaXMuc2VsZWN0T3B0aW9uKGZvY3VzZWRPcHRpb24pO1xuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgY2FzZSAnRXNjYXBlJzpcbiAgICAgICAgICBpZiAobWVudUlzT3Blbikge1xuICAgICAgICAgICAgX3RoaXMuaW5wdXRJc0hpZGRlbkFmdGVyVXBkYXRlID0gZmFsc2U7XG5cbiAgICAgICAgICAgIF90aGlzLm9uSW5wdXRDaGFuZ2UoJycsIHtcbiAgICAgICAgICAgICAgYWN0aW9uOiAnbWVudS1jbG9zZSdcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBfdGhpcy5vbk1lbnVDbG9zZSgpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaXNDbGVhcmFibGUgJiYgZXNjYXBlQ2xlYXJzVmFsdWUpIHtcbiAgICAgICAgICAgIF90aGlzLmNsZWFyVmFsdWUoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICcgJzpcbiAgICAgICAgICAvLyBzcGFjZVxuICAgICAgICAgIGlmIChpbnB1dFZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFtZW51SXNPcGVuKSB7XG4gICAgICAgICAgICBfdGhpcy5vcGVuTWVudSgnZmlyc3QnKTtcblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFmb2N1c2VkT3B0aW9uKSByZXR1cm47XG5cbiAgICAgICAgICBfdGhpcy5zZWxlY3RPcHRpb24oZm9jdXNlZE9wdGlvbik7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdBcnJvd1VwJzpcbiAgICAgICAgICBpZiAobWVudUlzT3Blbikge1xuICAgICAgICAgICAgX3RoaXMuZm9jdXNPcHRpb24oJ3VwJyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzLm9wZW5NZW51KCdsYXN0Jyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnQXJyb3dEb3duJzpcbiAgICAgICAgICBpZiAobWVudUlzT3Blbikge1xuICAgICAgICAgICAgX3RoaXMuZm9jdXNPcHRpb24oJ2Rvd24nKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX3RoaXMub3Blbk1lbnUoJ2ZpcnN0Jyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnUGFnZVVwJzpcbiAgICAgICAgICBpZiAoIW1lbnVJc09wZW4pIHJldHVybjtcblxuICAgICAgICAgIF90aGlzLmZvY3VzT3B0aW9uKCdwYWdldXAnKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ1BhZ2VEb3duJzpcbiAgICAgICAgICBpZiAoIW1lbnVJc09wZW4pIHJldHVybjtcblxuICAgICAgICAgIF90aGlzLmZvY3VzT3B0aW9uKCdwYWdlZG93bicpO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnSG9tZSc6XG4gICAgICAgICAgaWYgKCFtZW51SXNPcGVuKSByZXR1cm47XG5cbiAgICAgICAgICBfdGhpcy5mb2N1c09wdGlvbignZmlyc3QnKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ0VuZCc6XG4gICAgICAgICAgaWYgKCFtZW51SXNPcGVuKSByZXR1cm47XG5cbiAgICAgICAgICBfdGhpcy5mb2N1c09wdGlvbignbGFzdCcpO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSk7XG5cbiAgICB2YXIgdmFsdWUgPSBfcHJvcHMudmFsdWU7XG4gICAgX3RoaXMuY2FjaGVDb21wb25lbnRzID0gbWVtb2l6ZU9uZShfdGhpcy5jYWNoZUNvbXBvbmVudHMsIGV4cG9ydGVkRXF1YWwpLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSkpO1xuXG4gICAgX3RoaXMuY2FjaGVDb21wb25lbnRzKF9wcm9wcy5jb21wb25lbnRzKTtcblxuICAgIF90aGlzLmluc3RhbmNlUHJlZml4ID0gJ3JlYWN0LXNlbGVjdC0nICsgKF90aGlzLnByb3BzLmluc3RhbmNlSWQgfHwgKytpbnN0YW5jZUlkKTtcblxuICAgIHZhciBfc2VsZWN0VmFsdWUgPSBjbGVhblZhbHVlKHZhbHVlKTtcblxuICAgIHZhciBfbWVudU9wdGlvbnMgPSBfcHJvcHMubWVudUlzT3BlbiA/IF90aGlzLmJ1aWxkTWVudU9wdGlvbnMoX3Byb3BzLCBfc2VsZWN0VmFsdWUpIDoge1xuICAgICAgcmVuZGVyOiBbXSxcbiAgICAgIGZvY3VzYWJsZTogW11cbiAgICB9O1xuXG4gICAgX3RoaXMuc3RhdGUubWVudU9wdGlvbnMgPSBfbWVudU9wdGlvbnM7XG4gICAgX3RoaXMuc3RhdGUuc2VsZWN0VmFsdWUgPSBfc2VsZWN0VmFsdWU7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFNlbGVjdCwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB0aGlzLnN0YXJ0TGlzdGVuaW5nQ29tcG9zaXRpb24oKTtcbiAgICAgIHRoaXMuc3RhcnRMaXN0ZW5pbmdUb1RvdWNoKCk7XG5cbiAgICAgIGlmICh0aGlzLnByb3BzLmNsb3NlTWVudU9uU2Nyb2xsICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgLy8gTGlzdGVuIHRvIGFsbCBzY3JvbGwgZXZlbnRzLCBhbmQgZmlsdGVyIHRoZW0gb3V0IGluc2lkZSBvZiAnb25TY3JvbGwnXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMub25TY3JvbGwsIHRydWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5wcm9wcy5hdXRvRm9jdXMpIHtcbiAgICAgICAgdGhpcy5mb2N1c0lucHV0KCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgdmFyIF90aGlzJHByb3BzOCA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgb3B0aW9ucyA9IF90aGlzJHByb3BzOC5vcHRpb25zLFxuICAgICAgICAgIHZhbHVlID0gX3RoaXMkcHJvcHM4LnZhbHVlLFxuICAgICAgICAgIG1lbnVJc09wZW4gPSBfdGhpcyRwcm9wczgubWVudUlzT3BlbixcbiAgICAgICAgICBpbnB1dFZhbHVlID0gX3RoaXMkcHJvcHM4LmlucHV0VmFsdWU7IC8vIHJlLWNhY2hlIGN1c3RvbSBjb21wb25lbnRzXG5cbiAgICAgIHRoaXMuY2FjaGVDb21wb25lbnRzKG5leHRQcm9wcy5jb21wb25lbnRzKTsgLy8gcmVidWlsZCB0aGUgbWVudSBvcHRpb25zXG5cbiAgICAgIGlmIChuZXh0UHJvcHMudmFsdWUgIT09IHZhbHVlIHx8IG5leHRQcm9wcy5vcHRpb25zICE9PSBvcHRpb25zIHx8IG5leHRQcm9wcy5tZW51SXNPcGVuICE9PSBtZW51SXNPcGVuIHx8IG5leHRQcm9wcy5pbnB1dFZhbHVlICE9PSBpbnB1dFZhbHVlKSB7XG4gICAgICAgIHZhciBzZWxlY3RWYWx1ZSA9IGNsZWFuVmFsdWUobmV4dFByb3BzLnZhbHVlKTtcbiAgICAgICAgdmFyIG1lbnVPcHRpb25zID0gbmV4dFByb3BzLm1lbnVJc09wZW4gPyB0aGlzLmJ1aWxkTWVudU9wdGlvbnMobmV4dFByb3BzLCBzZWxlY3RWYWx1ZSkgOiB7XG4gICAgICAgICAgcmVuZGVyOiBbXSxcbiAgICAgICAgICBmb2N1c2FibGU6IFtdXG4gICAgICAgIH07XG4gICAgICAgIHZhciBmb2N1c2VkVmFsdWUgPSB0aGlzLmdldE5leHRGb2N1c2VkVmFsdWUoc2VsZWN0VmFsdWUpO1xuICAgICAgICB2YXIgZm9jdXNlZE9wdGlvbiA9IHRoaXMuZ2V0TmV4dEZvY3VzZWRPcHRpb24obWVudU9wdGlvbnMuZm9jdXNhYmxlKTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgbWVudU9wdGlvbnM6IG1lbnVPcHRpb25zLFxuICAgICAgICAgIHNlbGVjdFZhbHVlOiBzZWxlY3RWYWx1ZSxcbiAgICAgICAgICBmb2N1c2VkT3B0aW9uOiBmb2N1c2VkT3B0aW9uLFxuICAgICAgICAgIGZvY3VzZWRWYWx1ZTogZm9jdXNlZFZhbHVlXG4gICAgICAgIH0pO1xuICAgICAgfSAvLyBzb21lIHVwZGF0ZXMgc2hvdWxkIHRvZ2dsZSB0aGUgc3RhdGUgb2YgdGhlIGlucHV0IHZpc2liaWxpdHlcblxuXG4gICAgICBpZiAodGhpcy5pbnB1dElzSGlkZGVuQWZ0ZXJVcGRhdGUgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBpbnB1dElzSGlkZGVuOiB0aGlzLmlucHV0SXNIaWRkZW5BZnRlclVwZGF0ZVxuICAgICAgICB9KTtcbiAgICAgICAgZGVsZXRlIHRoaXMuaW5wdXRJc0hpZGRlbkFmdGVyVXBkYXRlO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnREaWRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgICAgdmFyIF90aGlzJHByb3BzOSA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgaXNEaXNhYmxlZCA9IF90aGlzJHByb3BzOS5pc0Rpc2FibGVkLFxuICAgICAgICAgIG1lbnVJc09wZW4gPSBfdGhpcyRwcm9wczkubWVudUlzT3BlbjtcbiAgICAgIHZhciBpc0ZvY3VzZWQgPSB0aGlzLnN0YXRlLmlzRm9jdXNlZDtcblxuICAgICAgaWYgKCAvLyBlbnN1cmUgZm9jdXMgaXMgcmVzdG9yZWQgY29ycmVjdGx5IHdoZW4gdGhlIGNvbnRyb2wgYmVjb21lcyBlbmFibGVkXG4gICAgICBpc0ZvY3VzZWQgJiYgIWlzRGlzYWJsZWQgJiYgcHJldlByb3BzLmlzRGlzYWJsZWQgfHwgLy8gZW5zdXJlIGZvY3VzIGlzIG9uIHRoZSBJbnB1dCB3aGVuIHRoZSBtZW51IG9wZW5zXG4gICAgICBpc0ZvY3VzZWQgJiYgbWVudUlzT3BlbiAmJiAhcHJldlByb3BzLm1lbnVJc09wZW4pIHtcbiAgICAgICAgdGhpcy5mb2N1c0lucHV0KCk7XG4gICAgICB9IC8vIHNjcm9sbCB0aGUgZm9jdXNlZCBvcHRpb24gaW50byB2aWV3IGlmIG5lY2Vzc2FyeVxuXG5cbiAgICAgIGlmICh0aGlzLm1lbnVMaXN0UmVmICYmIHRoaXMuZm9jdXNlZE9wdGlvblJlZiAmJiB0aGlzLnNjcm9sbFRvRm9jdXNlZE9wdGlvbk9uVXBkYXRlKSB7XG4gICAgICAgIHNjcm9sbEludG9WaWV3KHRoaXMubWVudUxpc3RSZWYsIHRoaXMuZm9jdXNlZE9wdGlvblJlZik7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2Nyb2xsVG9Gb2N1c2VkT3B0aW9uT25VcGRhdGUgPSBmYWxzZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLnN0b3BMaXN0ZW5pbmdDb21wb3NpdGlvbigpO1xuICAgICAgdGhpcy5zdG9wTGlzdGVuaW5nVG9Ub3VjaCgpO1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5vblNjcm9sbCwgdHJ1ZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm9uTWVudU9wZW5cIixcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAvLyBDb25zdW1lciBIYW5kbGVyc1xuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbk1lbnVPcGVuKCkge1xuICAgICAgdGhpcy5wcm9wcy5vbk1lbnVPcGVuKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm9uTWVudUNsb3NlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uTWVudUNsb3NlKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMTAgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGlzU2VhcmNoYWJsZSA9IF90aGlzJHByb3BzMTAuaXNTZWFyY2hhYmxlLFxuICAgICAgICAgIGlzTXVsdGkgPSBfdGhpcyRwcm9wczEwLmlzTXVsdGk7XG4gICAgICB0aGlzLmFubm91bmNlQXJpYUxpdmVDb250ZXh0KHtcbiAgICAgICAgZXZlbnQ6ICdpbnB1dCcsXG4gICAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgICBpc1NlYXJjaGFibGU6IGlzU2VhcmNoYWJsZSxcbiAgICAgICAgICBpc011bHRpOiBpc011bHRpXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdGhpcy5vbklucHV0Q2hhbmdlKCcnLCB7XG4gICAgICAgIGFjdGlvbjogJ21lbnUtY2xvc2UnXG4gICAgICB9KTtcbiAgICAgIHRoaXMucHJvcHMub25NZW51Q2xvc2UoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwib25JbnB1dENoYW5nZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbklucHV0Q2hhbmdlKG5ld1ZhbHVlLCBhY3Rpb25NZXRhKSB7XG4gICAgICB0aGlzLnByb3BzLm9uSW5wdXRDaGFuZ2UobmV3VmFsdWUsIGFjdGlvbk1ldGEpO1xuICAgIH0gLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgLy8gTWV0aG9kc1xuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIH0sIHtcbiAgICBrZXk6IFwiZm9jdXNJbnB1dFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb2N1c0lucHV0KCkge1xuICAgICAgaWYgKCF0aGlzLmlucHV0UmVmKSByZXR1cm47XG4gICAgICB0aGlzLmlucHV0UmVmLmZvY3VzKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImJsdXJJbnB1dFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBibHVySW5wdXQoKSB7XG4gICAgICBpZiAoIXRoaXMuaW5wdXRSZWYpIHJldHVybjtcbiAgICAgIHRoaXMuaW5wdXRSZWYuYmx1cigpO1xuICAgIH0gLy8gYWxpYXNlZCBmb3IgY29uc3VtZXJzXG5cbiAgfSwge1xuICAgIGtleTogXCJvcGVuTWVudVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvcGVuTWVudShmb2N1c09wdGlvbikge1xuICAgICAgdmFyIF90aGlzJHN0YXRlMyA9IHRoaXMuc3RhdGUsXG4gICAgICAgICAgbWVudU9wdGlvbnMgPSBfdGhpcyRzdGF0ZTMubWVudU9wdGlvbnMsXG4gICAgICAgICAgc2VsZWN0VmFsdWUgPSBfdGhpcyRzdGF0ZTMuc2VsZWN0VmFsdWUsXG4gICAgICAgICAgaXNGb2N1c2VkID0gX3RoaXMkc3RhdGUzLmlzRm9jdXNlZDtcbiAgICAgIHZhciBpc011bHRpID0gdGhpcy5wcm9wcy5pc011bHRpO1xuICAgICAgdmFyIG9wZW5BdEluZGV4ID0gZm9jdXNPcHRpb24gPT09ICdmaXJzdCcgPyAwIDogbWVudU9wdGlvbnMuZm9jdXNhYmxlLmxlbmd0aCAtIDE7XG5cbiAgICAgIGlmICghaXNNdWx0aSkge1xuICAgICAgICB2YXIgc2VsZWN0ZWRJbmRleCA9IG1lbnVPcHRpb25zLmZvY3VzYWJsZS5pbmRleE9mKHNlbGVjdFZhbHVlWzBdKTtcblxuICAgICAgICBpZiAoc2VsZWN0ZWRJbmRleCA+IC0xKSB7XG4gICAgICAgICAgb3BlbkF0SW5kZXggPSBzZWxlY3RlZEluZGV4O1xuICAgICAgICB9XG4gICAgICB9IC8vIG9ubHkgc2Nyb2xsIGlmIHRoZSBtZW51IGlzbid0IGFscmVhZHkgb3BlblxuXG5cbiAgICAgIHRoaXMuc2Nyb2xsVG9Gb2N1c2VkT3B0aW9uT25VcGRhdGUgPSAhKGlzRm9jdXNlZCAmJiB0aGlzLm1lbnVMaXN0UmVmKTtcbiAgICAgIHRoaXMuaW5wdXRJc0hpZGRlbkFmdGVyVXBkYXRlID0gZmFsc2U7XG4gICAgICB0aGlzLm9uTWVudU9wZW4oKTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBmb2N1c2VkVmFsdWU6IG51bGwsXG4gICAgICAgIGZvY3VzZWRPcHRpb246IG1lbnVPcHRpb25zLmZvY3VzYWJsZVtvcGVuQXRJbmRleF1cbiAgICAgIH0pO1xuICAgICAgdGhpcy5hbm5vdW5jZUFyaWFMaXZlQ29udGV4dCh7XG4gICAgICAgIGV2ZW50OiAnbWVudSdcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJmb2N1c1ZhbHVlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvY3VzVmFsdWUoZGlyZWN0aW9uKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMxMSA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgaXNNdWx0aSA9IF90aGlzJHByb3BzMTEuaXNNdWx0aSxcbiAgICAgICAgICBpc1NlYXJjaGFibGUgPSBfdGhpcyRwcm9wczExLmlzU2VhcmNoYWJsZTtcbiAgICAgIHZhciBfdGhpcyRzdGF0ZTQgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgIHNlbGVjdFZhbHVlID0gX3RoaXMkc3RhdGU0LnNlbGVjdFZhbHVlLFxuICAgICAgICAgIGZvY3VzZWRWYWx1ZSA9IF90aGlzJHN0YXRlNC5mb2N1c2VkVmFsdWU7IC8vIE9ubHkgbXVsdGlzZWxlY3RzIHN1cHBvcnQgdmFsdWUgZm9jdXNpbmdcblxuICAgICAgaWYgKCFpc011bHRpKSByZXR1cm47XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZm9jdXNlZE9wdGlvbjogbnVsbFxuICAgICAgfSk7XG4gICAgICB2YXIgZm9jdXNlZEluZGV4ID0gc2VsZWN0VmFsdWUuaW5kZXhPZihmb2N1c2VkVmFsdWUpO1xuXG4gICAgICBpZiAoIWZvY3VzZWRWYWx1ZSkge1xuICAgICAgICBmb2N1c2VkSW5kZXggPSAtMTtcbiAgICAgICAgdGhpcy5hbm5vdW5jZUFyaWFMaXZlQ29udGV4dCh7XG4gICAgICAgICAgZXZlbnQ6ICd2YWx1ZSdcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBsYXN0SW5kZXggPSBzZWxlY3RWYWx1ZS5sZW5ndGggLSAxO1xuICAgICAgdmFyIG5leHRGb2N1cyA9IC0xO1xuICAgICAgaWYgKCFzZWxlY3RWYWx1ZS5sZW5ndGgpIHJldHVybjtcblxuICAgICAgc3dpdGNoIChkaXJlY3Rpb24pIHtcbiAgICAgICAgY2FzZSAncHJldmlvdXMnOlxuICAgICAgICAgIGlmIChmb2N1c2VkSW5kZXggPT09IDApIHtcbiAgICAgICAgICAgIC8vIGRvbid0IGN5Y2xlIGZyb20gdGhlIHN0YXJ0IHRvIHRoZSBlbmRcbiAgICAgICAgICAgIG5leHRGb2N1cyA9IDA7XG4gICAgICAgICAgfSBlbHNlIGlmIChmb2N1c2VkSW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICAvLyBpZiBub3RoaW5nIGlzIGZvY3VzZWQsIGZvY3VzIHRoZSBsYXN0IHZhbHVlIGZpcnN0XG4gICAgICAgICAgICBuZXh0Rm9jdXMgPSBsYXN0SW5kZXg7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5leHRGb2N1cyA9IGZvY3VzZWRJbmRleCAtIDE7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnbmV4dCc6XG4gICAgICAgICAgaWYgKGZvY3VzZWRJbmRleCA+IC0xICYmIGZvY3VzZWRJbmRleCA8IGxhc3RJbmRleCkge1xuICAgICAgICAgICAgbmV4dEZvY3VzID0gZm9jdXNlZEluZGV4ICsgMTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaWYgKG5leHRGb2N1cyA9PT0gLTEpIHtcbiAgICAgICAgdGhpcy5hbm5vdW5jZUFyaWFMaXZlQ29udGV4dCh7XG4gICAgICAgICAgZXZlbnQ6ICdpbnB1dCcsXG4gICAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgICAgaXNTZWFyY2hhYmxlOiBpc1NlYXJjaGFibGUsXG4gICAgICAgICAgICBpc011bHRpOiBpc011bHRpXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGlucHV0SXNIaWRkZW46IG5leHRGb2N1cyAhPT0gLTEsXG4gICAgICAgIGZvY3VzZWRWYWx1ZTogc2VsZWN0VmFsdWVbbmV4dEZvY3VzXVxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImZvY3VzT3B0aW9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvY3VzT3B0aW9uKCkge1xuICAgICAgdmFyIGRpcmVjdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJ2ZpcnN0JztcbiAgICAgIHZhciBwYWdlU2l6ZSA9IHRoaXMucHJvcHMucGFnZVNpemU7XG4gICAgICB2YXIgX3RoaXMkc3RhdGU1ID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICBmb2N1c2VkT3B0aW9uID0gX3RoaXMkc3RhdGU1LmZvY3VzZWRPcHRpb24sXG4gICAgICAgICAgbWVudU9wdGlvbnMgPSBfdGhpcyRzdGF0ZTUubWVudU9wdGlvbnM7XG4gICAgICB2YXIgb3B0aW9ucyA9IG1lbnVPcHRpb25zLmZvY3VzYWJsZTtcbiAgICAgIGlmICghb3B0aW9ucy5sZW5ndGgpIHJldHVybjtcbiAgICAgIHZhciBuZXh0Rm9jdXMgPSAwOyAvLyBoYW5kbGVzICdmaXJzdCdcblxuICAgICAgdmFyIGZvY3VzZWRJbmRleCA9IG9wdGlvbnMuaW5kZXhPZihmb2N1c2VkT3B0aW9uKTtcblxuICAgICAgaWYgKCFmb2N1c2VkT3B0aW9uKSB7XG4gICAgICAgIGZvY3VzZWRJbmRleCA9IC0xO1xuICAgICAgICB0aGlzLmFubm91bmNlQXJpYUxpdmVDb250ZXh0KHtcbiAgICAgICAgICBldmVudDogJ21lbnUnXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGlyZWN0aW9uID09PSAndXAnKSB7XG4gICAgICAgIG5leHRGb2N1cyA9IGZvY3VzZWRJbmRleCA+IDAgPyBmb2N1c2VkSW5kZXggLSAxIDogb3B0aW9ucy5sZW5ndGggLSAxO1xuICAgICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdkb3duJykge1xuICAgICAgICBuZXh0Rm9jdXMgPSAoZm9jdXNlZEluZGV4ICsgMSkgJSBvcHRpb25zLmxlbmd0aDtcbiAgICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAncGFnZXVwJykge1xuICAgICAgICBuZXh0Rm9jdXMgPSBmb2N1c2VkSW5kZXggLSBwYWdlU2l6ZTtcbiAgICAgICAgaWYgKG5leHRGb2N1cyA8IDApIG5leHRGb2N1cyA9IDA7XG4gICAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ3BhZ2Vkb3duJykge1xuICAgICAgICBuZXh0Rm9jdXMgPSBmb2N1c2VkSW5kZXggKyBwYWdlU2l6ZTtcbiAgICAgICAgaWYgKG5leHRGb2N1cyA+IG9wdGlvbnMubGVuZ3RoIC0gMSkgbmV4dEZvY3VzID0gb3B0aW9ucy5sZW5ndGggLSAxO1xuICAgICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdsYXN0Jykge1xuICAgICAgICBuZXh0Rm9jdXMgPSBvcHRpb25zLmxlbmd0aCAtIDE7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2Nyb2xsVG9Gb2N1c2VkT3B0aW9uT25VcGRhdGUgPSB0cnVlO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGZvY3VzZWRPcHRpb246IG9wdGlvbnNbbmV4dEZvY3VzXSxcbiAgICAgICAgZm9jdXNlZFZhbHVlOiBudWxsXG4gICAgICB9KTtcbiAgICAgIHRoaXMuYW5ub3VuY2VBcmlhTGl2ZUNvbnRleHQoe1xuICAgICAgICBldmVudDogJ21lbnUnLFxuICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgaXNEaXNhYmxlZDogaXNPcHRpb25EaXNhYmxlZChvcHRpb25zW25leHRGb2N1c10pXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRUaGVtZVwiLFxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgIC8vIEdldHRlcnNcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VGhlbWUoKSB7XG4gICAgICAvLyBVc2UgdGhlIGRlZmF1bHQgdGhlbWUgaWYgdGhlcmUgYXJlIG5vIGN1c3RvbWl6YXRpb25zLlxuICAgICAgaWYgKCF0aGlzLnByb3BzLnRoZW1lKSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0VGhlbWU7XG4gICAgICB9IC8vIElmIHRoZSB0aGVtZSBwcm9wIGlzIGEgZnVuY3Rpb24sIGFzc3VtZSB0aGUgZnVuY3Rpb25cbiAgICAgIC8vIGtub3dzIGhvdyB0byBtZXJnZSB0aGUgcGFzc2VkLWluIGRlZmF1bHQgdGhlbWUgd2l0aFxuICAgICAgLy8gaXRzIG93biBtb2RpZmljYXRpb25zLlxuXG5cbiAgICAgIGlmICh0eXBlb2YgdGhpcy5wcm9wcy50aGVtZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy50aGVtZShkZWZhdWx0VGhlbWUpO1xuICAgICAgfSAvLyBPdGhlcndpc2UsIGlmIGEgcGxhaW4gdGhlbWUgb2JqZWN0IHdhcyBwYXNzZWQgaW4sXG4gICAgICAvLyBvdmVybGF5IGl0IHdpdGggdGhlIGRlZmF1bHQgdGhlbWUuXG5cblxuICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIGRlZmF1bHRUaGVtZSwgdGhpcy5wcm9wcy50aGVtZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldENvbW1vblByb3BzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldENvbW1vblByb3BzKCkge1xuICAgICAgdmFyIGNsZWFyVmFsdWUgPSB0aGlzLmNsZWFyVmFsdWUsXG4gICAgICAgICAgZ2V0U3R5bGVzID0gdGhpcy5nZXRTdHlsZXMsXG4gICAgICAgICAgc2V0VmFsdWUgPSB0aGlzLnNldFZhbHVlLFxuICAgICAgICAgIHNlbGVjdE9wdGlvbiA9IHRoaXMuc2VsZWN0T3B0aW9uLFxuICAgICAgICAgIHByb3BzID0gdGhpcy5wcm9wcztcbiAgICAgIHZhciBjbGFzc05hbWVQcmVmaXggPSBwcm9wcy5jbGFzc05hbWVQcmVmaXgsXG4gICAgICAgICAgaXNNdWx0aSA9IHByb3BzLmlzTXVsdGksXG4gICAgICAgICAgaXNSdGwgPSBwcm9wcy5pc1J0bCxcbiAgICAgICAgICBvcHRpb25zID0gcHJvcHMub3B0aW9ucztcbiAgICAgIHZhciBzZWxlY3RWYWx1ZSA9IHRoaXMuc3RhdGUuc2VsZWN0VmFsdWU7XG4gICAgICB2YXIgaGFzVmFsdWUgPSB0aGlzLmhhc1ZhbHVlKCk7XG5cbiAgICAgIHZhciBnZXRWYWx1ZSA9IGZ1bmN0aW9uIGdldFZhbHVlKCkge1xuICAgICAgICByZXR1cm4gc2VsZWN0VmFsdWU7XG4gICAgICB9O1xuXG4gICAgICB2YXIgY3ggPSBjbGFzc05hbWVzLmJpbmQobnVsbCwgY2xhc3NOYW1lUHJlZml4KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGN4OiBjeCxcbiAgICAgICAgY2xlYXJWYWx1ZTogY2xlYXJWYWx1ZSxcbiAgICAgICAgZ2V0U3R5bGVzOiBnZXRTdHlsZXMsXG4gICAgICAgIGdldFZhbHVlOiBnZXRWYWx1ZSxcbiAgICAgICAgaGFzVmFsdWU6IGhhc1ZhbHVlLFxuICAgICAgICBpc011bHRpOiBpc011bHRpLFxuICAgICAgICBpc1J0bDogaXNSdGwsXG4gICAgICAgIG9wdGlvbnM6IG9wdGlvbnMsXG4gICAgICAgIHNlbGVjdE9wdGlvbjogc2VsZWN0T3B0aW9uLFxuICAgICAgICBzZXRWYWx1ZTogc2V0VmFsdWUsXG4gICAgICAgIHNlbGVjdFByb3BzOiBwcm9wcyxcbiAgICAgICAgdGhlbWU6IHRoaXMuZ2V0VGhlbWUoKVxuICAgICAgfTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0TmV4dEZvY3VzZWRWYWx1ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXROZXh0Rm9jdXNlZFZhbHVlKG5leHRTZWxlY3RWYWx1ZSkge1xuICAgICAgaWYgKHRoaXMuY2xlYXJGb2N1c1ZhbHVlT25VcGRhdGUpIHtcbiAgICAgICAgdGhpcy5jbGVhckZvY3VzVmFsdWVPblVwZGF0ZSA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIF90aGlzJHN0YXRlNiA9IHRoaXMuc3RhdGUsXG4gICAgICAgICAgZm9jdXNlZFZhbHVlID0gX3RoaXMkc3RhdGU2LmZvY3VzZWRWYWx1ZSxcbiAgICAgICAgICBsYXN0U2VsZWN0VmFsdWUgPSBfdGhpcyRzdGF0ZTYuc2VsZWN0VmFsdWU7XG4gICAgICB2YXIgbGFzdEZvY3VzZWRJbmRleCA9IGxhc3RTZWxlY3RWYWx1ZS5pbmRleE9mKGZvY3VzZWRWYWx1ZSk7XG5cbiAgICAgIGlmIChsYXN0Rm9jdXNlZEluZGV4ID4gLTEpIHtcbiAgICAgICAgdmFyIG5leHRGb2N1c2VkSW5kZXggPSBuZXh0U2VsZWN0VmFsdWUuaW5kZXhPZihmb2N1c2VkVmFsdWUpO1xuXG4gICAgICAgIGlmIChuZXh0Rm9jdXNlZEluZGV4ID4gLTEpIHtcbiAgICAgICAgICAvLyB0aGUgZm9jdXNlZCB2YWx1ZSBpcyBzdGlsbCBpbiB0aGUgc2VsZWN0VmFsdWUsIHJldHVybiBpdFxuICAgICAgICAgIHJldHVybiBmb2N1c2VkVmFsdWU7XG4gICAgICAgIH0gZWxzZSBpZiAobGFzdEZvY3VzZWRJbmRleCA8IG5leHRTZWxlY3RWYWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAvLyB0aGUgZm9jdXNlZFZhbHVlIGlzIG5vdCBwcmVzZW50IGluIHRoZSBuZXh0IHNlbGVjdFZhbHVlIGFycmF5IGJ5XG4gICAgICAgICAgLy8gcmVmZXJlbmNlLCBzbyByZXR1cm4gdGhlIG5ldyB2YWx1ZSBhdCB0aGUgc2FtZSBpbmRleFxuICAgICAgICAgIHJldHVybiBuZXh0U2VsZWN0VmFsdWVbbGFzdEZvY3VzZWRJbmRleF07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldE5leHRGb2N1c2VkT3B0aW9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldE5leHRGb2N1c2VkT3B0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHZhciBsYXN0Rm9jdXNlZE9wdGlvbiA9IHRoaXMuc3RhdGUuZm9jdXNlZE9wdGlvbjtcbiAgICAgIHJldHVybiBsYXN0Rm9jdXNlZE9wdGlvbiAmJiBvcHRpb25zLmluZGV4T2YobGFzdEZvY3VzZWRPcHRpb24pID4gLTEgPyBsYXN0Rm9jdXNlZE9wdGlvbiA6IG9wdGlvbnNbMF07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImhhc1ZhbHVlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhhc1ZhbHVlKCkge1xuICAgICAgdmFyIHNlbGVjdFZhbHVlID0gdGhpcy5zdGF0ZS5zZWxlY3RWYWx1ZTtcbiAgICAgIHJldHVybiBzZWxlY3RWYWx1ZS5sZW5ndGggPiAwO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJoYXNPcHRpb25zXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhhc09wdGlvbnMoKSB7XG4gICAgICByZXR1cm4gISF0aGlzLnN0YXRlLm1lbnVPcHRpb25zLnJlbmRlci5sZW5ndGg7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvdW50T3B0aW9uc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb3VudE9wdGlvbnMoKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdGF0ZS5tZW51T3B0aW9ucy5mb2N1c2FibGUubGVuZ3RoO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJpc0NsZWFyYWJsZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc0NsZWFyYWJsZSgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczEyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBpc0NsZWFyYWJsZSA9IF90aGlzJHByb3BzMTIuaXNDbGVhcmFibGUsXG4gICAgICAgICAgaXNNdWx0aSA9IF90aGlzJHByb3BzMTIuaXNNdWx0aTsgLy8gc2luZ2xlIHNlbGVjdCwgYnkgZGVmYXVsdCwgSVMgTk9UIGNsZWFyYWJsZVxuICAgICAgLy8gbXVsdGkgc2VsZWN0LCBieSBkZWZhdWx0LCBJUyBjbGVhcmFibGVcblxuICAgICAgaWYgKGlzQ2xlYXJhYmxlID09PSB1bmRlZmluZWQpIHJldHVybiBpc011bHRpO1xuICAgICAgcmV0dXJuIGlzQ2xlYXJhYmxlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJpc09wdGlvbkRpc2FibGVkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGlzT3B0aW9uRGlzYWJsZWQob3B0aW9uLCBzZWxlY3RWYWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB0aGlzLnByb3BzLmlzT3B0aW9uRGlzYWJsZWQgPT09ICdmdW5jdGlvbicgPyB0aGlzLnByb3BzLmlzT3B0aW9uRGlzYWJsZWQob3B0aW9uLCBzZWxlY3RWYWx1ZSkgOiBmYWxzZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaXNPcHRpb25TZWxlY3RlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc09wdGlvblNlbGVjdGVkKG9wdGlvbiwgc2VsZWN0VmFsdWUpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICBpZiAoc2VsZWN0VmFsdWUuaW5kZXhPZihvcHRpb24pID4gLTEpIHJldHVybiB0cnVlO1xuXG4gICAgICBpZiAodHlwZW9mIHRoaXMucHJvcHMuaXNPcHRpb25TZWxlY3RlZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5pc09wdGlvblNlbGVjdGVkKG9wdGlvbiwgc2VsZWN0VmFsdWUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgY2FuZGlkYXRlID0gdGhpcy5nZXRPcHRpb25WYWx1ZShvcHRpb24pO1xuICAgICAgcmV0dXJuIHNlbGVjdFZhbHVlLnNvbWUoZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMi5nZXRPcHRpb25WYWx1ZShpKSA9PT0gY2FuZGlkYXRlO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImZpbHRlck9wdGlvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmaWx0ZXJPcHRpb24ob3B0aW9uLCBpbnB1dFZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5maWx0ZXJPcHRpb24gPyB0aGlzLnByb3BzLmZpbHRlck9wdGlvbihvcHRpb24sIGlucHV0VmFsdWUpIDogdHJ1ZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZm9ybWF0T3B0aW9uTGFiZWxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9ybWF0T3B0aW9uTGFiZWwoZGF0YSwgY29udGV4dCkge1xuICAgICAgaWYgKHR5cGVvZiB0aGlzLnByb3BzLmZvcm1hdE9wdGlvbkxhYmVsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhciBpbnB1dFZhbHVlID0gdGhpcy5wcm9wcy5pbnB1dFZhbHVlO1xuICAgICAgICB2YXIgc2VsZWN0VmFsdWUgPSB0aGlzLnN0YXRlLnNlbGVjdFZhbHVlO1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5mb3JtYXRPcHRpb25MYWJlbChkYXRhLCB7XG4gICAgICAgICAgY29udGV4dDogY29udGV4dCxcbiAgICAgICAgICBpbnB1dFZhbHVlOiBpbnB1dFZhbHVlLFxuICAgICAgICAgIHNlbGVjdFZhbHVlOiBzZWxlY3RWYWx1ZVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE9wdGlvbkxhYmVsKGRhdGEpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJmb3JtYXRHcm91cExhYmVsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvcm1hdEdyb3VwTGFiZWwoZGF0YSkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuZm9ybWF0R3JvdXBMYWJlbChkYXRhKTtcbiAgICB9IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgIC8vIE1vdXNlIEhhbmRsZXJzXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgfSwge1xuICAgIGtleTogXCJzdGFydExpc3RlbmluZ0NvbXBvc2l0aW9uXCIsXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgLy8gQ29tcG9zaXRpb24gSGFuZGxlcnNcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RhcnRMaXN0ZW5pbmdDb21wb3NpdGlvbigpIHtcbiAgICAgIGlmIChkb2N1bWVudCAmJiBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBvc2l0aW9uc3RhcnQnLCB0aGlzLm9uQ29tcG9zaXRpb25TdGFydCwgZmFsc2UpO1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjb21wb3NpdGlvbmVuZCcsIHRoaXMub25Db21wb3NpdGlvbkVuZCwgZmFsc2UpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzdG9wTGlzdGVuaW5nQ29tcG9zaXRpb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RvcExpc3RlbmluZ0NvbXBvc2l0aW9uKCkge1xuICAgICAgaWYgKGRvY3VtZW50ICYmIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY29tcG9zaXRpb25zdGFydCcsIHRoaXMub25Db21wb3NpdGlvblN0YXJ0KTtcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY29tcG9zaXRpb25lbmQnLCB0aGlzLm9uQ29tcG9zaXRpb25FbmQpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzdGFydExpc3RlbmluZ1RvVG91Y2hcIixcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAvLyBUb3VjaCBIYW5kbGVyc1xuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdGFydExpc3RlbmluZ1RvVG91Y2goKSB7XG4gICAgICBpZiAoZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5vblRvdWNoU3RhcnQsIGZhbHNlKTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdGhpcy5vblRvdWNoTW92ZSwgZmFsc2UpO1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRoaXMub25Ub3VjaEVuZCwgZmFsc2UpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzdG9wTGlzdGVuaW5nVG9Ub3VjaFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdG9wTGlzdGVuaW5nVG9Ub3VjaCgpIHtcbiAgICAgIGlmIChkb2N1bWVudCAmJiBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKSB7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLm9uVG91Y2hTdGFydCk7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHRoaXMub25Ub3VjaE1vdmUpO1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRoaXMub25Ub3VjaEVuZCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImJ1aWxkTWVudU9wdGlvbnNcIixcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAvLyBNZW51IE9wdGlvbnNcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICB2YWx1ZTogZnVuY3Rpb24gYnVpbGRNZW51T3B0aW9ucyhwcm9wcywgc2VsZWN0VmFsdWUpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB2YXIgX3Byb3BzJGlucHV0VmFsdWUgPSBwcm9wcy5pbnB1dFZhbHVlLFxuICAgICAgICAgIGlucHV0VmFsdWUgPSBfcHJvcHMkaW5wdXRWYWx1ZSA9PT0gdm9pZCAwID8gJycgOiBfcHJvcHMkaW5wdXRWYWx1ZSxcbiAgICAgICAgICBvcHRpb25zID0gcHJvcHMub3B0aW9ucztcblxuICAgICAgdmFyIHRvT3B0aW9uID0gZnVuY3Rpb24gdG9PcHRpb24ob3B0aW9uLCBpZCkge1xuICAgICAgICB2YXIgaXNEaXNhYmxlZCA9IF90aGlzMy5pc09wdGlvbkRpc2FibGVkKG9wdGlvbiwgc2VsZWN0VmFsdWUpO1xuXG4gICAgICAgIHZhciBpc1NlbGVjdGVkID0gX3RoaXMzLmlzT3B0aW9uU2VsZWN0ZWQob3B0aW9uLCBzZWxlY3RWYWx1ZSk7XG5cbiAgICAgICAgdmFyIGxhYmVsID0gX3RoaXMzLmdldE9wdGlvbkxhYmVsKG9wdGlvbik7XG5cbiAgICAgICAgdmFyIHZhbHVlID0gX3RoaXMzLmdldE9wdGlvblZhbHVlKG9wdGlvbik7XG5cbiAgICAgICAgaWYgKF90aGlzMy5zaG91bGRIaWRlU2VsZWN0ZWRPcHRpb25zKCkgJiYgaXNTZWxlY3RlZCB8fCAhX3RoaXMzLmZpbHRlck9wdGlvbih7XG4gICAgICAgICAgbGFiZWw6IGxhYmVsLFxuICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICBkYXRhOiBvcHRpb25cbiAgICAgICAgfSwgaW5wdXRWYWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb25Ib3ZlciA9IGlzRGlzYWJsZWQgPyB1bmRlZmluZWQgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMy5vbk9wdGlvbkhvdmVyKG9wdGlvbik7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBvblNlbGVjdCA9IGlzRGlzYWJsZWQgPyB1bmRlZmluZWQgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMy5zZWxlY3RPcHRpb24ob3B0aW9uKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIG9wdGlvbklkID0gXCJcIi5jb25jYXQoX3RoaXMzLmdldEVsZW1lbnRJZCgnb3B0aW9uJyksIFwiLVwiKS5jb25jYXQoaWQpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGlubmVyUHJvcHM6IHtcbiAgICAgICAgICAgIGlkOiBvcHRpb25JZCxcbiAgICAgICAgICAgIG9uQ2xpY2s6IG9uU2VsZWN0LFxuICAgICAgICAgICAgb25Nb3VzZU1vdmU6IG9uSG92ZXIsXG4gICAgICAgICAgICBvbk1vdXNlT3Zlcjogb25Ib3ZlcixcbiAgICAgICAgICAgIHRhYkluZGV4OiAtMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZGF0YTogb3B0aW9uLFxuICAgICAgICAgIGlzRGlzYWJsZWQ6IGlzRGlzYWJsZWQsXG4gICAgICAgICAgaXNTZWxlY3RlZDogaXNTZWxlY3RlZCxcbiAgICAgICAgICBrZXk6IG9wdGlvbklkLFxuICAgICAgICAgIGxhYmVsOiBsYWJlbCxcbiAgICAgICAgICB0eXBlOiAnb3B0aW9uJyxcbiAgICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgICAgfTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBvcHRpb25zLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBpdGVtLCBpdGVtSW5kZXgpIHtcbiAgICAgICAgaWYgKGl0ZW0ub3B0aW9ucykge1xuICAgICAgICAgIC8vIFRPRE8gbmVlZHMgYSB0aWRpZXIgaW1wbGVtZW50YXRpb25cbiAgICAgICAgICBpZiAoIV90aGlzMy5oYXNHcm91cHMpIF90aGlzMy5oYXNHcm91cHMgPSB0cnVlO1xuICAgICAgICAgIHZhciBpdGVtcyA9IGl0ZW0ub3B0aW9ucztcbiAgICAgICAgICB2YXIgY2hpbGRyZW4gPSBpdGVtcy5tYXAoZnVuY3Rpb24gKGNoaWxkLCBpKSB7XG4gICAgICAgICAgICB2YXIgb3B0aW9uID0gdG9PcHRpb24oY2hpbGQsIFwiXCIuY29uY2F0KGl0ZW1JbmRleCwgXCItXCIpLmNvbmNhdChpKSk7XG4gICAgICAgICAgICBpZiAob3B0aW9uKSBhY2MuZm9jdXNhYmxlLnB1c2goY2hpbGQpO1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbjtcbiAgICAgICAgICB9KS5maWx0ZXIoQm9vbGVhbik7XG5cbiAgICAgICAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgZ3JvdXBJZCA9IFwiXCIuY29uY2F0KF90aGlzMy5nZXRFbGVtZW50SWQoJ2dyb3VwJyksIFwiLVwiKS5jb25jYXQoaXRlbUluZGV4KTtcbiAgICAgICAgICAgIGFjYy5yZW5kZXIucHVzaCh7XG4gICAgICAgICAgICAgIHR5cGU6ICdncm91cCcsXG4gICAgICAgICAgICAgIGtleTogZ3JvdXBJZCxcbiAgICAgICAgICAgICAgZGF0YTogaXRlbSxcbiAgICAgICAgICAgICAgb3B0aW9uczogY2hpbGRyZW5cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgb3B0aW9uID0gdG9PcHRpb24oaXRlbSwgXCJcIi5jb25jYXQoaXRlbUluZGV4KSk7XG5cbiAgICAgICAgICBpZiAob3B0aW9uKSB7XG4gICAgICAgICAgICBhY2MucmVuZGVyLnB1c2gob3B0aW9uKTtcbiAgICAgICAgICAgIGFjYy5mb2N1c2FibGUucHVzaChpdGVtKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfSwge1xuICAgICAgICByZW5kZXI6IFtdLFxuICAgICAgICBmb2N1c2FibGU6IFtdXG4gICAgICB9KTtcbiAgICB9IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgIC8vIFJlbmRlcmVyc1xuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIH0sIHtcbiAgICBrZXk6IFwiY29uc3RydWN0QXJpYUxpdmVNZXNzYWdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbnN0cnVjdEFyaWFMaXZlTWVzc2FnZSgpIHtcbiAgICAgIHZhciBfdGhpcyRzdGF0ZTcgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgIGFyaWFMaXZlQ29udGV4dCA9IF90aGlzJHN0YXRlNy5hcmlhTGl2ZUNvbnRleHQsXG4gICAgICAgICAgc2VsZWN0VmFsdWUgPSBfdGhpcyRzdGF0ZTcuc2VsZWN0VmFsdWUsXG4gICAgICAgICAgZm9jdXNlZFZhbHVlID0gX3RoaXMkc3RhdGU3LmZvY3VzZWRWYWx1ZSxcbiAgICAgICAgICBmb2N1c2VkT3B0aW9uID0gX3RoaXMkc3RhdGU3LmZvY3VzZWRPcHRpb247XG4gICAgICB2YXIgX3RoaXMkcHJvcHMxMyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgb3B0aW9ucyA9IF90aGlzJHByb3BzMTMub3B0aW9ucyxcbiAgICAgICAgICBtZW51SXNPcGVuID0gX3RoaXMkcHJvcHMxMy5tZW51SXNPcGVuLFxuICAgICAgICAgIGlucHV0VmFsdWUgPSBfdGhpcyRwcm9wczEzLmlucHV0VmFsdWUsXG4gICAgICAgICAgc2NyZWVuUmVhZGVyU3RhdHVzID0gX3RoaXMkcHJvcHMxMy5zY3JlZW5SZWFkZXJTdGF0dXM7IC8vIEFuIGFyaWEgbGl2ZSBtZXNzYWdlIHJlcHJlc2VudGluZyB0aGUgY3VycmVudGx5IGZvY3VzZWQgdmFsdWUgaW4gdGhlIHNlbGVjdC5cblxuICAgICAgdmFyIGZvY3VzZWRWYWx1ZU1zZyA9IGZvY3VzZWRWYWx1ZSA/IHZhbHVlRm9jdXNBcmlhTWVzc2FnZSh7XG4gICAgICAgIGZvY3VzZWRWYWx1ZTogZm9jdXNlZFZhbHVlLFxuICAgICAgICBnZXRPcHRpb25MYWJlbDogdGhpcy5nZXRPcHRpb25MYWJlbCxcbiAgICAgICAgc2VsZWN0VmFsdWU6IHNlbGVjdFZhbHVlXG4gICAgICB9KSA6ICcnOyAvLyBBbiBhcmlhIGxpdmUgbWVzc2FnZSByZXByZXNlbnRpbmcgdGhlIGN1cnJlbnRseSBmb2N1c2VkIG9wdGlvbiBpbiB0aGUgc2VsZWN0LlxuXG4gICAgICB2YXIgZm9jdXNlZE9wdGlvbk1zZyA9IGZvY3VzZWRPcHRpb24gJiYgbWVudUlzT3BlbiA/IG9wdGlvbkZvY3VzQXJpYU1lc3NhZ2Uoe1xuICAgICAgICBmb2N1c2VkT3B0aW9uOiBmb2N1c2VkT3B0aW9uLFxuICAgICAgICBnZXRPcHRpb25MYWJlbDogdGhpcy5nZXRPcHRpb25MYWJlbCxcbiAgICAgICAgb3B0aW9uczogb3B0aW9uc1xuICAgICAgfSkgOiAnJzsgLy8gQW4gYXJpYSBsaXZlIG1lc3NhZ2UgcmVwcmVzZW50aW5nIHRoZSBzZXQgb2YgZm9jdXNhYmxlIHJlc3VsdHMgYW5kIGN1cnJlbnQgc2VhcmNodGVybS9pbnB1dHZhbHVlLlxuXG4gICAgICB2YXIgcmVzdWx0c01zZyA9IHJlc3VsdHNBcmlhTWVzc2FnZSh7XG4gICAgICAgIGlucHV0VmFsdWU6IGlucHV0VmFsdWUsXG4gICAgICAgIHNjcmVlblJlYWRlck1lc3NhZ2U6IHNjcmVlblJlYWRlclN0YXR1cyh7XG4gICAgICAgICAgY291bnQ6IHRoaXMuY291bnRPcHRpb25zKClcbiAgICAgICAgfSlcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KGZvY3VzZWRWYWx1ZU1zZywgXCIgXCIpLmNvbmNhdChmb2N1c2VkT3B0aW9uTXNnLCBcIiBcIikuY29uY2F0KHJlc3VsdHNNc2csIFwiIFwiKS5jb25jYXQoYXJpYUxpdmVDb250ZXh0KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVySW5wdXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVySW5wdXQoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMxNCA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgaXNEaXNhYmxlZCA9IF90aGlzJHByb3BzMTQuaXNEaXNhYmxlZCxcbiAgICAgICAgICBpc1NlYXJjaGFibGUgPSBfdGhpcyRwcm9wczE0LmlzU2VhcmNoYWJsZSxcbiAgICAgICAgICBpbnB1dElkID0gX3RoaXMkcHJvcHMxNC5pbnB1dElkLFxuICAgICAgICAgIGlucHV0VmFsdWUgPSBfdGhpcyRwcm9wczE0LmlucHV0VmFsdWUsXG4gICAgICAgICAgdGFiSW5kZXggPSBfdGhpcyRwcm9wczE0LnRhYkluZGV4O1xuICAgICAgdmFyIElucHV0ID0gdGhpcy5jb21wb25lbnRzLklucHV0O1xuICAgICAgdmFyIGlucHV0SXNIaWRkZW4gPSB0aGlzLnN0YXRlLmlucHV0SXNIaWRkZW47XG4gICAgICB2YXIgaWQgPSBpbnB1dElkIHx8IHRoaXMuZ2V0RWxlbWVudElkKCdpbnB1dCcpO1xuXG4gICAgICBpZiAoIWlzU2VhcmNoYWJsZSkge1xuICAgICAgICAvLyB1c2UgYSBkdW1teSBpbnB1dCB0byBtYWludGFpbiBmb2N1cy9ibHVyIGZ1bmN0aW9uYWxpdHlcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRHVtbXlJbnB1dCwge1xuICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICBpbm5lclJlZjogdGhpcy5nZXRJbnB1dFJlZixcbiAgICAgICAgICBvbkJsdXI6IHRoaXMub25JbnB1dEJsdXIsXG4gICAgICAgICAgb25DaGFuZ2U6IG5vb3AsXG4gICAgICAgICAgb25Gb2N1czogdGhpcy5vbklucHV0Rm9jdXMsXG4gICAgICAgICAgcmVhZE9ubHk6IHRydWUsXG4gICAgICAgICAgZGlzYWJsZWQ6IGlzRGlzYWJsZWQsXG4gICAgICAgICAgdGFiSW5kZXg6IHRhYkluZGV4LFxuICAgICAgICAgIHZhbHVlOiBcIlwiXG4gICAgICAgIH0pO1xuICAgICAgfSAvLyBhcmlhIGF0dHJpYnV0ZXMgbWFrZXMgdGhlIEpTWCBcIm5vaXN5XCIsIHNlcGFyYXRlZCBmb3IgY2xhcml0eVxuXG5cbiAgICAgIHZhciBhcmlhQXR0cmlidXRlcyA9IHtcbiAgICAgICAgJ2FyaWEtYXV0b2NvbXBsZXRlJzogJ2xpc3QnLFxuICAgICAgICAnYXJpYS1sYWJlbCc6IHRoaXMucHJvcHNbJ2FyaWEtbGFiZWwnXSxcbiAgICAgICAgJ2FyaWEtbGFiZWxsZWRieSc6IHRoaXMucHJvcHNbJ2FyaWEtbGFiZWxsZWRieSddXG4gICAgICB9O1xuICAgICAgdmFyIF90aGlzJGNvbW1vblByb3BzID0gdGhpcy5jb21tb25Qcm9wcyxcbiAgICAgICAgICBjeCA9IF90aGlzJGNvbW1vblByb3BzLmN4LFxuICAgICAgICAgIHRoZW1lID0gX3RoaXMkY29tbW9uUHJvcHMudGhlbWUsXG4gICAgICAgICAgc2VsZWN0UHJvcHMgPSBfdGhpcyRjb21tb25Qcm9wcy5zZWxlY3RQcm9wcztcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KElucHV0LCBfZXh0ZW5kcyh7XG4gICAgICAgIGF1dG9DYXBpdGFsaXplOiBcIm5vbmVcIixcbiAgICAgICAgYXV0b0NvbXBsZXRlOiBcIm9mZlwiLFxuICAgICAgICBhdXRvQ29ycmVjdDogXCJvZmZcIixcbiAgICAgICAgY3g6IGN4LFxuICAgICAgICBnZXRTdHlsZXM6IHRoaXMuZ2V0U3R5bGVzLFxuICAgICAgICBpZDogaWQsXG4gICAgICAgIGlubmVyUmVmOiB0aGlzLmdldElucHV0UmVmLFxuICAgICAgICBpc0Rpc2FibGVkOiBpc0Rpc2FibGVkLFxuICAgICAgICBpc0hpZGRlbjogaW5wdXRJc0hpZGRlbixcbiAgICAgICAgb25CbHVyOiB0aGlzLm9uSW5wdXRCbHVyLFxuICAgICAgICBvbkNoYW5nZTogdGhpcy5oYW5kbGVJbnB1dENoYW5nZSxcbiAgICAgICAgb25Gb2N1czogdGhpcy5vbklucHV0Rm9jdXMsXG4gICAgICAgIHNlbGVjdFByb3BzOiBzZWxlY3RQcm9wcyxcbiAgICAgICAgc3BlbGxDaGVjazogXCJmYWxzZVwiLFxuICAgICAgICB0YWJJbmRleDogdGFiSW5kZXgsXG4gICAgICAgIHRoZW1lOiB0aGVtZSxcbiAgICAgICAgdHlwZTogXCJ0ZXh0XCIsXG4gICAgICAgIHZhbHVlOiBpbnB1dFZhbHVlXG4gICAgICB9LCBhcmlhQXR0cmlidXRlcykpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJQbGFjZWhvbGRlck9yVmFsdWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyUGxhY2Vob2xkZXJPclZhbHVlKCkge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIHZhciBfdGhpcyRjb21wb25lbnRzID0gdGhpcy5jb21wb25lbnRzLFxuICAgICAgICAgIE11bHRpVmFsdWUgPSBfdGhpcyRjb21wb25lbnRzLk11bHRpVmFsdWUsXG4gICAgICAgICAgTXVsdGlWYWx1ZUNvbnRhaW5lciA9IF90aGlzJGNvbXBvbmVudHMuTXVsdGlWYWx1ZUNvbnRhaW5lcixcbiAgICAgICAgICBNdWx0aVZhbHVlTGFiZWwgPSBfdGhpcyRjb21wb25lbnRzLk11bHRpVmFsdWVMYWJlbCxcbiAgICAgICAgICBNdWx0aVZhbHVlUmVtb3ZlID0gX3RoaXMkY29tcG9uZW50cy5NdWx0aVZhbHVlUmVtb3ZlLFxuICAgICAgICAgIFNpbmdsZVZhbHVlID0gX3RoaXMkY29tcG9uZW50cy5TaW5nbGVWYWx1ZSxcbiAgICAgICAgICBQbGFjZWhvbGRlciA9IF90aGlzJGNvbXBvbmVudHMuUGxhY2Vob2xkZXI7XG4gICAgICB2YXIgY29tbW9uUHJvcHMgPSB0aGlzLmNvbW1vblByb3BzO1xuICAgICAgdmFyIF90aGlzJHByb3BzMTUgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNvbnRyb2xTaG91bGRSZW5kZXJWYWx1ZSA9IF90aGlzJHByb3BzMTUuY29udHJvbFNob3VsZFJlbmRlclZhbHVlLFxuICAgICAgICAgIGlzRGlzYWJsZWQgPSBfdGhpcyRwcm9wczE1LmlzRGlzYWJsZWQsXG4gICAgICAgICAgaXNNdWx0aSA9IF90aGlzJHByb3BzMTUuaXNNdWx0aSxcbiAgICAgICAgICBpbnB1dFZhbHVlID0gX3RoaXMkcHJvcHMxNS5pbnB1dFZhbHVlLFxuICAgICAgICAgIHBsYWNlaG9sZGVyID0gX3RoaXMkcHJvcHMxNS5wbGFjZWhvbGRlcjtcbiAgICAgIHZhciBfdGhpcyRzdGF0ZTggPSB0aGlzLnN0YXRlLFxuICAgICAgICAgIHNlbGVjdFZhbHVlID0gX3RoaXMkc3RhdGU4LnNlbGVjdFZhbHVlLFxuICAgICAgICAgIGZvY3VzZWRWYWx1ZSA9IF90aGlzJHN0YXRlOC5mb2N1c2VkVmFsdWUsXG4gICAgICAgICAgaXNGb2N1c2VkID0gX3RoaXMkc3RhdGU4LmlzRm9jdXNlZDtcblxuICAgICAgaWYgKCF0aGlzLmhhc1ZhbHVlKCkgfHwgIWNvbnRyb2xTaG91bGRSZW5kZXJWYWx1ZSkge1xuICAgICAgICByZXR1cm4gaW5wdXRWYWx1ZSA/IG51bGwgOiBSZWFjdC5jcmVhdGVFbGVtZW50KFBsYWNlaG9sZGVyLCBfZXh0ZW5kcyh7fSwgY29tbW9uUHJvcHMsIHtcbiAgICAgICAgICBrZXk6IFwicGxhY2Vob2xkZXJcIixcbiAgICAgICAgICBpc0Rpc2FibGVkOiBpc0Rpc2FibGVkLFxuICAgICAgICAgIGlzRm9jdXNlZDogaXNGb2N1c2VkXG4gICAgICAgIH0pLCBwbGFjZWhvbGRlcik7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc011bHRpKSB7XG4gICAgICAgIHZhciBzZWxlY3RWYWx1ZXMgPSBzZWxlY3RWYWx1ZS5tYXAoZnVuY3Rpb24gKG9wdCwgaW5kZXgpIHtcbiAgICAgICAgICB2YXIgaXNPcHRpb25Gb2N1c2VkID0gb3B0ID09PSBmb2N1c2VkVmFsdWU7XG4gICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTXVsdGlWYWx1ZSwgX2V4dGVuZHMoe30sIGNvbW1vblByb3BzLCB7XG4gICAgICAgICAgICBjb21wb25lbnRzOiB7XG4gICAgICAgICAgICAgIENvbnRhaW5lcjogTXVsdGlWYWx1ZUNvbnRhaW5lcixcbiAgICAgICAgICAgICAgTGFiZWw6IE11bHRpVmFsdWVMYWJlbCxcbiAgICAgICAgICAgICAgUmVtb3ZlOiBNdWx0aVZhbHVlUmVtb3ZlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNGb2N1c2VkOiBpc09wdGlvbkZvY3VzZWQsXG4gICAgICAgICAgICBpc0Rpc2FibGVkOiBpc0Rpc2FibGVkLFxuICAgICAgICAgICAga2V5OiBfdGhpczQuZ2V0T3B0aW9uVmFsdWUob3B0KSxcbiAgICAgICAgICAgIGluZGV4OiBpbmRleCxcbiAgICAgICAgICAgIHJlbW92ZVByb3BzOiB7XG4gICAgICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzNC5yZW1vdmVWYWx1ZShvcHQpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBvblRvdWNoRW5kOiBmdW5jdGlvbiBvblRvdWNoRW5kKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczQucmVtb3ZlVmFsdWUob3B0KTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgb25Nb3VzZURvd246IGZ1bmN0aW9uIG9uTW91c2VEb3duKGUpIHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGE6IG9wdFxuICAgICAgICAgIH0pLCBfdGhpczQuZm9ybWF0T3B0aW9uTGFiZWwob3B0LCAndmFsdWUnKSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gc2VsZWN0VmFsdWVzO1xuICAgICAgfVxuXG4gICAgICBpZiAoaW5wdXRWYWx1ZSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHNpbmdsZVZhbHVlID0gc2VsZWN0VmFsdWVbMF07XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChTaW5nbGVWYWx1ZSwgX2V4dGVuZHMoe30sIGNvbW1vblByb3BzLCB7XG4gICAgICAgIGRhdGE6IHNpbmdsZVZhbHVlLFxuICAgICAgICBpc0Rpc2FibGVkOiBpc0Rpc2FibGVkXG4gICAgICB9KSwgdGhpcy5mb3JtYXRPcHRpb25MYWJlbChzaW5nbGVWYWx1ZSwgJ3ZhbHVlJykpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJDbGVhckluZGljYXRvclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJDbGVhckluZGljYXRvcigpIHtcbiAgICAgIHZhciBDbGVhckluZGljYXRvciA9IHRoaXMuY29tcG9uZW50cy5DbGVhckluZGljYXRvcjtcbiAgICAgIHZhciBjb21tb25Qcm9wcyA9IHRoaXMuY29tbW9uUHJvcHM7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMxNiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgaXNEaXNhYmxlZCA9IF90aGlzJHByb3BzMTYuaXNEaXNhYmxlZCxcbiAgICAgICAgICBpc0xvYWRpbmcgPSBfdGhpcyRwcm9wczE2LmlzTG9hZGluZztcbiAgICAgIHZhciBpc0ZvY3VzZWQgPSB0aGlzLnN0YXRlLmlzRm9jdXNlZDtcblxuICAgICAgaWYgKCF0aGlzLmlzQ2xlYXJhYmxlKCkgfHwgIUNsZWFySW5kaWNhdG9yIHx8IGlzRGlzYWJsZWQgfHwgIXRoaXMuaGFzVmFsdWUoKSB8fCBpc0xvYWRpbmcpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBpbm5lclByb3BzID0ge1xuICAgICAgICBvbk1vdXNlRG93bjogdGhpcy5vbkNsZWFySW5kaWNhdG9yTW91c2VEb3duLFxuICAgICAgICBvblRvdWNoRW5kOiB0aGlzLm9uQ2xlYXJJbmRpY2F0b3JUb3VjaEVuZCxcbiAgICAgICAgJ2FyaWEtaGlkZGVuJzogJ3RydWUnXG4gICAgICB9O1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ2xlYXJJbmRpY2F0b3IsIF9leHRlbmRzKHt9LCBjb21tb25Qcm9wcywge1xuICAgICAgICBpbm5lclByb3BzOiBpbm5lclByb3BzLFxuICAgICAgICBpc0ZvY3VzZWQ6IGlzRm9jdXNlZFxuICAgICAgfSkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJMb2FkaW5nSW5kaWNhdG9yXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlckxvYWRpbmdJbmRpY2F0b3IoKSB7XG4gICAgICB2YXIgTG9hZGluZ0luZGljYXRvciA9IHRoaXMuY29tcG9uZW50cy5Mb2FkaW5nSW5kaWNhdG9yO1xuICAgICAgdmFyIGNvbW1vblByb3BzID0gdGhpcy5jb21tb25Qcm9wcztcbiAgICAgIHZhciBfdGhpcyRwcm9wczE3ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBpc0Rpc2FibGVkID0gX3RoaXMkcHJvcHMxNy5pc0Rpc2FibGVkLFxuICAgICAgICAgIGlzTG9hZGluZyA9IF90aGlzJHByb3BzMTcuaXNMb2FkaW5nO1xuICAgICAgdmFyIGlzRm9jdXNlZCA9IHRoaXMuc3RhdGUuaXNGb2N1c2VkO1xuICAgICAgaWYgKCFMb2FkaW5nSW5kaWNhdG9yIHx8ICFpc0xvYWRpbmcpIHJldHVybiBudWxsO1xuICAgICAgdmFyIGlubmVyUHJvcHMgPSB7XG4gICAgICAgICdhcmlhLWhpZGRlbic6ICd0cnVlJ1xuICAgICAgfTtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExvYWRpbmdJbmRpY2F0b3IsIF9leHRlbmRzKHt9LCBjb21tb25Qcm9wcywge1xuICAgICAgICBpbm5lclByb3BzOiBpbm5lclByb3BzLFxuICAgICAgICBpc0Rpc2FibGVkOiBpc0Rpc2FibGVkLFxuICAgICAgICBpc0ZvY3VzZWQ6IGlzRm9jdXNlZFxuICAgICAgfSkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJJbmRpY2F0b3JTZXBhcmF0b3JcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVySW5kaWNhdG9yU2VwYXJhdG9yKCkge1xuICAgICAgdmFyIF90aGlzJGNvbXBvbmVudHMyID0gdGhpcy5jb21wb25lbnRzLFxuICAgICAgICAgIERyb3Bkb3duSW5kaWNhdG9yID0gX3RoaXMkY29tcG9uZW50czIuRHJvcGRvd25JbmRpY2F0b3IsXG4gICAgICAgICAgSW5kaWNhdG9yU2VwYXJhdG9yID0gX3RoaXMkY29tcG9uZW50czIuSW5kaWNhdG9yU2VwYXJhdG9yOyAvLyBzZXBhcmF0b3IgZG9lc24ndCBtYWtlIHNlbnNlIHdpdGhvdXQgdGhlIGRyb3Bkb3duIGluZGljYXRvclxuXG4gICAgICBpZiAoIURyb3Bkb3duSW5kaWNhdG9yIHx8ICFJbmRpY2F0b3JTZXBhcmF0b3IpIHJldHVybiBudWxsO1xuICAgICAgdmFyIGNvbW1vblByb3BzID0gdGhpcy5jb21tb25Qcm9wcztcbiAgICAgIHZhciBpc0Rpc2FibGVkID0gdGhpcy5wcm9wcy5pc0Rpc2FibGVkO1xuICAgICAgdmFyIGlzRm9jdXNlZCA9IHRoaXMuc3RhdGUuaXNGb2N1c2VkO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSW5kaWNhdG9yU2VwYXJhdG9yLCBfZXh0ZW5kcyh7fSwgY29tbW9uUHJvcHMsIHtcbiAgICAgICAgaXNEaXNhYmxlZDogaXNEaXNhYmxlZCxcbiAgICAgICAgaXNGb2N1c2VkOiBpc0ZvY3VzZWRcbiAgICAgIH0pKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyRHJvcGRvd25JbmRpY2F0b3JcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyRHJvcGRvd25JbmRpY2F0b3IoKSB7XG4gICAgICB2YXIgRHJvcGRvd25JbmRpY2F0b3IgPSB0aGlzLmNvbXBvbmVudHMuRHJvcGRvd25JbmRpY2F0b3I7XG4gICAgICBpZiAoIURyb3Bkb3duSW5kaWNhdG9yKSByZXR1cm4gbnVsbDtcbiAgICAgIHZhciBjb21tb25Qcm9wcyA9IHRoaXMuY29tbW9uUHJvcHM7XG4gICAgICB2YXIgaXNEaXNhYmxlZCA9IHRoaXMucHJvcHMuaXNEaXNhYmxlZDtcbiAgICAgIHZhciBpc0ZvY3VzZWQgPSB0aGlzLnN0YXRlLmlzRm9jdXNlZDtcbiAgICAgIHZhciBpbm5lclByb3BzID0ge1xuICAgICAgICBvbk1vdXNlRG93bjogdGhpcy5vbkRyb3Bkb3duSW5kaWNhdG9yTW91c2VEb3duLFxuICAgICAgICBvblRvdWNoRW5kOiB0aGlzLm9uRHJvcGRvd25JbmRpY2F0b3JUb3VjaEVuZCxcbiAgICAgICAgJ2FyaWEtaGlkZGVuJzogJ3RydWUnXG4gICAgICB9O1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRHJvcGRvd25JbmRpY2F0b3IsIF9leHRlbmRzKHt9LCBjb21tb25Qcm9wcywge1xuICAgICAgICBpbm5lclByb3BzOiBpbm5lclByb3BzLFxuICAgICAgICBpc0Rpc2FibGVkOiBpc0Rpc2FibGVkLFxuICAgICAgICBpc0ZvY3VzZWQ6IGlzRm9jdXNlZFxuICAgICAgfSkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJNZW51XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlck1lbnUoKSB7XG4gICAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgICAgdmFyIF90aGlzJGNvbXBvbmVudHMzID0gdGhpcy5jb21wb25lbnRzLFxuICAgICAgICAgIEdyb3VwID0gX3RoaXMkY29tcG9uZW50czMuR3JvdXAsXG4gICAgICAgICAgR3JvdXBIZWFkaW5nID0gX3RoaXMkY29tcG9uZW50czMuR3JvdXBIZWFkaW5nLFxuICAgICAgICAgIE1lbnUgPSBfdGhpcyRjb21wb25lbnRzMy5NZW51LFxuICAgICAgICAgIE1lbnVMaXN0ID0gX3RoaXMkY29tcG9uZW50czMuTWVudUxpc3QsXG4gICAgICAgICAgTWVudVBvcnRhbCA9IF90aGlzJGNvbXBvbmVudHMzLk1lbnVQb3J0YWwsXG4gICAgICAgICAgTG9hZGluZ01lc3NhZ2UgPSBfdGhpcyRjb21wb25lbnRzMy5Mb2FkaW5nTWVzc2FnZSxcbiAgICAgICAgICBOb09wdGlvbnNNZXNzYWdlID0gX3RoaXMkY29tcG9uZW50czMuTm9PcHRpb25zTWVzc2FnZSxcbiAgICAgICAgICBPcHRpb24gPSBfdGhpcyRjb21wb25lbnRzMy5PcHRpb247XG4gICAgICB2YXIgY29tbW9uUHJvcHMgPSB0aGlzLmNvbW1vblByb3BzO1xuICAgICAgdmFyIF90aGlzJHN0YXRlOSA9IHRoaXMuc3RhdGUsXG4gICAgICAgICAgZm9jdXNlZE9wdGlvbiA9IF90aGlzJHN0YXRlOS5mb2N1c2VkT3B0aW9uLFxuICAgICAgICAgIG1lbnVPcHRpb25zID0gX3RoaXMkc3RhdGU5Lm1lbnVPcHRpb25zO1xuICAgICAgdmFyIF90aGlzJHByb3BzMTggPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNhcHR1cmVNZW51U2Nyb2xsID0gX3RoaXMkcHJvcHMxOC5jYXB0dXJlTWVudVNjcm9sbCxcbiAgICAgICAgICBpbnB1dFZhbHVlID0gX3RoaXMkcHJvcHMxOC5pbnB1dFZhbHVlLFxuICAgICAgICAgIGlzTG9hZGluZyA9IF90aGlzJHByb3BzMTguaXNMb2FkaW5nLFxuICAgICAgICAgIGxvYWRpbmdNZXNzYWdlID0gX3RoaXMkcHJvcHMxOC5sb2FkaW5nTWVzc2FnZSxcbiAgICAgICAgICBtaW5NZW51SGVpZ2h0ID0gX3RoaXMkcHJvcHMxOC5taW5NZW51SGVpZ2h0LFxuICAgICAgICAgIG1heE1lbnVIZWlnaHQgPSBfdGhpcyRwcm9wczE4Lm1heE1lbnVIZWlnaHQsXG4gICAgICAgICAgbWVudUlzT3BlbiA9IF90aGlzJHByb3BzMTgubWVudUlzT3BlbixcbiAgICAgICAgICBtZW51UGxhY2VtZW50ID0gX3RoaXMkcHJvcHMxOC5tZW51UGxhY2VtZW50LFxuICAgICAgICAgIG1lbnVQb3NpdGlvbiA9IF90aGlzJHByb3BzMTgubWVudVBvc2l0aW9uLFxuICAgICAgICAgIG1lbnVQb3J0YWxUYXJnZXQgPSBfdGhpcyRwcm9wczE4Lm1lbnVQb3J0YWxUYXJnZXQsXG4gICAgICAgICAgbWVudVNob3VsZEJsb2NrU2Nyb2xsID0gX3RoaXMkcHJvcHMxOC5tZW51U2hvdWxkQmxvY2tTY3JvbGwsXG4gICAgICAgICAgbWVudVNob3VsZFNjcm9sbEludG9WaWV3ID0gX3RoaXMkcHJvcHMxOC5tZW51U2hvdWxkU2Nyb2xsSW50b1ZpZXcsXG4gICAgICAgICAgbm9PcHRpb25zTWVzc2FnZSA9IF90aGlzJHByb3BzMTgubm9PcHRpb25zTWVzc2FnZSxcbiAgICAgICAgICBvbk1lbnVTY3JvbGxUb1RvcCA9IF90aGlzJHByb3BzMTgub25NZW51U2Nyb2xsVG9Ub3AsXG4gICAgICAgICAgb25NZW51U2Nyb2xsVG9Cb3R0b20gPSBfdGhpcyRwcm9wczE4Lm9uTWVudVNjcm9sbFRvQm90dG9tO1xuICAgICAgaWYgKCFtZW51SXNPcGVuKSByZXR1cm4gbnVsbDsgLy8gVE9ETzogSW50ZXJuYWwgT3B0aW9uIFR5cGUgaGVyZVxuXG4gICAgICB2YXIgcmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKHByb3BzKSB7XG4gICAgICAgIC8vIGZvciBwZXJmb3JtYW5jZSwgdGhlIG1lbnUgb3B0aW9ucyBpbiBzdGF0ZSBhcmVuJ3QgY2hhbmdlZCB3aGVuIHRoZVxuICAgICAgICAvLyBmb2N1c2VkIG9wdGlvbiBjaGFuZ2VzIHNvIHdlIGNhbGN1bGF0ZSBhZGRpdGlvbmFsIHByb3BzIGJhc2VkIG9uIHRoYXRcbiAgICAgICAgdmFyIGlzRm9jdXNlZCA9IGZvY3VzZWRPcHRpb24gPT09IHByb3BzLmRhdGE7XG4gICAgICAgIHByb3BzLmlubmVyUmVmID0gaXNGb2N1c2VkID8gX3RoaXM1LmdldEZvY3VzZWRPcHRpb25SZWYgOiB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KE9wdGlvbiwgX2V4dGVuZHMoe30sIGNvbW1vblByb3BzLCBwcm9wcywge1xuICAgICAgICAgIGlzRm9jdXNlZDogaXNGb2N1c2VkXG4gICAgICAgIH0pLCBfdGhpczUuZm9ybWF0T3B0aW9uTGFiZWwocHJvcHMuZGF0YSwgJ21lbnUnKSk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgbWVudVVJO1xuXG4gICAgICBpZiAodGhpcy5oYXNPcHRpb25zKCkpIHtcbiAgICAgICAgbWVudVVJID0gbWVudU9wdGlvbnMucmVuZGVyLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgIGlmIChpdGVtLnR5cGUgPT09ICdncm91cCcpIHtcbiAgICAgICAgICAgIHZhciB0eXBlID0gaXRlbS50eXBlLFxuICAgICAgICAgICAgICAgIGdyb3VwID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKGl0ZW0sIFtcInR5cGVcIl0pO1xuXG4gICAgICAgICAgICB2YXIgaGVhZGluZ0lkID0gXCJcIi5jb25jYXQoaXRlbS5rZXksIFwiLWhlYWRpbmdcIik7XG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChHcm91cCwgX2V4dGVuZHMoe30sIGNvbW1vblByb3BzLCBncm91cCwge1xuICAgICAgICAgICAgICBIZWFkaW5nOiBHcm91cEhlYWRpbmcsXG4gICAgICAgICAgICAgIGhlYWRpbmdQcm9wczoge1xuICAgICAgICAgICAgICAgIGlkOiBoZWFkaW5nSWRcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgbGFiZWw6IF90aGlzNS5mb3JtYXRHcm91cExhYmVsKGl0ZW0uZGF0YSlcbiAgICAgICAgICAgIH0pLCBpdGVtLm9wdGlvbnMubWFwKGZ1bmN0aW9uIChvcHRpb24pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlbmRlcihvcHRpb24pO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbS50eXBlID09PSAnb3B0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIHJlbmRlcihpdGVtKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChpc0xvYWRpbmcpIHtcbiAgICAgICAgdmFyIG1lc3NhZ2UgPSBsb2FkaW5nTWVzc2FnZSh7XG4gICAgICAgICAgaW5wdXRWYWx1ZTogaW5wdXRWYWx1ZVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKG1lc3NhZ2UgPT09IG51bGwpIHJldHVybiBudWxsO1xuICAgICAgICBtZW51VUkgPSBSZWFjdC5jcmVhdGVFbGVtZW50KExvYWRpbmdNZXNzYWdlLCBjb21tb25Qcm9wcywgbWVzc2FnZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgX21lc3NhZ2UgPSBub09wdGlvbnNNZXNzYWdlKHtcbiAgICAgICAgICBpbnB1dFZhbHVlOiBpbnB1dFZhbHVlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChfbWVzc2FnZSA9PT0gbnVsbCkgcmV0dXJuIG51bGw7XG4gICAgICAgIG1lbnVVSSA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoTm9PcHRpb25zTWVzc2FnZSwgY29tbW9uUHJvcHMsIF9tZXNzYWdlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIG1lbnVQbGFjZW1lbnRQcm9wcyA9IHtcbiAgICAgICAgbWluTWVudUhlaWdodDogbWluTWVudUhlaWdodCxcbiAgICAgICAgbWF4TWVudUhlaWdodDogbWF4TWVudUhlaWdodCxcbiAgICAgICAgbWVudVBsYWNlbWVudDogbWVudVBsYWNlbWVudCxcbiAgICAgICAgbWVudVBvc2l0aW9uOiBtZW51UG9zaXRpb24sXG4gICAgICAgIG1lbnVTaG91bGRTY3JvbGxJbnRvVmlldzogbWVudVNob3VsZFNjcm9sbEludG9WaWV3XG4gICAgICB9O1xuICAgICAgdmFyIG1lbnVFbGVtZW50ID0gUmVhY3QuY3JlYXRlRWxlbWVudChNZW51UGxhY2VyLCBfZXh0ZW5kcyh7fSwgY29tbW9uUHJvcHMsIG1lbnVQbGFjZW1lbnRQcm9wcyksIGZ1bmN0aW9uIChfcmVmNikge1xuICAgICAgICB2YXIgcmVmID0gX3JlZjYucmVmLFxuICAgICAgICAgICAgX3JlZjYkcGxhY2VyUHJvcHMgPSBfcmVmNi5wbGFjZXJQcm9wcyxcbiAgICAgICAgICAgIHBsYWNlbWVudCA9IF9yZWY2JHBsYWNlclByb3BzLnBsYWNlbWVudCxcbiAgICAgICAgICAgIG1heEhlaWdodCA9IF9yZWY2JHBsYWNlclByb3BzLm1heEhlaWdodDtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTWVudSwgX2V4dGVuZHMoe30sIGNvbW1vblByb3BzLCBtZW51UGxhY2VtZW50UHJvcHMsIHtcbiAgICAgICAgICBpbm5lclJlZjogcmVmLFxuICAgICAgICAgIGlubmVyUHJvcHM6IHtcbiAgICAgICAgICAgIG9uTW91c2VEb3duOiBfdGhpczUub25NZW51TW91c2VEb3duLFxuICAgICAgICAgICAgb25Nb3VzZU1vdmU6IF90aGlzNS5vbk1lbnVNb3VzZU1vdmVcbiAgICAgICAgICB9LFxuICAgICAgICAgIGlzTG9hZGluZzogaXNMb2FkaW5nLFxuICAgICAgICAgIHBsYWNlbWVudDogcGxhY2VtZW50XG4gICAgICAgIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KFNjcm9sbENhcHRvclN3aXRjaCwge1xuICAgICAgICAgIGlzRW5hYmxlZDogY2FwdHVyZU1lbnVTY3JvbGwsXG4gICAgICAgICAgb25Ub3BBcnJpdmU6IG9uTWVudVNjcm9sbFRvVG9wLFxuICAgICAgICAgIG9uQm90dG9tQXJyaXZlOiBvbk1lbnVTY3JvbGxUb0JvdHRvbVxuICAgICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFNjcm9sbEJsb2NrLCB7XG4gICAgICAgICAgaXNFbmFibGVkOiBtZW51U2hvdWxkQmxvY2tTY3JvbGxcbiAgICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChNZW51TGlzdCwgX2V4dGVuZHMoe30sIGNvbW1vblByb3BzLCB7XG4gICAgICAgICAgaW5uZXJSZWY6IF90aGlzNS5nZXRNZW51TGlzdFJlZixcbiAgICAgICAgICBpc0xvYWRpbmc6IGlzTG9hZGluZyxcbiAgICAgICAgICBtYXhIZWlnaHQ6IG1heEhlaWdodFxuICAgICAgICB9KSwgbWVudVVJKSkpKTtcbiAgICAgIH0pOyAvLyBwb3NpdGlvbmluZyBiZWhhdmlvdXIgaXMgYWxtb3N0IGlkZW50aWNhbCBmb3IgcG9ydGFsbGVkIGFuZCBmaXhlZCxcbiAgICAgIC8vIHNvIHdlIHVzZSB0aGUgc2FtZSBjb21wb25lbnQuIHRoZSBhY3R1YWwgcG9ydGFsbGluZyBsb2dpYyBpcyBmb3JrZWRcbiAgICAgIC8vIHdpdGhpbiB0aGUgY29tcG9uZW50IGJhc2VkIG9uIGBtZW51UG9zaXRpb25gXG5cbiAgICAgIHJldHVybiBtZW51UG9ydGFsVGFyZ2V0IHx8IG1lbnVQb3NpdGlvbiA9PT0gJ2ZpeGVkJyA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoTWVudVBvcnRhbCwgX2V4dGVuZHMoe30sIGNvbW1vblByb3BzLCB7XG4gICAgICAgIGFwcGVuZFRvOiBtZW51UG9ydGFsVGFyZ2V0LFxuICAgICAgICBjb250cm9sRWxlbWVudDogdGhpcy5jb250cm9sUmVmLFxuICAgICAgICBtZW51UGxhY2VtZW50OiBtZW51UGxhY2VtZW50LFxuICAgICAgICBtZW51UG9zaXRpb246IG1lbnVQb3NpdGlvblxuICAgICAgfSksIG1lbnVFbGVtZW50KSA6IG1lbnVFbGVtZW50O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJGb3JtRmllbGRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyRm9ybUZpZWxkKCkge1xuICAgICAgdmFyIF90aGlzNiA9IHRoaXM7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wczE5ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBkZWxpbWl0ZXIgPSBfdGhpcyRwcm9wczE5LmRlbGltaXRlcixcbiAgICAgICAgICBpc0Rpc2FibGVkID0gX3RoaXMkcHJvcHMxOS5pc0Rpc2FibGVkLFxuICAgICAgICAgIGlzTXVsdGkgPSBfdGhpcyRwcm9wczE5LmlzTXVsdGksXG4gICAgICAgICAgbmFtZSA9IF90aGlzJHByb3BzMTkubmFtZTtcbiAgICAgIHZhciBzZWxlY3RWYWx1ZSA9IHRoaXMuc3RhdGUuc2VsZWN0VmFsdWU7XG4gICAgICBpZiAoIW5hbWUgfHwgaXNEaXNhYmxlZCkgcmV0dXJuO1xuXG4gICAgICBpZiAoaXNNdWx0aSkge1xuICAgICAgICBpZiAoZGVsaW1pdGVyKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gc2VsZWN0VmFsdWUubWFwKGZ1bmN0aW9uIChvcHQpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczYuZ2V0T3B0aW9uVmFsdWUob3B0KTtcbiAgICAgICAgICB9KS5qb2luKGRlbGltaXRlcik7XG4gICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCB7XG4gICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgdHlwZTogXCJoaWRkZW5cIixcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBpbnB1dCA9IHNlbGVjdFZhbHVlLmxlbmd0aCA+IDAgPyBzZWxlY3RWYWx1ZS5tYXAoZnVuY3Rpb24gKG9wdCwgaSkge1xuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCB7XG4gICAgICAgICAgICAgIGtleTogXCJpLVwiLmNvbmNhdChpKSxcbiAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgdHlwZTogXCJoaWRkZW5cIixcbiAgICAgICAgICAgICAgdmFsdWU6IF90aGlzNi5nZXRPcHRpb25WYWx1ZShvcHQpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KSA6IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCB7XG4gICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgdHlwZTogXCJoaWRkZW5cIlxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIG51bGwsIGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIF92YWx1ZSA9IHNlbGVjdFZhbHVlWzBdID8gdGhpcy5nZXRPcHRpb25WYWx1ZShzZWxlY3RWYWx1ZVswXSkgOiAnJztcblxuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImlucHV0XCIsIHtcbiAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgIHR5cGU6IFwiaGlkZGVuXCIsXG4gICAgICAgICAgdmFsdWU6IF92YWx1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyTGl2ZVJlZ2lvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJMaXZlUmVnaW9uKCkge1xuICAgICAgaWYgKCF0aGlzLnN0YXRlLmlzRm9jdXNlZCkgcmV0dXJuIG51bGw7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChBMTF5VGV4dCwge1xuICAgICAgICBcImFyaWEtbGl2ZVwiOiBcInBvbGl0ZVwiXG4gICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwicFwiLCB7XG4gICAgICAgIGlkOiBcImFyaWEtc2VsZWN0aW9uLWV2ZW50XCJcbiAgICAgIH0sIFwiXFx4QTBcIiwgdGhpcy5zdGF0ZS5hcmlhTGl2ZVNlbGVjdGlvbiksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwXCIsIHtcbiAgICAgICAgaWQ6IFwiYXJpYS1jb250ZXh0XCJcbiAgICAgIH0sIFwiXFx4QTBcIiwgdGhpcy5jb25zdHJ1Y3RBcmlhTGl2ZU1lc3NhZ2UoKSkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJGNvbXBvbmVudHM0ID0gdGhpcy5jb21wb25lbnRzLFxuICAgICAgICAgIENvbnRyb2wgPSBfdGhpcyRjb21wb25lbnRzNC5Db250cm9sLFxuICAgICAgICAgIEluZGljYXRvcnNDb250YWluZXIgPSBfdGhpcyRjb21wb25lbnRzNC5JbmRpY2F0b3JzQ29udGFpbmVyLFxuICAgICAgICAgIFNlbGVjdENvbnRhaW5lciA9IF90aGlzJGNvbXBvbmVudHM0LlNlbGVjdENvbnRhaW5lcixcbiAgICAgICAgICBWYWx1ZUNvbnRhaW5lciA9IF90aGlzJGNvbXBvbmVudHM0LlZhbHVlQ29udGFpbmVyO1xuICAgICAgdmFyIF90aGlzJHByb3BzMjAgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzMjAuY2xhc3NOYW1lLFxuICAgICAgICAgIGlkID0gX3RoaXMkcHJvcHMyMC5pZCxcbiAgICAgICAgICBpc0Rpc2FibGVkID0gX3RoaXMkcHJvcHMyMC5pc0Rpc2FibGVkLFxuICAgICAgICAgIG1lbnVJc09wZW4gPSBfdGhpcyRwcm9wczIwLm1lbnVJc09wZW47XG4gICAgICB2YXIgaXNGb2N1c2VkID0gdGhpcy5zdGF0ZS5pc0ZvY3VzZWQ7XG4gICAgICB2YXIgY29tbW9uUHJvcHMgPSB0aGlzLmNvbW1vblByb3BzID0gdGhpcy5nZXRDb21tb25Qcm9wcygpO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoU2VsZWN0Q29udGFpbmVyLCBfZXh0ZW5kcyh7fSwgY29tbW9uUHJvcHMsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICAgIGlubmVyUHJvcHM6IHtcbiAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgb25LZXlEb3duOiB0aGlzLm9uS2V5RG93blxuICAgICAgICB9LFxuICAgICAgICBpc0Rpc2FibGVkOiBpc0Rpc2FibGVkLFxuICAgICAgICBpc0ZvY3VzZWQ6IGlzRm9jdXNlZFxuICAgICAgfSksIHRoaXMucmVuZGVyTGl2ZVJlZ2lvbigpLCBSZWFjdC5jcmVhdGVFbGVtZW50KENvbnRyb2wsIF9leHRlbmRzKHt9LCBjb21tb25Qcm9wcywge1xuICAgICAgICBpbm5lclJlZjogdGhpcy5nZXRDb250cm9sUmVmLFxuICAgICAgICBpbm5lclByb3BzOiB7XG4gICAgICAgICAgb25Nb3VzZURvd246IHRoaXMub25Db250cm9sTW91c2VEb3duLFxuICAgICAgICAgIG9uVG91Y2hFbmQ6IHRoaXMub25Db250cm9sVG91Y2hFbmRcbiAgICAgICAgfSxcbiAgICAgICAgaXNEaXNhYmxlZDogaXNEaXNhYmxlZCxcbiAgICAgICAgaXNGb2N1c2VkOiBpc0ZvY3VzZWQsXG4gICAgICAgIG1lbnVJc09wZW46IG1lbnVJc09wZW5cbiAgICAgIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KFZhbHVlQ29udGFpbmVyLCBfZXh0ZW5kcyh7fSwgY29tbW9uUHJvcHMsIHtcbiAgICAgICAgaXNEaXNhYmxlZDogaXNEaXNhYmxlZFxuICAgICAgfSksIHRoaXMucmVuZGVyUGxhY2Vob2xkZXJPclZhbHVlKCksIHRoaXMucmVuZGVySW5wdXQoKSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSW5kaWNhdG9yc0NvbnRhaW5lciwgX2V4dGVuZHMoe30sIGNvbW1vblByb3BzLCB7XG4gICAgICAgIGlzRGlzYWJsZWQ6IGlzRGlzYWJsZWRcbiAgICAgIH0pLCB0aGlzLnJlbmRlckNsZWFySW5kaWNhdG9yKCksIHRoaXMucmVuZGVyTG9hZGluZ0luZGljYXRvcigpLCB0aGlzLnJlbmRlckluZGljYXRvclNlcGFyYXRvcigpLCB0aGlzLnJlbmRlckRyb3Bkb3duSW5kaWNhdG9yKCkpKSwgdGhpcy5yZW5kZXJNZW51KCksIHRoaXMucmVuZGVyRm9ybUZpZWxkKCkpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTZWxlY3Q7XG59KENvbXBvbmVudCk7XG5cbl9kZWZpbmVQcm9wZXJ0eShTZWxlY3QsIFwiZGVmYXVsdFByb3BzXCIsIGRlZmF1bHRQcm9wcyk7XG5cbmV4cG9ydCB7IFNlbGVjdCBhcyBTLCBkZWZhdWx0VGhlbWUgYXMgYSwgY3JlYXRlRmlsdGVyIGFzIGMsIGRlZmF1bHRQcm9wcyBhcyBkLCBtZXJnZVN0eWxlcyBhcyBtIH07XG4iLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcyc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2dldFByb3RvdHlwZU9mIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2dldFByb3RvdHlwZU9mJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHMnO1xuaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkJztcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHknO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgZGVmYXVsdElucHV0VmFsdWU6ICcnLFxuICBkZWZhdWx0TWVudUlzT3BlbjogZmFsc2UsXG4gIGRlZmF1bHRWYWx1ZTogbnVsbFxufTtcblxudmFyIG1hbmFnZVN0YXRlID0gZnVuY3Rpb24gbWFuYWdlU3RhdGUoU2VsZWN0Q29tcG9uZW50KSB7XG4gIHZhciBfY2xhc3MsIF90ZW1wO1xuXG4gIHJldHVybiBfdGVtcCA9IF9jbGFzcyA9XG4gIC8qI19fUFVSRV9fKi9cbiAgZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoU3RhdGVNYW5hZ2VyLCBfQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIFN0YXRlTWFuYWdlcigpIHtcbiAgICAgIHZhciBfZ2V0UHJvdG90eXBlT2YyO1xuXG4gICAgICB2YXIgX3RoaXM7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdGF0ZU1hbmFnZXIpO1xuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9IF9nZXRQcm90b3R5cGVPZihTdGF0ZU1hbmFnZXIpKS5jYWxsLmFwcGx5KF9nZXRQcm90b3R5cGVPZjIsIFt0aGlzXS5jb25jYXQoYXJncykpKTtcblxuICAgICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcInNlbGVjdFwiLCB2b2lkIDApO1xuXG4gICAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwic3RhdGVcIiwge1xuICAgICAgICBpbnB1dFZhbHVlOiBfdGhpcy5wcm9wcy5pbnB1dFZhbHVlICE9PSB1bmRlZmluZWQgPyBfdGhpcy5wcm9wcy5pbnB1dFZhbHVlIDogX3RoaXMucHJvcHMuZGVmYXVsdElucHV0VmFsdWUsXG4gICAgICAgIG1lbnVJc09wZW46IF90aGlzLnByb3BzLm1lbnVJc09wZW4gIT09IHVuZGVmaW5lZCA/IF90aGlzLnByb3BzLm1lbnVJc09wZW4gOiBfdGhpcy5wcm9wcy5kZWZhdWx0TWVudUlzT3BlbixcbiAgICAgICAgdmFsdWU6IF90aGlzLnByb3BzLnZhbHVlICE9PSB1bmRlZmluZWQgPyBfdGhpcy5wcm9wcy52YWx1ZSA6IF90aGlzLnByb3BzLmRlZmF1bHRWYWx1ZVxuICAgICAgfSk7XG5cbiAgICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJvbkNoYW5nZVwiLCBmdW5jdGlvbiAodmFsdWUsIGFjdGlvbk1ldGEpIHtcbiAgICAgICAgX3RoaXMuY2FsbFByb3AoJ29uQ2hhbmdlJywgdmFsdWUsIGFjdGlvbk1ldGEpO1xuXG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcIm9uSW5wdXRDaGFuZ2VcIiwgZnVuY3Rpb24gKHZhbHVlLCBhY3Rpb25NZXRhKSB7XG4gICAgICAgIC8vIFRPRE86IGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSwgd2UgYWxsb3cgdGhlIHByb3AgdG8gcmV0dXJuIGEgbmV3XG4gICAgICAgIC8vIHZhbHVlLCBidXQgbm93IGlucHV0VmFsdWUgaXMgYSBjb250cm9sbGFibGUgcHJvcCB3ZSBwcm9iYWJseSBzaG91bGRuJ3RcbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gX3RoaXMuY2FsbFByb3AoJ29uSW5wdXRDaGFuZ2UnLCB2YWx1ZSwgYWN0aW9uTWV0YSk7XG5cbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGlucHV0VmFsdWU6IG5ld1ZhbHVlICE9PSB1bmRlZmluZWQgPyBuZXdWYWx1ZSA6IHZhbHVlXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJvbk1lbnVPcGVuXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMuY2FsbFByb3AoJ29uTWVudU9wZW4nKTtcblxuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgbWVudUlzT3BlbjogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwib25NZW51Q2xvc2VcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5jYWxsUHJvcCgnb25NZW51Q2xvc2UnKTtcblxuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgbWVudUlzT3BlbjogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhTdGF0ZU1hbmFnZXIsIFt7XG4gICAgICBrZXk6IFwiZm9jdXNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBmb2N1cygpIHtcbiAgICAgICAgdGhpcy5zZWxlY3QuZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiYmx1clwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGJsdXIoKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0LmJsdXIoKTtcbiAgICAgIH0gLy8gRklYTUU6IHVudHlwZWQgZmxvdyBjb2RlLCByZXR1cm4gYW55XG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZ2V0UHJvcFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFByb3Aoa2V5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzW2tleV0gIT09IHVuZGVmaW5lZCA/IHRoaXMucHJvcHNba2V5XSA6IHRoaXMuc3RhdGVba2V5XTtcbiAgICAgIH0gLy8gRklYTUU6IHVudHlwZWQgZmxvdyBjb2RlLCByZXR1cm4gYW55XG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiY2FsbFByb3BcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjYWxsUHJvcChuYW1lKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5wcm9wc1tuYW1lXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHZhciBfdGhpcyRwcm9wcztcblxuICAgICAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiA+IDEgPyBfbGVuMiAtIDEgOiAwKSwgX2tleTIgPSAxOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgICAgICBhcmdzW19rZXkyIC0gMV0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiAoX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzKVtuYW1lXS5hcHBseShfdGhpcyRwcm9wcywgYXJncyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIGRlZmF1bHRJbnB1dFZhbHVlID0gX3RoaXMkcHJvcHMyLmRlZmF1bHRJbnB1dFZhbHVlLFxuICAgICAgICAgICAgZGVmYXVsdE1lbnVJc09wZW4gPSBfdGhpcyRwcm9wczIuZGVmYXVsdE1lbnVJc09wZW4sXG4gICAgICAgICAgICBkZWZhdWx0VmFsdWUgPSBfdGhpcyRwcm9wczIuZGVmYXVsdFZhbHVlLFxuICAgICAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3RoaXMkcHJvcHMyLCBbXCJkZWZhdWx0SW5wdXRWYWx1ZVwiLCBcImRlZmF1bHRNZW51SXNPcGVuXCIsIFwiZGVmYXVsdFZhbHVlXCJdKTtcblxuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChTZWxlY3RDb21wb25lbnQsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICAgIHJlZjogZnVuY3Rpb24gcmVmKF9yZWYpIHtcbiAgICAgICAgICAgIF90aGlzMi5zZWxlY3QgPSBfcmVmO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgaW5wdXRWYWx1ZTogdGhpcy5nZXRQcm9wKCdpbnB1dFZhbHVlJyksXG4gICAgICAgICAgbWVudUlzT3BlbjogdGhpcy5nZXRQcm9wKCdtZW51SXNPcGVuJyksXG4gICAgICAgICAgb25DaGFuZ2U6IHRoaXMub25DaGFuZ2UsXG4gICAgICAgICAgb25JbnB1dENoYW5nZTogdGhpcy5vbklucHV0Q2hhbmdlLFxuICAgICAgICAgIG9uTWVudUNsb3NlOiB0aGlzLm9uTWVudUNsb3NlLFxuICAgICAgICAgIG9uTWVudU9wZW46IHRoaXMub25NZW51T3BlbixcbiAgICAgICAgICB2YWx1ZTogdGhpcy5nZXRQcm9wKCd2YWx1ZScpXG4gICAgICAgIH0pKTtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gU3RhdGVNYW5hZ2VyO1xuICB9KENvbXBvbmVudCksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3MsIFwiZGVmYXVsdFByb3BzXCIsIGRlZmF1bHRQcm9wcyksIF90ZW1wO1xufTtcblxuZXhwb3J0IHsgbWFuYWdlU3RhdGUgYXMgbSB9O1xuIiwiaW1wb3J0ICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllcyc7XG5pbXBvcnQgJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0ICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheSc7XG5pbXBvcnQgJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZCc7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MnO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9nZXRQcm90b3R5cGVPZiBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9nZXRQcm90b3R5cGVPZic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzJztcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZCc7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5JztcbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgbWVtb2l6ZU9uZSBmcm9tICdtZW1vaXplLW9uZSc7XG5pbXBvcnQgeyBDYWNoZVByb3ZpZGVyIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5pbXBvcnQgJ3JlYWN0LWRvbSc7XG5pbXBvcnQgJ3Byb3AtdHlwZXMnO1xuaW1wb3J0ICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2YnO1xuaW1wb3J0ICcuL2NodW5rLTM5ZDNmZGE4LmJyb3dzZXIuZXNtLmpzJztcbmV4cG9ydCB7IHkgYXMgY29tcG9uZW50cyB9IGZyb20gJy4vY2h1bmstODA2NDAwMzYuYnJvd3Nlci5lc20uanMnO1xuaW1wb3J0IHsgUyBhcyBTZWxlY3QgfSBmcm9tICcuL2Jhc2UvZGlzdC9yZWFjdC1zZWxlY3QtY2FjMGE1YWUuYnJvd3Nlci5lc20uanMnO1xuZXhwb3J0IHsgYyBhcyBjcmVhdGVGaWx0ZXIsIGEgYXMgZGVmYXVsdFRoZW1lLCBtIGFzIG1lcmdlU3R5bGVzIH0gZnJvbSAnLi9iYXNlL2Rpc3QvcmVhY3Qtc2VsZWN0LWNhYzBhNWFlLmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCAnQGVtb3Rpb24vY3NzJztcbmltcG9ydCAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdGFnZ2VkVGVtcGxhdGVMaXRlcmFsJztcbmltcG9ydCAncmVhY3QtaW5wdXQtYXV0b3NpemUnO1xuaW1wb3J0IHsgbSBhcyBtYW5hZ2VTdGF0ZSB9IGZyb20gJy4vY2h1bmstYjM2YmFmMWEuYnJvd3Nlci5lc20uanMnO1xuaW1wb3J0IGNyZWF0ZUNhY2hlIGZyb20gJ0BlbW90aW9uL2NhY2hlJztcblxudmFyIE5vbmNlUHJvdmlkZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE5vbmNlUHJvdmlkZXIsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE5vbmNlUHJvdmlkZXIocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTm9uY2VQcm92aWRlcik7XG5cbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihOb25jZVByb3ZpZGVyKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiY3JlYXRlRW1vdGlvbkNhY2hlXCIsIGZ1bmN0aW9uIChub25jZSkge1xuICAgICAgcmV0dXJuIGNyZWF0ZUNhY2hlKHtcbiAgICAgICAgbm9uY2U6IG5vbmNlXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIF90aGlzLmNyZWF0ZUVtb3Rpb25DYWNoZSA9IG1lbW9pemVPbmUoX3RoaXMuY3JlYXRlRW1vdGlvbkNhY2hlKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoTm9uY2VQcm92aWRlciwgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBlbW90aW9uQ2FjaGUgPSB0aGlzLmNyZWF0ZUVtb3Rpb25DYWNoZSh0aGlzLnByb3BzLm5vbmNlKTtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENhY2hlUHJvdmlkZXIsIHtcbiAgICAgICAgdmFsdWU6IGVtb3Rpb25DYWNoZVxuICAgICAgfSwgdGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE5vbmNlUHJvdmlkZXI7XG59KENvbXBvbmVudCk7XG5cbnZhciBpbmRleCA9IG1hbmFnZVN0YXRlKFNlbGVjdCk7XG5cbmV4cG9ydCBkZWZhdWx0IGluZGV4O1xuZXhwb3J0IHsgTm9uY2VQcm92aWRlciB9O1xuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmFzZUNoYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICB9XHJcblxyXG4gICAgLy9hYnN0cmFjdCBtZW1iZXJzXHJcbiAgICAvL2dldENoYXJ0RGlzcGxheU5hbWUoKSB7fVxyXG4gICAgLy9nZXREYXRlRnJvbSgpIHt9XHJcbiAgICAvL2dldERhdGVUbygpIHt9XHJcbiAgICAvL2dldFRvdGFsQ291bnQoKSB7fVxyXG4gICAgLy90cmFuc2Zvcm1EYXRhVG9Qb2ludHMoZGF0YSkge31cclxuICAgIC8vdHJhbnNmb3JtUG9pbnRzVG9MYWJlbHMocG9pbnRzKSB7fVxyXG5cclxuICAgIGdldERhdGVGcm9tRGlzcGxheShkYXRhKSB7XHJcbiAgICAgICAgdmFyIGR0ID0gbmV3IERhdGUodGhpcy5nZXREYXRlRnJvbShkYXRhKSk7XHJcbiAgICAgICAgcmV0dXJuIGR0LnRvRGF0ZVN0cmluZygpO1xyXG4gICAgfVxyXG4gICAgZ2V0RGF0ZVRvRGlzcGxheShkYXRhKSB7XHJcbiAgICAgICAgdmFyIGR0ID0gbmV3IERhdGUodGhpcy5nZXREYXRlVG8oZGF0YSkpO1xyXG4gICAgICAgIHJldHVybiBkdC50b0RhdGVTdHJpbmcoKTtcclxuICAgIH1cclxuICAgIGdldFRvdGFsQ291bnREaXNwbGF5KGRhdGEpIHsgcmV0dXJuIHRoaXMuZ2V0VG90YWxDb3VudChkYXRhKTt9XHJcblxyXG4gICAgaW5pdENoYXJ0ID0gKHRpdGxlLCBkYXRhKSA9PiB7XHJcblxyXG4gICAgICAgIHZhciBwb2ludHMgPSB0aGlzLnRyYW5zZm9ybURhdGFUb1BvaW50cyhkYXRhKTtcclxuICAgICAgICB2YXIgbGFiZWxzID0gdGhpcy50cmFuc2Zvcm1Qb2ludHNUb0xhYmVscyhwb2ludHMpO1xyXG5cclxuICAgICAgICB2YXIgY3R4ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NoYXJ0Jyk7XHJcblxyXG4gICAgICAgIHZhciBteUNoYXJ0ID0gbmV3IENoYXJ0KGN0eCwge1xyXG4gICAgICAgICAgICB0eXBlOiAnbGluZScsXHJcblxyXG4gICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbHM6IGxhYmVscyxcclxuICAgICAgICAgICAgICAgIGRhdGFzZXRzOiBbe1xyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiB0aXRsZSxcclxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBwb2ludHMsXHJcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDIsXHJcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IFwiIzAwMDAwMFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogXCIjMTA2ZmJmXCJcclxuICAgICAgICAgICAgICAgIH1dXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9wdGlvbnM6IHt9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgQmFzZUNoYXJ0IGZyb20gJy4vYmFzZV9jaGFydC5qc3gnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2hhcnNQZXJTZWNvbmRDaGFydCBleHRlbmRzIEJhc2VDaGFydCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRDaGFydERpc3BsYXlOYW1lKCkge1xyXG4gICAgICAgIHJldHVybiBcIkNoYXJhY3RlcnMgUGVyIFNlY29uZFwiO1xyXG4gICAgfVxyXG5cclxuICAgIGdldERhdGVGcm9tKGRhdGEpIHsgcmV0dXJuIGRhdGEuU3BlZWREYXRlRnJvbTsgfVxyXG4gICAgZ2V0RGF0ZVRvKGRhdGEpIHsgcmV0dXJuIGRhdGEuU3BlZWREYXRlRnJvbTsgfVxyXG4gICAgZ2V0VG90YWxDb3VudChkYXRhKSB7IHJldHVybiBkYXRhLlNwZWVkTWVhc3VyZW1lbnRDb3VudDsgfVxyXG5cclxuICAgIHRyYW5zZm9ybURhdGFUb1BvaW50cyA9IChkYXRhKSA9PiB7XHJcbiAgICAgICAgdmFyIHBvaW50cyA9IFtdO1xyXG4gICAgICAgIGlmIChkYXRhLlNwZWVkTWVhc3VyZW1lbnRzKSB7XHJcbiAgICAgICAgICAgIHBvaW50cyA9IGRhdGEuU3BlZWRNZWFzdXJlbWVudHMubWFwKChpdGVtLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdDogKGl0ZW0uQ3JlYXRlRGF0ZURpc3BsYXlGcmllbmRseSksIHk6IGl0ZW0uQ2hhcnNQZXJTZWMgfTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBwb2ludHM7XHJcbiAgICB9XHJcblxyXG4gICAgdHJhbnNmb3JtUG9pbnRzVG9MYWJlbHMgPSAocG9pbnRzKSA9PiB7XHJcbiAgICAgICAgdmFyIGNvdW50ZXIgPSAxO1xyXG4gICAgICAgIHZhciBsYWJlbHMgPSBwb2ludHMucmVkdWNlKGZ1bmN0aW9uIChyZXN1bHQsIGl0ZW0pIHtcclxuICAgICAgICAgICAgaWYgKGNvdW50ZXIgJSAyID09IDApIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGl0ZW0udCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7IHJlc3VsdC5wdXNoKFwiXCIpO31cclxuICAgICAgICAgICAgY291bnRlcisrO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH0sIFtdKTtcclxuICAgICAgICByZXR1cm4gbGFiZWxzO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IEJhc2VDaGFydCBmcm9tICcuL2Jhc2VfY2hhcnQuanN4JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdvcmRzUGVyTWludXRlQ2hhcnQgZXh0ZW5kcyBCYXNlQ2hhcnQge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q2hhcnREaXNwbGF5TmFtZSgpIHtcclxuICAgICAgICByZXR1cm4gXCJXb3JkcyBQZXIgTWludXRlXCI7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RGF0ZUZyb20oZGF0YSkgeyByZXR1cm4gZGF0YS5TcGVlZERhdGVGcm9tOyB9XHJcbiAgICBnZXREYXRlVG8oZGF0YSkgeyByZXR1cm4gZGF0YS5TcGVlZERhdGVGcm9tOyB9XHJcbiAgICBnZXRUb3RhbENvdW50KGRhdGEpIHsgcmV0dXJuIGRhdGEuU3BlZWRNZWFzdXJlbWVudENvdW50OyB9XHJcblxyXG4gICAgdHJhbnNmb3JtRGF0YVRvUG9pbnRzID0gKGRhdGEpID0+IHtcclxuICAgICAgICB2YXIgcG9pbnRzID0gW107XHJcbiAgICAgICAgaWYgKGRhdGEuU3BlZWRNZWFzdXJlbWVudHMpIHtcclxuICAgICAgICAgICAgcG9pbnRzID0gZGF0YS5TcGVlZE1lYXN1cmVtZW50cy5tYXAoKGl0ZW0sIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geyB0OiAoaXRlbS5DcmVhdGVEYXRlRGlzcGxheUZyaWVuZGx5KSwgeTogaXRlbS5Xb3JkUGVyTWluIH07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcG9pbnRzO1xyXG4gICAgfVxyXG5cclxuICAgIHRyYW5zZm9ybVBvaW50c1RvTGFiZWxzID0gKHBvaW50cykgPT4ge1xyXG4gICAgICAgIC8vdXNlIGEgY291bnRlciBhbmQgb25seSBzaG93IHRoZSBldmVuIGxhYmVsc1xyXG4gICAgICAgIC8vaW4gb3JkZXIgdG8gc2hvdyB0aGUgZGF0YXBvaW50cyBidXQgbm90IHRoZSBsYWJlbHMgdXNlXHJcbiAgICAgICAgLy90aGUgaGFjayBvZiBzZXR0aW5nIHRoZSBsYWJlbCB0byBlbXB0eSBzdHJpbmdcclxuICAgICAgICB2YXIgY291bnRlciA9IDE7XHJcbiAgICAgICAgdmFyIGxhYmVscyA9IHBvaW50cy5yZWR1Y2UoZnVuY3Rpb24gKHJlc3VsdCwgaXRlbSkge1xyXG4gICAgICAgICAgICBpZiAoY291bnRlciAlIDIgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goaXRlbS50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHsgcmVzdWx0LnB1c2goXCJcIik7fVxyXG4gICAgICAgICAgICBjb3VudGVyKys7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfSwgW10pO1xyXG4gICAgICAgIHJldHVybiBsYWJlbHM7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcclxuaW1wb3J0IFNlbGVjdCBmcm9tICdyZWFjdC1zZWxlY3QnO1xyXG5cclxuaW1wb3J0IEF1dGggZnJvbSAgICAgICAgICAgICAgICAgICAgJy4uL2F1dGguanN4JztcclxuaW1wb3J0IExvYWRpbmcgZnJvbSAgICAgICAgICAgICAgICAgJy4uL2NvbXBvbmVudHMvbG9hZGluZy5qc3gnXHJcbmltcG9ydCB7IFVybHMgfSBmcm9tICAgICAgICAgICAgICAgICcuLi9jb25zdGFudHMuanN4JztcclxuaW1wb3J0IENoYXJzUGVyU2Vjb25kQ2hhcnQgZnJvbSAgICAgJy4vY2hhcnNfcGVyX3NlY29uZF9jaGFydC5qc3gnO1xyXG5pbXBvcnQgV29yZHNQZXJNaW51dGVDaGFydCBmcm9tICAgICAnLi93b3Jkc19wZXJfbWludXRlX2NoYXJ0LmpzeCc7XHJcblxyXG5jb25zdCBDaGFydHMgPSB7XHJcbiAgICBEZWZhdWx0Q2hhcnRUeXBlOiAnY3BzJyxcclxuICAgIFZpc3VhbEhpc3RvcnlDaGFydFR5cGVzOiBbXHJcbiAgICAgICAgeyB2YWx1ZTogJ2NwcycsIGxhYmVsOiAnU3BlZWQgLSBDaGFyYWN0ZXJzIFBlciBTZWNvbmQnfSxcclxuICAgICAgICB7IHZhbHVlOiAnd3BtJywgbGFiZWw6ICdTcGVlZCAtIFdvcmRzIFBlciBNaW51dGUnfVxyXG4gICAgXVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2hhcnREaXNwbGF5ZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcblxyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgICAgICAgIGRhdGE6IG51bGwsXHJcbiAgICAgICAgICAgIGlzTG9hZGluZzogdHJ1ZSxcclxuICAgICAgICAgICAgU2VsZWN0ZWRDaGFydFR5cGU6IENoYXJ0cy5WaXN1YWxIaXN0b3J5Q2hhcnRUeXBlcy5maWx0ZXIob3B0aW9uID0+IG9wdGlvbi52YWx1ZSA9PT0gQ2hhcnRzLkRlZmF1bHRDaGFydFR5cGUpWzBdXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmdldFVzZXJIaXN0b3J5KClcclxuICAgICAgICAgICAgLnRoZW4oZGF0YSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtkYXRhOiBkYXRhLCBpc0xvYWRpbmc6IGZhbHNlfSlcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuY3VycmVudENoYXJ0ID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBjb21wb25lbnREaWRVcGRhdGUoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUgJiYgdGhpcy5zdGF0ZS5kYXRhKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlQ2hhcnRUeXBlQ2hhbmdlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGhhbmRsZUNoYXJ0VHlwZUNoYW5nZSA9IChzZWxlY3Rpb24pID0+IHtcclxuICAgICAgICBpZihzZWxlY3Rpb24pXHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBTZWxlY3RlZENoYXJ0VHlwZTogc2VsZWN0aW9uIH0pO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5TZWxlY3RlZENoYXJ0VHlwZS52YWx1ZSA9PSAnY3BzJylcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50Q2hhcnQgPSBuZXcgQ2hhcnNQZXJTZWNvbmRDaGFydCgpO1xyXG5cclxuICAgICAgICBlbHNlIGlmKHRoaXMuc3RhdGUuU2VsZWN0ZWRDaGFydFR5cGUudmFsdWUgPT0gJ3dwbScpXHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudENoYXJ0ID0gbmV3IFdvcmRzUGVyTWludXRlQ2hhcnQoKTtcclxuXHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRDaGFydCA9IG51bGw7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRDaGFydCAhPSBudWxsICYmIHRoaXMuc3RhdGUuZGF0YSkge1xyXG4gICAgICAgICAgICB2YXIgZGlzcGxheU5hbWUgPSB0aGlzLmN1cnJlbnRDaGFydC5nZXRDaGFydERpc3BsYXlOYW1lKCk7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudENoYXJ0LmluaXRDaGFydChkaXNwbGF5TmFtZSwgdGhpcy5zdGF0ZS5kYXRhKTtcclxuXHJcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjaGFydERhdGVGcm9tJykuaW5uZXJUZXh0ID0gdGhpcy5jdXJyZW50Q2hhcnQuZ2V0RGF0ZUZyb21EaXNwbGF5KHRoaXMuc3RhdGUuZGF0YSk7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjaGFydERhdGVUbycpLmlubmVyVGV4dCA9IHRoaXMuY3VycmVudENoYXJ0LmdldERhdGVUb0Rpc3BsYXkodGhpcy5zdGF0ZS5kYXRhKTtcclxuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NoYXJ0VG90YWxDb3VudCcpLmlubmVyVGV4dCA9IHRoaXMuY3VycmVudENoYXJ0LmdldFRvdGFsQ291bnREaXNwbGF5KHRoaXMuc3RhdGUuZGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldFVzZXJIaXN0b3J5KCkge1xyXG4gICAgICAgIHZhciBhdXRoID0gbmV3IEF1dGgoKTtcclxuICAgICAgICB2YXIgdG9rZW4gPSBhdXRoLmdldEN1cnJlbnRUb2tlbigpO1xyXG4gICAgICAgIHJldHVybiBmZXRjaChVcmxzLkFQSV9ISVNUT1JZX1ZJU1VBTCwge1xyXG4gICAgICAgICAgICBtZXRob2Q6IFwiUG9zdFwiLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nIH1cclxuICAgICAgICAgICAgLCBib2R5OiBKU09OLnN0cmluZ2lmeSh0b2tlbilcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbihyZXNwID0+IHJlc3AuanNvbigpKVxyXG4gICAgICAgICAgICAudGhlbihkYXRhID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZGF0YSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8UmVhY3QuRnJhZ21lbnQ+XHJcbiAgICAgICAgICAgICAgICA8TG9hZGluZyBzaG93TG9hZGluZz17dGhpcy5zdGF0ZS5pc0xvYWRpbmd9IC8+XHJcblxyXG4gICAgICAgICAgICAgICAge3RoaXMuc3RhdGUuaXNMb2FkaW5nID09PSBmYWxzZSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIDxSZWFjdC5GcmFnbWVudD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyZWFjdF9zZWxlY3RfY29udGFpbmVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2VsZWN0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuU2VsZWN0ZWRDaGFydFR5cGV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhcnRUeXBlQ2hhbmdlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM9e0NoYXJ0cy5WaXN1YWxIaXN0b3J5Q2hhcnRUeXBlc31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU9e0NoYXJ0cy5EZWZhdWx0Q2hhcnRUeXBlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNlbnRlcmVkX2xpc3RcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJzdHJvbmdcIj5Ub3RhbCBDb3VudDogPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPVwiY2hhcnRUb3RhbENvdW50XCI+PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJzdHJvbmdcIj5EYXRlcyBGcm9tOiA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9XCJjaGFydERhdGVGcm9tXCI+PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJzdHJvbmdcIj5EYXRlcyBUbzogPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPVwiY2hhcnREYXRlVG9cIj48L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNoYXJ0X2NvbnRhaW5lclwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNhbnZhcyBpZD1cImNoYXJ0XCI+PC9jYW52YXM+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiBcclxuICAgICAgICAgICAgICAgICAgICA8L1JlYWN0LkZyYWdtZW50PlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICA8L1JlYWN0LkZyYWdtZW50PlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcclxuXHJcbmltcG9ydCBDb250ZW50Q29udGFpbmVyIGZyb20gICAgJy4uL2NvbnRlbnQuanN4JztcclxuaW1wb3J0IExvYWRpbmcgZnJvbSAgICAgICAgICAgICAnLi4vY29tcG9uZW50cy9sb2FkaW5nLmpzeCc7XHJcbmltcG9ydCBTZWN1cmVDb21wb25lbnQgZnJvbSAgICAgJy4vc2VjdXJlX2NvbXBvbmVudC5qc3gnO1xyXG5pbXBvcnQgeyBVcmxzIH0gZnJvbSAgICAgICAgICAgICcuLi9jb25zdGFudHMuanN4JztcclxuaW1wb3J0IENoYXJ0RGlzcGxheWVyIGZyb20gICAgICAnLi4vY2hhcnRzL2NoYXJ0X2NvbXBvbmVudC5qc3gnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSGlzdG9yeVZpc3VhbCBleHRlbmRzIFNlY3VyZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuXHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgICAgICAgaXNMb2FkaW5nOiB0cnVlXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmxvYWREZXBlbmRhbmNpZXMoKTtcclxuICAgIH1cclxuXHJcbiAgICBsb2FkRGVwZW5kYW5jaWVzKCkge1xyXG4gICAgICAgIHRoaXMubG9hZFNjcmlwdChcIi9hc3NldHMvanMvZXh0ZXJuYWwvQ2hhcnQuYnVuZGxlLm1pbi5qc1wiKVxyXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgaXNMb2FkaW5nOiBmYWxzZSB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dGhlbnRpY2F0aW9uQ29tcGxldGUoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgPENvbnRlbnRDb250YWluZXIgYXV0aGVkPXt0cnVlfT5cclxuICAgICAgICAgICAgICAgICAgICA8aDI+VmlzdWFsIEhpc3Rvcnk8L2gyPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRlbnRfcm93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxDaGFydERpc3BsYXllciAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9Db250ZW50Q29udGFpbmVyPlxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgIHN1cGVyLnJlbmRlcigpXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XHJcblxyXG5jbGFzcyBIaWRlYWJsZVNjcmVlbk1hc2sgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHZhciBjc3MgPSAodGhpcy5wcm9wcy5NYXNrSXNWaXNpYmxlKSA/IFwibG9hZGluZ19tYXNrX3NjcmVlblwiIDogXCJsb2FkaW5nX21hc2tfc2NyZWVuX2hpZGVcIjtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2IGlkPVwic2NyZWVuX21hc2tcIiBjbGFzc05hbWU9e2Nzc30+PC9kaXY+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBIaWRlYWJsZVNjcmVlbk1hc2s7XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xyXG5cclxuY2xhc3MgU3RvcHdhdGNoIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG5cclxuICAgICAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICAgICAgICBTdG9wd2F0Y2hJbnRlcnZhbElkOiAtMSxcclxuICAgICAgICAgICAgVGltZXJWYWw6IDAsXHJcbiAgICAgICAgICAgIElzUnVubmluZzogdGhpcy5wcm9wcy5Jc1J1bm5pbmdcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29tcG9uZW50RGlkVXBkYXRlID0gKCkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLklzUnVubmluZyAhPSB0aGlzLnN0YXRlLklzUnVubmluZykge1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMuSXNSdW5uaW5nID09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3B3YXRjaFN0b3AoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLnByb3BzLklzUnVubmluZyA9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3B3YXRjaFN0YXJ0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IElzUnVubmluZzogdGhpcy5wcm9wcy5Jc1J1bm5pbmcgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xyXG4gICAgICAgIHRoaXMuc3RvcHdhdGNoU3RvcCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0b3B3YXRjaFN0YXJ0ID0gKCkgPT4ge1xyXG4gICAgICAgIHZhciBpbnRlcnZhbElkID0gc2V0SW50ZXJ2YWwodGhpcy5zdG9wd2F0Y2hUaWNrLCAyNTApO1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBUaW1lclZhbDogMCwgU3RvcHdhdGNoSW50ZXJ2YWxJZDogaW50ZXJ2YWxJZH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHN0b3B3YXRjaFN0b3AgPSAoKSA9PiB7XHJcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLnN0YXRlLlN0b3B3YXRjaEludGVydmFsSWQpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0b3B3YXRjaFRpY2sgPSAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IFRpbWVyVmFsOiB0aGlzLnN0YXRlLlRpbWVyVmFsICsgMjUwIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZvcm1hdE1zVG9GcmllbmRseSA9IChtcykgPT4ge1xyXG4gICAgICAgIGxldCBtaW4gPSBNYXRoLmZsb29yKChtcyAvICgxMDAwICogNjApKSAlIDYwKTtcclxuICAgICAgICBsZXQgc2VjID0gTWF0aC5mbG9vcigobXMgLyAxMDAwKSAlIDYwKTtcclxuICAgICAgICBsZXQgbWlsbGkgPSBwYXJzZUludChtcyAlIDEwMDApO1xyXG5cclxuICAgICAgICBsZXQgcmVzdWx0ID0gXCJcIjtcclxuICAgICAgICBpZiAobWluID4gMCkge1xyXG4gICAgICAgICAgICBpZiAobWluIDw9IDkpIHJlc3VsdCArPSBcIjBcIjtcclxuICAgICAgICAgICAgcmVzdWx0ICs9IChtaW4gKyBcIm0gXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc2VjID4gMCkge1xyXG4gICAgICAgICAgICBpZiAoc2VjIDw9IDkpIHJlc3VsdCArPSBcIjBcIjtcclxuICAgICAgICAgICAgcmVzdWx0ICs9IChzZWMgKyBcInMgXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICByZXN1bHQgKz0gKChcIjAwMFwiICsgbWlsbGkpLnNsaWNlKC0zKSArIFwibXNcIik7XHJcblxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgaWQ9XCJzdG9wd2F0Y2hcIj5cclxuICAgICAgICAgICAgICAgIHt0aGlzLmZvcm1hdE1zVG9GcmllbmRseSh0aGlzLnN0YXRlLlRpbWVyVmFsKX1cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufTtcclxuZXhwb3J0IGRlZmF1bHQgU3RvcHdhdGNoOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xyXG5cclxuaW1wb3J0IFN0b3B3YXRjaCBmcm9tICcuL3N0b3B3YXRjaC5qc3gnO1xyXG5cclxuY2xhc3MgVG9vbGJhck5ld1NlcXVlbmNlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICB2YXIgYnV0dG9uVGV4dCA9ICh0aGlzLnByb3BzLk1hc2tJc1Zpc2libGUgPT0gdHJ1ZSlcclxuICAgICAgICAgICAgPyBcIlRoZWF0cmUgTW9kZSBPZmZcIiA6IFwiVGhlYXRyZSBNb2RlIE9uXCI7XHJcblxyXG4gICAgICAgIHZhciB0b29sYmFyVmlzaWJpbGl0eUNzcyA9ICh0aGlzLnByb3BzLklzUnVubmluZyA9PSB0cnVlKVxyXG4gICAgICAgICAgICA/IFwidG9vbGJhcl90b3BfY2VudGVyXCIgOiBcInRvb2xiYXJfdG9wX2NlbnRlcl9oaWRlXCI7XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgaWQ9XCJzY3JlZW5fbWFza190b29sYmFyXCIgY2xhc3NOYW1lPXt0b29sYmFyVmlzaWJpbGl0eUNzc30+XHJcbiAgICAgICAgICAgICAgICA8aW5wdXQgb25DbGljaz17dGhpcy5wcm9wcy5vblRvZ2dsZU1hc2t9IGNsYXNzTmFtZT1cImJ1dHRvbi1zaXplLXNtYWxsXCIgdHlwZT1cImJ1dHRvblwiIHZhbHVlPXtidXR0b25UZXh0fSAvPlxyXG4gICAgICAgICAgICAgICAgPGlucHV0IG9uQ2xpY2s9e3RoaXMucHJvcHMub25TdG9wU2VxdWVuY2V9IGNsYXNzTmFtZT1cImJ1dHRvbi1zaXplLXNtYWxsXCIgdHlwZT1cImJ1dHRvblwiIHZhbHVlPVwiU3RvcCBTZXF1ZW5jZVwiIC8+XHJcbiAgICAgICAgICAgICAgICA8U3RvcHdhdGNoIElzUnVubmluZz17dGhpcy5wcm9wcy5Jc1J1bm5pbmd9IC8+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn07XHJcbmV4cG9ydCBkZWZhdWx0IFRvb2xiYXJOZXdTZXF1ZW5jZTsiLCJpbXBvcnQgQXV0aCBmcm9tICAgICAgICAgICAgICAgICAgICAnLi9hdXRoLmpzeCc7XHJcbmltcG9ydCB7IFVybHMsIExvY2FsU3RvcmFnZSB9IGZyb20gICcuL2NvbnN0YW50cy5qc3gnO1xyXG5cclxuY2xhc3MgU2Vzc2lvbk1hbmFnZXIge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICAgICAgICBVc2VySWQ6IG51bGwsXHJcbiAgICAgICAgICAgIFNlc3Npb25JZDogbnVsbCxcclxuICAgICAgICAgICAgU2VxdWVuY2VJZDogbnVsbCxcclxuICAgICAgICAgICAgU3RhcnRUaW1lOiBudWxsXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHNlcXVlbmNlU3RhcnRpbmcoKSB7XHJcbiAgICAgICAgdGhpcy5zdGF0ZS5TdGFydFRpbWUgPSBuZXcgRGF0ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXJ0TmV3U2Vzc2lvbiA9ICgpID0+IHtcclxuICAgICAgICB2YXIgYXV0aCA9IG5ldyBBdXRoKCk7XHJcbiAgICAgICAgdmFyIHVzZXIgPSBhdXRoLmdldEN1cnJlbnRUb2tlbigpO1xyXG5cclxuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIGZldGNoKFVybHMuQVBJX05FV19TRVNTSU9OLCB7XHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJywgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicgfSxcclxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkodXNlcilcclxuICAgICAgICB9KVxyXG4gICAgICAgIC50aGVuKHJlc3AgPT4gcmVzcC5qc29uKCkpXHJcbiAgICAgICAgLnRoZW4oZGF0YSA9PiB7XHJcbiAgICAgICAgICAgIHRoYXQuc3RhdGUuU2Vzc2lvbklkID0gZGF0YS5TZXNzaW9uSWQ7XHJcbiAgICAgICAgICAgIHRoYXQuc3RhdGUuVXNlcklkID0gZGF0YS5Vc2VySWQ7XHJcbiAgICAgICAgICAgIHRoYXQucGVyc2lzdFNlc3Npb25TZXFEYXRhKHRoaXMuc3RhdGUpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGRhdGEpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEN1cnJlbnRTZXNzaW9uKCkge1xyXG4gICAgICAgIHZhciBzZXNzaW9uID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oTG9jYWxTdG9yYWdlLlNFU1NJT05fS0VZX05BTUUpO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChzZXNzaW9uKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2Uoc2Vzc2lvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ3Nlc3Npb24gbWdyOiB0b2tlbiBwYXJzZSBlcnJvcjogJywgZXJyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGNsZWFyU2Vzc2lvbigpIHtcclxuICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShMb2NhbFN0b3JhZ2UuU0VTU0lPTl9LRVlfTkFNRSk7XHJcbiAgICB9XHJcblxyXG4gICAgcGVyc2lzdFNlc3Npb25TZXFEYXRhKGRhdGEpIHtcclxuICAgICAgICB2YXIgc2Vzc2lvbkRhdGEgPSBKU09OLnN0cmluZ2lmeShkYXRhKTtcclxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShMb2NhbFN0b3JhZ2UuU0VTU0lPTl9LRVlfTkFNRSwgc2Vzc2lvbkRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldE5ld1NlcXVlbmNlID0gKCkgPT4ge1xyXG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcclxuICAgICAgICAgICAgLyogaWYgdGhlIHVzZXIgZG9lcyBub3QgaGF2ZSBhbiBleGlzdGluZyBzZXNzaW9uLCBtYWtlIGEgbmV3IG9uZSAqL1xyXG4gICAgICAgICAgICB2YXIgY3VycmVudFNlc3Npb24gPSB0aGF0LmdldEN1cnJlbnRTZXNzaW9uKCk7XHJcbiAgICAgICAgICAgIGlmICghY3VycmVudFNlc3Npb24gfHwgIWN1cnJlbnRTZXNzaW9uLlNlc3Npb25JZCkge1xyXG4gICAgICAgICAgICAgICAgdGhhdC5zdGFydE5ld1Nlc3Npb24oKVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKG5ld1Nlc3Npb24gPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0LmdldE5ld1NlcXVlbmNlV2l0aFNlc3Npb24obmV3U2Vzc2lvbilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGRhdGEgPT4geyByZXNvbHZlKGRhdGEpOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoYXQuZ2V0TmV3U2VxdWVuY2VXaXRoU2Vzc2lvbihjdXJyZW50U2Vzc2lvbilcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihkYXRhID0+IHsgcmVzb2x2ZShkYXRhKTsgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBnZXROZXdTZXF1ZW5jZVdpdGhTZXNzaW9uID0gKHNlc3Npb24pID0+IHtcclxuICAgICAgICByZXR1cm4gZmV0Y2goVXJscy5BUElfTkVXX1NFUVVFTkNFLCB7XHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJywgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicgfSxcclxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoc2Vzc2lvbilcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbihyZXNwID0+IHJlc3AuanNvbigpKVxyXG4gICAgICAgICAgICAudGhlbihkYXRhID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuU2VxdWVuY2VJZCA9IGRhdGEuU2VxdWVuY2VJZDtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgdGhpcy5wZXJzaXN0U2Vzc2lvblNlcURhdGEodGhpcy5zdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGRhdGEpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzdG9wQ3VycmVudFNlcXVlbmNlID0gKHVzZXJzVGV4dCkgPT4ge1xyXG4gICAgICAgIHZhciBlbGFwc2VkID0gbmV3IERhdGUoKSAtIHRoaXMuc3RhdGUuU3RhcnRUaW1lO1xyXG5cclxuICAgICAgICB2YXIgY3VycmVudFNlc3Npb24gPSB0aGlzLmdldEN1cnJlbnRTZXNzaW9uKCk7XHJcbiAgICAgICAgaWYgKCFjdXJyZW50U2Vzc2lvbiB8fCAhY3VycmVudFNlc3Npb24uU2Vzc2lvbklkKSByZXR1cm4gUHJvbWlzZS5yZWplY3QoKTtcclxuXHJcbiAgICAgICAgY3VycmVudFNlc3Npb24uRWxhcHNlZEluTWlsbGlzZWNvbmRzID0gZWxhcHNlZDtcclxuICAgICAgICBjdXJyZW50U2Vzc2lvbi5UZXh0RW50ZXJlZCA9IHVzZXJzVGV4dDtcclxuXHJcbiAgICAgICAgcmV0dXJuIGZldGNoKFVybHMuQVBJX0VORF9TRVFVRU5DRSwge1xyXG4gICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXHJcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGN1cnJlbnRTZXNzaW9uKVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKHJlc3AgPT4gcmVzcC5qc29uKCkpXHJcbiAgICAgICAgICAgIC50aGVuKGRhdGEgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShjdXJyZW50U2Vzc2lvbik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBTZXNzaW9uTWFuYWdlcjsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcclxuXHJcbmltcG9ydCBTZWN1cmVDb21wb25lbnQgZnJvbSAgICAgICAgICAnLi9zZWN1cmVfY29tcG9uZW50LmpzeCc7XHJcbmltcG9ydCBDb250ZW50Q29udGFpbmVyIGZyb20gICAgICAgICAnLi4vY29udGVudC5qc3gnO1xyXG5pbXBvcnQgTG9hZGluZyBmcm9tICAgICAgICAgICAgICAgICAgJy4uL2NvbXBvbmVudHMvbG9hZGluZy5qc3gnO1xyXG5pbXBvcnQgSGlkZWFibGVTY3JlZW5NYXNrIGZyb20gICAgICAgJy4uL2NvbXBvbmVudHMvaGlkZWFibGVfc2NyZWVuX21hc2suanN4JztcclxuaW1wb3J0IFRvb2xiYXJOZXdTZXF1ZW5jZSBmcm9tICAgICAgICcuLi9jb21wb25lbnRzL3Rvb2xiYXJfbmV3X3NlcXVlbmNlLmpzeCc7XHJcbmltcG9ydCBTZXNzaW9uTWFuYWdlciBmcm9tICAgICAgICAgICAnLi4vc2Vzc2lvbl9tZ3IuanN4JztcclxuaW1wb3J0IEtleVNlcXVlbmNlRXJyb3JEaXNwbGF5IGZyb20gICcuLi9jb21wb25lbnRzL2tleV9zZXF1ZW5jZV9lcnJvcl9kaXNwbGF5LmpzeCc7XHJcbmltcG9ydCB7IFJvdXRlcywgVXJscywgVXNlck1zZ3MsIFJ1bnRpbWUgfSBmcm9tICAnLi4vY29uc3RhbnRzLmpzeCc7XHJcblxyXG5jbGFzcyBOZXdTZXF1ZW5jZSBleHRlbmRzIFNlY3VyZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuXHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgICAgICAgVGV4dFNob3duOiBVc2VyTXNncy5ORVdfU0VRVUVOQ0VfSU5TVFJVQ1RJT05TLFxyXG4gICAgICAgICAgICBUZXh0RW50ZXJlZDogXCJcIixcclxuICAgICAgICAgICAgSXNSdW5uaW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgSXNMb2FkaW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgVXNlVGhlYXRyZU1vZGU6IGZhbHNlLFxyXG4gICAgICAgICAgICBDdXJyZW50U2VxdWVuY2U6IHsgU2VxdWVuY2VJZDogLTEgfSxcclxuICAgICAgICAgICAgaGVpZ2h0OiBSdW50aW1lLkRFRkFVTFRfTkVXX1NFUVVFTkNFX0lOUFVUX0ZJRUxEX0hFSUdIVFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMuU2Vzc2lvbk1hbmFnZXIgPSBuZXcgU2Vzc2lvbk1hbmFnZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICB0b2dnbGVUaGVhdHJlTW9kZSA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHsgVXNlVGhlYXRyZU1vZGU6ICF0aGlzLnN0YXRlLlVzZVRoZWF0cmVNb2RlIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG4gICAgICAgIHRoaXMuc2V0SW5wdXRUZXh0Rm9jdXMoKTtcclxuXHJcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLm9uVGV4dEVudGVyZWRLZXlEb3duKGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHNldElucHV0VGV4dEZvY3VzID0gKCkgPT4ge1xyXG4gICAgICAgIGlmKHRoaXMuaW5wdXRTZXF1ZW5jZUZpZWxkKVxyXG4gICAgICAgICAgICB0aGlzLmlucHV0U2VxdWVuY2VGaWVsZC5mb2N1cygpO1xyXG4gICAgfVxyXG5cclxuICAgIGF1dG9yZXNpemUoKSB7XHJcbiAgICAgICAgdGhpcy5zZXRGaWxsZWRUZXh0YXJlYUhlaWdodCgpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uVGV4dEVudGVyZWRDaGFuZ2VkID0gKGUpID0+IHtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHsgVGV4dEVudGVyZWQ6IGUudGFyZ2V0LnZhbHVlIH0pXHJcbiAgICB9XHJcblxyXG4gICAgb25UZXh0RW50ZXJlZEtleURvd24gPSAoZSkgPT4ge1xyXG4gICAgICAgIGlmIChlLnNoaWZ0S2V5ID09IHRydWUgJiYgZS5rZXlDb2RlID09IDEzKSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgdGhpcy5oYW5kbGVLZXlFbnRlcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChlLmtleUNvZGUgPT0gMTMpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBoYW5kbGVLZXlFbnRlciA9ICgpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5Jc1J1bm5pbmcgPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLnN0b3BTZXF1ZW5jZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5zdGFydFNlcXVlbmNlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHN0YXJ0U2VxdWVuY2UgPSAoKSA9PiB7XHJcbiAgICAgICAgLyogYWJvcnQgc3RhcnQgcmVxdWVzdCBpZiBpdHMgYWxyZWFkeSBsb2FkaW5nIG9yIHJ1bm5pbmcgKi9cclxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5Jc0xvYWRpbmcgPT0gdHJ1ZVxyXG4gICAgICAgICAgICB8fCB0aGlzLnN0YXRlLklzUnVubmluZyA9PSB0cnVlKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBJc0xvYWRpbmc6IHRydWUgfSk7XHJcbiAgICAgICAgdGhpcy5TZXNzaW9uTWFuYWdlci5nZXROZXdTZXF1ZW5jZSgpXHJcbiAgICAgICAgICAgIC50aGVuKHJlc3VsdCA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgLypUT0RPIGlmIHJlc3VsdCBpcyB1bmRlZmluZWQgaGVyZSwgdGhlcmUgd2FzIGFcclxuICAgICAgICAgICAgICAgIHByb2JsZW0gYW5kIG5lZWQgdG8gaGFuZGxlIGl0IGFjY29yZGluZ2x5ICovXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgICAgICAgICBDdXJyZW50U2VxdWVuY2U6IHJlc3VsdCxcclxuICAgICAgICAgICAgICAgICAgICBUZXh0U2hvd246IHJlc3VsdC5UZXh0LFxyXG4gICAgICAgICAgICAgICAgICAgIElzUnVubmluZzogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBJc0xvYWRpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIFVzZVRoZWF0cmVNb2RlOiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldEZpbGxlZFRleHRhcmVhSGVpZ2h0KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLlNlc3Npb25NYW5hZ2VyLnNlcXVlbmNlU3RhcnRpbmcoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0SW5wdXRUZXh0Rm9jdXMoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RvcFNlcXVlbmNlID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICBJc1J1bm5pbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICBVc2VUaGVhdHJlTW9kZTogZmFsc2UsXHJcbiAgICAgICAgICAgIElzTG9hZGluZzogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLlNlc3Npb25NYW5hZ2VyLnN0b3BDdXJyZW50U2VxdWVuY2UodGhpcy5zdGF0ZS5UZXh0RW50ZXJlZClcclxuICAgICAgICAgICAgLnRoZW4oZGF0YSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmhpc3RvcnkucHVzaChSb3V0ZXMuSElTVE9SWV9ERVRBSUxTICsgXCIvXCIgKyBkYXRhLlNlcXVlbmNlSWQpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIHNldEZpbGxlZFRleHRhcmVhSGVpZ2h0KCkge1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICBoZWlnaHQ6IHRoaXMuc2l6ZXJlZi5jbGllbnRIZWlnaHQgKyAxMCxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0aGVudGljYXRpb25Db21wbGV0ZSgpKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPFJlYWN0LkZyYWdtZW50PlxyXG4gICAgICAgICAgICAgICAgPEhpZGVhYmxlU2NyZWVuTWFzayBNYXNrSXNWaXNpYmxlPXt0aGlzLnN0YXRlLlVzZVRoZWF0cmVNb2RlfSAvPlxyXG5cclxuICAgICAgICAgICAgICAgIDxUb29sYmFyTmV3U2VxdWVuY2VcclxuICAgICAgICAgICAgICAgICAgICBNYXNrSXNWaXNpYmxlPXt0aGlzLnN0YXRlLlVzZVRoZWF0cmVNb2RlfVxyXG4gICAgICAgICAgICAgICAgICAgIElzUnVubmluZz17dGhpcy5zdGF0ZS5Jc1J1bm5pbmd9XHJcbiAgICAgICAgICAgICAgICAgICAgb25Ub2dnbGVNYXNrPXt0aGlzLnRvZ2dsZVRoZWF0cmVNb2RlfVxyXG4gICAgICAgICAgICAgICAgICAgIG9uU3RvcFNlcXVlbmNlPXt0aGlzLnN0b3BTZXF1ZW5jZX1cclxuICAgICAgICAgICAgICAgIC8+XHJcblxyXG4gICAgICAgICAgICAgICAgPENvbnRlbnRDb250YWluZXI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGgyPk5ldyBTZXF1ZW5jZTwvaDI+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicG9zaXRpb25fcmVsYXRpdmVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPExvYWRpbmcgc2hvd0xvYWRpbmc9e3RoaXMuc3RhdGUuSXNMb2FkaW5nfSBwb3NpdGlvbj1cInRvcFwiIC8+IFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250ZW50X3Jvd19zbSBzaG93X2Fib3ZlX21hc2tcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMz5UZXh0IHRvIFR5cGU8L2gzPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxLZXlTZXF1ZW5jZUVycm9yRGlzcGxheVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRleHRTaG93bj17dGhpcy5zdGF0ZS5UZXh0U2hvd259XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGV4dEVudGVyZWQ9e3RoaXMuc3RhdGUuVGV4dEVudGVyZWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VxdWVuY2VJZD17dGhpcy5zdGF0ZS5DdXJyZW50U2VxdWVuY2UuU2VxdWVuY2VJZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWVrSW5SZWFsVGltZT17dHJ1ZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJc1J1bm5pbmc9e3RoaXMuc3RhdGUuSXNSdW5uaW5nfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250ZW50X3Jvd19zbSBzaG93X2Fib3ZlX21hc2tcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMz5Zb3VyIFRleHQ8L2gzPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JtPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSBuYW1lPVwidGV4dEVudGVyZWRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJlbnRlcmVkX3RleHRcIiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmPXsoaW5wdXQpID0+IHsgdGhpcy5pbnB1dFNlcXVlbmNlRmllbGQgPSBpbnB1dDsgfX0gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uS2V5RG93bj17dGhpcy5vblRleHRFbnRlcmVkS2V5RG93bn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25UZXh0RW50ZXJlZENoYW5nZWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLlRleHRFbnRlcmVkfSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogdGhpcy5zdGF0ZS5oZWlnaHQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNpemU6IHRoaXMuc3RhdGUuaGVpZ2h0IDw9IFJ1bnRpbWUuREVGQVVMVF9ORVdfU0VRVUVOQ0VfSU5QVVRfRklFTERfSEVJR0hUID8gXCJub25lXCIgOiBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyh0aGlzLnN0YXRlLklzUnVubmluZyA9PT0gZmFsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgdGhpcy5zdGF0ZS5Jc0xvYWRpbmcgPT09IGZhbHNlKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgb25DbGljaz17KCkgPT4gdGhpcy5zdGFydFNlcXVlbmNlKCl9IGNsYXNzTmFtZT1cImJ1dHRvbi1zaXplLW1lZGl1bSBwb3NpdGlvbl9jZW50ZXJcIiB0eXBlPVwiYnV0dG9uXCIgdmFsdWU9XCJTdGFydCBTZXF1ZW5jZS4uLiFcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZm9ybT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRlbnRfcm93X3NtXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zm9ybT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPVwic2l6ZUNvbXBhcmlzb25cIiBjbGFzc05hbWU9XCJwcmVzZW50ZWRfdGV4dF9zaXplX3JlZlwiIHJlZj17KGMpID0+IHRoaXMuc2l6ZXJlZiA9IGN9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5UZXh0U2hvd259XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZm9ybT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9Db250ZW50Q29udGFpbmVyPlxyXG4gICAgICAgICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICBzdXBlci5yZW5kZXIoKVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBOZXdTZXF1ZW5jZTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcclxuaW1wb3J0IHsgUm91dGUsIExpbmssIEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyLCBTd2l0Y2ggfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJ1xyXG5cclxuaW1wb3J0IEhlYWRlciBmcm9tICAgICAgICAgICcuL2hlYWRlci5qc3gnO1xyXG5pbXBvcnQgSW5kZXggZnJvbSAgICAgICAgICAgJy4vcGF0aHMvaW5kZXguanN4JztcclxuaW1wb3J0IEFib3V0IGZyb20gICAgICAgICAgICcuL3BhdGhzL2Fib3V0LmpzeCc7XHJcbmltcG9ydCBMb2dpbiBmcm9tICAgICAgICAgICAnLi9wYXRocy9sb2dpbi5qc3gnO1xyXG5pbXBvcnQgUmVnaXN0ZXIgZnJvbSAgICAgICAgJy4vcGF0aHMvcmVnaXN0ZXIuanN4JztcclxuaW1wb3J0IE15QWNjb3VudCBmcm9tICAgICAgICcuL3BhdGhzL215YWNjb3VudC5qc3gnO1xyXG5pbXBvcnQgSGlzdG9yeSBmcm9tICAgICAgICAgJy4vcGF0aHMvaGlzdG9yeS5qc3gnO1xyXG5pbXBvcnQgSGlzdG9yeURldGFpbHMgZnJvbSAgJy4vcGF0aHMvaGlzdG9yeV9kZXRhaWxzLmpzeCc7XHJcbmltcG9ydCBIaXN0b3J5VmlzdWFsIGZyb20gICAnLi9wYXRocy9oaXN0b3J5X3Zpc3VhbC5qc3gnO1xyXG5pbXBvcnQgTmV3U2VxdWVuY2UgZnJvbSAgICAgJy4vcGF0aHMvbmV3X3NlcXVlbmNlLmpzeCc7XHJcbmltcG9ydCB7IFJvdXRlcyB9IGZyb20gICAgICAnLi9jb25zdGFudHMuanN4JztcclxuXHJcbmNsYXNzIFJvdXRpbmcgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICA8U3dpdGNoPlxyXG4gICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBleGFjdCBwYXRoPXtSb3V0ZXMuREVGQVVMVH0gY29tcG9uZW50PXtJbmRleH0gLz5cclxuICAgICAgICAgICAgICAgICAgICA8Um91dGUgZXhhY3QgcGF0aD17Um91dGVzLklOREVYfSBjb21wb25lbnQ9e0luZGV4fSAvPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8Um91dGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhhY3QgcGF0aD17Um91dGVzLk5FV19TRVFVRU5DRX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyPXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChwcm9wcykgPT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TmV3U2VxdWVuY2Ugey4uLnByb3BzfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJc0F1dGhlZD17dGhpcy5wcm9wcy5Jc0F1dGhlZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwTG9naW49e3RoaXMucHJvcHMuYXBwTG9naW59XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcExvZ291dD17dGhpcy5wcm9wcy5hcHBMb2dvdXR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxSb3V0ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBleGFjdCBwYXRoPXtSb3V0ZXMuTE9HSU59XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcj17XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAocHJvcHMpID0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPExvZ2luIHsuLi5wcm9wc31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSXNBdXRoZWQ9e3RoaXMucHJvcHMuSXNBdXRoZWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcExvZ2luPXt0aGlzLnByb3BzLmFwcExvZ2lufVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBMb2dvdXQ9e3RoaXMucHJvcHMuYXBwTG9nb3V0fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gXHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICA8Um91dGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhhY3QgcGF0aD17Um91dGVzLlJFR0lTVEVSfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXI9e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHByb3BzKSA9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxSZWdpc3RlciB7Li4ucHJvcHN9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElzQXV0aGVkPXt0aGlzLnByb3BzLklzQXV0aGVkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBMb2dpbj17dGhpcy5wcm9wcy5hcHBMb2dpbn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwTG9nb3V0PXt0aGlzLnByb3BzLmFwcExvZ291dH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IFxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxSb3V0ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBleGFjdCBwYXRoPXtSb3V0ZXMuTVlfQUNDVH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyPXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChwcm9wcykgPT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TXlBY2NvdW50IHsuLi5wcm9wc31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSXNBdXRoZWQ9e3RoaXMucHJvcHMuSXNBdXRoZWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcExvZ2luPXt0aGlzLnByb3BzLmFwcExvZ2lufVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBMb2dvdXQ9e3RoaXMucHJvcHMuYXBwTG9nb3V0fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8Um91dGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhhY3QgcGF0aD17Um91dGVzLkhJU1RPUll9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcj17XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAocHJvcHMpID0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEhpc3Rvcnkgey4uLnByb3BzfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJc0F1dGhlZD17dGhpcy5wcm9wcy5Jc0F1dGhlZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwTG9naW49e3RoaXMucHJvcHMuYXBwTG9naW59XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcExvZ291dD17dGhpcy5wcm9wcy5hcHBMb2dvdXR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxSb3V0ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBleGFjdCBwYXRoPXtSb3V0ZXMuSElTVE9SWV9ERVRBSUxTX1dJVEhJRH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyPXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChwcm9wcykgPT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SGlzdG9yeURldGFpbHMgey4uLnByb3BzfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJc0F1dGhlZD17dGhpcy5wcm9wcy5Jc0F1dGhlZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwTG9naW49e3RoaXMucHJvcHMuYXBwTG9naW59XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcExvZ291dD17dGhpcy5wcm9wcy5hcHBMb2dvdXR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxSb3V0ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBleGFjdCBwYXRoPXtSb3V0ZXMuSElTVE9SWV9WSVNVQUx9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcj17XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAocHJvcHMpID0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEhpc3RvcnlWaXN1YWwgey4uLnByb3BzfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJc0F1dGhlZD17dGhpcy5wcm9wcy5Jc0F1dGhlZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwTG9naW49e3RoaXMucHJvcHMuYXBwTG9naW59XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcExvZ291dD17dGhpcy5wcm9wcy5hcHBMb2dvdXR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBjb21wb25lbnQ9e0luZGV4fSAvPlxyXG4gICAgICAgICAgICAgICAgPC9Td2l0Y2g+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFJvdXRpbmc7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGb290ZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB9O1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxSZWFjdC5GcmFnbWVudD5cclxuICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJmb290ZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPVwiZm9vdGVyX2NvbnRlbnRzXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImZsb2F0X2xlZnRcIj5VVEM6IHtuZXcgRGF0ZSgpLnRvVVRDU3RyaW5nKCl9PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJmbG9hdF9yaWdodFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJmNvcHk7IDxhIGhyZWY9XCJodHRwOi8va2llcmFuZW1pbGxlci5jb21cIj5raWVyYW5lbWlsbGVyLmNvbTwvYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNsZWFyX2JvdGhcIj48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0b3BfYmFyXCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjbGVhcl9ib3RoXCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xyXG5pbXBvcnQgeyBSb3V0ZSwgTGluaywgQnJvd3NlclJvdXRlciBhcyBSb3V0ZXIsIFN3aXRjaCB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXHJcblxyXG5pbXBvcnQgUm91dGluZyBmcm9tICAgICAgICAgJy4vcm91dGluZy5qc3gnO1xyXG5pbXBvcnQgSGVhZGVyIGZyb20gICAgICAgICAgJy4vaGVhZGVyLmpzeCc7XHJcbmltcG9ydCBGb290ZXIgZnJvbSAgICAgICAgICAnLi9mb290ZXIuanN4JztcclxuaW1wb3J0IEF1dGggZnJvbSAgICAgICAgICAgICcuL2F1dGguanN4JztcclxuaW1wb3J0IFNlc3Npb25NYW5hZ2VyIGZyb20gICcuL3Nlc3Npb25fbWdyLmpzeCc7XHJcblxyXG5pbXBvcnQgJy4uLy4uLy4uLy4uL2Fzc2V0cy9jc3MvbWFzdGVyLnNjc3MnO1xyXG5cclxuY2xhc3MgQXBwIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgICAgICAgIElzQXV0aGVkOiBmYWxzZVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhcHBMb2dpbiA9ICgpID0+IHtcclxuICAgICAgICB2YXIgc2Vzc2lvbk1nciA9IG5ldyBTZXNzaW9uTWFuYWdlcigpO1xyXG4gICAgICAgIHNlc3Npb25NZ3IuY2xlYXJTZXNzaW9uKCk7XHJcblxyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBJc0F1dGhlZDogdHJ1ZSB9KTtcclxuICAgIH1cclxuXHJcbiAgICBhcHBMb2dvdXQgPSAoKSA9PiB7XHJcbiAgICAgICAgdmFyIHNlc3Npb25NZ3IgPSBuZXcgU2Vzc2lvbk1hbmFnZXIoKTtcclxuICAgICAgICBzZXNzaW9uTWdyLmNsZWFyU2Vzc2lvbigpO1xyXG5cclxuICAgICAgICB2YXIgYXV0aCA9IG5ldyBBdXRoKCk7XHJcbiAgICAgICAgYXV0aC5sb2dvdXQoKTtcclxuXHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IElzQXV0aGVkOiBmYWxzZSB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPFJvdXRlcj5cclxuICAgICAgICAgICAgICAgIDxIZWFkZXJcclxuICAgICAgICAgICAgICAgICAgICBJc0F1dGhlZD17dGhpcy5zdGF0ZS5Jc0F1dGhlZH1cclxuICAgICAgICAgICAgICAgICAgICBhcHBMb2dpbj17dGhpcy5hcHBMb2dpbn1cclxuICAgICAgICAgICAgICAgICAgICBhcHBMb2dvdXQ9e3RoaXMuYXBwTG9nb3V0fVxyXG4gICAgICAgICAgICAgICAgLz5cclxuXHJcbiAgICAgICAgICAgICAgICA8Um91dGluZ1xyXG4gICAgICAgICAgICAgICAgICAgIElzQXV0aGVkPXt0aGlzLnN0YXRlLklzQXV0aGVkfVxyXG4gICAgICAgICAgICAgICAgICAgIGFwcExvZ2luPXt0aGlzLmFwcExvZ2lufVxyXG4gICAgICAgICAgICAgICAgICAgIGFwcExvZ291dD17dGhpcy5hcHBMb2dvdXR9XHJcbiAgICAgICAgICAgICAgICAvPlxyXG5cclxuICAgICAgICAgICAgICAgIDxGb290ZXIgLz5cclxuICAgICAgICAgICAgPC9Sb3V0ZXI+XHJcbiAgICAgICAgKTsgXHJcbiAgICB9XHJcbn07XHJcblxyXG5SZWFjdERPTS5yZW5kZXIoXHJcbiAgICA8QXBwLz4sXHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYXBwJylcclxuKTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==